[
  {
    "author_association": "COLLABORATOR",
    "body": "> Is this a PowerShell problem or an OpenSSL problem?\r\n\r\nSomewhat PowerShell but also other teams in Microsoft unrelated to PowerShell. The current problem is that the `libmi.dylib` library shipped by PowerShell is hardcoded to link against OpenSSL 1.0.x. You would need to compile another version that is linked against OpenSSL 1.1.x and then use that library. I'll touch on this more.\r\n\r\n> Since OpenSSL1.1.1i is compatible with Big Sur on M1 silicon, is there a workaround to this right now?\r\n\r\nThe only workaround would be to compile the `mi` library again yourself that is linked to OpenSSL 1.1.x. You can adjust the link paths of the existing `libmi.dylib` to link to OpenSSL 1.1.x but when you go to use it there will be failures because 1.0.x and 1.1.x are not fully ABI/API compatible.\r\n\r\nI don't think this is going to be possible for it to be done using the provided library that is included with PowerShell as the team that is involved with maintaining `libmi` [aren't interested in macOS anymore](https://github.com/microsoft/omi/pull/669):\r\n\r\n> thanks for PR! but omi has dropped powershell and mac support on 2018, and it is only used by SCOM and OMS/LAD now.\r\n\r\nThe chances of you getting them to create a build for macOS for their MI architecture is probably just as high as getting them to create an OpenSSL 1.1.x one :)\r\n\r\nOnce you sort that out then you need to have an updated version of [libpsrpclient](https://github.com/PowerShell/psl-omi-provider) built for the M1 architecture but that has stayed largely static because `libmi` has not changed at all.\r\n\r\nWhat you could try is [PSWSMan](https://www.powershellgallery.com/packages/PSWSMan/2.1.0) which is my [own personal fork](https://github.com/jborean93/omi) of both `libmi` and `libpsrpclient` that fixes a few of the problems of the official Microsoft version:\r\n\r\n```powershell\r\n# Needs to be run as sudo or an account that can modify the pwsh install dir\r\nInstall-Module -Name PSWSMan\r\nInstall-WSMan\r\n\r\n# Restart pwsh for it to use the new libraries that have just been installed\r\n```\r\n\r\nAs well as fixing the dep on OpenSSL that is a problem on the original there are numerous other fixes that are included to make WSMan on Linux hopefully a better experience.\r\n\r\nWhile this fork works for macOS on Intel I'm unsure whether it will work for M1. I've got no hardware to test this and it doesn't look like M1 is provided with any CI providers so I cannot build or test any copies for that architecture. It's especially complex as with Rossetta 2 it may just work but I have no idea whether the whole stack needs to be the same architecture or not.\r\n\r\nIf the forked copy in `PSWSMan` does not work you can [compile your own version](https://github.com/jborean93/omi/blob/main/docs/build.md):\r\n\r\n```bash\r\ngit clone https://github.com/jborean93/omi\r\ncd omi\r\n\r\n# See the steps that the build script will run\r\n./build.py macOS --output-script\r\n\r\n# Actually build it\r\n./build.py macOS\r\n```\r\n\r\nI honestly have no idea if this will work or not but if you are willing to try it out I'm more than happy for you to post any relevant info to my fork for anybody else wanting to try it.",
    "created_at": "2021-02-11T19:11:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14760#issuecomment-777723206",
    "id": 777723206,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14760",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzcyMzIwNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/777723206/reactions"
    },
    "updated_at": "2021-02-11T19:11:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/777723206",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8462645?v=4",
      "events_url": "https://api.github.com/users/jborean93/events{/privacy}",
      "followers_url": "https://api.github.com/users/jborean93/followers",
      "following_url": "https://api.github.com/users/jborean93/following{/other_user}",
      "gists_url": "https://api.github.com/users/jborean93/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jborean93",
      "id": 8462645,
      "login": "jborean93",
      "node_id": "MDQ6VXNlcjg0NjI2NDU=",
      "organizations_url": "https://api.github.com/users/jborean93/orgs",
      "received_events_url": "https://api.github.com/users/jborean93/received_events",
      "repos_url": "https://api.github.com/users/jborean93/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jborean93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jborean93/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jborean93"
    }
  },
  {
    "author_association": "NONE",
    "body": "@jborean93 Great reply and thank you for taking the time. I will try out your PSWSMan module and let you know how it goes.",
    "created_at": "2021-02-11T19:18:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14760#issuecomment-777726996",
    "id": 777726996,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14760",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzcyNjk5Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/777726996/reactions"
    },
    "updated_at": "2021-02-11T19:18:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/777726996",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24985048?v=4",
      "events_url": "https://api.github.com/users/fatherofinvention/events{/privacy}",
      "followers_url": "https://api.github.com/users/fatherofinvention/followers",
      "following_url": "https://api.github.com/users/fatherofinvention/following{/other_user}",
      "gists_url": "https://api.github.com/users/fatherofinvention/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/fatherofinvention",
      "id": 24985048,
      "login": "fatherofinvention",
      "node_id": "MDQ6VXNlcjI0OTg1MDQ4",
      "organizations_url": "https://api.github.com/users/fatherofinvention/orgs",
      "received_events_url": "https://api.github.com/users/fatherofinvention/received_events",
      "repos_url": "https://api.github.com/users/fatherofinvention/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/fatherofinvention/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fatherofinvention/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/fatherofinvention"
    }
  },
  {
    "author_association": "NONE",
    "body": "Hey @jborean93. I gave it a shot but no joy. The module install went just fine, as did running the command` Install-WSMan` but when I try to open a remote session or run `Get-WSManVersion` I get the error below. Happy to try any other suggestions you may have or get additional detail if that's helpful.\r\n\r\n```\r\nCommandType     Name                                               Version    Source\r\n\r\nFunction        Disable-WSManCertVerification                      2.1.0      PSWSMan\r\nFunction        Enable-WSManCertVerification                       2.1.0      PSWSMan\r\nFunction        Get-WSManVersion                                   2.1.0      PSWSMan\r\nFunction        Install-WSMan                                      2.1.0      PSWSMan\r\nFunction        Register-TrustedCertificate                        2.1.0      PSWSMan\r\n\r\nGet-WSManVersion           \r\nGet-WSManVersion: libmi could not be loaded, make sure it and its dependencies are available\r\nGet-WSManVersion: libpsrpclient could not be loaded, make sure it and its dependencies are available\r\n\r\nMI PSRP\r\n-- ----\r\n```\r\n\r\nThank you.\r\n",
    "created_at": "2021-02-11T20:30:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14760#issuecomment-777769560",
    "id": 777769560,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14760",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3Nzc2OTU2MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/777769560/reactions"
    },
    "updated_at": "2021-02-11T20:30:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/777769560",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24985048?v=4",
      "events_url": "https://api.github.com/users/fatherofinvention/events{/privacy}",
      "followers_url": "https://api.github.com/users/fatherofinvention/followers",
      "following_url": "https://api.github.com/users/fatherofinvention/following{/other_user}",
      "gists_url": "https://api.github.com/users/fatherofinvention/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/fatherofinvention",
      "id": 24985048,
      "login": "fatherofinvention",
      "node_id": "MDQ6VXNlcjI0OTg1MDQ4",
      "organizations_url": "https://api.github.com/users/fatherofinvention/orgs",
      "received_events_url": "https://api.github.com/users/fatherofinvention/received_events",
      "repos_url": "https://api.github.com/users/fatherofinvention/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/fatherofinvention/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fatherofinvention/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/fatherofinvention"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Did you install OpenSSL 1.1.x using `brew`? You can use [otool](https://www.unix.com/man-page/osx/1/otool/) to display the linked libraries\r\n\r\n```bash\r\nPWSHDIR=\"$( dirname \"$( readlink \"$( which pwsh )\" )\" )\"\r\notool -L \"${PWSHDIR}/libpsrpclient.dylib\"\r\notool -L \"${PWSHDIR}/libmi.dylib\"\r\n```\r\n\r\nThe `libmi` one should show you the path for the configured `libssl` and `libcrypto` which must exist. Apart from that it does indicate the libraries distributed with `PSWSMan` won't work for M1 macOS but that's mostly expected.",
    "created_at": "2021-02-11T20:45:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14760#issuecomment-777778034",
    "id": 777778034,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14760",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3Nzc3ODAzNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/777778034/reactions"
    },
    "updated_at": "2021-02-11T20:45:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/777778034",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8462645?v=4",
      "events_url": "https://api.github.com/users/jborean93/events{/privacy}",
      "followers_url": "https://api.github.com/users/jborean93/followers",
      "following_url": "https://api.github.com/users/jborean93/following{/other_user}",
      "gists_url": "https://api.github.com/users/jborean93/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jborean93",
      "id": 8462645,
      "login": "jborean93",
      "node_id": "MDQ6VXNlcjg0NjI2NDU=",
      "organizations_url": "https://api.github.com/users/jborean93/orgs",
      "received_events_url": "https://api.github.com/users/jborean93/received_events",
      "repos_url": "https://api.github.com/users/jborean93/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jborean93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jborean93/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jborean93"
    }
  },
  {
    "author_association": "NONE",
    "body": "Hey @jborean93. I installed OpenSSL via MacPorts:\r\n\r\n![CleanShot 2021-02-11 at 19 39 43@2x](https://user-images.githubusercontent.com/24985048/107720939-0c7d3a00-6ca1-11eb-8e65-cae710ef558d.jpg)\r\n\r\nAnd this is what I see when I run the otool commands:\r\n\r\n![CleanShot 2021-02-11 at 19 42 01@2x](https://user-images.githubusercontent.com/24985048/107721078-582fe380-6ca1-11eb-85c4-2b9b49fd2700.jpg)\r\n\r\nBased on this I created a link so that `libssl` and `libcrypto` were accessible in their expected locations:\r\n\r\n`sudo ln -s /opt/local/lib /usr/local/opt/openssl@1.1/lib`\r\n\r\n![CleanShot 2021-02-11 at 19 54 43@2x](https://user-images.githubusercontent.com/24985048/107721754-08521c00-6ca3-11eb-8153-f3ca650efde4.jpg)\r\n\r\n\r\nBut unfortunately I am getting the same error, which has me thinking either I've followed your instructions wrong or this just won't work.\r\n\r\n![CleanShot 2021-02-11 at 19 53 11@2x](https://user-images.githubusercontent.com/24985048/107721698-e0fb4f00-6ca2-11eb-8146-956b8a43375a.jpg)\r\n\r\nThank you.\r\n\r\n\r\n",
    "created_at": "2021-02-12T01:55:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14760#issuecomment-777917093",
    "id": 777917093,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14760",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzkxNzA5Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/777917093/reactions"
    },
    "updated_at": "2021-02-12T01:55:50Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/777917093",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24985048?v=4",
      "events_url": "https://api.github.com/users/fatherofinvention/events{/privacy}",
      "followers_url": "https://api.github.com/users/fatherofinvention/followers",
      "following_url": "https://api.github.com/users/fatherofinvention/following{/other_user}",
      "gists_url": "https://api.github.com/users/fatherofinvention/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/fatherofinvention",
      "id": 24985048,
      "login": "fatherofinvention",
      "node_id": "MDQ6VXNlcjI0OTg1MDQ4",
      "organizations_url": "https://api.github.com/users/fatherofinvention/orgs",
      "received_events_url": "https://api.github.com/users/fatherofinvention/received_events",
      "repos_url": "https://api.github.com/users/fatherofinvention/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/fatherofinvention/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fatherofinvention/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/fatherofinvention"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Yea unfortunately at this point there's bound to be some other problem that is brought up by M1. That honestly could be anything and without something to test in front of my hands I'm not sure I can really do much. At this stage the next thing I would try is to enable some of the [dylib env vars](https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/LoggingDynamicLoaderEvents.html) that log some of the loading details. For example\r\n\r\n```bash\r\n# This will fail but it gets PowerShell to load the libraries, otherwise you can try Get-WSManVersion\r\n$ DYLD_PRINT_APIS=1 pwsh -Command Enter-PSSession -ComputerName localhost\r\n```\r\n\r\nThis will print out all the libraries that are dynamically loaded, the WSMan specific ones are right at the end.\r\n\r\n```\r\ndlopen_internal(/usr/local/microsoft/powershell/7/libpsrpclient.dylib, 0x00000001)\r\ndyld_image_path_containing_address(0x10cb10000)\r\n_dyld_is_memory_immutable(0x10cb10000, 28)\r\ndyld_image_path_containing_address(0x10f121000)\r\n_dyld_is_memory_immutable(0x10f121000, 28)\r\ndyld_image_path_containing_address(0x10cb6c000)\r\n_dyld_is_memory_immutable(0x10cb6c000, 28)\r\ndyld_image_path_containing_address(0x10f215000)\r\n_dyld_is_memory_immutable(0x10f215000, 28)\r\n  dlopen_internal(/usr/local/microsoft/powershell/7/libpsrpclient.dylib) ==> 0x7f95c9f4c400\r\ndlsym_internal(0x7f95c9f4c400, WSManInitialize)\r\n  dlsym_internal(0x7f95c9f4c400, WSManInitialize) ==> 0x10cb15590\r\ndlsym_internal(0x7f95c9f4c400, WSManCreateSession)\r\n  dlsym_internal(0x7f95c9f4c400, WSManCreateSession) ==> 0x10cb157d0\r\ndlsym_internal(0x7f95c9f4c400, WSManGetSessionOptionAsDword)\r\n  dlsym_internal(0x7f95c9f4c400, WSManGetSessionOptionAsDword) ==> 0x10cb164b0\r\ndlsym_internal(0x7f95c9f4c400, WSManSetSessionOption)\r\n  dlsym_internal(0x7f95c9f4c400, WSManSetSessionOption) ==> 0x10cb15eb0\r\ndlsym_internal(0x7f95c9f30a50, SystemNative_InitializeConsoleBeforeRead)\r\n  dlsym_internal(0x7f95c9f30a50, SystemNative_InitializeConsoleBeforeRead) ==> 0x10caa53c0\r\ndlsym_internal(0x7f95c9f30a50, SystemNative_Write)\r\n  dlsym_internal(0x7f95c9f30a50, SystemNative_Write) ==> 0x10ca9f4c0\r\ndlsym_internal(0x7f95c9f30a50, SystemNative_ReadStdin)\r\n  dlsym_internal(0x7f95c9f30a50, SystemNative_ReadStdin) ==> 0x10caa59b0\r\ndlsym_internal(0x7f95c9f30a50, SystemNative_UninitializeConsoleAfterRead)\r\n  dlsym_internal(0x7f95c9f30a50, SystemNative_UninitializeConsoleAfterRead) ==> 0x10caa5500\r\ndlsym_internal(0x7f95c9f30a50, SystemNative_GetWindowSize)\r\n  dlsym_internal(0x7f95c9f30a50, SystemNative_GetWindowSize) ==> 0x10caa5220\r\ndlsym_internal(0x7f95c9f4c400, WSManCreateShellEx)\r\n  dlsym_internal(0x7f95c9f4c400, WSManCreateShellEx) ==> 0x10cb16d40\r\n_dyld_is_memory_immutable(0x7fff204543c5, 39)\r\ndlsym_internal(0x7f95c9f4c400, WSManGetErrorMessage)\r\n  dlsym_internal(0x7f95c9f4c400, WSManGetErrorMessage) ==> 0x10cb156b0\r\ndlsym_internal(0x7f95c9f4c400, WSManCloseShell)\r\n  dlsym_internal(0x7f95c9f4c400, WSManCloseShell) ==> 0x10cb1a230\r\ndlsym_internal(0x7f95c9f4c400, WSManCloseSession)\r\n  dlsym_internal(0x7f95c9f4c400, WSManCloseSession) ==> 0x10cb15e50\r\ndlsym_internal(0x7f95c9f4c400, WSManDeinitialize)\r\n  dlsym_internal(0x7f95c9f4c400, WSManDeinitialize) ==> 0x10cb15640\r\ndladdr(0x10f13da00, 0x70000d6e3a50)\r\nEnter-PSSession: Connecting to remote server localhost failed with the following error message : MI_RESULT_FAILED For more information, see the about_Remote_Troubleshooting Help topic.\r\n```\r\n\r\nYou can see that it loaded libmi, libpsrpclient, libssl, and libcrypto which are typically the main offenders here. The error message is expected and proves it actually tried to connect to localhost.\r\n\r\nCompare that to the default setup without my fork you can see the failures near the end\r\n\r\n```\r\ndlopen_internal(/usr/local/microsoft/powershell/7/libpsrpclient.dylib, 0x00000001)\r\ndlclose(), found unused image 0x7fa794f45eb0 libpsrpclient.dylib\r\ndlclose(), found unused image 0x7fa794f46100 libmi.dylib\r\ndlclose(), deleting 0x7fa794f45eb0 libpsrpclient.dylib\r\ndlclose(), deleting 0x7fa794f46100 libmi.dylib\r\n  dlopen_internal() failed, error: 'dlopen(/usr/local/microsoft/powershell/7/libpsrpclient.dylib, 1): Library not loaded: /usr/local/opt/openssl/lib/libssl.1.0.0.dylib\r\n  Referenced from: /usr/local/microsoft/powershell/7/libmi.dylib\r\n  Reason: image not found'\r\ndlerror()\r\ndlopen_internal(/usr/local/microsoft/powershell/7/libpsrpclient.dylib, 0x00000001)\r\ndlclose(), found unused image 0x7fa794f46970 libpsrpclient.dylib\r\ndlclose(), found unused image 0x7fa794f46100 libmi.dylib\r\ndlclose(), deleting 0x7fa794f46970 libpsrpclient.dylib\r\ndlclose(), deleting 0x7fa794f46100 libmi.dylib\r\n  dlopen_internal() failed, error: 'dlopen(/usr/local/microsoft/powershell/7/libpsrpclient.dylib, 1): Library not loaded: /usr/local/opt/openssl/lib/libssl.1.0.0.dylib\r\n  Referenced from: /usr/local/microsoft/powershell/7/libmi.dylib\r\n  Reason: image not found'\r\ndlerror()\r\ndlopen_internal(libpsrpclient.dylib, 0x00000001)\r\ndlclose(), found unused image 0x7fa794f46970 libpsrpclient.dylib\r\ndlclose(), found unused image 0x7fa794f46100 libmi.dylib\r\ndlclose(), deleting 0x7fa794f46970 libpsrpclient.dylib\r\ndlclose(), deleting 0x7fa794f46100 libmi.dylib\r\n  dlopen_internal() failed, error: 'dlopen(libpsrpclient.dylib, 1): Library not loaded: /usr/local/opt/openssl/lib/libssl.1.0.0.dylib\r\n  Referenced from: /usr/local/microsoft/powershell/7/libmi.dylib\r\n  Reason: image not found'\r\ndlerror()\r\n```\r\n\r\nThe error here is pretty clear in that I don't have the `libssl.1.0.0.dylib` library at that path (which is expected here as this is the copy distributed by PowerShell). So potentially you can use `DYLD_PRINT_APIS` to figure out why `dlopen` is failing to load the library which could help take you on the next step.",
    "created_at": "2021-02-12T02:26:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14760#issuecomment-777926906",
    "id": 777926906,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14760",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzkyNjkwNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/777926906/reactions"
    },
    "updated_at": "2021-02-12T02:26:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/777926906",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8462645?v=4",
      "events_url": "https://api.github.com/users/jborean93/events{/privacy}",
      "followers_url": "https://api.github.com/users/jborean93/followers",
      "following_url": "https://api.github.com/users/jborean93/following{/other_user}",
      "gists_url": "https://api.github.com/users/jborean93/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jborean93",
      "id": 8462645,
      "login": "jborean93",
      "node_id": "MDQ6VXNlcjg0NjI2NDU=",
      "organizations_url": "https://api.github.com/users/jborean93/orgs",
      "received_events_url": "https://api.github.com/users/jborean93/received_events",
      "repos_url": "https://api.github.com/users/jborean93/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jborean93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jborean93/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jborean93"
    }
  },
  {
    "author_association": "NONE",
    "body": "@jborean93 Totally understand, thanks again for all of your input so far. I am pasting the results of your last suggestion so you can see what libraries loaded and which couldn't be. Based on some of these errors (some libraries not found, others incompatible with the architecture) I am assuming we've reached the end of the line on this one. What I am curious to know though is, does this mean that PSRemoting will never work on new Apple computers or just that we need more time for support to be added?\r\n\r\n![CleanShot 2021-02-12 at 11 17 42@2x](https://user-images.githubusercontent.com/24985048/107800107-fe243200-6d23-11eb-946c-7bee6e067c00.jpg)\r\n\r\n![CleanShot 2021-02-12 at 11 18 45@2x](https://user-images.githubusercontent.com/24985048/107800204-1ac06a00-6d24-11eb-9897-1de63ae9daee.jpg)\r\n\r\n\r\n```\r\nuser@Macbook-Air ~ % DYLD_PRINT_APIS=1 pwsh -Command Enter-PSSession -ComputerName localhost\r\n_dyld_register_func_for_add_image(0x7fff20360506)\r\n_dyld_register_for_bulk_image_loads(0x7fff20092cf3)\r\n_dyld_is_memory_immutable(0x7fff200dcd3b, 36)\r\n_NSGetExecutablePath(...)\r\n_NSGetExecutablePath(...)\r\ndlopen_internal(/usr/local/microsoft/powershell/7/libhostfxr.dylib, 0x00000001)\r\n  dlopen_internal(/usr/local/microsoft/powershell/7/libhostfxr.dylib) ==> 0x7fb8acc05b60\r\ndlsym_internal(0x7fb8acc05b60, hostfxr_main_startupinfo)\r\n  dlsym_internal(0x7fb8acc05b60, hostfxr_main_startupinfo) ==> 0x108ac83f0\r\ndlsym_internal(0x7fb8acc05b60, hostfxr_set_error_writer)\r\n  dlsym_internal(0x7fb8acc05b60, hostfxr_set_error_writer) ==> 0x108ac9170\r\ndlopen_internal(/usr/local/microsoft/powershell/7/libhostpolicy.dylib, 0x00000001)\r\n  dlopen_internal(/usr/local/microsoft/powershell/7/libhostpolicy.dylib) ==> 0x7fb8acd050e0\r\ndlsym_internal(0x7fb8acd050e0, corehost_main)\r\n  dlsym_internal(0x7fb8acd050e0, corehost_main) ==> 0x108bbdb40\r\ndlsym_internal(0x7fb8acd050e0, corehost_load)\r\n  dlsym_internal(0x7fb8acd050e0, corehost_load) ==> 0x108bbce10\r\ndlsym_internal(0x7fb8acd050e0, corehost_unload)\r\n  dlsym_internal(0x7fb8acd050e0, corehost_unload) ==> 0x108bbf010\r\ndlsym_internal(0x7fb8acd050e0, corehost_main_with_output_buffer)\r\n  dlsym_internal(0x7fb8acd050e0, corehost_main_with_output_buffer) ==> 0x108bbe1c0\r\ndlsym_internal(0x7fb8acd050e0, corehost_set_error_writer)\r\n  dlsym_internal(0x7fb8acd050e0, corehost_set_error_writer) ==> 0x108bbf9a0\r\ndlsym_internal(0x7fb8acd050e0, corehost_initialize)\r\n  dlsym_internal(0x7fb8acd050e0, corehost_initialize) ==> 0x108bbe490\r\ndlopen_internal(/usr/local/microsoft/powershell/7/libcoreclr.dylib, 0x00000001)\r\n_dyld_is_memory_immutable(0x7fff203cc19b, 50)\r\n_dyld_is_memory_immutable(0x7fff203cc1cd, 55)\r\n_dyld_is_memory_immutable(0x7fff203cc204, 56)\r\n_dyld_is_memory_immutable(0x7fff203cc23c, 58)\r\n_dyld_get_prog_image_header()\r\ndyld_image_path_containing_address(0x10079c000)\r\n_NSGetExecutablePath(...)\r\n_dyld_register_func_for_add_image(0x7fff200c894e)\r\ndyld_image_path_containing_address(0x10079c000)\r\n_dyld_is_memory_immutable(0x10079c000, 28)\r\ndyld_image_path_containing_address(0x108ab7000)\r\n_dyld_is_memory_immutable(0x108ab7000, 28)\r\ndyld_image_path_containing_address(0x108baa000)\r\n_dyld_is_memory_immutable(0x108baa000, 28)\r\ndyld_image_path_containing_address(0x108c91000)\r\n_dyld_is_memory_immutable(0x108c91000, 28)\r\n_dyld_register_func_for_remove_image(0x7fff200d5e13)\r\n_dyld_is_memory_immutable(0x7fff200dca5f, 38)\r\n_NSGetExecutablePath(...)\r\n  dlopen_internal(/usr/local/microsoft/powershell/7/libcoreclr.dylib) ==> 0x7fb8ace04930\r\ndlsym_internal(0x7fb8ace04930, coreclr_initialize)\r\n  dlsym_internal(0x7fb8ace04930, coreclr_initialize) ==> 0x108cdb800\r\ndlsym_internal(0x7fb8ace04930, coreclr_shutdown_2)\r\n  dlsym_internal(0x7fb8ace04930, coreclr_shutdown_2) ==> 0x108cdbdb0\r\ndlsym_internal(0x7fb8ace04930, coreclr_execute_assembly)\r\n  dlsym_internal(0x7fb8ace04930, coreclr_execute_assembly) ==> 0x108cdbf40\r\ndlsym_internal(0x7fb8ace04930, coreclr_create_delegate)\r\n  dlsym_internal(0x7fb8ace04930, coreclr_create_delegate) ==> 0x108cdbe30\r\ndlopen_internal(NULL, 0x00000001)\r\ndlsym_internal(0xfffffffffffffffe, DllMain)\r\n  dlsym_internal(RTLD_DEFAULT, DllMain) ==> 0x108cdb050\r\n_NSGetExecutablePath(...)\r\n_NSGetExecutablePath(...)\r\ndladdr(0x108cae4c0, 0x30529af50)\r\ndladdr(0x108ca95e0, 0x30529b128)\r\ndlopen_internal(/usr/local/microsoft/powershell/7/libcoreclr.dylib, 0x00000001)\r\n  dlopen_internal(/usr/local/microsoft/powershell/7/libcoreclr.dylib) ==> 0x7fb8ace04930\r\ndlsym_internal(0x7fb8ace04930, DllMain)\r\n  dlsym_internal(0x7fb8ace04930, DllMain) ==> 0x108cdb050\r\ndlsym_internal(0x7fb8ace04930, PAL_RegisterModule)\r\n  dlsym_internal(0x7fb8ace04930, PAL_RegisterModule) ==> NULL\r\ndladdr(0x10902d5e0, 0x30529b0b0)\r\ndlopen_internal(/usr/local/microsoft/powershell/7/libclrjit.dylib, 0x00000001)\r\ndyld_image_path_containing_address(0x10a1a2000)\r\n_dyld_is_memory_immutable(0x10a1a2000, 28)\r\n  dlopen_internal(/usr/local/microsoft/powershell/7/libclrjit.dylib) ==> 0x7fb8acc06100\r\ndlsym_internal(0x7fb8acc06100, DllMain)\r\n  dlsym_internal(0x7fb8acc06100, DllMain) ==> NULL\r\ndlsym_internal(0x7fb8acc06100, jitStartup)\r\n  dlsym_internal(0x7fb8acc06100, jitStartup) ==> 0x10a1cb700\r\ndlopen_internal(NULL, 0x00000001)\r\ndlsym_internal(0xfffffffffffffffe, DllMain)\r\n  dlsym_internal(RTLD_DEFAULT, DllMain) ==> 0x108cdb050\r\ndlsym_internal(0x7fb8acc06100, getJit)\r\n  dlsym_internal(0x7fb8acc06100, getJit) ==> 0x10a1cb800\r\ndlopen_internal(/usr/local/microsoft/powershell/7/libc.dylib, 0x00000001)\r\n  dlopen_internal() failed, error: 'dlopen(/usr/local/microsoft/powershell/7/libc.dylib, 1): image not found'\r\ndlerror()\r\ndlopen_internal(/usr/local/microsoft/powershell/7/libc.dylib, 0x00000001)\r\n  dlopen_internal() failed, error: 'dlopen(/usr/local/microsoft/powershell/7/libc.dylib, 1): image not found'\r\ndlerror()\r\ndlopen_internal(libc.dylib, 0x00000001)\r\n  dlopen_internal(libc.dylib) ==> 0x200a94320\r\ndlsym_internal(0x200a94320, sysctl)\r\n  dlsym_internal(0x200a94320, sysctl) ==> 0x7fff20257e10\r\ndlsym_internal(0x200a94320, getpid)\r\n  dlsym_internal(0x200a94320, getpid) ==> 0x7fff20325368\r\ndlopen_internal(/usr/local/microsoft/powershell/7/libSystem.Native.dylib, 0x00000001)\r\ndyld_image_path_containing_address(0x10a896000)\r\n_dyld_is_memory_immutable(0x10a896000, 28)\r\n  dlopen_internal(/usr/local/microsoft/powershell/7/libSystem.Native.dylib) ==> 0x7fb8ace1fb50\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetTimestamp)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetTimestamp) ==> 0x10a89ed30\r\ndlopen_internal(/usr/lib/libicucore.dylib, 0x00000001)\r\n  dlopen_internal(/usr/lib/libicucore.dylib) ==> 0x7fb8ace04e10\r\ndlsym_internal(0x7fb8ace04e10, u_charsToUChars)\r\n  dlsym_internal(0x7fb8ace04e10, u_charsToUChars) ==> 0x7fff2250fb0b\r\ndlsym_internal(0x7fb8ace04e10, u_getVersion)\r\n  dlsym_internal(0x7fb8ace04e10, u_getVersion) ==> 0x7fff224bdbc8\r\ndlsym_internal(0x7fb8ace04e10, u_strlen)\r\n  dlsym_internal(0x7fb8ace04e10, u_strlen) ==> 0x7fff22540178\r\ndlsym_internal(0x7fb8ace04e10, u_strncpy)\r\n  dlsym_internal(0x7fb8ace04e10, u_strncpy) ==> 0x7fff22540d94\r\ndlsym_internal(0x7fb8ace04e10, u_tolower)\r\n  dlsym_internal(0x7fb8ace04e10, u_tolower) ==> 0x7fff224df0de\r\ndlsym_internal(0x7fb8ace04e10, u_toupper)\r\n  dlsym_internal(0x7fb8ace04e10, u_toupper) ==> 0x7fff224df0e8\r\ndlsym_internal(0x7fb8ace04e10, ucal_add)\r\n  dlsym_internal(0x7fb8ace04e10, ucal_add) ==> 0x7fff2265b472\r\ndlsym_internal(0x7fb8ace04e10, ucal_close)\r\n  dlsym_internal(0x7fb8ace04e10, ucal_close) ==> 0x7fff2265ae52\r\ndlsym_internal(0x7fb8ace04e10, ucal_get)\r\n  dlsym_internal(0x7fb8ace04e10, ucal_get) ==> 0x7fff2265b49c\r\ndlsym_internal(0x7fb8ace04e10, ucal_getAttribute)\r\n  dlsym_internal(0x7fb8ace04e10, ucal_getAttribute) ==> 0x7fff2265b34d\r\ndlsym_internal(0x7fb8ace04e10, ucal_getKeywordValuesForLocale)\r\n  dlsym_internal(0x7fb8ace04e10, ucal_getKeywordValuesForLocale) ==> 0x7fff2265b752\r\ndlsym_internal(0x7fb8ace04e10, ucal_getLimit)\r\n  dlsym_internal(0x7fb8ace04e10, ucal_getLimit) ==> 0x7fff2265b4da\r\ndlsym_internal(0x7fb8ace04e10, ucal_getTimeZoneDisplayName)\r\n  dlsym_internal(0x7fb8ace04e10, ucal_getTimeZoneDisplayName) ==> 0x7fff2265b09c\r\ndlsym_internal(0x7fb8ace04e10, ucal_open)\r\n  dlsym_internal(0x7fb8ace04e10, ucal_open) ==> 0x7fff2265acf1\r\ndlsym_internal(0x7fb8ace04e10, ucal_set)\r\n  dlsym_internal(0x7fb8ace04e10, ucal_set) ==> 0x7fff2265b4b2\r\ndlsym_internal(0x7fb8ace04e10, ucol_close)\r\n  dlsym_internal(0x7fb8ace04e10, ucol_close) ==> 0x7fff2265c4cb\r\ndlsym_internal(0x7fb8ace04e10, ucol_closeElements)\r\n  dlsym_internal(0x7fb8ace04e10, ucol_closeElements) ==> 0x7fff2265f5ee\r\ndlsym_internal(0x7fb8ace04e10, ucol_getOffset)\r\n  dlsym_internal(0x7fb8ace04e10, ucol_getOffset) ==> 0x7fff2265fb62\r\ndlsym_internal(0x7fb8ace04e10, ucol_getRules)\r\n  dlsym_internal(0x7fb8ace04e10, ucol_getRules) ==> 0x7fff2265c9fd\r\ndlsym_internal(0x7fb8ace04e10, ucol_getSortKey)\r\n  dlsym_internal(0x7fb8ace04e10, ucol_getSortKey) ==> 0x7fff2265c62d\r\ndlsym_internal(0x7fb8ace04e10, ucol_getStrength)\r\n  dlsym_internal(0x7fb8ace04e10, ucol_getStrength) ==> 0x7fff2265c84e\r\ndlsym_internal(0x7fb8ace04e10, ucol_getVersion)\r\n  dlsym_internal(0x7fb8ace04e10, ucol_getVersion) ==> 0x7fff2265c8bd\r\ndlsym_internal(0x7fb8ace04e10, ucol_next)\r\n  dlsym_internal(0x7fb8ace04e10, ucol_next) ==> 0x7fff2265f61a\r\ndlsym_internal(0x7fb8ace04e10, ucol_previous)\r\n  dlsym_internal(0x7fb8ace04e10, ucol_previous) ==> 0x7fff2265f7c9\r\ndlsym_internal(0x7fb8ace04e10, ucol_open)\r\n  dlsym_internal(0x7fb8ace04e10, ucol_open) ==> 0x7fff2265de9d\r\ndlsym_internal(0x7fb8ace04e10, ucol_openElements)\r\n  dlsym_internal(0x7fb8ace04e10, ucol_openElements) ==> 0x7fff2265f4fa\r\ndlsym_internal(0x7fb8ace04e10, ucol_openRules)\r\n  dlsym_internal(0x7fb8ace04e10, ucol_openRules) ==> 0x7fff2256640c\r\ndlsym_internal(0x7fb8ace04e10, ucol_safeClone)\r\n  dlsym_internal(0x7fb8ace04e10, ucol_safeClone) ==> 0x7fff2265c477\r\ndlsym_internal(0x7fb8ace04e10, ucol_setAttribute)\r\n  dlsym_internal(0x7fb8ace04e10, ucol_setAttribute) ==> 0x7fff2265c7e1\r\ndlsym_internal(0x7fb8ace04e10, ucol_strcoll)\r\n  dlsym_internal(0x7fb8ace04e10, ucol_strcoll) ==> 0x7fff2265c8ff\r\ndlsym_internal(0x7fb8ace04e10, udat_close)\r\n  dlsym_internal(0x7fb8ace04e10, udat_close) ==> 0x7fff22660065\r\ndlsym_internal(0x7fb8ace04e10, udat_countSymbols)\r\n  dlsym_internal(0x7fb8ace04e10, udat_countSymbols) ==> 0x7fff2266129b\r\ndlsym_internal(0x7fb8ace04e10, udat_getSymbols)\r\n  dlsym_internal(0x7fb8ace04e10, udat_getSymbols) ==> 0x7fff22660c28\r\ndlsym_internal(0x7fb8ace04e10, udat_open)\r\n  dlsym_internal(0x7fb8ace04e10, udat_open) ==> 0x7fff2265fde6\r\ndlsym_internal(0x7fb8ace04e10, udat_setCalendar)\r\n  dlsym_internal(0x7fb8ace04e10, udat_setCalendar) ==> 0x7fff2266080f\r\ndlsym_internal(0x7fb8ace04e10, udat_toPattern)\r\n  dlsym_internal(0x7fb8ace04e10, udat_toPattern) ==> 0x7fff226609e6\r\ndlsym_internal(0x7fb8ace04e10, udatpg_close)\r\n  dlsym_internal(0x7fb8ace04e10, udatpg_close) ==> 0x7fff226621ee\r\ndlsym_internal(0x7fb8ace04e10, udatpg_getBestPattern)\r\n  dlsym_internal(0x7fb8ace04e10, udatpg_getBestPattern) ==> 0x7fff22662213\r\ndlsym_internal(0x7fb8ace04e10, udatpg_open)\r\n  dlsym_internal(0x7fb8ace04e10, udatpg_open) ==> 0x7fff22662148\r\ndlsym_internal(0x7fb8ace04e10, uenum_close)\r\n  dlsym_internal(0x7fb8ace04e10, uenum_close) ==> 0x7fff2250db09\r\ndlsym_internal(0x7fb8ace04e10, uenum_count)\r\n  dlsym_internal(0x7fb8ace04e10, uenum_count) ==> 0x7fff2250db51\r\ndlsym_internal(0x7fb8ace04e10, uenum_next)\r\n  dlsym_internal(0x7fb8ace04e10, uenum_next) ==> 0x7fff2250dced\r\ndlsym_internal(0x7fb8ace04e10, uidna_close)\r\n  dlsym_internal(0x7fb8ace04e10, uidna_close) ==> 0x7fff2254faac\r\ndlsym_internal(0x7fb8ace04e10, uidna_nameToASCII)\r\n  dlsym_internal(0x7fb8ace04e10, uidna_nameToASCII) ==> 0x7fff2254fdc4\r\ndlsym_internal(0x7fb8ace04e10, uidna_nameToUnicode)\r\n  dlsym_internal(0x7fb8ace04e10, uidna_nameToUnicode) ==> 0x7fff2254ff14\r\ndlsym_internal(0x7fb8ace04e10, uidna_openUTS46)\r\n  dlsym_internal(0x7fb8ace04e10, uidna_openUTS46) ==> 0x7fff2254faa2\r\ndlsym_internal(0x7fb8ace04e10, uloc_canonicalize)\r\n  dlsym_internal(0x7fb8ace04e10, uloc_canonicalize) ==> 0x7fff22513b2c\r\ndlsym_internal(0x7fb8ace04e10, uloc_countAvailable)\r\n  dlsym_internal(0x7fb8ace04e10, uloc_countAvailable) ==> 0x7fff224a2cc4\r\ndlsym_internal(0x7fb8ace04e10, uloc_getAvailable)\r\n  dlsym_internal(0x7fb8ace04e10, uloc_getAvailable) ==> 0x7fff224a2d4c\r\ndlsym_internal(0x7fb8ace04e10, uloc_getBaseName)\r\n  dlsym_internal(0x7fb8ace04e10, uloc_getBaseName) ==> 0x7fff22513b1a\r\ndlsym_internal(0x7fb8ace04e10, uloc_getCharacterOrientation)\r\n  dlsym_internal(0x7fb8ace04e10, uloc_getCharacterOrientation) ==> 0x7fff224adefc\r\ndlsym_internal(0x7fb8ace04e10, uloc_getCountry)\r\n  dlsym_internal(0x7fb8ace04e10, uloc_getCountry) ==> 0x7fff2251319f\r\ndlsym_internal(0x7fb8ace04e10, uloc_getDefault)\r\n  dlsym_internal(0x7fb8ace04e10, uloc_getDefault) ==> 0x7fff22513011\r\ndlsym_internal(0x7fb8ace04e10, uloc_getDisplayCountry)\r\n  dlsym_internal(0x7fb8ace04e10, uloc_getDisplayCountry) ==> 0x7fff224a3a37\r\ndlsym_internal(0x7fb8ace04e10, uloc_getDisplayLanguage)\r\n  dlsym_internal(0x7fb8ace04e10, uloc_getDisplayLanguage) ==> 0x7fff224a34f9\r\ndlsym_internal(0x7fb8ace04e10, uloc_getDisplayName)\r\n  dlsym_internal(0x7fb8ace04e10, uloc_getDisplayName) ==> 0x7fff224a3e9f\r\ndlsym_internal(0x7fb8ace04e10, uloc_getISO3Country)\r\n  dlsym_internal(0x7fb8ace04e10, uloc_getISO3Country) ==> 0x7fff22513bd0\r\ndlsym_internal(0x7fb8ace04e10, uloc_getISO3Language)\r\n  dlsym_internal(0x7fb8ace04e10, uloc_getISO3Language) ==> 0x7fff22513b3e\r\ndlsym_internal(0x7fb8ace04e10, uloc_getKeywordValue)\r\n  dlsym_internal(0x7fb8ace04e10, uloc_getKeywordValue) ==> 0x7fff22511ecf\r\ndlsym_internal(0x7fb8ace04e10, uloc_getLanguage)\r\n  dlsym_internal(0x7fb8ace04e10, uloc_getLanguage) ==> 0x7fff225130b5\r\ndlsym_internal(0x7fb8ace04e10, uloc_getLCID)\r\n  dlsym_internal(0x7fb8ace04e10, uloc_getLCID) ==> 0x7fff22513c62\r\ndlsym_internal(0x7fb8ace04e10, uloc_getName)\r\n  dlsym_internal(0x7fb8ace04e10, uloc_getName) ==> 0x7fff22513488\r\ndlsym_internal(0x7fb8ace04e10, uloc_getParent)\r\n  dlsym_internal(0x7fb8ace04e10, uloc_getParent) ==> 0x7fff2251301b\r\ndlsym_internal(0x7fb8ace04e10, uloc_setKeywordValue)\r\n  dlsym_internal(0x7fb8ace04e10, uloc_setKeywordValue) ==> 0x7fff225122c1\r\ndlsym_internal(0x7fb8ace04e10, ulocdata_getCLDRVersion)\r\n  dlsym_internal(0x7fb8ace04e10, ulocdata_getCLDRVersion) ==> 0x7fff22519dcc\r\ndlsym_internal(0x7fb8ace04e10, ulocdata_getMeasurementSystem)\r\n  dlsym_internal(0x7fb8ace04e10, ulocdata_getMeasurementSystem) ==> 0x7fff22519c15\r\ndlsym_internal(0x7fb8ace04e10, unorm2_getNFCInstance)\r\n  dlsym_internal(0x7fb8ace04e10, unorm2_getNFCInstance) ==> 0x7fff224b201f\r\ndlsym_internal(0x7fb8ace04e10, unorm2_getNFDInstance)\r\n  dlsym_internal(0x7fb8ace04e10, unorm2_getNFDInstance) ==> 0x7fff224b2035\r\ndlsym_internal(0x7fb8ace04e10, unorm2_getNFKCInstance)\r\n  dlsym_internal(0x7fb8ace04e10, unorm2_getNFKCInstance) ==> 0x7fff2249f537\r\ndlsym_internal(0x7fb8ace04e10, unorm2_getNFKDInstance)\r\n  dlsym_internal(0x7fb8ace04e10, unorm2_getNFKDInstance) ==> 0x7fff2249f575\r\ndlsym_internal(0x7fb8ace04e10, unorm2_isNormalized)\r\n  dlsym_internal(0x7fb8ace04e10, unorm2_isNormalized) ==> 0x7fff224b2738\r\ndlsym_internal(0x7fb8ace04e10, unorm2_normalize)\r\n  dlsym_internal(0x7fb8ace04e10, unorm2_normalize) ==> 0x7fff224b205d\r\ndlsym_internal(0x7fb8ace04e10, unum_close)\r\n  dlsym_internal(0x7fb8ace04e10, unum_close) ==> 0x7fff22666d14\r\ndlsym_internal(0x7fb8ace04e10, unum_getAttribute)\r\n  dlsym_internal(0x7fb8ace04e10, unum_getAttribute) ==> 0x7fff22667acb\r\ndlsym_internal(0x7fb8ace04e10, unum_getSymbol)\r\n  dlsym_internal(0x7fb8ace04e10, unum_getSymbol) ==> 0x7fff22668345\r\ndlsym_internal(0x7fb8ace04e10, unum_open)\r\n  dlsym_internal(0x7fb8ace04e10, unum_open) ==> 0x7fff22666944\r\ndlsym_internal(0x7fb8ace04e10, unum_toPattern)\r\n  dlsym_internal(0x7fb8ace04e10, unum_toPattern) ==> 0x7fff226681ec\r\ndlsym_internal(0x7fb8ace04e10, ures_close)\r\n  dlsym_internal(0x7fb8ace04e10, ures_close) ==> 0x7fff22530adb\r\ndlsym_internal(0x7fb8ace04e10, ures_getByKey)\r\n  dlsym_internal(0x7fb8ace04e10, ures_getByKey) ==> 0x7fff22532a8e\r\ndlsym_internal(0x7fb8ace04e10, ures_getSize)\r\n  dlsym_internal(0x7fb8ace04e10, ures_getSize) ==> 0x7fff22531010\r\ndlsym_internal(0x7fb8ace04e10, ures_getStringByIndex)\r\n  dlsym_internal(0x7fb8ace04e10, ures_getStringByIndex) ==> 0x7fff22531cdd\r\ndlsym_internal(0x7fb8ace04e10, ures_open)\r\n  dlsym_internal(0x7fb8ace04e10, ures_open) ==> 0x7fff22531f6a\r\ndlsym_internal(0x7fb8ace04e10, usearch_close)\r\n  dlsym_internal(0x7fb8ace04e10, usearch_close) ==> 0x7fff2266b4f4\r\ndlsym_internal(0x7fb8ace04e10, usearch_first)\r\n  dlsym_internal(0x7fb8ace04e10, usearch_first) ==> 0x7fff2266c0b9\r\ndlsym_internal(0x7fb8ace04e10, usearch_getMatchedLength)\r\n  dlsym_internal(0x7fb8ace04e10, usearch_getMatchedLength) ==> 0x7fff2266bd73\r\ndlsym_internal(0x7fb8ace04e10, usearch_last)\r\n  dlsym_internal(0x7fb8ace04e10, usearch_last) ==> 0x7fff2266c31e\r\ndlsym_internal(0x7fb8ace04e10, usearch_openFromCollator)\r\n  dlsym_internal(0x7fb8ace04e10, usearch_openFromCollator) ==> 0x7fff2266b220\r\ndlsym_internal(0x7fb8ace04e10, ucol_setMaxVariable)\r\n  dlsym_internal(0x7fb8ace04e10, ucol_setMaxVariable) ==> 0x7fff2265c760\r\ndlsym_internal(0x7fb8ace04e10, ucurr_forLocale)\r\n  dlsym_internal(0x7fb8ace04e10, ucurr_forLocale) ==> 0x7fff22508422\r\ndlsym_internal(0x7fb8ace04e10, ucurr_getName)\r\n  dlsym_internal(0x7fb8ace04e10, ucurr_getName) ==> 0x7fff225086d0\r\ndlsym_internal(0x7fb8ace04e10, uldn_close)\r\n  dlsym_internal(0x7fb8ace04e10, uldn_close) ==> 0x7fff224a7ba8\r\ndlsym_internal(0x7fb8ace04e10, uldn_keyValueDisplayName)\r\n  dlsym_internal(0x7fb8ace04e10, uldn_keyValueDisplayName) ==> 0x7fff224a816e\r\ndlsym_internal(0x7fb8ace04e10, uldn_open)\r\n  dlsym_internal(0x7fb8ace04e10, uldn_open) ==> 0x7fff224a7a90\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_ConvertErrorPlatformToPal)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_ConvertErrorPlatformToPal) ==> 0x10a897240\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_Stat)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_Stat) ==> 0x10a898250\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_LStat)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_LStat) ==> 0x10a8983f0\r\ndlopen_internal(/usr/local/microsoft/powershell/7/libpsl-native.dylib, 0x00000001)\r\ndyld_image_path_containing_address(0x10c70c000)\r\n_dyld_is_memory_immutable(0x10c70c000, 28)\r\n  dlopen_internal(/usr/local/microsoft/powershell/7/libpsl-native.dylib) ==> 0x7fb8acd31fb0\r\ndlsym_internal(0x7fb8acd31fb0, Native_OpenLog)\r\n  dlsym_internal(0x7fb8acd31fb0, Native_OpenLog) ==> 0x10c70ec10\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_Stat)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_Stat) ==> 0x10a898250\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_ConvertErrorPlatformToPal)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_ConvertErrorPlatformToPal) ==> 0x10a897240\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_Open)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_Open) ==> 0x10a898490\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_FStat)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_FStat) ==> 0x10a898320\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_FLock)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_FLock) ==> 0x10a898b90\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_LSeek)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_LSeek) ==> 0x10a898c10\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_Read)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_Read) ==> 0x10a8993b0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_FStat)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_FStat) ==> 0x10a898320\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_SysConf)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_SysConf) ==> 0x10a898dc0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_MMap)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_MMap) ==> 0x10a898ce0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_MAdvise)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_MAdvise) ==> 0x10a898d50\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_FLock)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_FLock) ==> 0x10a898b90\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_Close)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_Close) ==> 0x10a898530\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_MSync)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_MSync) ==> 0x10a898d80\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_MUnmap)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_MUnmap) ==> 0x10a898d40\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetNonCryptographicallySecureRandomBytes)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetNonCryptographicallySecureRandomBytes) ==> 0x10a89e2a0\r\ndlopen_internal(/usr/local/microsoft/powershell/7//usr/lib/libobjc.dylib, 0x00000001)\r\n  dlopen_internal() failed, error: 'dlopen(/usr/local/microsoft/powershell/7//usr/lib/libobjc.dylib, 1): image not found'\r\ndlerror()\r\ndlopen_internal(/usr/lib/libobjc.dylib, 0x00000001)\r\n  dlopen_internal(/usr/lib/libobjc.dylib) ==> 0x200a96b80\r\ndlsym_internal(0x200a96b80, objc_getClass)\r\n  dlsym_internal(0x200a96b80, objc_getClass) ==> 0x7fff201f98b4\r\ndlsym_internal(0x200a96b80, sel_getUid)\r\n  dlsym_internal(0x200a96b80, sel_getUid) ==> 0x7fff20201561\r\ndlsym_internal(0x200a96b80, objc_msgSend)\r\n  dlsym_internal(0x200a96b80, objc_msgSend) ==> 0x7fff201f5bc0\r\ndlsym_internal(0x200a96b80, objc_msgSend_stret)\r\n  dlsym_internal(0x200a96b80, objc_msgSend_stret) ==> 0x7fff201f6380\r\ndlopen_internal(NULL, 0x00000110)\r\n_dyld_image_count()\r\n_dyld_get_image_header(0)\r\ndlopen_internal(/usr/lib/system/libsystem_sandbox.dylib, 0x00000100)\r\n  dlopen_internal(/usr/lib/system/libsystem_sandbox.dylib) ==> 0x200a96291\r\ndlsym_internal(0x200a96291, sandbox_requests_integrity_protection_for_preference_domain)\r\n  dlsym_internal(0x200a96291, sandbox_requests_integrity_protection_for_preference_domain) ==> 0x7fff29247d50\r\n_dyld_is_memory_immutable(0x7fff2082e473, 50)\r\n_dyld_is_memory_immutable(0x7fff208404a1, 26)\r\n_dyld_is_memory_immutable(0x7fff20840aa7, 25)\r\n_dyld_is_memory_immutable(0x7fff200dca47, 24)\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetOSArchitecture)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetOSArchitecture) ==> 0x10a89e510\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetProcessArchitecture)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetProcessArchitecture) ==> 0x10a89e520\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetUnixVersion)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetUnixVersion) ==> 0x10a89e450\r\ndlsym_internal(0x7fb8acd31fb0, Native_SysLog)\r\n  dlsym_internal(0x7fb8acd31fb0, Native_SysLog) ==> 0x10c70ea70\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_IsATty)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_IsATty) ==> 0x10a89f250\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_Dup)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_Dup) ==> 0x10a898540\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_ConvertErrorPlatformToPal)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_ConvertErrorPlatformToPal) ==> 0x10a897240\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_InitializeTerminalAndSignalHandling)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_InitializeTerminalAndSignalHandling) ==> 0x10a89fc80\r\ndladdr(0x10a89f2e0, 0x30529a630)\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_SetTerminalInvalidationHandler)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_SetTerminalInvalidationHandler) ==> 0x10a89e660\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_Open)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_Open) ==> 0x10a898490\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_LSeek)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_LSeek) ==> 0x10a898c10\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_Read)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_Read) ==> 0x10a8993b0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_SetKeypadXmit)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_SetKeypadXmit) ==> 0x10a89f260\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetControlCharacters)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetControlCharacters) ==> 0x10a89f870\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_RegisterForCtrl)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_RegisterForCtrl) ==> 0x10a89e5e0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetDomainName)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetDomainName) ==> 0x10a89a1a0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetHostName)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetHostName) ==> 0x10a89a1b0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetPid)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetPid) ==> 0x10a89e0c0\r\ndlopen_internal(/usr/local/microsoft/powershell/7//usr/lib/libproc.dylib, 0x00000001)\r\n  dlopen_internal() failed, error: 'dlopen(/usr/local/microsoft/powershell/7//usr/lib/libproc.dylib, 1): image not found'\r\ndlerror()\r\ndlopen_internal(/usr/lib/libproc.dylib, 0x00000001)\r\n  dlopen_internal(/usr/lib/libproc.dylib) ==> 0x200a94320\r\ndlsym_internal(0x200a94320, proc_pidinfo)\r\n  dlsym_internal(0x200a94320, proc_pidinfo) ==> 0x7fff20325ed0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_Stat)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_Stat) ==> 0x10a898250\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_ReadLink)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_ReadLink) ==> 0x10a899410\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetReadDirRBufferSize)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetReadDirRBufferSize) ==> 0x10a8985f0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_OpenDir)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_OpenDir) ==> 0x10a8986a0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_ReadDirR)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_ReadDirR) ==> 0x10a898600\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_CloseDir)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_CloseDir) ==> 0x10a8986b0\r\n_dyld_is_memory_immutable(0x7fff202af3a0, 26)\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetSid)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetSid) ==> 0x10a89e0d0\r\ndlsym_internal(0x200a94320, proc_pidinfo)\r\n  dlsym_internal(0x200a94320, proc_pidinfo) ==> 0x7fff20325ed0\r\ndlsym_internal(0x200a94320, proc_pidinfo)\r\n  dlsym_internal(0x200a94320, proc_pidinfo) ==> 0x7fff20325ed0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_Unlink)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_Unlink) ==> 0x10a898580\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_Socket)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_Socket) ==> 0x10a89bee0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_CreateSocketEventPort)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_CreateSocketEventPort) ==> 0x10a89c2e0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_CreateSocketEventBuffer)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_CreateSocketEventBuffer) ==> 0x10a89c350\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_WaitForSocketEvents)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_WaitForSocketEvents) ==> 0x10a89c4f0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetDomainSocketSizes)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetDomainSocketSizes) ==> 0x10a89c700\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_Socket)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_Socket) ==> 0x10a89bee0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_SetAddressFamily)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_SetAddressFamily) ==> 0x10a89a2d0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetAddressFamily)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetAddressFamily) ==> 0x10a89a1f0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_SetAddressFamily)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_SetAddressFamily) ==> 0x10a89a2d0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_Bind)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_Bind) ==> 0x10a89b090\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_Listen)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_Listen) ==> 0x10a89b230\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_FcntlSetIsNonBlocking)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_FcntlSetIsNonBlocking) ==> 0x10a8989d0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_Accept)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_Accept) ==> 0x10a89af90\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_TryChangeSocketEventRegistration)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_TryChangeSocketEventRegistration) ==> 0x10a89c3b0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_Access)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_Access) ==> 0x10a898c00\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetHostName)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetHostName) ==> 0x10a89a1b0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetEUid)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetEUid) ==> 0x10a89f090\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetPwUidR)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetPwUidR) ==> 0x10a89ee90\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetAllMountPoints)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetAllMountPoints) ==> 0x10a899940\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_ConvertErrorPlatformToPal)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_ConvertErrorPlatformToPal) ==> 0x10a897240\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetFormatInfoForMountPoint)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetFormatInfoForMountPoint) ==> 0x10a899a60\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_ConvertErrorPalToPlatform)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_ConvertErrorPalToPlatform) ==> 0x10a897260\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetCwd)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetCwd) ==> 0x10a89e270\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_OpenDir)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_OpenDir) ==> 0x10a8986a0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetReadDirRBufferSize)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetReadDirRBufferSize) ==> 0x10a8985f0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_ReadDirR)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_ReadDirR) ==> 0x10a898600\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_Unlink)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_Unlink) ==> 0x10a898580\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_CloseDir)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_CloseDir) ==> 0x10a8986b0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetEUid)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetEUid) ==> 0x10a89f090\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetEGid)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetEGid) ==> 0x10a89f0a0\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetTimestampResolution)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetTimestampResolution) ==> 0x10a89ecf0\r\ndlopen_internal(/usr/local/microsoft/powershell/7/libpsrpclient.dylib, 0x00000001)\r\ndlclose(), found unused image 0x7fb8ace3aba0 libpsrpclient.dylib\r\ndlclose(), found unused image 0x7fb8acd71930 libmi.dylib\r\ndlclose(), deleting 0x7fb8ace3aba0 libpsrpclient.dylib\r\ndlclose(), deleting 0x7fb8acd71930 libmi.dylib\r\n  dlopen_internal() failed, error: 'dlopen(/usr/local/microsoft/powershell/7/libpsrpclient.dylib, 1): Library not loaded: /usr/local/opt/openssl@1.1/lib/libssl.1.1.dylib\r\n  Referenced from: /usr/local/microsoft/powershell/7/libmi.dylib\r\n  Reason: no suitable image found.  Did find:\r\n\t/usr/local/opt/openssl@1.1/lib/libssl.1.1.dylib: mach-o, but wrong architecture\r\n\t/opt/local/lib/libssl.1.1.dylib: mach-o, but wrong architecture'\r\ndlerror()\r\ndlopen_internal(/usr/local/microsoft/powershell/7/libpsrpclient.dylib, 0x00000001)\r\ndlclose(), found unused image 0x7fb8acd71c40 libpsrpclient.dylib\r\ndlclose(), found unused image 0x7fb8acd71930 libmi.dylib\r\ndlclose(), deleting 0x7fb8acd71c40 libpsrpclient.dylib\r\ndlclose(), deleting 0x7fb8acd71930 libmi.dylib\r\n  dlopen_internal() failed, error: 'dlopen(/usr/local/microsoft/powershell/7/libpsrpclient.dylib, 1): Library not loaded: /usr/local/opt/openssl@1.1/lib/libssl.1.1.dylib\r\n  Referenced from: /usr/local/microsoft/powershell/7/libmi.dylib\r\n  Reason: no suitable image found.  Did find:\r\n\t/usr/local/opt/openssl@1.1/lib/libssl.1.1.dylib: mach-o, but wrong architecture\r\n\t/opt/local/lib/libssl.1.1.dylib: mach-o, but wrong architecture'\r\ndlerror()\r\ndlopen_internal(libpsrpclient.dylib, 0x00000001)\r\n  dlopen_internal() failed, error: 'dlopen(libpsrpclient.dylib, 1): image not found'\r\ndlerror()\r\ndlopen_internal(/usr/local/microsoft/powershell/7/liblibpsrpclient.dylib, 0x00000001)\r\n  dlopen_internal() failed, error: 'dlopen(/usr/local/microsoft/powershell/7/liblibpsrpclient.dylib, 1): image not found'\r\ndlerror()\r\ndlopen_internal(/usr/local/microsoft/powershell/7/liblibpsrpclient.dylib, 0x00000001)\r\n  dlopen_internal() failed, error: 'dlopen(/usr/local/microsoft/powershell/7/liblibpsrpclient.dylib, 1): image not found'\r\ndlerror()\r\ndlopen_internal(liblibpsrpclient.dylib, 0x00000001)\r\n  dlopen_internal() failed, error: 'dlopen(liblibpsrpclient.dylib, 1): image not found'\r\ndlerror()\r\ndlopen_internal(/usr/local/microsoft/powershell/7/libpsrpclient, 0x00000001)\r\n  dlopen_internal() failed, error: 'dlopen(/usr/local/microsoft/powershell/7/libpsrpclient, 1): image not found'\r\ndlerror()\r\ndlopen_internal(/usr/local/microsoft/powershell/7/libpsrpclient, 0x00000001)\r\n  dlopen_internal() failed, error: 'dlopen(/usr/local/microsoft/powershell/7/libpsrpclient, 1): image not found'\r\ndlerror()\r\ndlopen_internal(libpsrpclient, 0x00000001)\r\n  dlopen_internal() failed, error: 'dlopen(libpsrpclient, 1): image not found'\r\ndlerror()\r\ndlopen_internal(/usr/local/microsoft/powershell/7/liblibpsrpclient, 0x00000001)\r\n  dlopen_internal() failed, error: 'dlopen(/usr/local/microsoft/powershell/7/liblibpsrpclient, 1): image not found'\r\ndlerror()\r\ndlopen_internal(/usr/local/microsoft/powershell/7/liblibpsrpclient, 0x00000001)\r\n  dlopen_internal() failed, error: 'dlopen(/usr/local/microsoft/powershell/7/liblibpsrpclient, 1): image not found'\r\ndlerror()\r\ndlopen_internal(liblibpsrpclient, 0x00000001)\r\n  dlopen_internal() failed, error: 'dlopen(liblibpsrpclient, 1): image not found'\r\ndlerror()\r\ndlopen_internal(/usr/local/microsoft/powershell/7/osx-x64/libpsrpclient.dylib, 0x00000001)\r\n  dlopen_internal() failed, error: 'dlopen(/usr/local/microsoft/powershell/7/osx-x64/libpsrpclient.dylib, 1): image not found'\r\ndlerror()\r\ndlopen_internal(Microsoft.DiaSymReader.Native.amd64.dll, 0x00000001)\r\n  dlopen_internal() failed, error: 'dlopen(Microsoft.DiaSymReader.Native.amd64.dll, 1): image not found'\r\ndlopen_internal(/usr/local/microsoft/powershell/7/Microsoft.DiaSymReader.Native.amd64.dll, 0x00000001)\r\n  dlopen_internal() failed, error: 'dlopen(/usr/local/microsoft/powershell/7/Microsoft.DiaSymReader.Native.amd64.dll, 1): image not found'\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_GetWindowSize)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_GetWindowSize) ==> 0x10a89f220\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_Write)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_Write) ==> 0x10a8994c0\r\nEnter-PSSession: This parameter set requires WSMan, and no supported WSMan client library was found. WSMan is either not installed or unavailable for this system.\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_SetLingerOption)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_SetLingerOption) ==> 0x10a89a940\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_ConvertErrorPlatformToPal)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_ConvertErrorPlatformToPal) ==> 0x10a897240\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_Close)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_Close) ==> 0x10a898530\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_ConvertErrorPalToPlatform)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_ConvertErrorPalToPlatform) ==> 0x10a897260\r\ndlsym_internal(0x7fb8ace1fb50, SystemNative_StrErrorR)\r\n  dlsym_internal(0x7fb8ace1fb50, SystemNative_StrErrorR) ==> 0x10a8976b0\r\ndlclose(0x7fb8acc05b60)\r\n```\r\n",
    "created_at": "2021-02-12T17:22:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14760#issuecomment-778328445",
    "id": 778328445,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14760",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3ODMyODQ0NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/778328445/reactions"
    },
    "updated_at": "2021-02-12T17:22:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/778328445",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24985048?v=4",
      "events_url": "https://api.github.com/users/fatherofinvention/events{/privacy}",
      "followers_url": "https://api.github.com/users/fatherofinvention/followers",
      "following_url": "https://api.github.com/users/fatherofinvention/following{/other_user}",
      "gists_url": "https://api.github.com/users/fatherofinvention/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/fatherofinvention",
      "id": 24985048,
      "login": "fatherofinvention",
      "node_id": "MDQ6VXNlcjI0OTg1MDQ4",
      "organizations_url": "https://api.github.com/users/fatherofinvention/orgs",
      "received_events_url": "https://api.github.com/users/fatherofinvention/received_events",
      "repos_url": "https://api.github.com/users/fatherofinvention/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/fatherofinvention/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fatherofinvention/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/fatherofinvention"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Unfortunately the next step is to look into compiling the components yourself. The repo for my fork shows you how to do that for libpsrpclient and libmi but your error would also indicate this is an issue with the openssl build that’s present as well.",
    "created_at": "2021-02-12T20:48:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14760#issuecomment-778446707",
    "id": 778446707,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14760",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3ODQ0NjcwNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/778446707/reactions"
    },
    "updated_at": "2021-02-12T20:48:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/778446707",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8462645?v=4",
      "events_url": "https://api.github.com/users/jborean93/events{/privacy}",
      "followers_url": "https://api.github.com/users/jborean93/followers",
      "following_url": "https://api.github.com/users/jborean93/following{/other_user}",
      "gists_url": "https://api.github.com/users/jborean93/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jborean93",
      "id": 8462645,
      "login": "jborean93",
      "node_id": "MDQ6VXNlcjg0NjI2NDU=",
      "organizations_url": "https://api.github.com/users/jborean93/orgs",
      "received_events_url": "https://api.github.com/users/jborean93/received_events",
      "repos_url": "https://api.github.com/users/jborean93/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jborean93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jborean93/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jborean93"
    }
  },
  {
    "author_association": "NONE",
    "body": "From what I understand of Rosetta 2, the entire stack has to be either x86_64 or arm64. You can't, for example, launch the pwsh binary as arm64 and have it call the OpenSSL libraries as x86_64.\r\nOn my M1 Mac, I was able to get MacPorts installed with no problems, and then when I installed the dependencies for PowerShell, the libraries were, by default, installed as arm64:\r\ne.g.:\r\n```\r\nkai@hobbes-M1 lib % file /usr/local/opt/openssl/lib/libssl.1.0.0.dylib\r\n/usr/local/opt/openssl/lib/libssl.1.0.0.dylib: Mach-O 64-bit dynamically linked shared library arm64\r\n```\r\nor\r\n```\r\nkai@hobbes-M1 ~ % sudo port -v installed openssl \r\nPassword:\r\nThe following ports are currently installed:\r\n  openssl @1.1.1i_0 (active) platform='darwin 20' archs='arm64' date='2020-12-15T09:15:25+1100'\r\n```\r\nThe precompiled package releases of PowerShell however are x86_64:\r\n```\r\nkai@hobbes-M1 lib % file /usr/local/bin/pwsh\r\n/usr/local/bin/pwsh: Mach-O 64-bit executable x86_64\r\n```\r\nSo, Terminal.app can launch x86_64 binaries on arm64 without needing Terminal to run entirely in Rosetta, but then from what I understand, every single shared library that pwsh needs to use, must also be x86_64, or pwsh needs to be recompiled as arm64, along with every shared library.\r\n",
    "created_at": "2021-02-15T18:43:44Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14760#issuecomment-779394508",
    "id": 779394508,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14760",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTM5NDUwOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/779394508/reactions"
    },
    "updated_at": "2021-02-15T18:43:44Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/779394508",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/597823?v=4",
      "events_url": "https://api.github.com/users/kai-h/events{/privacy}",
      "followers_url": "https://api.github.com/users/kai-h/followers",
      "following_url": "https://api.github.com/users/kai-h/following{/other_user}",
      "gists_url": "https://api.github.com/users/kai-h/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/kai-h",
      "id": 597823,
      "login": "kai-h",
      "node_id": "MDQ6VXNlcjU5NzgyMw==",
      "organizations_url": "https://api.github.com/users/kai-h/orgs",
      "received_events_url": "https://api.github.com/users/kai-h/received_events",
      "repos_url": "https://api.github.com/users/kai-h/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/kai-h/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kai-h/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/kai-h"
    }
  },
  {
    "author_association": "NONE",
    "body": "To install a port for an alternative CPU architecture on an M1 Mac, you can use the following:\r\n```\r\nsudo port install openssl10 +universal\r\n```\r\nThis will then install universal binary versions (at the time of writing, that means arm64 and x86_64, not i386 nor any ppc variant)",
    "created_at": "2021-02-15T18:48:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14760#issuecomment-779396629",
    "id": 779396629,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14760",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTM5NjYyOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/779396629/reactions"
    },
    "updated_at": "2021-02-15T18:48:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/779396629",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/597823?v=4",
      "events_url": "https://api.github.com/users/kai-h/events{/privacy}",
      "followers_url": "https://api.github.com/users/kai-h/followers",
      "following_url": "https://api.github.com/users/kai-h/following{/other_user}",
      "gists_url": "https://api.github.com/users/kai-h/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/kai-h",
      "id": 597823,
      "login": "kai-h",
      "node_id": "MDQ6VXNlcjU5NzgyMw==",
      "organizations_url": "https://api.github.com/users/kai-h/orgs",
      "received_events_url": "https://api.github.com/users/kai-h/received_events",
      "repos_url": "https://api.github.com/users/kai-h/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/kai-h/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kai-h/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/kai-h"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Thanks for the great info there, it would indicate you need the x86_64 OpenSSL libs in `/usr/local/opt/openssl@1.1/lib/*`. I'm honestly never used MacPorts but it does sound like that would work. For `brew` you may want to try `arch -x86_64 brew install openssl` to install the x86_64 library that PowerShell would require. The `libmi` and `libpsrpclient` libraries provided by my fork should be pure `x86_64` as I haven't built them for `arm64/universal` yet.\r\n\r\nIt does sound like I need to look into compiling a universal library in the future as once PowerShell releases an `arm64` build this would be required but the OpenSSL requirement will be tricky to achieve as the location is no longer expected to be `/usr/local/opt/openssl/lib/*`.",
    "created_at": "2021-02-15T19:15:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14760#issuecomment-779406411",
    "id": 779406411,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14760",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTQwNjQxMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/779406411/reactions"
    },
    "updated_at": "2021-02-15T19:15:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/779406411",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8462645?v=4",
      "events_url": "https://api.github.com/users/jborean93/events{/privacy}",
      "followers_url": "https://api.github.com/users/jborean93/followers",
      "following_url": "https://api.github.com/users/jborean93/following{/other_user}",
      "gists_url": "https://api.github.com/users/jborean93/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jborean93",
      "id": 8462645,
      "login": "jborean93",
      "node_id": "MDQ6VXNlcjg0NjI2NDU=",
      "organizations_url": "https://api.github.com/users/jborean93/orgs",
      "received_events_url": "https://api.github.com/users/jborean93/received_events",
      "repos_url": "https://api.github.com/users/jborean93/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jborean93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jborean93/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jborean93"
    }
  },
  {
    "author_association": "NONE",
    "body": "Yeah, it's very frustrating that some of the libraries used by PowerShell have these hard-coded library paths inside them. While the PowerShell team at Microsoft seem to be quite open to ensuring PowerShell works on non-Windows platforms, it seems that the teams developing these supporting libraries aren't really embracing the concept of cross-platform support.\r\n\r\nre: MacPorts / Homebrew - I use MacPorts myself, but I'm of the understanding that Homebrew can have some problems installing older versions of OpenSSL, whereas this is fairly straightforward with MacPorts.\r\nThe downside to using MacPorts is that you still need to symlink the libraries to where they're expected to be from a Homebrew installation\r\n```\r\nsudo mkdir -p /usr/local/opt/openssl\r\nsudo ln -s /opt/local/lib/openssl-1.0 /usr/local/opt/openssl/lib\r\n```\r\nNow that I have it working at a level such that I can administer Microsoft 365 from my Apple Silicon Mac, the next step for me is to explore what can be done to get remoting working with Modern Authentication...",
    "created_at": "2021-02-15T19:25:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14760#issuecomment-779410766",
    "id": 779410766,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14760",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTQxMDc2Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/779410766/reactions"
    },
    "updated_at": "2021-02-15T19:25:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/779410766",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/597823?v=4",
      "events_url": "https://api.github.com/users/kai-h/events{/privacy}",
      "followers_url": "https://api.github.com/users/kai-h/followers",
      "following_url": "https://api.github.com/users/kai-h/following{/other_user}",
      "gists_url": "https://api.github.com/users/kai-h/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/kai-h",
      "id": 597823,
      "login": "kai-h",
      "node_id": "MDQ6VXNlcjU5NzgyMw==",
      "organizations_url": "https://api.github.com/users/kai-h/orgs",
      "received_events_url": "https://api.github.com/users/kai-h/received_events",
      "repos_url": "https://api.github.com/users/kai-h/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/kai-h/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kai-h/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/kai-h"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Yeah, it's very frustrating that some of the libraries used by PowerShell have these hard-coded library paths inside them. \r\n\r\nI mentioned before why the path is hardcoded and why I also continued the practice for my forked copy in https://github.com/PowerShell/PowerShell/issues/5561#issuecomment-747779842. TLDR: without `LD_LIBRARY_PATH` being set to your OpenSSL lib path (not done by default) then you cannot use a dynamic PATH.\r\n\r\nThis is because brew (and I assume MacPorts) will install the OpenSSL lib into a path that isn't automatically looked so so the default install will fail for the majority of users and expecting them to set an env var like `LD_LIBRARY_PATH` is IMO bad user experience (the alternative isn't that great as well). Luckily if you wish to make it relative you can use `install_name_tool` to change the path.\r\n\r\n> but I'm of the understanding that Homebrew can have some problems installing older versions of OpenSSL,\r\n\r\nYea they only offer OpenSSL 1.1.x and no longer provider 1.0.x without using a custom formula. This is problematic for the builtin version of mi as it has been compiled against 1.0.x. This doesn't affect me because my fork was compiled against 1.1.x allowing it to work with what is installed with brew (and actually not ancient :)).\r\n\r\n> the next step for me is to explore what can be done to get remoting working with Modern Authentication...\r\n\r\nI can't speak for the one builtin to PowerShell but this should work for my fork, I've had some [explicit tests for this](https://github.com/jborean93/omi/blob/main/libmi.tests.ps1#L470-L518). I remember the builtin `mi` library had a hardcoded password limt of 1KiB characters and when testing EXO modern auth, the JWT tokens were exceeding that. The fork increases that limit to 8KiB which is about the max size for HTTP headers allowing me to use modern auth.",
    "created_at": "2021-02-15T19:40:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14760#issuecomment-779416392",
    "id": 779416392,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14760",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTQxNjM5Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/779416392/reactions"
    },
    "updated_at": "2021-02-15T19:42:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/779416392",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8462645?v=4",
      "events_url": "https://api.github.com/users/jborean93/events{/privacy}",
      "followers_url": "https://api.github.com/users/jborean93/followers",
      "following_url": "https://api.github.com/users/jborean93/following{/other_user}",
      "gists_url": "https://api.github.com/users/jborean93/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jborean93",
      "id": 8462645,
      "login": "jborean93",
      "node_id": "MDQ6VXNlcjg0NjI2NDU=",
      "organizations_url": "https://api.github.com/users/jborean93/orgs",
      "received_events_url": "https://api.github.com/users/jborean93/received_events",
      "repos_url": "https://api.github.com/users/jborean93/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jborean93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jborean93/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jborean93"
    }
  },
  {
    "author_association": "NONE",
    "body": "Thanks for that, Jordan. I will have to give your fork a go now that I have the rest of the x86_64 architecture working under Rosetta.\r\nI found the whole hardcoded library path thing frustrating because at the time I initially looked into this, back in 2017/2018, Apple were still installing the OpenSSL 1.0 libraries as a part of the default install for macOS. At that point, it would have been good if PowerShell was able to use the libraries supplied by Apple, instating of needing another dependency. \r\nHaving said that, your reason does make sense, particularly as LD_LIBRARY_PATH isn't set by default on current versions of macOS.",
    "created_at": "2021-02-15T19:50:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14760#issuecomment-779420205",
    "id": 779420205,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14760",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTQyMDIwNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/779420205/reactions"
    },
    "updated_at": "2021-02-15T19:50:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/779420205",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/597823?v=4",
      "events_url": "https://api.github.com/users/kai-h/events{/privacy}",
      "followers_url": "https://api.github.com/users/kai-h/followers",
      "following_url": "https://api.github.com/users/kai-h/following{/other_user}",
      "gists_url": "https://api.github.com/users/kai-h/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/kai-h",
      "id": 597823,
      "login": "kai-h",
      "node_id": "MDQ6VXNlcjU5NzgyMw==",
      "organizations_url": "https://api.github.com/users/kai-h/orgs",
      "received_events_url": "https://api.github.com/users/kai-h/received_events",
      "repos_url": "https://api.github.com/users/kai-h/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/kai-h/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kai-h/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/kai-h"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Apple were still installing the OpenSSL 1.0 libraries as a part of the default install for macOS\r\n\r\nThey did provide OpenSSL but it was even older at 0.9.8 which is even more fun. With macOS 10.11 (2015) they adopted LibreSSL 2.8.3 instead of OpenSSL which modernized things a bit but even then the library has stayed static (still on that version). I believe there are limitations with this library but I've honestly never really tried it out. There are indications that using these libraries are deprecated by Apple and they state you should be using their own framework [Secure Transport](https://developer.apple.com/documentation/security/secure_transport).\r\n\r\nWhat I'm hoping to do with my fork is to change the `Install-WSMan` command to dynamically set the OpenSSL lib path based on\r\n\r\n* The architecture of PowerShell\r\n    * Right now x86_64 seems to be the only version PowerShell has but this could change in the future\r\n* Check if `brew` or `ports` is present and get the `openssl` lib path if they've installed OpenSSL for the current architecture\r\n* Use `install_name_tool` to dynamically change the path based on whatever is chosen\r\n\r\nThis means that if you've installed OpenSSL with either brew or ports then `Install-WSMan` should just work. The only caveat is that you need the correct arch to be installed. Right now PowerShell is `x86_64` so you need the `x86_64` OpenSSL libs to be present.",
    "created_at": "2021-02-15T20:12:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14760#issuecomment-779428228",
    "id": 779428228,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14760",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTQyODIyOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/779428228/reactions"
    },
    "updated_at": "2021-02-15T20:12:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/779428228",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8462645?v=4",
      "events_url": "https://api.github.com/users/jborean93/events{/privacy}",
      "followers_url": "https://api.github.com/users/jborean93/followers",
      "following_url": "https://api.github.com/users/jborean93/following{/other_user}",
      "gists_url": "https://api.github.com/users/jborean93/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jborean93",
      "id": 8462645,
      "login": "jborean93",
      "node_id": "MDQ6VXNlcjg0NjI2NDU=",
      "organizations_url": "https://api.github.com/users/jborean93/orgs",
      "received_events_url": "https://api.github.com/users/jborean93/received_events",
      "repos_url": "https://api.github.com/users/jborean93/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jborean93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jborean93/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jborean93"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@fatherofinvention so I was finally able to get my hands on an M1 Mac Mini to try this all out. I was able to get it all working thanks to the information @kai-h has provided. Basically PowerShell is compiled against `x86_64` as well as the `libmi.dylib` and `libpsrpclient.dylib` that is included with PowerShell (and my fork). The only missing link here is `libssl` and `libcrypto` which I was able to get working by using the `x86_64` brew to install OpenSSL:\r\n\r\n```\r\n# Enter x86_64 bash (Rosetta 2)\r\narch -x86_64 bash\r\n\r\n# Install brew for this architecture (seems to run side by side with the arm64 one)\r\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\r\n\r\n# Use that brew to install the x86_64 openssl\r\nbrew install openssl\r\n```\r\n\r\n_Note: for others reading this works with my fork, you will have to find another way (port) to install OpenSSL 1.0.0 for the builtin PowerShell version._\r\n\r\nThere might be another way to get the `arm64` brew to install the `x86_64` libs but I'm unsure. For now I have both versions installed and luckily they use different directories so they don't impact each other too much. Once the `x86_64` libs were installed and present in `/usr/local/opt/openssl@1.1/lib/*` then PowerShell was able to load the libraries.\r\n\r\n```\r\nPS /Users/jborean> $PSVersionTable\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      7.1.2\r\nPSEdition                      Core\r\nGitCommitId                    7.1.2\r\nOS                             Darwin 20.3.0 Darwin Kernel Version 20.3.0: Thu Jan 21 00:06:51 PST 2021; root:xnu-7195.81.3~1/RELEASE_ARM64_T8101\r\nPlatform                       Unix\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0…}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n\r\nPS /Users/jborean> Get-WSManVersion\r\n\r\nMI        PSRP\r\n--        ----\r\n2.1.0.590 2.1.0.590\r\n```",
    "created_at": "2021-02-15T20:21:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14760#issuecomment-779431532",
    "id": 779431532,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14760",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTQzMTUzMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/779431532/reactions"
    },
    "updated_at": "2021-02-15T20:25:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/779431532",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8462645?v=4",
      "events_url": "https://api.github.com/users/jborean93/events{/privacy}",
      "followers_url": "https://api.github.com/users/jborean93/followers",
      "following_url": "https://api.github.com/users/jborean93/following{/other_user}",
      "gists_url": "https://api.github.com/users/jborean93/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jborean93",
      "id": 8462645,
      "login": "jborean93",
      "node_id": "MDQ6VXNlcjg0NjI2NDU=",
      "organizations_url": "https://api.github.com/users/jborean93/orgs",
      "received_events_url": "https://api.github.com/users/jborean93/received_events",
      "repos_url": "https://api.github.com/users/jborean93/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jborean93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jborean93/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jborean93"
    }
  },
  {
    "author_association": "NONE",
    "body": "@jborean93 and @kai-h - thank you both. A ton of great info here. \r\n\r\n@jborean93 - Were you able to actually get into a remote session? I got as far as you did but once I tried to use `Enter-PSSession` I got the following error on my M1 MacBook Air but opening a PSSession to the same PC from my Windows laptop on PowerShell 5.1 worked.\r\n\r\n`Enter-PSSession: Connecting to remote server PC01 failed with the following error message : MI_RESULT_FAILED For more information, see the about_Remote_Troubleshooting Help topic.`",
    "created_at": "2021-02-18T03:00:43Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14760#issuecomment-781009143",
    "id": 781009143,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14760",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MTAwOTE0Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/781009143/reactions"
    },
    "updated_at": "2021-02-18T03:01:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/781009143",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24985048?v=4",
      "events_url": "https://api.github.com/users/fatherofinvention/events{/privacy}",
      "followers_url": "https://api.github.com/users/fatherofinvention/followers",
      "following_url": "https://api.github.com/users/fatherofinvention/following{/other_user}",
      "gists_url": "https://api.github.com/users/fatherofinvention/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/fatherofinvention",
      "id": 24985048,
      "login": "fatherofinvention",
      "node_id": "MDQ6VXNlcjI0OTg1MDQ4",
      "organizations_url": "https://api.github.com/users/fatherofinvention/orgs",
      "received_events_url": "https://api.github.com/users/fatherofinvention/received_events",
      "repos_url": "https://api.github.com/users/fatherofinvention/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/fatherofinvention/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fatherofinvention/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/fatherofinvention"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "No I didn't actually test it out as I didn't have a Windows host on that same network to check against. macOS is a bit more difficult than the other distro's as it does not support NTLM authentication. You effectively have to make sure that Kerberos is set up and your are dealing with FQDN when connecting to your Windows host. The username format also needs to be in the UPN form `username@REALM.COM` as the Netlogon form won't work. This isn't anything unique to M1 but rather how the macOS NTLM implementation is mostly broken and OMI can't use it without some large restructuring.",
    "created_at": "2021-02-18T03:32:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14760#issuecomment-781023645",
    "id": 781023645,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14760",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MTAyMzY0NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 1,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/781023645/reactions"
    },
    "updated_at": "2021-02-18T03:32:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/781023645",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8462645?v=4",
      "events_url": "https://api.github.com/users/jborean93/events{/privacy}",
      "followers_url": "https://api.github.com/users/jborean93/followers",
      "following_url": "https://api.github.com/users/jborean93/following{/other_user}",
      "gists_url": "https://api.github.com/users/jborean93/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jborean93",
      "id": 8462645,
      "login": "jborean93",
      "node_id": "MDQ6VXNlcjg0NjI2NDU=",
      "organizations_url": "https://api.github.com/users/jborean93/orgs",
      "received_events_url": "https://api.github.com/users/jborean93/received_events",
      "repos_url": "https://api.github.com/users/jborean93/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jborean93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jborean93/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jborean93"
    }
  },
  {
    "author_association": "NONE",
    "body": "Using these details, I was able to successfully establish a remote session to MS365 from an M1 MacBook Pro.\r\nI installed the x86_64 package of PowerShell, installed the native version of MacPorts, and then installed a universal version of OpenSSH 1.0. I created the symlink as detailed above and then could successfully connect to MS365 / Exchange Online (but not using MFA, only legacy auth)",
    "created_at": "2021-02-18T03:36:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14760#issuecomment-781024747",
    "id": 781024747,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14760",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MTAyNDc0Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 1,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/781024747/reactions"
    },
    "updated_at": "2021-02-18T03:36:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/781024747",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/597823?v=4",
      "events_url": "https://api.github.com/users/kai-h/events{/privacy}",
      "followers_url": "https://api.github.com/users/kai-h/followers",
      "following_url": "https://api.github.com/users/kai-h/following{/other_user}",
      "gists_url": "https://api.github.com/users/kai-h/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/kai-h",
      "id": 597823,
      "login": "kai-h",
      "node_id": "MDQ6VXNlcjU5NzgyMw==",
      "organizations_url": "https://api.github.com/users/kai-h/orgs",
      "received_events_url": "https://api.github.com/users/kai-h/received_events",
      "repos_url": "https://api.github.com/users/kai-h/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/kai-h/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kai-h/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/kai-h"
    }
  },
  {
    "author_association": "NONE",
    "body": "@jborean93 - Man... I was just about to thank you and close this out by saying I think we are outside the scope of the original issue and then I tried changing the username in my PSCredential object to the UPN form (username@domain.com) based on your last suggestion and **IT WORKED!** I got connected to a Windows 10 machine running Windows PowerShell 5.1 on my MacBook Air M1 running PowerShell 7.1.2. I am really grateful for the time you took to walk me through this. Here is the command with arguments I used:\r\n\r\n`Enter-PSSession -ComputerName PC01 -Credential username@domain.com`\r\n\r\n![CleanShot 2021-02-17 at 21 56 04@2x](https://user-images.githubusercontent.com/24985048/108303224-228c6e00-716b-11eb-83d4-3143360c62da.jpg)\r\n\r\n@jborean93  and @kai-h **You guys are awesome. Thanks for all of the help!**",
    "created_at": "2021-02-18T04:01:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14760#issuecomment-781032563",
    "id": 781032563,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14760",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MTAzMjU2Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/781032563/reactions"
    },
    "updated_at": "2021-02-18T04:02:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/781032563",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24985048?v=4",
      "events_url": "https://api.github.com/users/fatherofinvention/events{/privacy}",
      "followers_url": "https://api.github.com/users/fatherofinvention/followers",
      "following_url": "https://api.github.com/users/fatherofinvention/following{/other_user}",
      "gists_url": "https://api.github.com/users/fatherofinvention/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/fatherofinvention",
      "id": 24985048,
      "login": "fatherofinvention",
      "node_id": "MDQ6VXNlcjI0OTg1MDQ4",
      "organizations_url": "https://api.github.com/users/fatherofinvention/orgs",
      "received_events_url": "https://api.github.com/users/fatherofinvention/received_events",
      "repos_url": "https://api.github.com/users/fatherofinvention/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/fatherofinvention/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fatherofinvention/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/fatherofinvention"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "You're welcome, glad you got it working in the end. I know I probably spruik this too much but if you use my OMI fork you can rely on implicit credentials like on Windows. Make sure you've gotten your Kerberos ticket with `kinit username@REALM.COM` and then you can just do `Enter-PSSession -ComputerName MyHost` like you do on Windows.",
    "created_at": "2021-02-18T04:35:33Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14760#issuecomment-781043378",
    "id": 781043378,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14760",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MTA0MzM3OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/781043378/reactions"
    },
    "updated_at": "2021-02-18T04:35:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/781043378",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8462645?v=4",
      "events_url": "https://api.github.com/users/jborean93/events{/privacy}",
      "followers_url": "https://api.github.com/users/jborean93/followers",
      "following_url": "https://api.github.com/users/jborean93/following{/other_user}",
      "gists_url": "https://api.github.com/users/jborean93/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jborean93",
      "id": 8462645,
      "login": "jborean93",
      "node_id": "MDQ6VXNlcjg0NjI2NDU=",
      "organizations_url": "https://api.github.com/users/jborean93/orgs",
      "received_events_url": "https://api.github.com/users/jborean93/received_events",
      "repos_url": "https://api.github.com/users/jborean93/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jborean93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jborean93/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jborean93"
    }
  }
]
