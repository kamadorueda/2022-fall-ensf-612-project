[
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 Please open an RFC. I think it will be much easier to manage commenting through that mechanism. ",
    "created_at": "2018-04-05T21:28:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6576#issuecomment-379082445",
    "id": 379082445,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6576",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTA4MjQ0NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379082445/reactions"
    },
    "updated_at": "2018-04-05T21:28:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379082445",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0  Some (ok many) comments. But please proceed with the RFC.\r\n\r\n> The most comprehensive documentation that I'm aware of is this blog post by @KirkMunro.\r\n\r\nPlease open a doc bug for .foreach{} and .where{}.\r\n\r\n> No native PowerShell features that I am aware of are exposed as methods\r\n\r\nMethods **_are_** a native PowerShell feature, supported directly in the language. At one point we had something like\r\n```\r\nInvoke-Member $obj memberName arg1, arg2, arg3\r\n```\r\nbut decided to have native support in the language because we knew we'd never get all the coverage we wanted.\r\n\r\n>Methods belong to a different realm, to which Get-Help about_Methods is the portal (albeit one that, unfortunately, currently doesn't discuss syntax pitfalls and doesn't even reference Get-Help about_Parsing); \r\n\r\nWhat pitfalls and why should it reference about_Parsing?\r\n\r\n> The .Where() and .ForEach() methods were introduced as such for the benefit of DSC \r\n \r\nWhile the proximate cause for adding .where{} and .foreach{} was DSC configuration data, they are general purpose functionality. \r\n\r\n> of necessity, I presume, given that the DSC DSL doesn't allow use of pipelines.\r\n\r\nThis is incorrect.\r\n\r\n> Despite their general availability inside PowerShell itself, they're effectively undocumented, \r\n\r\nAgain, please open a doc bug.\r\n\r\n> and many people may not even be aware of their existence (since tab completion doesn't help, and neither Get-Member nor .psobject.Methods find them, you simply have to know of their existence).\r\n\r\nTab-completion does complete these methods.\r\n```\r\nPS[1] (32) > (1,2,3).F<tab>\r\nPS[1] (32) > (1,2,3).ForEach(\r\n```\r\n>They'd make concise complements to their cmdlet counterparts; -foreach would make the foreach loop unnecessary in many situations and with its use of $_ reduce the existing confusion between the loop and the cmdlet - see #3830:\r\n\r\nI'd actually be concerned about _increasing_ the confusion considering that the user can do either\r\n```\r\nGet-Process -where { $_.CPU -gt 100}\r\n```\r\nor\r\n```\r\nGet-Process |where { $_.CPU -gt 100 }\r\n```\r\nwhich appear to do the same thing but doesn't (quite) and whose notation differs only by a single character. How do you explain that to a novice user?\r\n\r\nFinally, in the last examples, there are unnecessary parens in the `.where{}` case. The corrected example is\r\n```\r\nNode $AllNodes.Where{$_.Role -eq \"WebServer\"}.NodeName \r\n{ ...\r\n```\r\nAnd again your proposed alternative example\r\n```\r\nNode ($AllNodes -where {$_.Role -eq \"WebServer\"}).NodeName\r\n{ ... \r\n```\r\ncan just be written as\r\n```\r\nNode ($AllNodes |where {$_.Role -eq \"WebServer\"}).NodeName\r\n{ ... \r\n```\r\nGiven the only syntactic difference is '|' before `where` instead of '-', I don't see an advantage in _this_ scenario. So - going back to basics, - the scenario that `.where{}` was intended to address was the deep extraction of data using compact expressions with minimal syntactic noise. For example\r\n```\r\n$procs.where{ $_.cpu -gt 100 }.modules.where{ $_.modulename -match \"ntdll\"}.count # zero parens\r\n```\r\nor\r\n```\r\nwrite-output $n.foreach{ $_ * 2 } \r\n```\r\nWriting the first example using `-foreach` would look something like\r\n```\r\n(((gps) -where { $_.cpu -gt 100 }).modules -where{ $_.modulename -match \"ntdll\"}).count\r\n```\r\nThis has a lot of nested parens and that is exactly what we were trying to get away from.\r\n\r\nSo - from an RFC perspective I'd be looking for at least:\r\n\r\n- target audience (novice, advanced, ...)\r\n- compelling scenarios (how this makes PowerShell better e.g. opening up new scenarios, making existing ones more efficient, ...)\r\n- significant examples where these scenarios are addressed (we had this conversation in the committee meeting this week - too few of the RFC's have significant (or any!) examples.)\r\n- risks (?)\r\n- ",
    "created_at": "2018-04-05T22:34:23Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6576#issuecomment-379096772",
    "id": 379096772,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6576",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTA5Njc3Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379096772/reactions"
    },
    "updated_at": "2018-04-05T22:34:23Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379096772",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Tab-completion does complete these methods.\r\n\r\nThanks for clarifying that. I had tried with a _scalar_, where it doesn't work: `$v = 1; $v.f<tab>`\r\n\r\nOn the command line, tab completion decides based on the whether the variable value is array-valued whether to offer the method.\r\n\r\nBy contrast, the VSCode extension isn't smart enough to detect _potentially_ array-valued variables, such as `$v = Get-ChildItem; $v.f<tab>`\r\n\r\nArguably, tab completion of these methods should be offered on both scalars and collections, because they truly are available on both - that would also simplify the logic.\r\n\r\nEither way, these problems are certainly surmountable.",
    "created_at": "2018-04-06T01:57:16Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6576#issuecomment-379126948",
    "id": 379126948,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6576",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTEyNjk0OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379126948/reactions"
    },
    "updated_at": "2018-04-06T01:57:16Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379126948",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> I'd actually be concerned about increasing the confusion considering that the user can do either\r\n> \r\n> Get-Process -where { $_.CPU -gt 100}\r\n> or\r\n> \r\n> Get-Process |where { $_.CPU -gt 100 }\r\n>\r\n> which appear to do the same thing but doesn't (quite) and whose notation differs only by a single \r\n> character. \r\n\r\nMore than 1 character difference: your first example wouldn't work, because you're missing the `(...)` around `Get-Process`:\r\n\r\n```powershell\r\n # Get-Process needs (...) to allow its output to participate in the expression\r\n(Get-Process) -where { $_.CPU -gt 100}  \r\n```\r\n\r\n> How do you explain that to a novice user?\r\n\r\nThe same way you explain the existing difference between `... | foreach { ... }` and `foreach (...) { ... }`:\r\n\r\nIdeally, create a new conceptual help topic that discusses the tradeoffs between those constructs:\r\n\r\n* pipeline syntax: one-by-one as-output-is-produced processing: memory-throttling, but slow\r\n\r\n* operator syntax: up-front output-collecting, then iterating: memory-intensive, but fast\r\n\r\nEven without introducing the proposed operator these tradeoffs are worth documenting with respect to `... | foreach { ... }` vs. `foreach (...) { ... }`.\r\n\r\nThe new `-foreach` operator would have the added advantage of eliminating the confusion around `$_` use in `foreach` loops.\r\n\r\nFrom a syntax perspective, the `-foreach` vs. `... | foreach` dichotomy strikes me as cleaner and easier to explain. (The `foreach` _loop_ will still have its place for more elaborate loops.)\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2018-04-06T02:10:09Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6576#issuecomment-379128762",
    "id": 379128762,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6576",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTEyODc2Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379128762/reactions"
    },
    "updated_at": "2018-04-06T02:10:09Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379128762",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> there are unnecessary parens in the .where{} case.\r\n\r\nYes, you _can_ write `(1, 2).Where{ $_ -gt 1 }` instead of using regular method syntax, `(1, 2).Where({ $_ -gt 1 })`, but the parens-free variant is without precedent in PowerShell and is so unfamiliar that it almost looks like a mistake.\r\n\r\nYou may be tempted to then insert whitespace - `(1, 2).Where { $_ -gt 1 }` only to find that that _breaks_.\r\n\r\nThese _are_ methods, so I would recommend always calling them as such: `(1, 2).Where({ $_ -gt 1 })` is a call to method `Where` with 1 argument that is a script block.\r\n\r\nSimilarly, the tab completion we've discussed expands `(1, 2).f<tab>` to `(1, 2).ForeEach(` - _with_ a parenthesis.",
    "created_at": "2018-04-06T02:17:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6576#issuecomment-379129752",
    "id": 379129752,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6576",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTEyOTc1Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379129752/reactions"
    },
    "updated_at": "2018-04-06T02:17:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379129752",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Re DSC use:\r\n\r\nGood to know that you can use pipelines.\r\n\r\nYes,\r\n\r\n```powershell\r\nNode ($AllNodes -where {$_.Role -eq \"WebServer\"}).NodeName\r\n```\r\n\r\ndoesn't offer much _syntactic_ advantage over:\r\n\r\n```powershell\r\nNode ($AllNodes  |where {$_.Role -eq \"WebServer\"}).NodeName\r\n```\r\n\r\nexcept that once `-foreach` and `-where` are established as general-purpose operators, they are also the logical and more performant choice here, given that `$AllNodes` is a preexisting in-memory collection.",
    "created_at": "2018-04-06T02:21:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6576#issuecomment-379130227",
    "id": 379130227,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6576",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTEzMDIyNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379130227/reactions"
    },
    "updated_at": "2018-04-06T02:21:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379130227",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> deep extraction of data using compact expressions with minimal syntactic noise. For example\r\n> `$procs.where{ $_.cpu -gt 100 }.modules.where{ $_.modulename -match \"ntdll\"}.count # zero parens`\r\n\r\nAgain, I wouldn't drop the method-call parentheses:<sup>[1]</sup>\r\n\r\n\r\n```powershell\r\n$procs.where({ $_.cpu -gt 100 }).modules.where({ $_.modulename -match \"ntdll\"}).count\r\n```\r\n\r\nvs. \r\n\r\n```powershell\r\n(($procs -where { $_.cpu -gt 100 }).modules -where { $_.modulename -match \"ntdll\"}).count\r\n```\r\n\r\nUltimately the same number of parentheses (though the nesting adds complexity), and also whitespace to clarify the structure, and the parentheses only come into play when property / method access is needed as well.\r\n\r\nA fluent API (method chaining) certainly has its charms, but it doesn't strike me as PowerShell-like.\r\nThat said, people who wish to use it still can.\r\n\r\n---\r\n\r\n[1] Let's not forget that both `.ForEach()` and `.Where()` can accept _multiple_ arguments, in which case the parentheses are _mandatory_:  \r\n`(1, 2).ForEach({ $_ + $args[0] }, 1)`\r\n",
    "created_at": "2018-04-06T02:31:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6576#issuecomment-379131488",
    "id": 379131488,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6576",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTEzMTQ4OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379131488/reactions"
    },
    "updated_at": "2018-04-06T19:27:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379131488",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Methods _are_ a native PowerShell feature, supported directly in the language. At one point we had \r\n> something like\r\n> \r\n> `Invoke-Member $obj memberName arg1, arg2, arg3`\r\n> but decided to have native support in the language because we knew we'd never get all the coverage we wanted.\r\n\r\nYes, and the direct access to methods is great.\r\n\r\nBut there is a difference between _enabling_ direct access to features _from a different realm_ (.NET) and PowerShell's _own_ of surfacing functionality (commands and operators).\r\n\r\nAn example would be PowerShell's `-split` operator as a (superior) analog to `String.Split()` - yes, you  _can_ call the latter, but why would you? There's the familiar syntax of a PowerShell operator, the implicit conversion of the LHS to string, the support for regexes, ...\r\n\r\nSimilarly, `.Where()` and `.ForEach()` - as unique PowerShell features that act _like_ operators - _should_ be operators.\r\n",
    "created_at": "2018-04-06T02:44:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6576#issuecomment-379133219",
    "id": 379133219,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6576",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTEzMzIxOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379133219/reactions"
    },
    "updated_at": "2018-04-06T02:44:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379133219",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> What pitfalls and why should it reference about_Parsing?\r\n\r\nMethods calls are like command/function calls at a certain level of abstraction, so users can get confused between the distinct syntax requirements:\r\n\r\nFrom the perspective of a shell user mostly familiar with command syntax (argument mode), the tricky differences are:\r\n\r\n* parentheses are required (vs. whitespace in argument mode)\r\n* arguments must be `,`-separated (vs. whitespace in argument mode, where `,` constructs arrays)\r\n* bareword arguments (unquoted strings) aren't allowed\r\n\r\nConversely, for someone coming from the developer world, calling your own helper functions such as `function foo ($bar, $baz) { ... }` as `foo('one', 'two')` is a real temptation, with a rude awakening.",
    "created_at": "2018-04-06T02:52:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6576#issuecomment-379134260",
    "id": 379134260,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6576",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTEzNDI2MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379134260/reactions"
    },
    "updated_at": "2018-04-06T02:52:50Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379134260",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I think this is likely to be a good idea, even if only to reduce the syntactic irregularities that `.ForEach({})` and `.Where({})` introduce. Additionally, if `-foreach` were to be implemented, I would further recommend that `| foreach {}` be *removed* as an alias for `ForEach-Object`. \r\n\r\nThe presence of `| foreach {}` alongside `foreach($obj in $col) {}` is the source of a lot of confusion for beginners, and even some more advanced users who aren't aware of the `| foreach {}` alias.\r\n\r\nThe alternative `-foreach {}` is a significantly simpler syntax, but I must wonder if the intent is to *replace* `.ForEach({})` then we must have some way of supporting the multiple parameters of `.ForEach({})` with the operator, and from what I've seen I don't think any operators typically extend beyond unary or binary -- having support for something like `$collection -foreach {} {} {}` would be very unusual indeed, and potentially be quite syntactically confusing.\r\n\r\nI'd think it might be best to have `-foreach` only support the one script block argument.",
    "created_at": "2018-04-06T15:39:33Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6576#issuecomment-379292425",
    "id": 379292425,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6576",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTI5MjQyNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379292425/reactions"
    },
    "updated_at": "2018-04-06T15:39:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379292425",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@vexx32:\r\n\r\n> I would further recommend that | foreach {} be removed as an alias for ForEach-Object\r\n\r\nWhile this would be great if we still had the chance, I think doing so now would result in a riot, understandably so.\r\n\r\n>  must wonder if the intent is to replace .ForEach({})\r\n\r\nSimilarly, backward-compatibility concerns alone would prevent that, but fortunately there is no problem with retaining them - more C#-/developer-minded users may still prefer them.\r\n\r\n>  I don't think any operators typically extend beyond unary or binary \r\n\r\nThey do, even though it isn't common (e.g., `-split`, `-replace`).\r\nI do think we should strive for supporting all arguments, although we'd certainly have to look at the specifics.\r\n\r\nFor instance, here's the [`-split` operator](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_split?view=powershell-6)'s syntax diagram (one of its binary forms):\r\n\r\n     <String> -Split <Delimiter>[,<Max-substrings>[,\"<Options>\"]]\r\n\r\n\r\n",
    "created_at": "2018-04-06T19:21:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6576#issuecomment-379352207",
    "id": 379352207,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6576",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTM1MjIwNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379352207/reactions"
    },
    "updated_at": "2018-04-06T19:21:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379352207",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Those are still binary operators, though; their second operand is simply an array with optional elements.\r\n\r\nWhat I was thinking about is how `ForEach-Object` takes input like this: `$array | ForEach-Object {\"Begin\"} {\"Process\"} {\"End\"}` -- which it does by having them assigned to separate parameters. I suppose a similar thing could be done with a `-foreach {'begin'},{'process'},{'end'}` but personally I prefer to avoid overcomplicating the syntax. Some of PS's best stuff is in its clarity, and this would... not be super clear, I feel.",
    "created_at": "2018-04-06T22:43:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6576#issuecomment-379403689",
    "id": 379403689,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6576",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTQwMzY4OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379403689/reactions"
    },
    "updated_at": "2018-04-06T22:43:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379403689",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@vexx32: \r\n\r\n> Those are still binary operators, though; their second operand is simply an array with optional elements.\r\n\r\nAbsolutely.\r\n\r\n> What I was thinking about is how ForEach-Object takes input like this: $array | ForEach-Object {\"Begin\"} {\"Process\"} {\"End\"}\r\n\r\nThis mostly makes sense in a _pipeline_ context - I agree that it's not needed in an _operator_ context, which would allow us to focus on using the array elements to provide the optional `.Where()` and `.ForEach()` arguments.\r\n",
    "created_at": "2018-04-06T22:52:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6576#issuecomment-379405026",
    "id": 379405026,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6576",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTQwNTAyNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379405026/reactions"
    },
    "updated_at": "2018-04-06T22:55:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379405026",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@BrucePay: I've created the following docs issues:\r\n\r\n* https://github.com/PowerShell/PowerShell-Docs/issues/2307\r\n* https://github.com/PowerShell/PowerShell-Docs/issues/2308\r\n\r\nOn a meta note: I've griped about the state of PowerShell's documentation before, but it truly is disheartening whenever I take a closer look. Let's hope that will change for the better with help from the community.\r\n\r\nI will create an RFC soonish.\r\n\r\n",
    "created_at": "2018-04-08T16:44:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6576#issuecomment-379564142",
    "id": 379564142,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6576",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTU2NDE0Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379564142/reactions"
    },
    "updated_at": "2018-04-08T16:44:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379564142",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@BrucePay: The RFC draft is at https://github.com/PowerShell/PowerShell-RFC/pull/126.\r\nClosing this.",
    "created_at": "2018-04-08T19:28:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6576#issuecomment-379575727",
    "id": 379575727,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6576",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTU3NTcyNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379575727/reactions"
    },
    "updated_at": "2018-04-08T19:28:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/379575727",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
