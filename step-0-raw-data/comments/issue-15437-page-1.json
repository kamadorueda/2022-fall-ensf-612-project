[
  {
    "author_association": "COLLABORATOR",
    "body": "I've also been missing this for a long time!",
    "created_at": "2021-05-22T15:19:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15437#issuecomment-846422792",
    "id": 846422792,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15437",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NjQyMjc5Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846422792/reactions"
    },
    "updated_at": "2021-05-22T15:19:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846422792",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3505151?v=4",
      "events_url": "https://api.github.com/users/powercode/events{/privacy}",
      "followers_url": "https://api.github.com/users/powercode/followers",
      "following_url": "https://api.github.com/users/powercode/following{/other_user}",
      "gists_url": "https://api.github.com/users/powercode/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/powercode",
      "id": 3505151,
      "login": "powercode",
      "node_id": "MDQ6VXNlcjM1MDUxNTE=",
      "organizations_url": "https://api.github.com/users/powercode/orgs",
      "received_events_url": "https://api.github.com/users/powercode/received_events",
      "repos_url": "https://api.github.com/users/powercode/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/powercode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/powercode/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/powercode"
    }
  },
  {
    "author_association": "NONE",
    "body": "I suspect changing the parameters for the completeArgument() method may turn out to be a non starter. \r\n\r\nThere's a pattern of filter or where clause that allows us to specify `\"Name = $Procname and (memory >y or starttime < 'z')` \r\nThis gets quite nasty, because your completer needs to figure out brackets, variables whatever else is inside the \"\"\r\n\r\nBut usually we only want the filter to be something like `-Where <<one-fieldname>> -eq <<one-value>>`  - So it might make more sense to implement a proxy function with `where` and  `eq/ne/gt/lt/like` etc parameters and use the existing style of completer for the values for `where`.    It means the syntax is very like `where-0bject`   \r\nI have a getSQL module and it will allow \r\n`get-sql \"Select * from sales where customer = 42 and value > 100\"`    \r\nor  \r\n`get-sql  -table sales \" where  customer = 42 and value > 100\"`    \r\nor \r\n`get-sql  -table sales  -where  customer -eq 42`  \r\n\r\nThe table name table completes and once we have the table name the fields in `where`  also tab complete\r\n \r\n\r\n   \r\n\r\n",
    "created_at": "2021-05-22T22:24:35Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15437#issuecomment-846470866",
    "id": 846470866,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15437",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NjQ3MDg2Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846470866/reactions"
    },
    "updated_at": "2021-05-22T22:26:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846470866",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16209593?v=4",
      "events_url": "https://api.github.com/users/jhoneill/events{/privacy}",
      "followers_url": "https://api.github.com/users/jhoneill/followers",
      "following_url": "https://api.github.com/users/jhoneill/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhoneill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jhoneill",
      "id": 16209593,
      "login": "jhoneill",
      "node_id": "MDQ6VXNlcjE2MjA5NTkz",
      "organizations_url": "https://api.github.com/users/jhoneill/orgs",
      "received_events_url": "https://api.github.com/users/jhoneill/received_events",
      "repos_url": "https://api.github.com/users/jhoneill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jhoneill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhoneill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jhoneill"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "A simple argument completer is better than nothing at all and knowing the position of the cursor will allow you to write a pretty decent completer for a WMI filter with very little effort.\r\n\r\nThe filter was also just an idea of where it could be useful, I'm sure there are other examples where knowing the position of the cursor would be useful for completions.",
    "created_at": "2021-05-23T01:41:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15437#issuecomment-846487702",
    "id": 846487702,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15437",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NjQ4NzcwMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846487702/reactions"
    },
    "updated_at": "2021-05-23T01:41:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846487702",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/42123497?v=4",
      "events_url": "https://api.github.com/users/MartinGC94/events{/privacy}",
      "followers_url": "https://api.github.com/users/MartinGC94/followers",
      "following_url": "https://api.github.com/users/MartinGC94/following{/other_user}",
      "gists_url": "https://api.github.com/users/MartinGC94/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/MartinGC94",
      "id": 42123497,
      "login": "MartinGC94",
      "node_id": "MDQ6VXNlcjQyMTIzNDk3",
      "organizations_url": "https://api.github.com/users/MartinGC94/orgs",
      "received_events_url": "https://api.github.com/users/MartinGC94/received_events",
      "repos_url": "https://api.github.com/users/MartinGC94/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/MartinGC94/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MartinGC94/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/MartinGC94"
    }
  },
  {
    "author_association": "NONE",
    "body": "If this had been anticipated a long time ago, it would be useful to have. Having written quite a lot of completers in my time (initially promoting  @lzybkr 's TabExpansion++ for PowerShell 3 and more recently with PowerShell and C# classes) I haven't needed it and it's very easy to fall into the trap of \"I don't so no-one does\".  \r\nHowever the complete operation is a method which takes a set of parameters - you can't just call it with a couple of extra ones, so a way to work round the problem is needed. \r\n\r\nAnything which has a string parameter which breaks into multiple parts could  benefit - where clauses or whole queries being the obvious case.  Staying with CIM/WMI we can have a WQL query for example    \r\n`Get-CimInstance -Query \"select name,processID from win32_process where name like 'pwsh%' \" `    \r\n\r\nBut it isn't trivial to write a something which sees `\"Select  From [tab]\"` \r\nAnd offers me `\"Select  From {classes}\"` and then lets me go back and do   `\"Select [tab]  From win32_process \"`   \r\n and gives me `\"Select {cim class properties}  From win32_process \"`     \r\n(Full on SQL gets even more complicated). \r\n \r\nNow, as you say, simple is better than nothing because most cases **are** simple.  Most of the time we don't write a full WQL statement we just write a simple `where` clause which gets built into one.  \r\n```\r\nGet-CimInstance -Filter  \" (name like 'pwsh%') or (name like 'powershell') \"  -ClassName win32_process -Verbose\r\nVERBOSE: Perform operation 'Query CimInstances' with following parameters, '\r\n'queryDialect' = WQL,\r\n'queryExpression' = SELECT * FROM win32_process WHERE  (name like 'pwsh%') or (name like 'powershell') ,\r\n'namespaceName' = root\\cimv2'.\r\n```\r\n\r\nSo I come back to saying \"Let the command assemble the string from multiple parameters\". So for SQL I have table, select, where, sort which are easy to write completers for. (select, where and sort all use the same one).  I have -EQ, -NE etc which get converted to SQL operators. \r\n\r\nI'd have dynamic parameters `-Where` appears if `classname` is present `-eq` , `-like` etc appear if where is present.  I'd create a template proxy function (automatic) from Get-CimInstance and drop the parameters in   A completer for where produces the fields for the class name (and namespace if present) without needing to worry about the cursor position,; operators being parameter names don't need a completer. Then it's a switch statement to change `-eq  value`  to `= 'value'`  and a string join or two and job done. \r\n\r\nI might write this up as a blog post and share it as gist  \r\n\r\n \r\n",
    "created_at": "2021-05-23T10:02:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15437#issuecomment-846536685",
    "id": 846536685,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15437",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NjUzNjY4NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846536685/reactions"
    },
    "updated_at": "2021-05-23T10:02:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846536685",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16209593?v=4",
      "events_url": "https://api.github.com/users/jhoneill/events{/privacy}",
      "followers_url": "https://api.github.com/users/jhoneill/followers",
      "following_url": "https://api.github.com/users/jhoneill/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhoneill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jhoneill",
      "id": 16209593,
      "login": "jhoneill",
      "node_id": "MDQ6VXNlcjE2MjA5NTkz",
      "organizations_url": "https://api.github.com/users/jhoneill/orgs",
      "received_events_url": "https://api.github.com/users/jhoneill/received_events",
      "repos_url": "https://api.github.com/users/jhoneill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jhoneill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhoneill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jhoneill"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I'm a little confused about what your point is. First you say it would have been useful if it was added sooner and right after you say you haven't felt a need for it after writing a ton of argument completers.\r\n\r\nI like the idea of building queries dynamically but I don't think that means people shouldn't have the option of creating their own argument completers that use the cursor position because queries aren't the only place where this would be useful, an argument completer for a hashtable would benefit as well.\r\n\r\nAdding this feature is simple, it's just a matter of adding the cursor position to the list of arguments given to the argument completer: https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/CommandCompletion/CompletionCompleters.cs#L2434 the harder part is setting the replacementIndex/Length from PS I haven't really looked into that.\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/aad0ad80-cdec-11ea-8248-a37bc0571bfd\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
    "created_at": "2021-05-23T11:23:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15437#issuecomment-846546877",
    "id": 846546877,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15437",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NjU0Njg3Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846546877/reactions"
    },
    "updated_at": "2021-05-23T11:24:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846546877",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/42123497?v=4",
      "events_url": "https://api.github.com/users/MartinGC94/events{/privacy}",
      "followers_url": "https://api.github.com/users/MartinGC94/followers",
      "following_url": "https://api.github.com/users/MartinGC94/following{/other_user}",
      "gists_url": "https://api.github.com/users/MartinGC94/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/MartinGC94",
      "id": 42123497,
      "login": "MartinGC94",
      "node_id": "MDQ6VXNlcjQyMTIzNDk3",
      "organizations_url": "https://api.github.com/users/MartinGC94/orgs",
      "received_events_url": "https://api.github.com/users/MartinGC94/received_events",
      "repos_url": "https://api.github.com/users/MartinGC94/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/MartinGC94/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MartinGC94/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/MartinGC94"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "It's not as simple as just adding a parameter there; adding a new mandatory parameter to that method will break existing code, most likely.\r\n\r\nHowever, adding a new overload that can be used might be a workable solution, though I'm unsure exactly how that would be used from the PS side of adding argument completers and whether additional handling may be needed to ensure the new overload is picked for scriptblocks that support enough parameters.",
    "created_at": "2021-05-23T13:50:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15437#issuecomment-846566417",
    "id": 846566417,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15437",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NjU2NjQxNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846566417/reactions"
    },
    "updated_at": "2021-05-23T13:50:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846566417",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "If it had been included at the start we would, no doubt, have found places to use it.\r\nBut it wasn't. Working with what was there has been OK, I've produced all those completers and never thought \"What  I need to be doing is building string parameters\". \r\n\r\nYou can't \"just add the cursor position\"\r\nHere's an example of a completer \r\n```PowerShell\r\nfunction ListFonts {\r\n    [CmdletBinding()]\r\n    [Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"PSAvoidUsingEmptyCatchBlock\", \"\")]\r\n    param($commandName, $parameterName, $wordToComplete, $commandAst, $fakeBoundParameter)\r\n    if (-not $script:FontFamilies) {\r\n        $script:FontFamilies = @(\"\",\"\")\r\n        try {\r\n            $script:FontFamilies = (New-Object System.Drawing.Text.InstalledFontCollection).Families.Name\r\n        }\r\n        catch {}\r\n    }\r\n    $script:FontFamilies.where({$_ -Gt \"\" -and $_ -like \"$wordToComplete*\"} ) | ForEach-Object {\r\n        New-Object -TypeName System.Management.Automation.CompletionResult -ArgumentList \"'$_'\" , $_ ,\r\n        ([System.Management.Automation.CompletionResultType]::ParameterValue) , $_\r\n    }\r\n}\r\n\r\nRegister-ArgumentCompleter -CommandName New-ExcelStyle  -ParameterName FontName -ScriptBlock $Function:ListFonts\r\n```\r\n\r\n```\r\nlistFonts  \"\" \"\"  \"ar\" $null $null 7            \r\nListFonts: A positional parameter cannot be found that accepts argument '7'.`\r\n```\r\n\r\nOr here's one using a c# class I wrote \r\n```powerShell\r\n $c = [vsteam_lib.ProjectCompleter]::new()\r\n$c.CompleteArgument(\"\",\"\",\"\", $null, $null, 7)\r\nMethodException: Cannot find an overload for \"CompleteArgument\" and the argument count: \"6\".\r\n```\r\n\r\nHow to use pre-existing argument completers. There are thousands of them \r\n\r\n> I don't think that means people shouldn't have the option  ...\r\n\r\nThat's where I said it would have been good if this had been designed in at the time of PowerShell 2 or 3. But retro fitting it now is a problem which is probably bigger than benefit. \r\n\r\nThere is a whole class of problems which the query / query-clause exemplifies where we say here is compound parameter expressed as another data type you could have \r\n```\r\n@{ fieldname = 'ProcessName' ; operator = 'equals' ; value = 'pwsh.exe'}\r\n```\r\nOr write it as text in JSON, CSV, XML or \"code\" format  - you can freely translate although \"code\" needs parsing and the more complex the string the more awkward it gets to code it all in one monolithic piece.  Helping the user with the code still requires them to know something about the underlying API - for example a rest API might use `EQ` and `NE` instead of `=` or `<>` , which in other places might be `==` and `!=` it needs them to that here CIM/WMI use sql-like syntax and % is the wildcard not *.  \r\n\r\nThe compound parameter is sometimes  unavoidable to keep from a stupid number of parameters e.g. I have     \r\n`New-GraphUser ...  -Fields `  and fields is a hash table because I don't want parameters for every Azure AD field (and it's easier to send to the underlying API if everything is a hash).  \r\n \r\nBut suppose for a simple case the hash table above we could splat it into the function. What we really want is something which says `get-ciminstance win32_process -where processname -like pwsh*`  don't we?  \r\nSomething inside should figure out  that WQL means the * has to be changed to a % and so on. Sometimes we want to need or prefer to use a complex filter which we'll write by hand. But if we jump between functions which call LDAP,  SQL, REST - and sometimes different ways of expressing what we want in two SQL or REST implementations.  I wouldn't say that string helpers are bad - though they may need to be inside psreadline rather than argument completion per-se.    ",
    "created_at": "2021-05-23T13:52:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15437#issuecomment-846566709",
    "id": 846566709,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15437",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NjU2NjcwOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846566709/reactions"
    },
    "updated_at": "2021-05-23T13:53:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846566709",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16209593?v=4",
      "events_url": "https://api.github.com/users/jhoneill/events{/privacy}",
      "followers_url": "https://api.github.com/users/jhoneill/followers",
      "following_url": "https://api.github.com/users/jhoneill/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhoneill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jhoneill",
      "id": 16209593,
      "login": "jhoneill",
      "node_id": "MDQ6VXNlcjE2MjA5NTkz",
      "organizations_url": "https://api.github.com/users/jhoneill/orgs",
      "received_events_url": "https://api.github.com/users/jhoneill/received_events",
      "repos_url": "https://api.github.com/users/jhoneill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jhoneill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhoneill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jhoneill"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Look closer at the code I linked, it's not a method it's just an object array.  \r\nExisting argument completers that use a param block shouldn't be affected because the new parameter will simply not be bound to any of their parameters. The only way I can see this affecting existing argument completers is if they use $args instead of a param block to access the parameters and even that would only be a problem if they count backwards for some reason `$fakeBoundParameters = $args[-1]` or iterate over them.",
    "created_at": "2021-05-23T15:05:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15437#issuecomment-846577511",
    "id": 846577511,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15437",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NjU3NzUxMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846577511/reactions"
    },
    "updated_at": "2021-05-23T15:05:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846577511",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/42123497?v=4",
      "events_url": "https://api.github.com/users/MartinGC94/events{/privacy}",
      "followers_url": "https://api.github.com/users/MartinGC94/followers",
      "following_url": "https://api.github.com/users/MartinGC94/following{/other_user}",
      "gists_url": "https://api.github.com/users/MartinGC94/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/MartinGC94",
      "id": 42123497,
      "login": "MartinGC94",
      "node_id": "MDQ6VXNlcjQyMTIzNDk3",
      "organizations_url": "https://api.github.com/users/MartinGC94/orgs",
      "received_events_url": "https://api.github.com/users/MartinGC94/received_events",
      "repos_url": "https://api.github.com/users/MartinGC94/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/MartinGC94/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MartinGC94/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/MartinGC94"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I'm happy to be proven wrong, but as far as I recall, additional parameters don't get _dropped_ so much as squashed in if you're naming the parameters. For example, currently if you declare a param block with:\r\n\r\n```powershell\r\nparam($Command, $Parameter, $WordToComplete, $CommandAst, $FakeBoundParams)\r\n```\r\n\r\nCurrently, this would work just fine for an argument completer scriptblock. If that invocation is changed and an additional argument _added_, then I think the last declared parameter would end up with _multiple_ things in it rather than just the one that's expected.\r\n\r\nSo it's got a decent possibility to break something here, imo.",
    "created_at": "2021-05-23T15:43:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15437#issuecomment-846582959",
    "id": 846582959,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15437",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NjU4Mjk1OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846582959/reactions"
    },
    "updated_at": "2021-05-23T15:43:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846582959",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "It works like I described before and this can easily be demonstrated with this snippet:\r\n```\r\nRegister-ArgumentCompleter -CommandName Get-ChildItem -ParameterName Path -ScriptBlock {\r\n    param($commandName)\r\n    $Global:CompletionDemo = $commandName\r\n}\r\n```\r\nTry to tab complete a value for the Path parameter for Get-ChildItem and check the variable $CompletionDemo it will only contain the command name (in this case Get-ChildItem).\r\n\r\nIf you can build PS locally you can try to change the line I linked to earlier to this: `new object[] { commandName, parameterName, wordToComplete, commandAst, GetBoundArgumentsAsHashtable(context), context.CursorPosition },` and see that it works perfectly fine.",
    "created_at": "2021-05-23T16:25:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15437#issuecomment-846589268",
    "id": 846589268,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15437",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NjU4OTI2OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846589268/reactions"
    },
    "updated_at": "2021-05-23T16:25:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846589268",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/42123497?v=4",
      "events_url": "https://api.github.com/users/MartinGC94/events{/privacy}",
      "followers_url": "https://api.github.com/users/MartinGC94/followers",
      "following_url": "https://api.github.com/users/MartinGC94/following{/other_user}",
      "gists_url": "https://api.github.com/users/MartinGC94/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/MartinGC94",
      "id": 42123497,
      "login": "MartinGC94",
      "node_id": "MDQ6VXNlcjQyMTIzNDk3",
      "organizations_url": "https://api.github.com/users/MartinGC94/orgs",
      "received_events_url": "https://api.github.com/users/MartinGC94/received_events",
      "repos_url": "https://api.github.com/users/MartinGC94/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/MartinGC94/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MartinGC94/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/MartinGC94"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Oh, good. Thanks for the clear illustration!\r\n\r\nI'm still not sure about the C# side of things and non-scriptblock argument completers. Currently you have to implement a specific interface method ([example](https://github.com/vexx32/PSWordCloud/blob/main/Module/src/PSWordCloud/Completers/FontFamilyCompleter.cs)).\r\n\r\nIdeally we'd make this available to C# completers as well, but I'm not sure the best path to follow for that. Just an extra overload to implement? Someone with more experience in how this system works would probably need to take a look and see if there's something else that needs done to make it work beyond just adding an overload that can be implemented, without breaking anything that already uses that interface.\r\n\r\nI suppose default interface implementations might be able to do some of the work here. Not sure.",
    "created_at": "2021-05-23T16:32:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15437#issuecomment-846590170",
    "id": 846590170,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15437",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NjU5MDE3MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846590170/reactions"
    },
    "updated_at": "2021-05-23T16:33:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/846590170",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I think we would need to add a new interface `IArgumentCompeleter2` with the required methods.\r\n\r\nThe engine would first check for the new interface and fall back to the old.",
    "created_at": "2021-05-25T21:19:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15437#issuecomment-848272064",
    "id": 848272064,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15437",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0ODI3MjA2NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/848272064/reactions"
    },
    "updated_at": "2021-05-25T21:19:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/848272064",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3505151?v=4",
      "events_url": "https://api.github.com/users/powercode/events{/privacy}",
      "followers_url": "https://api.github.com/users/powercode/followers",
      "following_url": "https://api.github.com/users/powercode/following{/other_user}",
      "gists_url": "https://api.github.com/users/powercode/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/powercode",
      "id": 3505151,
      "login": "powercode",
      "node_id": "MDQ6VXNlcjM1MDUxNTE=",
      "organizations_url": "https://api.github.com/users/powercode/orgs",
      "received_events_url": "https://api.github.com/users/powercode/received_events",
      "repos_url": "https://api.github.com/users/powercode/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/powercode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/powercode/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/powercode"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "DIM would also work, but would be much harder to polyfill when targeting netstandard2.0.  `IArgumentCompleter2` is probably the way to go.",
    "created_at": "2021-05-26T11:50:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15437#issuecomment-848704044",
    "id": 848704044,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15437",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0ODcwNDA0NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/848704044/reactions"
    },
    "updated_at": "2021-05-26T11:50:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/848704044",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "> It works like I described before and this can easily be demonstrated with this snippet:\r\n> \r\n> ```\r\n> Register-ArgumentCompleter -CommandName Get-ChildItem -ParameterName Path -ScriptBlock {\r\n>     param($commandName)\r\n>     $Global:CompletionDemo = $commandName\r\n> }\r\n> ```\r\n\r\nI think that example is fine because script block doesn't have cmdletBinding  specified. That's not always the case  Here's one which I think would break in the importExcel module (most popular version has 250K downloads) \r\n```powershell\r\nfunction ListFonts {\r\n    [CmdletBinding()]\r\n    [Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"PSAvoidUsingEmptyCatchBlock\", \"\")]\r\n    param($commandName, $parameterName, $wordToComplete, $commandAst, $fakeBoundParameter)\r\n    if (-not $script:FontFamilies) {\r\n        $script:FontFamilies = @(\"\",\"\")\r\n        try   {$script:FontFamilies = (New-Object System.Drawing.Text.InstalledFontCollection).Families.Name}\r\n        catch {}\r\n    }\r\n    $script:FontFamilies.where({$_ -Gt \"\" -and $_ -like \"$wordToComplete*\"} ) | ForEach-Object {\r\n        New-Object -TypeName CompletionResult -ArgumentList \"'$_'\" , $_ , ([CompletionResultType]::ParameterValue) , $_\r\n    }\r\n}\r\nRegister-ArgumentCompleter -CommandName New-ExcelStyle  -ParameterName FontName -ScriptBlock $Function:ListFonts\r\nRegister-ArgumentCompleter -CommandName Set-ExcelColumn -ParameterName FontName -ScriptBlock $Function:ListFonts\r\nRegister-ArgumentCompleter -CommandName Set-ExcelRange  -ParameterName FontName -ScriptBlock $Function:ListFonts\r\nRegister-ArgumentCompleter -CommandName Set-ExcelRow    -ParameterName FontName -ScriptBlock $Function:ListFonts\r\n```\r\nIf the completer is a class then calling the method with an extra parameter will fail, - @SeeminglyScience 's suggestion seems to work around that.  It would need something similar to say explicitly \"this script block can take additional parameters\".   \r\n\r\n",
    "created_at": "2021-06-03T11:04:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15437#issuecomment-853784922",
    "id": 853784922,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15437",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1Mzc4NDkyMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/853784922/reactions"
    },
    "updated_at": "2021-06-03T11:04:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/853784922",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16209593?v=4",
      "events_url": "https://api.github.com/users/jhoneill/events{/privacy}",
      "followers_url": "https://api.github.com/users/jhoneill/followers",
      "following_url": "https://api.github.com/users/jhoneill/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhoneill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jhoneill",
      "id": 16209593,
      "login": "jhoneill",
      "node_id": "MDQ6VXNlcjE2MjA5NTkz",
      "organizations_url": "https://api.github.com/users/jhoneill/orgs",
      "received_events_url": "https://api.github.com/users/jhoneill/received_events",
      "repos_url": "https://api.github.com/users/jhoneill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jhoneill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhoneill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jhoneill"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> I think that example is fine because script block doesn't have cmdletBinding specified.\r\n\r\nWith the way that the scriptblock is called (`ScriptBlock.Invoke`), `CmdletBinding` is ignored.  Shouldn't be an issue.",
    "created_at": "2021-06-03T12:13:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15437#issuecomment-853822526",
    "id": 853822526,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15437",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MzgyMjUyNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/853822526/reactions"
    },
    "updated_at": "2021-06-03T12:13:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/853822526",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "This is very interesting and we see the value of this work.  We would be happy to review a PR from the community.",
    "created_at": "2022-01-20T21:19:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15437#issuecomment-1017937038",
    "id": 1017937038,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15437",
    "node_id": "IC_kwDOAvT7bc48rHyO",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1017937038/reactions"
    },
    "updated_at": "2022-01-20T21:19:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1017937038",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/12662278?v=4",
      "events_url": "https://api.github.com/users/theJasonHelmick/events{/privacy}",
      "followers_url": "https://api.github.com/users/theJasonHelmick/followers",
      "following_url": "https://api.github.com/users/theJasonHelmick/following{/other_user}",
      "gists_url": "https://api.github.com/users/theJasonHelmick/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/theJasonHelmick",
      "id": 12662278,
      "login": "theJasonHelmick",
      "node_id": "MDQ6VXNlcjEyNjYyMjc4",
      "organizations_url": "https://api.github.com/users/theJasonHelmick/orgs",
      "received_events_url": "https://api.github.com/users/theJasonHelmick/received_events",
      "repos_url": "https://api.github.com/users/theJasonHelmick/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/theJasonHelmick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theJasonHelmick/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/theJasonHelmick"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Draft PR here for discussion: #17358",
    "created_at": "2022-05-17T10:10:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15437#issuecomment-1128680436",
    "id": 1128680436,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15437",
    "node_id": "IC_kwDOAvT7bc5DRkv0",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1128680436/reactions"
    },
    "updated_at": "2022-05-17T10:10:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1128680436",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3505151?v=4",
      "events_url": "https://api.github.com/users/powercode/events{/privacy}",
      "followers_url": "https://api.github.com/users/powercode/followers",
      "following_url": "https://api.github.com/users/powercode/following{/other_user}",
      "gists_url": "https://api.github.com/users/powercode/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/powercode",
      "id": 3505151,
      "login": "powercode",
      "node_id": "MDQ6VXNlcjM1MDUxNTE=",
      "organizations_url": "https://api.github.com/users/powercode/orgs",
      "received_events_url": "https://api.github.com/users/powercode/received_events",
      "repos_url": "https://api.github.com/users/powercode/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/powercode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/powercode/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/powercode"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I have not yet considered how it should be exposed to scripts",
    "created_at": "2022-05-17T10:11:29Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15437#issuecomment-1128681121",
    "id": 1128681121,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15437",
    "node_id": "IC_kwDOAvT7bc5DRk6h",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1128681121/reactions"
    },
    "updated_at": "2022-05-17T10:11:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1128681121",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3505151?v=4",
      "events_url": "https://api.github.com/users/powercode/events{/privacy}",
      "followers_url": "https://api.github.com/users/powercode/followers",
      "following_url": "https://api.github.com/users/powercode/following{/other_user}",
      "gists_url": "https://api.github.com/users/powercode/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/powercode",
      "id": 3505151,
      "login": "powercode",
      "node_id": "MDQ6VXNlcjM1MDUxNTE=",
      "organizations_url": "https://api.github.com/users/powercode/orgs",
      "received_events_url": "https://api.github.com/users/powercode/received_events",
      "repos_url": "https://api.github.com/users/powercode/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/powercode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/powercode/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/powercode"
    }
  }
]
