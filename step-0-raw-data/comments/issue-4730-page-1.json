[
  {
    "author_association": "CONTRIBUTOR",
    "body": "That would make a nice addition to PowerShell's elastic syntax for interactive use.\r\n\r\nTo state the perhaps obvious, PSScriptAnalyzer would have to add a rule to warn of such use in _scripts_.\r\n\r\nI don't think explicit single-letter overloads are a good idea, however, as they would effectively close the door on introducing new operators that start with the same letter.\r\n(It doesn't _technically_ prevent them, but I think it would invite too much confusion.)\r\n\r\n",
    "created_at": "2017-09-01T15:14:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4730#issuecomment-326607125",
    "id": 326607125,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4730",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjYwNzEyNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326607125/reactions"
    },
    "updated_at": "2017-09-01T15:14:12Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326607125",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I disagree.  Primarily for the reason @mklement0 states:\r\n\r\n> they would effectively close the door on introducing new operators that start with the same letter(s)\r\n\r\nPlus it would make PS script that much harder to read IMO.  Yeah, you could add a rule PSSA but you can't make folks use PSSA or enforce that rule.  Modern console and editors provide auto-completion so typing `-r` and pressing <kbd>tab</kbd>` eases the typing load.",
    "created_at": "2017-09-01T15:44:04Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4730#issuecomment-326614596",
    "id": 326614596,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4730",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjYxNDU5Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326614596/reactions"
    },
    "updated_at": "2017-09-01T15:44:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326614596",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@rkeithhill:\r\n\r\nI get the concern about readability, but the end of the elasticity spectrum we're talking about here is _throwaway_ code that you can _type as quickly as possible_, for one-off _command-line_ use.\r\n\r\n@HumanEquivalentUnit's suggestion is simply about implementing the existing elastic syntax more comprehensively; to extend it from not just applying to _parameters_ to _operators_ too.\r\n\r\nThe down-sides of PS elastic syntax are _invariably_:\r\n\r\n* poor readability \r\n* lack of long-term stability (if future parameters / operators are introduced that make previously unique prefixes ambiguous)\r\n\r\nHowever, in the proper context (as described), elastic syntax is a useful feature that enables:\r\n\r\n* quick, _interruption-free_ typing\r\n* concision\r\n\r\nTab-completion, as helpful and invaluable as it is in general, gets in the way of both these features.\r\n\r\nIf we agree that elastic syntax is a worthwhile feature, the challenge to focus on is to reconcile its use with _non_-throwaway (maintainable) uses and to how to best manage and facilitate the _transition_ from throwaway to maintainable code.\r\n\r\nThe trouble spots are:\r\n\r\n* How do we translate existing throw-away code into maintainable code:\r\n\r\n  * The great VSCode PowerShell extension (that you're a maintainer of) already offers a great feature that expands _aliases_ to their underlying full cmdlet/function names.  \r\nWhat it currently seems to lack is to expand parameter name prefixes to the full parameter names (e.g., `-Expand` to `-ExpandProperty` in the context of `Select-Object`).\r\nImplementing this - and doing the same of _operator_ prefixes such as suggested here (e.g., `-r` -> `-replace`) would go a long toward allowing throwaway code and maintainable code to coexist and to promote the former to the latter on demand.\r\n\r\n* How do we prevent _running_ scripts that use elastic (throwaway) syntax / aliases?\r\n\r\n  * Perhaps a strict mode (opt-in) can be introduced that - ideally at parsing time - prevents execution of scripts that use parameter-name and operator-name _prefixes_, similar to #2000, which suggests preventing the use of _aliases_.\r\n(I understand that this cannot catch all cases, such as in the case of indirect execution via strings.)\r\n\r\n* How do we prevent sample code from using elastic syntax, possibly leading the uninitiated to think its use is safe in scripts too? (That problem already exists with respect to parameter names and aliases).\r\n  * It seems to me that educating users is the only way to address that.\r\n",
    "created_at": "2017-09-01T17:27:23Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4730#issuecomment-326638628",
    "id": 326638628,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4730",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjYzODYyOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326638628/reactions"
    },
    "updated_at": "2017-09-01T17:27:23Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326638628",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> I disagree. Primarily for the reason @mklement0 states:\r\n> > they would effectively close the door on introducing new operators that start with the same letter(s)\r\n\r\nFor reference, I'm wondering how often \"introducing new operators\" happened in PS history. Not counting `@splatting` or `3>&1` style operators which are not relevant to this, only the `-operator` form, it looks like:\r\n\r\n - PS 2.0 introduced `-split`, `-join`.\r\n - PS 3.0 introduced `-shl`, `-shr`, `-bnot`, and `-[c/i]in`, `-[c/i]notin`.\r\n - That's it - all the other operators work on PS 2.0, i.e. no new operators since 2012 (5 years, and major versions 4.0, 5.1 and 6.0 beta).\r\n\r\nAre there any known, planned, suggested or requested new operators? I have searched the PowerShell UserVoice and GitHub issues, and found requests for the 'Bash &&' operator, a request for Perl's `=~` which partially influenced this request and my longer term `-replace= -> -r=` comment, native ternary operator of a different syntax, a request for an exponentiation operator #3603 (which doesn't ask for this, but could plausibly be `-pow`, `-power`, `-exp...`).\r\n\r\nThat's not exhaustive, and the past is a few years whereas the future is forever, but it suggests there isn't a large set of operators trying to come into existence with possibly clashing names.\r\n\r\nUnless someone wants to suggest a more dynamic approach overall:\r\n\r\n```powershell\r\nNew-BinaryOperator -Name pow -ScriptBlock {param($L, $R) [math]::Pow($L, $R)}\r\n4 -pow 2\r\n```\r\nwhich really could cause a lot of clashes with variable length operator name resolution.\r\n",
    "created_at": "2017-09-01T18:07:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4730#issuecomment-326647714",
    "id": 326647714,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4730",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjY0NzcxNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326647714/reactions"
    },
    "updated_at": "2017-09-01T18:09:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326647714",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/187787?v=4",
      "events_url": "https://api.github.com/users/HumanEquivalentUnit/events{/privacy}",
      "followers_url": "https://api.github.com/users/HumanEquivalentUnit/followers",
      "following_url": "https://api.github.com/users/HumanEquivalentUnit/following{/other_user}",
      "gists_url": "https://api.github.com/users/HumanEquivalentUnit/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/HumanEquivalentUnit",
      "id": 187787,
      "login": "HumanEquivalentUnit",
      "node_id": "MDQ6VXNlcjE4Nzc4Nw==",
      "organizations_url": "https://api.github.com/users/HumanEquivalentUnit/orgs",
      "received_events_url": "https://api.github.com/users/HumanEquivalentUnit/received_events",
      "repos_url": "https://api.github.com/users/HumanEquivalentUnit/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/HumanEquivalentUnit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HumanEquivalentUnit/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/HumanEquivalentUnit"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 \r\n\r\n> I get the concern about readability, but the end of the elasticity spectrum we're talking about here is throwaway code that you can type as quickly as possible, for one-off command-line use.\r\n\r\nCode written at the command line **often** goes right into scripts (or into blog posts).  You assume everyone is running PSSA and that is **far** from reality atm.\r\n\r\nAs for predicting the future in terms of new operators, who's to say.  But IMO typing a few less characters (if for some weird reason you don't use tab completion), is not worth precluding the introduction of operators in the future with the desired name for that operator.  ",
    "created_at": "2017-09-01T18:21:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4730#issuecomment-326650898",
    "id": 326650898,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4730",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjY1MDg5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326650898/reactions"
    },
    "updated_at": "2017-09-01T18:21:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326650898",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@HumanEquivalentUnit:\r\n\r\n> whereas the future is forever\r\n\r\nIndeed. You never know. That's why closing doors should be avoided.\r\n\r\nHowever, as syntax for _throwaway_ code (quick and dirty, on the command line), simply extending the current elastic syntax (`-r` works as shorthand for `-replace`, as long as no other `-r*` operator exists), as you first proposed, seems useful, and doesn't close any doors.\r\n",
    "created_at": "2017-09-01T18:35:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4730#issuecomment-326654036",
    "id": 326654036,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4730",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjY1NDAzNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326654036/reactions"
    },
    "updated_at": "2017-09-01T18:35:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326654036",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@rkeithhill \r\n\r\n> Code written at the command line often goes right into scripts (or into blog posts). \r\n\r\nUnderstood, but that's the price you invariably pay for supporting elastic syntax.\r\n\r\nThere is an inherent, unresolvable tension between the abbreviated, potentially ambiguous (over time), one-off, quick-and-dirty (interactive shell) and the verbose, unambiguous, maintainable (programming).\r\n\r\nThe only way to _ensure_ that the realms are kept separate is to _prevent_ use of elastic syntax in scripts.\r\n\r\nFor backward compatibility, that probably won't happen by default, but an opt-in strict mode seems reasonable - I've added a suggestion to #2000.\r\n\r\nAs for help with  _bridging_ the realms: That's where PSScriptAnalyzer / the PowerShell  VSCode extension come in.\r\n\r\n> if for some weird reason you don't use tab completion\r\n\r\nNot everyone will care about the following issues, but to me they make sense:\r\n\r\nIf I already know that having typed `-r` unambiguously indicates my intent:\r\n\r\n* I don't want to additionally have to type <kbd>tab</kbd> (which always also makes me pause mentally to check whether the expansion worked as expected)\r\n\r\n* I don't want to increase the length of my command line, which can matter when composing complex command (comprehension at a glance, navigating).\r\n\r\n--- \r\n\r\nOf course, you could argue that elastic syntax shouldn't be supported at all, but, personally, I'd miss it, and I suspect I'm not the only one.",
    "created_at": "2017-09-01T19:18:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4730#issuecomment-326663203",
    "id": 326663203,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4730",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjY2MzIwMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326663203/reactions"
    },
    "updated_at": "2017-09-01T20:28:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326663203",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "Don't see this as adding anything. Operators are, for the most part, small anyway and with tab completion you don't need to type that much.  \r\nI'm with Keith on this one",
    "created_at": "2017-09-01T19:22:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4730#issuecomment-326664071",
    "id": 326664071,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4730",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjY2NDA3MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326664071/reactions"
    },
    "updated_at": "2017-09-01T19:22:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326664071",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7870545?v=4",
      "events_url": "https://api.github.com/users/RichardSiddaway/events{/privacy}",
      "followers_url": "https://api.github.com/users/RichardSiddaway/followers",
      "following_url": "https://api.github.com/users/RichardSiddaway/following{/other_user}",
      "gists_url": "https://api.github.com/users/RichardSiddaway/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/RichardSiddaway",
      "id": 7870545,
      "login": "RichardSiddaway",
      "node_id": "MDQ6VXNlcjc4NzA1NDU=",
      "organizations_url": "https://api.github.com/users/RichardSiddaway/orgs",
      "received_events_url": "https://api.github.com/users/RichardSiddaway/received_events",
      "repos_url": "https://api.github.com/users/RichardSiddaway/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/RichardSiddaway/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RichardSiddaway/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/RichardSiddaway"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@RichardSiddaway:\r\n\r\nIf you always use tab completion, you're clearly not the target demographic for elastic syntax altogether.\r\n\r\nFor those that do care about and use elastic syntax, making it work more consistently and comprehensively seems worthwhile to me (even though operator names are comparatively shorter than parameter names).",
    "created_at": "2017-09-01T19:33:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4730#issuecomment-326666103",
    "id": 326666103,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4730",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjY2NjEwMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326666103/reactions"
    },
    "updated_at": "2017-09-01T19:40:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326666103",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> There is an inherent, unresolvable tension between the abbreviated, potentially ambiguous, one-off, quick-and-dirty and the verbose (interactive shell), unambiguous, maintainable (programming).\r\n>\r\n> The only way to ensure that the realms are kept separate is to prevent use of elastic syntax in scripts\r\n\r\nAnd to force variable type annotations, fully-qualified command identification in the form `Microsoft.PowerShell.Management\\Get-ChildItem`, array enumeration only to prevent any chance of indexing outside the bounds of the array (strict mode makes that an error, but it's still a runtime error), etc. etc.\r\n\r\nMany things in PS are ambiguous until runtime, it already is up to the programmer \"how much ambiguity they are willing to tolerate\"; with that background, \"ambiguous operator lookup\" is only a tiny adjustment in the overall amount of ambiguity. I like @mklement0's approach of making a more clear and visible and automatically-checkable distinction between \"casual\" and \"strict\" PowerShell.\r\n\r\nI am leaning a little away from \"completely dynamic operator lookup\" when four fixed operator aliases:  `-r`, `-m`, `-sp`, `-j` which map to `-replace`, `-match`, `-split`, `-join` would be unambiguous, would not close doors for future operators beginning with those letters (if there was no lookup, then a fixed `-r` would never clash with a possible future operator `-range`), and would provide most of what I want from this change request, in a slightly more rigid way.\r\n",
    "created_at": "2017-09-01T19:57:39Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4730#issuecomment-326670940",
    "id": 326670940,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4730",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjY3MDk0MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326670940/reactions"
    },
    "updated_at": "2017-09-01T20:01:50Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326670940",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/187787?v=4",
      "events_url": "https://api.github.com/users/HumanEquivalentUnit/events{/privacy}",
      "followers_url": "https://api.github.com/users/HumanEquivalentUnit/followers",
      "following_url": "https://api.github.com/users/HumanEquivalentUnit/following{/other_user}",
      "gists_url": "https://api.github.com/users/HumanEquivalentUnit/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/HumanEquivalentUnit",
      "id": 187787,
      "login": "HumanEquivalentUnit",
      "node_id": "MDQ6VXNlcjE4Nzc4Nw==",
      "organizations_url": "https://api.github.com/users/HumanEquivalentUnit/orgs",
      "received_events_url": "https://api.github.com/users/HumanEquivalentUnit/received_events",
      "repos_url": "https://api.github.com/users/HumanEquivalentUnit/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/HumanEquivalentUnit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HumanEquivalentUnit/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/HumanEquivalentUnit"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@HumanEquivalentUnit:\r\n\r\nWhat you're asking for is _operator aliases_ (e.g., `-r` as a locked-in-forever, unambiguous alias of `-replace`), which would be the expression-mode analogs to command-mode _parameter aliases_ (e.g., `-Args` for `-ArgumentList`).\r\n\r\nMy initial thought was that parameter aliases are never _single-character_ names, but, as it turns out, that's not true, so I'm warming up to your idea:\r\n\r\nFor instance `-f` is an alias of `-Force` in the context of `Remove-Job`, even though in terms of elastic syntax alone, `-f` would be ambiguous, because there's both `-Force` and `-Filter`\r\nIt is the fact that it is an alias that makes it unambiguous, however.\r\n(As an aside: This doesn't always work consistently at the moment: see #4739)\r\n\r\nNote that supporting _both_ elastic syntax (unambiguous prefix matching) _and_ aliases for operators would be possible, just the way it already works for _parameters_.\r\n\r\nOf course, some may object to introducing such terse aliases for operators, given that they'd have to be allowed in scripts too.\r\n\r\nAlso, there's currently a bit of a discoverability problem with respect to _parameter_ aliases - they don't show up in syntax diagrams, and  `Get-Help` currently doesn't even list them with `-Full` switch, though the _online_ help topics already do (see https://github.com/PowerShell/PowerShell-Docs/issues/1638) - something that would also have to be solved for _operator_ aliases.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2017-09-01T22:02:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4730#issuecomment-326693188",
    "id": 326693188,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4730",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjY5MzE4OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326693188/reactions"
    },
    "updated_at": "2017-09-01T22:56:44Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326693188",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I've just realised that this partially exists in the way `Where-Object` has individual parameter sets, one for each comparison operator ([help reference](https://docs.microsoft.com/en-gb/powershell/module/Microsoft.PowerShell.Core/Where-Object?view=powershell-5.1)), to enable this shorthand form without the full scriptblock:\r\n\r\n    gci |? name -match abc\r\n\r\nBecause each operator is explicitly a cmdlet parameter here, *in this context only* they can be written with a partial name:\r\n\r\n    gci |? name -m abc\r\n\r\nand parameter name resolution turns that into `-match`. \r\n\r\nThe two objections of \"*readability*\" and \"*future operators might change the way operator names resolve and break existing scripts*\" have already happened with some operators because of this case, including `-m(atch)`, `-li(ke)`, `-cont(ains)`, `-ili(ke)`, `-cc(ontains)` but not the focus ones of my request: `-replace`, `-split`, `-join` because they make no sense as parameters to filter on.\r\n\r\n----\r\n\r\nI made a proof of concept change, with the tokenizer.cs lookup code changed to be:\r\n\r\n                TokenKind operatorKind;\r\n                if (s_operatorTable.TryGetValue(str, out operatorKind))\r\n                {\r\n                    return NewToken(operatorKind);\r\n                }\r\n                else\r\n                { \r\n                    var partialOperatorMatches = s_operatorTable.Where( x => x.Key.StartsWith(str, StringComparison.OrdinalIgnoreCase));\r\n                    if (1 == partialOperatorMatches.Count())\r\n                    {\r\n                        return NewToken(partialOperatorMatches.First().Value);\r\n                    }\r\n                }\r\n\r\nIt does break tab completion for some situations I haven't properly traced yet, so a full change would have to be more involved, but it does work).\r\n\r\n![image](https://user-images.githubusercontent.com/187787/29994203-ef699dba-8fc1-11e7-8427-33a7337c612d.png)\r\n",
    "created_at": "2017-09-03T21:11:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4730#issuecomment-326831559",
    "id": 326831559,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4730",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjgzMTU1OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326831559/reactions"
    },
    "updated_at": "2017-09-03T21:44:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326831559",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/187787?v=4",
      "events_url": "https://api.github.com/users/HumanEquivalentUnit/events{/privacy}",
      "followers_url": "https://api.github.com/users/HumanEquivalentUnit/followers",
      "following_url": "https://api.github.com/users/HumanEquivalentUnit/following{/other_user}",
      "gists_url": "https://api.github.com/users/HumanEquivalentUnit/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/HumanEquivalentUnit",
      "id": 187787,
      "login": "HumanEquivalentUnit",
      "node_id": "MDQ6VXNlcjE4Nzc4Nw==",
      "organizations_url": "https://api.github.com/users/HumanEquivalentUnit/orgs",
      "received_events_url": "https://api.github.com/users/HumanEquivalentUnit/received_events",
      "repos_url": "https://api.github.com/users/HumanEquivalentUnit/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/HumanEquivalentUnit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HumanEquivalentUnit/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/HumanEquivalentUnit"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@HumanEquivalentUnit: What you're describing is the existing implementation of _elastic syntax_: Both `Where-Object` and `ForEach-Object`, since PSv3, accept _parameters_ (_argument-mode_ parsing) in lieu of a script block (_expression-mode_ parsing) to specify the filter / operation, and in the parameter form they're called _comparison statement_ and _operation statement_ respectively:\r\n\r\nElastic syntax means that any parameter name can be prefix-abbreviated, as long as the prefix _unambiguously_ identifies a parameter.\r\n\r\nElastic syntax inherently has both of the problems previously discussed:\r\n\r\n* lack of readability\r\n\r\n* lack of long-term stability\r\n\r\n_That was a price that elastic syntax was always willing to pay_, in order to gain the benefits of being able to minimize typing for _interactive use_.\r\n\r\nElastic syntax is _not_ meant to lock in future-proof shorthands - by its very nature, it is only guaranteed to work at the moment of its invocation.\r\n\r\n--- \r\n\r\nBy contrast, in _argument mode_ it is _parameter aliases_ that lock in future-proof shorthands, such as\r\n`-Args` for `-ArgumentList` for `Start-Process` or `-m` for `-Match` for `Where-Object` (but note that `-Match` is a _parameter_ here, not an operator).\r\n\r\nCurrently, there is no _expression-mode_ equivalent: there are no _operator aliases_ that would lock in\r\n`-m` as an alias for the `-match` operator, for instance.\r\n_Also, elastic syntax currently doesn't apply to expression-mode parsing at all._\r\n\r\n---\r\n\r\nIn other words: What you're proposing is the introduction of _operator aliases_, which don't currently exist  - and if they are introduced, each such alias would have to be implemented as an analogous _parameter alias_ for the corresponding `Where-Object` / `ForEach-Object` parameter, if it applies.\r\n\r\nSeparately - independently - elastic syntax could be extended to expression mode so as to apply to _operators_ too.\r\n\r\nI hope that sufficiently clarifies the context.\r\n\r\nAs I've said: I personally like the idea, but it does mean that the less readable operator aliases such as `-s`, `-j`, and `-m` would also have to be permitted in _scripts_\r\n(unless a strict mode is introduced that also prevents use of operator aliases in scripts; I definitely think there should be a strict mode that prevents _elastic syntax_ in a script).\r\n\r\n\r\n",
    "created_at": "2017-09-04T02:02:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/4730#issuecomment-326849963",
    "id": 326849963,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/4730",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjg0OTk2Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326849963/reactions"
    },
    "updated_at": "2017-09-04T02:12:20Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/326849963",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
