[
  {
    "author_association": "COLLABORATOR",
    "body": "@KirkMunro As I mentioned in the other issue, the handling of a trailing & is by design and matches Unix shell behaviour. As far as simple dispatch on a runspace or runspace pool, I always figured we'd do it with\r\n```powershell\r\n& $runspacePool invoke-stuff -arg1 -arg2 abc\r\n```\r\nYou do have to create the runspace or pool but that's not a huge deal.\r\n",
    "created_at": "2019-06-11T21:15:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9873#issuecomment-501025991",
    "id": 501025991,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9873",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTAyNTk5MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 1,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/501025991/reactions"
    },
    "updated_at": "2019-06-11T21:15:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/501025991",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I see, so more like using the call operator with some thing where you want to run commands, like you can do with modules today (i.e. `& (gmo SomeModule) invoke-stuff -arg1 -arg2 abc`). Are there other \"things\" where you might want to invoke commands that would make it more appropriate to use this techinque?\r\n\r\nWithout thinking too hard about it, right now I like the simplicity of something like the `&` background operator better, and I also like the consistency between the two, allowing users to choose multi-process or multi-threaded job-based execution of statements by simply changing an operator. I think that will resonate well with the PowerShell community.",
    "created_at": "2019-06-11T23:58:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9873#issuecomment-501067418",
    "id": 501067418,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9873",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTA2NzQxOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/501067418/reactions"
    },
    "updated_at": "2019-06-11T23:58:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/501067418",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3515485?v=4",
      "events_url": "https://api.github.com/users/KirkMunro/events{/privacy}",
      "followers_url": "https://api.github.com/users/KirkMunro/followers",
      "following_url": "https://api.github.com/users/KirkMunro/following{/other_user}",
      "gists_url": "https://api.github.com/users/KirkMunro/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KirkMunro",
      "id": 3515485,
      "login": "KirkMunro",
      "node_id": "MDQ6VXNlcjM1MTU0ODU=",
      "organizations_url": "https://api.github.com/users/KirkMunro/orgs",
      "received_events_url": "https://api.github.com/users/KirkMunro/received_events",
      "repos_url": "https://api.github.com/users/KirkMunro/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KirkMunro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KirkMunro/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KirkMunro"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Do you think thread job usage will be great enough to warrant dedicated syntax?  \r\n\r\n> create a thread job from a single command\r\n\r\nBut you can do this today without a dedicated operator: `$job = Start-ThreadJob { Get-Process -Id $pid }`\r\n\r\nTo me, the primary advantage of `&` for regular jobs is it provides a known, comfortable mechanism for old *nix scripters like @BrucePay .  ðŸ˜œ ",
    "created_at": "2019-06-12T04:18:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9873#issuecomment-501114334",
    "id": 501114334,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9873",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTExNDMzNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/501114334/reactions"
    },
    "updated_at": "2019-06-12T04:18:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/501114334",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@rkeithhill I don't have usage data to answer that question.\r\n\r\nMy argument for this functionality comes more from some of the core tenets of PowerShell: consistency and discoverability. I understand how `&` came to PowerShell because of common use in bash, just like how `&&` and `||` are coming to PowerShell. Now that it's here though you may have users who don't come from bash discovering and using it, and it seems natural (at least to me) for PowerShell to give them a consistent model that is easily discoverable to run a command in a thread job as well.",
    "created_at": "2019-06-12T14:06:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9873#issuecomment-501289600",
    "id": 501289600,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9873",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTI4OTYwMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/501289600/reactions"
    },
    "updated_at": "2019-06-12T14:06:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/501289600",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3515485?v=4",
      "events_url": "https://api.github.com/users/KirkMunro/events{/privacy}",
      "followers_url": "https://api.github.com/users/KirkMunro/followers",
      "following_url": "https://api.github.com/users/KirkMunro/following{/other_user}",
      "gists_url": "https://api.github.com/users/KirkMunro/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KirkMunro",
      "id": 3515485,
      "login": "KirkMunro",
      "node_id": "MDQ6VXNlcjM1MTU0ODU=",
      "organizations_url": "https://api.github.com/users/KirkMunro/orgs",
      "received_events_url": "https://api.github.com/users/KirkMunro/received_events",
      "repos_url": "https://api.github.com/users/KirkMunro/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KirkMunro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KirkMunro/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KirkMunro"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Speaking of consistency, @BrucePay, there are several inconsistencies between the `&` background operator in PowerShell and the `&` control operator in bash that I'm curious about:\r\n\r\n1. The former just returns a job object, and all output is hidden behind that object, while the latter returns something similar (the job id and process id), but then it also shows output in real-time in the current terminal. Was there any discussion about having `&` be more than a simplistic invocation of `Start-Job`, and instead having it set up event handlers on the data stream collections in the job object to capture data as it is added and output that data it in the current terminal (ideally with the job id in front of that data), to more closely mirror how the bash counterpart works? I've also read somewhere (but I can't find it now) about a `&!` operator which functions like the `&` control operator at the end of a command, but without showing the job streams in the terminal. This isn't a bash operator, but I like the distinction and the flexibility that having both would give scripters.\r\n\r\n1. In bash, when you run a command in the background using the `&` control operator, the process ID is stored in `$!`. PowerShell should do something similar, shouldn't it? One challenge PowerShell has in this area is that `$!` is currently parsed as a command name when used by itself (What? That certainly seems like a parser bug). If `$!` was properly parsed as a variable, if it returned a job object, and if job objects in PowerShell included the process ID in their output (which they really should -- that's probably PR material), then I think we'd have better parity with bash while making it easier for scripters at the same time.",
    "created_at": "2019-06-12T14:06:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9873#issuecomment-501289658",
    "id": 501289658,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9873",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTI4OTY1OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/501289658/reactions"
    },
    "updated_at": "2019-06-12T14:39:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/501289658",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3515485?v=4",
      "events_url": "https://api.github.com/users/KirkMunro/events{/privacy}",
      "followers_url": "https://api.github.com/users/KirkMunro/followers",
      "following_url": "https://api.github.com/users/KirkMunro/following{/other_user}",
      "gists_url": "https://api.github.com/users/KirkMunro/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KirkMunro",
      "id": 3515485,
      "login": "KirkMunro",
      "node_id": "MDQ6VXNlcjM1MTU0ODU=",
      "organizations_url": "https://api.github.com/users/KirkMunro/orgs",
      "received_events_url": "https://api.github.com/users/KirkMunro/received_events",
      "repos_url": "https://api.github.com/users/KirkMunro/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KirkMunro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KirkMunro/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KirkMunro"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "`$!` being parsed as a command name isn't really a bug per se, I don't think. Most of those shorthand variables (`$^`, `$$`, etc) seem to be special-cased in the tokenizer, because some of the characters they use aren't normally valid variable name characters. (e.g., try entering `$a$bb$$b` and look at the multiple errors you get for your efforts).\r\n\r\nAs a result, if the character sequence isn't part of the defined exceptions and isn't able to be parsed as a regular variable name, they're treated like other bareword tokens and PS attempts to find command names that match as with all other generic bareword tokens.\r\n\r\nBut yeah, that would be pretty useful. Wouldn't take a lot to add an extra special variable, just an extra tokenizer case and follow the trail the other special variables have laid out there.",
    "created_at": "2019-06-12T14:27:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9873#issuecomment-501298742",
    "id": 501298742,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9873",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTI5ODc0Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/501298742/reactions"
    },
    "updated_at": "2019-06-12T14:27:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/501298742",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Great suggestion, @KirkMunro: Given that  the postpositional `&` is so much less ceremony than an explicit `Start-Job` call, having a something similarly concise syntax for _thread_ jobs (`Start-ThreadJob`) is desirable.\r\n\r\n@rkeithhill:\r\n\r\n> Do you think thread job usage will be great enough\r\n\r\nI wouldn't think about _current_ usage with respect to thread jobs, because I think that thread jobs merely have a PR problem / in-box-availability problem (in older PS versions):\r\n\r\nIf everyone knew that for most use cases they are _functionally equivalent_ to child-process-based background jobs _yet perform significantly better_ - while seamlessly integrating with the other `*-Job` cmdlets -  I think  thread jobs would see significantly more use - they certainly deserve to.\r\n\r\n\r\n",
    "created_at": "2019-10-19T19:50:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9873#issuecomment-544191933",
    "id": 544191933,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9873",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NDE5MTkzMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/544191933/reactions"
    },
    "updated_at": "2019-10-19T19:52:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/544191933",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I like this suggestion and would love to see it added sooner rather than later if this could be prioritised @SteveL-MSFT ",
    "created_at": "2021-04-11T05:46:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9873#issuecomment-817253309",
    "id": 817253309,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9873",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzI1MzMwOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/817253309/reactions"
    },
    "updated_at": "2021-04-11T05:46:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/817253309",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6355225?v=4",
      "events_url": "https://api.github.com/users/kilasuit/events{/privacy}",
      "followers_url": "https://api.github.com/users/kilasuit/followers",
      "following_url": "https://api.github.com/users/kilasuit/following{/other_user}",
      "gists_url": "https://api.github.com/users/kilasuit/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/kilasuit",
      "id": 6355225,
      "login": "kilasuit",
      "node_id": "MDQ6VXNlcjYzNTUyMjU=",
      "organizations_url": "https://api.github.com/users/kilasuit/orgs",
      "received_events_url": "https://api.github.com/users/kilasuit/received_events",
      "repos_url": "https://api.github.com/users/kilasuit/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/kilasuit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kilasuit/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/kilasuit"
    }
  }
]
