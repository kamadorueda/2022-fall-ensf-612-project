[
  {
    "author_association": "COLLABORATOR",
    "body": "I usually write it in this form to avoid repeating `-and` and `-notlike`\n\n``` powershell\n$patterns = @(\n    'atl*',\n    'na*',\n    'mdm*'\n    # etc\n)\n\n$w | ? {\n    $e = $_.e\n    -not ($patterns | ? ($e -like $_))\n}\n\n```\n",
    "created_at": "2016-08-30T14:20:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/2132#issuecomment-243454717",
    "id": 243454717,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/2132",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzQ1NDcxNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/243454717/reactions"
    },
    "updated_at": "2016-08-30T14:22:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/243454717",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/816680?v=4",
      "events_url": "https://api.github.com/users/vors/events{/privacy}",
      "followers_url": "https://api.github.com/users/vors/followers",
      "following_url": "https://api.github.com/users/vors/following{/other_user}",
      "gists_url": "https://api.github.com/users/vors/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vors",
      "id": 816680,
      "login": "vors",
      "node_id": "MDQ6VXNlcjgxNjY4MA==",
      "organizations_url": "https://api.github.com/users/vors/orgs",
      "received_events_url": "https://api.github.com/users/vors/received_events",
      "repos_url": "https://api.github.com/users/vors/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vors/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vors"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "Changing the meaning of arrays could be a (probably rare but obscure) breaking change.\n\n``` powershell\nPS> \"a b\" -like ('a','b')\nTrue\n```\n\nA new operator, e.g. `-likeany` might be more readable. Note that these examples are similar to part of the [generalized splatting rfc](https://github.com/PowerShell/PowerShell-RFC/blob/master/1-Draft/RFC0002-Generalized-Splatting.md#splatting-in-switch-cases), which actually suggest another syntax that wouldn't be breaking: `$a -like @b`.\n",
    "created_at": "2016-08-30T17:26:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/2132#issuecomment-243515377",
    "id": 243515377,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/2132",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MzUxNTM3Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/243515377/reactions"
    },
    "updated_at": "2016-08-30T17:26:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/243515377",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "NONE",
    "body": "For now, you can workaround this with `-NotMatch` and `-Match`. Instead of using\n\n> ``` PowerShell\n> ? { $_.e -match '^(atl|na|mdm|aus|okc|ssc|ga1|ok1|fns|acs)' }\n> ```\n\nYou can write\n\n``` PowerShell\n? e -Match '^(atl|na|mdm|aus|okc|ssc|ga1|ok1|fns|acs)'\n? e -Match \"^($(('atl', 'na', 'mdm', 'aus', 'okc', 'ssc', 'ga1', 'ok1', 'fns', 'acs') -join '|'))\"\n# But it seems that you want -NotMatch\n# as in your long \"if\"s?\n```\n",
    "created_at": "2016-09-01T03:27:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/2132#issuecomment-243966085",
    "id": 243966085,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/2132",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0Mzk2NjA4NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/243966085/reactions"
    },
    "updated_at": "2016-09-01T03:27:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/243966085",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/4462444?v=4",
      "events_url": "https://api.github.com/users/GeeLaw/events{/privacy}",
      "followers_url": "https://api.github.com/users/GeeLaw/followers",
      "following_url": "https://api.github.com/users/GeeLaw/following{/other_user}",
      "gists_url": "https://api.github.com/users/GeeLaw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/GeeLaw",
      "id": 4462444,
      "login": "GeeLaw",
      "node_id": "MDQ6VXNlcjQ0NjI0NDQ=",
      "organizations_url": "https://api.github.com/users/GeeLaw/orgs",
      "received_events_url": "https://api.github.com/users/GeeLaw/received_events",
      "repos_url": "https://api.github.com/users/GeeLaw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/GeeLaw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GeeLaw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/GeeLaw"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "This should be submitted as an RFC\n",
    "created_at": "2016-11-01T18:25:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/2132#issuecomment-257650860",
    "id": 257650860,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/2132",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1NzY1MDg2MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/257650860/reactions"
    },
    "updated_at": "2016-11-01T18:25:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/257650860",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> But combining them does not work\r\n> \r\n> `Where-Object ComputerName -like ABC*, XYZ*`\r\n> PS>\r\n> \r\n> With PowerShell being object based and having such a uniform syntax, it feels like this should work\r\n> \r\n\r\nIt does work, it's telling you that you don't have a computer called `\"abc1, xyz2\"` or similar.\r\n\r\nIn this example `-like` is not an operator, it's a parameter of `Where-Object` so the pattern is parsed in parameter parsing mode. It becomes a single string pattern *containing a comma and a space*. It matches text \"*abc anything comma space xyz anything*\":\r\n\r\n    @{test='abc1, xyz2'} |Where-Object test -like abc*, xyz*\r\n\r\nThat is, it *does* work in line with the uniform syntax, it's just misleading you about *which* syntax applies.\r\n\r\nThis is different from the operator used with quotes `-like \"abc*\", \"xyz*\"` which is parsed as lzybkr describes - an array joined together using the value of `$OFS` as the separator (space by default), so the comma doesn't become a part of the pattern but a space does.\r\n\r\nAnd with the operator, trying to use the example with no quotes `@('zzz', 'abc1', 'xyz2') -like abc*, xyz*` is a parse error.\r\n\r\nIf the suggested `-likeany` became a parameter on `where-object` then this slightly misleading pattern would apply to it in the same way:\r\n\r\n    |where test -likeany abc*                # abc* wildcard\r\n    |where test -likeany abc*, def*          # \"abc*, def*\" wildcard surprise\r\n    |where test -likeany \"abc*\", \"def*\"      # multiple wildcards \"abc*\" and \"def*\"\r\n\r\nAnd the original issue would still be here: `Where-Object test -likeany abc*, def*` doesn't work as expected, because the expectation was not thinking about parameter parsing mode.\r\n\r\nPresumably with a new operator there would be variants `-clikeany`, `-ilikeany`?\r\nWhat about `-notlikeany`, `-cnotlikeany`, `-inotlikeany`?\r\n\r\nShould that pattern extend to `-matchany`, `-notmatchany`, `-containsany`, `-notcontainsany`, `-anyin`, `-notanyin`) and their case variants? `-likeall`?\r\n\r\nIf not, then you get the weird situation where `-likeany` becomes the de-facto `-containsany`:\r\n\r\n    $collection -contains 'a'\r\n    #How do I test if it contains an 'a' or a 'b'? \r\n\r\n    #you can use:\r\n    $collection -likeany 'a', 'b'\r\n\r\n    # > why are they named differently?\r\n    # contains is an object in a collection, likeany is a string match but it works for a collection of strings\r\n    # that will bite you one day.\r\n    # oh and it acts as a filter instead of returning a [bool]..\r\n\r\nI would vote for a breaking change to make it work with `-like`, personally. Most, if not all, the existing operators work with an array on one side or the other, without needing a variant on the name specifically for the case of working with an array. And possibly adjust `-contains @('a', 'b')` similarly, so it doesn't join the array.\r\n\r\n----\r\n\r\nI see the original issue - matching multiple patterns - appears over and over on StackOverflow as a thing people trip over, expecting there to be a clean way and there isn't. This seems like a helpful fix for that. But..\r\n\r\n> an arcane tome of RegEx Spells and come up with devilry like this example\r\n\r\nIn defence of regex, it *is* a language specifically for describing patterns in text, and the use of `^`, `()` and `|` is not as arcane and devilish as claimed; regex is a first class citizen in PowerShell already - in common operators like `-split` and `-replace`, and it's available in every popular language, many popular text editors, and many other data processing tools.\r\n\r\nAt what point is it reasonable to say \"honestly, your next move should be: spend an hour with a regex tutorial, it's really not that bad\"? Is there anything that can be done to make it less intimidating?\r\n",
    "created_at": "2017-10-03T11:21:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/2132#issuecomment-333812856",
    "id": 333812856,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/2132",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzMzgxMjg1Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/333812856/reactions"
    },
    "updated_at": "2017-10-03T11:21:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/333812856",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/187787?v=4",
      "events_url": "https://api.github.com/users/HumanEquivalentUnit/events{/privacy}",
      "followers_url": "https://api.github.com/users/HumanEquivalentUnit/followers",
      "following_url": "https://api.github.com/users/HumanEquivalentUnit/following{/other_user}",
      "gists_url": "https://api.github.com/users/HumanEquivalentUnit/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/HumanEquivalentUnit",
      "id": 187787,
      "login": "HumanEquivalentUnit",
      "node_id": "MDQ6VXNlcjE4Nzc4Nw==",
      "organizations_url": "https://api.github.com/users/HumanEquivalentUnit/orgs",
      "received_events_url": "https://api.github.com/users/HumanEquivalentUnit/received_events",
      "repos_url": "https://api.github.com/users/HumanEquivalentUnit/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/HumanEquivalentUnit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HumanEquivalentUnit/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/HumanEquivalentUnit"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> I would vote for a breaking change to make it work with -like, personally.\r\n\r\nI agree, given that:\r\n\r\n* this strikes me as a clear-cut [Bucket 3: Unlikely Grey Area](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area) change\r\n\r\n* it avoids introducing yet another operator\r\n\r\n* extending the RHS to support arrays seems like a natural extension of the existing functionality.\r\n\r\n> This seems like a helpful fix for that.\r\n> But...\r\n\r\nDepending on your requirements, sometimes regexes are your only choice.\r\n\r\nBut even if you have a decent grasp of regexes, it is convenient to use the less noisy and conceptually simpler wildcard patterns in cases where that is enough - which is often.\r\n\r\nWildcards are much more pervasive in PowerShell (think parameters that support them; e.g. `Get-Process ba*`) and therefore a familiar feature.\r\n\r\n---\r\n\r\nThat said, we could similarly introduce array RHS support for the `-match` operator as well:\r\n\r\nTo me, there's something cleaner about writing\r\n\r\n```powershell\r\n'foo vs. bar' -match 'foo', 'bar'\r\n```\r\n\r\nthan (what I propose the above would be the equivalent of):\r\n\r\n```powershell\r\n'foo vs. bar' -match '(?:foo|bar)'\r\n```\r\n\r\n\r\nFor symmetry we'd have to add this to the  potential future `-matchall` operator as well - see #7867; though perhaps the naming of that new operator should be revisited in this context.\r\n\r\n---\r\n\r\nOn a side note, @HumanEquivalentUnit:\r\n\r\nI get the difference in parsing modes (of argument-mode `ABC*, XYZ*` vs. expression-mode `'ABC*', 'XYZ*'`), but, quoting aside, _both_ are parsed as _arrays_ that are converted to a single string in which the elements are concatenated with `$OFS`, which yields string `'ABC* XYZ*'` by default.\r\n\r\n```powershell\r\n# OK: Quoted argument, literal match\r\nPS> @{test='abc1, xyz2'} |Where-Object test -like 'abc1, xyz2'\r\nName                           Value\r\n----                           -----\r\ntest                           abc1, xyz2\r\n\r\n# NO match with unquoted argument, because array abc1, xyz2 is converted\r\n# to string 'abc1 xyzz2'\r\nPS> @{test='abc1, xyz2'} |Where-Object test -like abc1, xyz2\r\n# !! no match\r\n\r\n# Therefore, a comma-less LHS value does match:\r\nPS> @{test='abc1 xyz2'} |Where-Object test -like abc1, xyz2\r\nName                           Value\r\n----                           -----\r\ntest                           abc1 xyz2\r\n\r\n# Example with $OFS\r\nPS> & { $OFS='#'; @{test='abc1#xyz2'} |Where-Object test -like abc1, xyz2 }\r\nName                           Value\r\n----                           -----\r\ntest                           abc1#xyz2\r\n\r\n\r\n```\r\n\r\n",
    "created_at": "2018-10-17T20:11:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/2132#issuecomment-430771031",
    "id": 430771031,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/2132",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMDc3MTAzMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/430771031/reactions"
    },
    "updated_at": "2018-10-17T21:16:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/430771031",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "> I would vote for a breaking change to make it work with `-like`\r\n\r\nI very much agree with @HumanEquivalentUnit as this issue might even qualify as a bug if you strictly take the [common features of the comparison operators](https://docs.microsoft.com/powershell/module/microsoft.powershell.core/about/about_comparison_operators#common-features):\r\n\r\n> When the input of an operator is a scalar value, the operator returns a Boolean value. When the input is a collection, the operator returns the elements of the collection that match the right-hand value of the expression. If there are no matches in the collection, comparison operators return an empty array.\r\n\r\nMeaning, according to the documentation, this: `'a', 'b' -in 'b', 'c'` which currently returns a Boolean (`$false`), should actually *return the elements of the collection that match the right-hand value of the expression*.\r\n\r\nNeedless to say: `$a -eq $b` (where `$a` could be a collection), is in fact similar to `$a -contains $b` (and `$b -in $a`, where the operators are swapped) with the exception that `$a -eq $b` returns a truty/falsy (which could be more useful) and the later comparisons return an explicit Boolean (`$True`/`$False`).",
    "created_at": "2022-08-14T08:45:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/2132#issuecomment-1214313173",
    "id": 1214313173,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/2132",
    "node_id": "IC_kwDOAvT7bc5IYPLV",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1214313173/reactions"
    },
    "updated_at": "2022-10-28T11:25:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1214313173",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  },
  {
    "author_association": "NONE",
    "body": "@HumanEquivalentUnit \r\n\r\n> Is there anything that can be done to make it less intimidating?\r\n\r\nJust a thought: maybe using the [unary comma `,`] to a \"force\" the RHS to an array:\r\n\r\nSomething like:\r\n```PowerShell\r\n    'a', 'b' -in ,( 'b', 'c')\r\n```\r\nor:\r\n```PowerShell\r\n    'a', 'b' -like ,$Array\r\n```\r\n\r\n(It might still break a few things, but a probably a lot less)",
    "created_at": "2022-08-15T11:27:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/2132#issuecomment-1214907979",
    "id": 1214907979,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/2132",
    "node_id": "IC_kwDOAvT7bc5IagZL",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1214907979/reactions"
    },
    "updated_at": "2022-08-15T11:28:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1214907979",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  }
]
