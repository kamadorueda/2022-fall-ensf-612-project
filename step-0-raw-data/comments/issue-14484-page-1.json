[
  {
    "author_association": "CONTRIBUTOR",
    "body": "If this is primarily about automatic reflecting the execution duration of commands in the prompt string, you can define your `prompt` function as follows:\r\n\r\n```powershell\r\nfunction Prompt {\r\n  # Calculate the previous command's execution duration (time span).\r\n  $durationInfo = if ($he = Get-History -Count 1) {\r\n    # Use a '0.00s' format: duration in *seconds*, with two decimal places.\r\n    ' [{0:N2}s]' -f ($he.EndExecutionTime - $he.StartExecutionTime).TotalSeconds\r\n  }\r\n  # Insert the information into the default prompt string; e.g.:\r\n  #   'PS C:\\foo> ' becomes 'PS C:\\foo [0.23s]> '\r\n  \"PS $($executionContext.SessionState.Path.CurrentLocation)${durationInfo}$('>' * ($nestedPromptLevel + 1)) \"\r\n}\r\n```\r\n",
    "created_at": "2020-12-23T21:33:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14484#issuecomment-750482393",
    "id": 750482393,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14484",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MDQ4MjM5Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/750482393/reactions"
    },
    "updated_at": "2020-12-24T20:09:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/750482393",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 I already have something similar in my profile, like many others do, but your suggestion **doesn't** address the ask of `When I run a command, I want to be able to rebuild the prompt or set window title of the host or any other required information **prior** to the execution of that command, and not need to wait until **after** the command has completed for the prompt/host window/anything else to issue any updates to these components or to other systems` which adding a `preprompt` functionality into the engine would end up addressing the ask. \r\n\r\nWhilst I can technically get round this by the below, this really would be better built in to the engine and would mitigate needing to pass to this function a scriptblock to run\r\n``` powershell\r\nfunction global:preprompt {\r\n    [CmdletBinding()]\r\n    [alias('pp')]\r\n    param (\r\n        [Parameter()]\r\n        [scriptblock]\r\n        $Scriptblock\r\n    )\r\n    $RunningAction = if ($Scriptblock.ToString().Length -gt 25) {$Scriptblock.ToString().Substring(0,25)} else {$Scriptblock.ToString().Substring(0,($Scriptblock.ToString().Length)) }\r\n    if ($PSVersionTable.PSEdition -match 'Desktop' -or $isWindows) {\r\n        $admin = ((New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))\r\n        if ($admin -eq $true) {\r\n            Write-Host \"[\" -nonewline -foregroundcolor DarkGray ; Write-Host \"Admin\" -nonewline -foregroundcolor Red ; Write-Host \"] \" -nonewline -foregroundcolor DarkGray\r\n            $Host.UI.RawUI.WindowTitle = \"[Admin] \" + $WindowTitle + ' - ' + (Get-Date -Format HH:mm:ss) + ' - ' + $RunningAction\r\n        }\r\n        else {\r\n            $host.UI.RawUI.WindowTitle = $WindowTitle + ' - ' + (Get-Date -Format HH:mm:ss) + ' - ' + $RunningAction\r\n        }\r\n    }\r\n    Write-Host \"[\" -NoNewline ; Write-Host (Get-Date -Format \"HH:mm:ss\") -ForegroundColor Gray -NoNewline ; Write-Host \"] [\" -NoNewline ; Write-Host $RunningAction -NoNewline ; Write-Host \"]\" -NoNewline;  Write-Host ''\r\n    $Scriptblock.Invoke()\r\n}\r\n```\r\n",
    "created_at": "2020-12-24T21:58:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14484#issuecomment-751104386",
    "id": 751104386,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14484",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTEwNDM4Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/751104386/reactions"
    },
    "updated_at": "2020-12-24T21:58:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/751104386",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6355225?v=4",
      "events_url": "https://api.github.com/users/kilasuit/events{/privacy}",
      "followers_url": "https://api.github.com/users/kilasuit/followers",
      "following_url": "https://api.github.com/users/kilasuit/following{/other_user}",
      "gists_url": "https://api.github.com/users/kilasuit/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/kilasuit",
      "id": 6355225,
      "login": "kilasuit",
      "node_id": "MDQ6VXNlcjYzNTUyMjU=",
      "organizations_url": "https://api.github.com/users/kilasuit/orgs",
      "received_events_url": "https://api.github.com/users/kilasuit/received_events",
      "repos_url": "https://api.github.com/users/kilasuit/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/kilasuit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kilasuit/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/kilasuit"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> I already have something similar in my profile, like many others do,\r\n\r\nI see, @kilasuit. \r\n\r\nThis is why it's important to make the case for a new feature with an example that _cannot_ be handled with the current capabilities.\r\n\r\nBased on your example - which seems to be primarily about setting the window title - it seems that the proposed `preprompt` function would require access to the command about to be invoked, so I encourage you to flesh out the details of how the function would gain access to that.\r\n\r\nAlso, I invite you to flesh out how the `preprompt` function's output would _print_, given that - by definition, if its output is dependent on the command being submitted - it cannot be printed until _after_ the current prompt string.",
    "created_at": "2020-12-24T22:21:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14484#issuecomment-751124891",
    "id": 751124891,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14484",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTEyNDg5MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/751124891/reactions"
    },
    "updated_at": "2020-12-25T09:39:43Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/751124891",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thinking about this some more:\r\n\r\nSince the prompt by definition has already printed when you submit your command, the desired functionality isn't _prompt_-related as such.\r\n\r\nI wonder if what you're looking for is better implemented as event hooks exposed via `$ExecutionContext.InvokeCommand.*Action` properties, analogous to `$ExecutionContext.InvokeCommand.PreCommandLookupAction` / `$ExecutionContext.InvokeCommand.PostCommandLookupAction`:\r\n\r\nFor instance, `$ExecutionContext.InvokeCommand.PreExecutionAction` and `$ExecutionContext.InvokeCommand.PostExecutionAction`, which could receive the command line being executed as the event argument.\r\n\r\nYou can - awkwardly - emulate this behavior with `$ExecutionContext.InvokeCommand.PostCommandLookupAction` and the `prompt` function; here's an example:\r\n\r\n```powershell\r\n$ExecutionContext.InvokeCommand.PostCommandLookupAction = {\r\n  if ($global:_preExecHandled) { return }\r\n  $cmdLine = $MyInvocation.Line\r\n  if ($args[1].CommandOrigin -ne 'Runspace' -or $cmdLine -match 'PostCommandLookupAction|^prompt$') { return }\r\n  $global:_preExecHandled = $true; $global:_prevTitle = $host.UI.RawUI.WindowTitle\r\n $info = \"Submitting at $(Get-Date): $cmdLine\"\r\n Write-Host -Foreground Yellow $info\r\n $host.UI.RawUI.WindowTitle = $info\r\n}\r\n\r\n$function:prompt = \"$function:prompt; `$global:_preExecHandled = `$false; if (`$global:_prevTitle) { `$host.UI.RawUI.WindowTitle = `$global:_prevTitle }\"\r\n```\r\n\r\nNote: Restoring the window title doesn't work on Unix-like platforms, because you can only _set_ the title there.\r\n\r\n",
    "created_at": "2020-12-25T09:39:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14484#issuecomment-751221242",
    "id": 751221242,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14484",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTIyMTI0Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/751221242/reactions"
    },
    "updated_at": "2021-04-19T21:10:16Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/751221242",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "You can get there today by doing this:\r\n\r\n```powershell\r\nfunction PSConsoleHostReadLine {\r\n    [Microsoft.PowerShell.PSConsoleReadLine]::ReadLine($Host.Runspace, $ExecutionContext)\r\n\r\n    preprompt | Out-Null\r\n}\r\n```\r\n\r\nThat'll have the same limitations that in-engine support would have. Aside from changing the window title, I'm not sure how this could be used effectively.  A real world example using the technique above would go a long way.",
    "created_at": "2020-12-28T15:04:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14484#issuecomment-751741668",
    "id": 751741668,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14484",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTc0MTY2OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/751741668/reactions"
    },
    "updated_at": "2020-12-28T15:04:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/751741668",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "That's a much simpler workaround, @SeeminglyScience, thanks. In the absence of a dedicated event such as ` $ExecutionContext.InvokeCommand.PreExecutionAction` that should work fine (assuming `PSReadLine` is loaded, which is a reasonable assumption).\r\n\r\nAdapted to a simplified version of @kilasuit's [workaround](https://github.com/PowerShell/PowerShell/issues/14484#issuecomment-751104386):\r\n\r\n```powershell\r\nfunction PSConsoleHostReadLine {\r\n \r\n  # Prompt the user for a command line to submit, save it in a variable and\r\n  # pass it through, by enclosing it in (...)\r\n  ($line = [Microsoft.PowerShell.PSConsoleReadLine]::ReadLine($Host.Runspace, $ExecutionContext))\r\n\r\n  if ($line.Trim()) { # Only react to non-blank lines.\r\n\r\n    # Synthesize status info.\r\n    $info = \"Launched [$line] at: $(get-date)\"\r\n    \r\n    # Set the window title to the status info...\r\n    $host.UI.RawUI.WindowTitle = $info\r\n\r\n    # ... and print the same information to the host (only) (\"`e[33m\" is yellow).\r\n    # Note: We use Out-Host to strictly print to the host.\r\n    #       Using Write-Host would pollute the information stream (#6).\r\n    $host.UI.SupportsVirtualTerminal ? \"`e[033m$info`e[m\" : $info | Out-Host\r\n\r\n  }\r\n  \r\n}\r\n```\r\n\r\nBy using `Out-Host` rather than `Write-Host` to print the status information, pollution of the output streams is avoided, while still recording it in transcripts.\r\n\r\nIt still amounts to _visual_ pollution, however - though that may be desired.\r\n\r\nExample screenshot (note the window title and the info printed in yellow):\r\n\r\n![image](https://user-images.githubusercontent.com/588825/103229583-5aacc880-4901-11eb-9113-5c9830f253ff.png)\r\n\r\nA way to _lessen_ this pollution would be to offer a way to _redraw the prompt string in place_:\r\nSay you submit `Get-Date` at prompt `PS C:\\>` and just before execution the entire command line is _reprinted in place_ as, e.g., \r\n`PS C:\\ [launched at 12/28/2020 11:31:12]> Get-Date`\r\n\r\n@kilasuit, is that what you had in mind?\r\n\r\nIf so, the question is: is this technically feasible, in a manner that doesn't disrupt transcripts?\r\n\r\n\r\n\r\n",
    "created_at": "2020-12-28T16:39:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14484#issuecomment-751779615",
    "id": 751779615,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14484",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTc3OTYxNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/751779615/reactions"
    },
    "updated_at": "2020-12-28T16:49:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/751779615",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> A way to _lessen_ this pollution would be to offer a way to _redraw the prompt string in place_:\r\n> Say you submit `Get-Date` at prompt `PS C:\\>` and just before execution the entire command line is _reprinted in place_ as, e.g.,\r\n> `PS C:\\ [launched at 12/28/2020 11:31:12]> Get-Date`\r\n\r\nThat's not impossible, but that would be a very challenging work item to make consistent.  You'd have to keep track of exactly how much the prompt initially wrote, clear it, re-write it, and then force PSRL to re-render.  Also every custom `PSHost` would have to copy that logic, as `prompt` processing is currently left to the host.  Add in how different terminal emulators process these types of escape sequences a little bit differently and it's hard to imagine this being implemented consistently.\r\n\r\n> If so, the question is: is this technically feasible, in a manner that doesn't disrupt transcripts?\r\n\r\nI think the only feasible option transcript wise would be to just write the re-rendered prompt normally.",
    "created_at": "2020-12-28T19:46:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14484#issuecomment-751842776",
    "id": 751842776,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14484",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTg0Mjc3Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/751842776/reactions"
    },
    "updated_at": "2020-12-28T19:46:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/751842776",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "See also: #15271, which also contains a more complete change-the-window-title-while-a-command-is-running workaround.",
    "created_at": "2021-04-19T20:58:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14484#issuecomment-822780225",
    "id": 822780225,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14484",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjc4MDIyNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822780225/reactions"
    },
    "updated_at": "2021-04-19T20:58:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822780225",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "The ask is a function to run before an accepted command line gets executed, so change the title to differentiate from #15104, which asks for a way to call custom functions before evaluating the 'Prompt' function.",
    "created_at": "2021-06-26T00:07:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14484#issuecomment-868891160",
    "id": 868891160,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14484",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2ODg5MTE2MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/868891160/reactions"
    },
    "updated_at": "2021-06-26T00:07:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/868891160",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  }
]
