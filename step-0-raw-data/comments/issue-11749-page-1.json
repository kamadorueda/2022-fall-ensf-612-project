[
  {
    "author_association": "COLLABORATOR",
    "body": "Since `ArrayList` is [officially not recommended](https://docs.microsoft.com/en-us/dotnet/api/system.collections.arraylist?view=netframework-4.8#remarks) does it make sense to add improvements for it?",
    "created_at": "2020-02-01T13:53:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11749#issuecomment-581032365",
    "id": 581032365,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11749",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MTAzMjM2NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/581032365/reactions"
    },
    "updated_at": "2020-02-01T13:53:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/581032365",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I think not worth it\r\n",
    "created_at": "2020-02-01T14:20:09Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11749#issuecomment-581034583",
    "id": 581034583,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11749",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MTAzNDU4Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/581034583/reactions"
    },
    "updated_at": "2020-02-01T14:20:09Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/581034583",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Good to know about the official deprecation notice, @SeeminglyScience.\r\n\r\nHowever, people will likely continue to use it (what they usually care about is efficient iterative growth, not type homogeneity, and `[System.Collections.Generic.List[object]]` is a keyboardful, even though it is better behaved), and the - situational - inconsistency described here will continue to cause confusion.\r\n\r\nTherefore, _if it is a reasonably quick and simple fix_, my vote is to do it. It is the kind of issue that trips you up in practice, but isn't big enough to warrant documenting.\r\n\r\n---\r\n\r\nLooking at the bigger picture, this takes us back to how it would be nice to have a well-behaved list type that is a first-class citizen (#5643), and perhaps even `+=` support for mutable collections (#5805).\r\n",
    "created_at": "2020-02-01T14:29:39Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11749#issuecomment-581035443",
    "id": 581035443,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11749",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MTAzNTQ0Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/581035443/reactions"
    },
    "updated_at": "2020-02-01T14:31:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/581035443",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Good to know about the official deprecation notice, @SeeminglyScience.\r\n\r\nSorry I should have been more explicit, but it *is not necessarily* deprecated.  Just recommended against.\r\n\r\n> However, people will likely continue to use it (what they usually care about is efficient iterative growth, not type homogeneity, and `[System.Collections.Generic.List[object]]` is a keyboardful, even though it is better behaved), and the - situational - inconsistency described here will continue to cause confusion.\r\n\r\nIf it is efficiency they're after, I highly doubt `ArrayList` is getting the same improvements that go into `List<T>`.  Plus having to null the output of `Add` has some overhead and imo makes it more cumbersome than `List<T>`.\r\n\r\nMainly though, if an API is not recommended, and there is a clear alternative, making it *easier* to use seems counter productive.\r\n\r\n> Looking at the bigger picture, this takes us back to how it would be nice to have a well-behaved list type that is a first-class citizen (#5643), and perhaps even `+=` support for mutable collections (#5805).\r\n\r\nThe topic of `+=` being mapped to `Add` is a mixed bag imo.  It would be the only case (I think) of an assignment operator not *actually* assigning something.  Even with PowerShell's custom array addition, you're still assigning the new array. Same with C# and delegates.  It's always `LHS = LHS + RHS` and this would change that.  Is that a problem though? ü§∑‚Äç‚ôÇ \r\n\r\nActually now that I think about it C# does it for event handlers, where it calls the `add_` accessor.  So maybe there's precedent.",
    "created_at": "2020-02-01T14:56:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11749#issuecomment-581037837",
    "id": 581037837,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11749",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MTAzNzgzNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/581037837/reactions"
    },
    "updated_at": "2020-02-01T14:56:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/581037837",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Mainly though, if an API is not recommended, and there is a clear alternative, making it easier to use seems counter productive.\r\n\r\nAgreed in general, but this is more of a _bug fix_ than an improvement.\r\n\r\nTo put it differently: Leaving the inconsistency no more encourages users to abandon `ArrayList` than fixing would promote its (ill-advised) continued use:\r\n\r\n`[System.Collections.ArrayList] 42` not working is (a) likely to make you work around it with `[System.Collections.ArrayList] @(42)`, and, conversely, (b) does nothing to alert you to the fact that you should be using `[System.Collections.Generic.List[object]] 42` instead.\r\n\r\n(Not having to worry about `.Add()` polluting your output stream is a much more compelling reason, by contrast, but the challenge in both cases is that you have to _know_ about the alternative.)\r\n\r\nThe net effect of the current behavior is just a situational-and-therefore-perfidious inconsistency that is a nuisance in practice, hence my recommendation to fix it.\r\n\r\nBut enough about that: we now know the pros and cons, and it is clearly not a big issue in the grand scheme of things:\r\n\r\nIf consensus forms around this assessment and someone is knowledgeable enough to fix this quickly and safely, I'm hoping they will.\r\n\r\nI do find the tangent re better built-in list support interesting, so I'll say more about that in a separate comment.\r\n\r\n",
    "created_at": "2020-02-01T17:24:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11749#issuecomment-581050859",
    "id": 581050859,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11749",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MTA1MDg1OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/581050859/reactions"
    },
    "updated_at": "2020-02-01T18:13:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/581050859",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "(Tangent-only alert.)\r\n\r\n> The topic of `+=` being mapped to `.Add()` is a mixed bag imo. It would be the only case (I think) of an assignment operator not _actually_ assigning something.\r\n\r\nI agree that that would be problematic; @PetSerAl  originally voiced the concern and proposed implementing a specialized list type that doesn't violate the equivalence of `$a += $b` and `$a = $a + $b` while still performing well (though reference equality would not be maintained) - see https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-367866807.\r\n\r\nThe C# `+=` syntax for adding event delegates is indeed an interesting anomaly.\r\n\r\n> Even with PowerShell's custom array addition, you're still assigning the new array.\r\n\r\nYes, but for users not concerned with reference equality that usually isn't a _functional_ problem - but with high iteration counts becomes a _performance_ concern.\r\n\r\nAdditionally, what's tricky about `+=` currently is that it quietly converts a non-array collection type to an `[object[]]` array, which adds quiet loss of type fidelity to the performance concern:\r\n\r\n```powershell\r\n$var = [System.Collections.Generic.List[object]] 42\r\n$var += 43 # creates a *copy* of the list *as an array*, with the new element appended.\r\n$var.GetType().Name   # -> 'Object[]' !!\r\n```\r\n\r\nSuggesting that `+=` be mapped to `.Add()` is seductive (it was the _starting point_ of #5805), but ultimately too problematic. \r\n\r\nIn light of that, the best that could be done with `+=` for non-array LHS values is to create copies _as the LHS type_ rather than as an array (which wouldn't address the _performance_ concerns and may not always be possible).\r\n\r\nFor a potential future built-in `[list]` type, @PetSerAl's proposal strikes me as the best way forward.\r\n\r\nI suggest continuing the conversation at #5805.\r\n\r\n",
    "created_at": "2020-02-01T18:12:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11749#issuecomment-581055065",
    "id": 581055065,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11749",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MTA1NTA2NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/581055065/reactions"
    },
    "updated_at": "2020-02-01T18:12:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/581055065",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@mklement0  This does sound like a bug. I would have expected the cast to work on anything that implements `IList`.\r\n\r\nSeparately, with respect to `+=` the solution might be to use [persistent data structures](https://en.wikipedia.org/wiki/Persistent_data_structure) (which are totally not what they sound like.) They are used in extensively in [Clojure](https://clojure.org/) and are quite performant. With persistent data structures, it should be possible to preserve the semantic while getting a significant performance gain.",
    "created_at": "2020-02-02T01:52:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11749#issuecomment-581088781",
    "id": 581088781,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11749",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4MTA4ODc4MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/581088781/reactions"
    },
    "updated_at": "2020-02-02T01:52:50Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/581088781",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/50499275?v=4",
      "events_url": "https://api.github.com/users/bpayette/events{/privacy}",
      "followers_url": "https://api.github.com/users/bpayette/followers",
      "following_url": "https://api.github.com/users/bpayette/following{/other_user}",
      "gists_url": "https://api.github.com/users/bpayette/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/bpayette",
      "id": 50499275,
      "login": "bpayette",
      "node_id": "MDQ6VXNlcjUwNDk5Mjc1",
      "organizations_url": "https://api.github.com/users/bpayette/orgs",
      "received_events_url": "https://api.github.com/users/bpayette/received_events",
      "repos_url": "https://api.github.com/users/bpayette/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/bpayette/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bpayette/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/bpayette"
    }
  }
]
