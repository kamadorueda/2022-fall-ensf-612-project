[
  {
    "author_association": "NONE",
    "body": "Other community confusion probably due to this inconsistency:\r\n\r\n- https://superuser.com/questions/213848/using-powershell-call-native-command-line-app-and-capture-stderr\r\n- https://stackoverflow.com/questions/10666101/lastexitcode-0-but-false-in-powershell-redirecting-stderr-to-stdout-gives-n\r\n- https://stackoverflow.com/questions/2095088/error-when-calling-3rd-party-executable-from-powershell-when-using-an-ide\r\n- https://github.com/dahlbyk/posh-git/issues/109\r\n- https://social.technet.microsoft.com/Forums/windowsserver/en-US/5cf33607-abc5-4715-96b8-b2c056e5b8cb/why-am-i-getting-a-native-command-error?forum=winserverpowershell\r\n- https://stackoverflow.com/questions/21002919/running-a-remote-powershell-script-with-a-git-command-in-it-results-in-nativecom\r\n\r\nI haven't evaluated each one, but I believe this has been a pain point for years.\r\n",
    "created_at": "2017-06-13T03:28:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-307996323",
    "id": 307996323,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzk5NjMyMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/307996323/reactions"
    },
    "updated_at": "2017-06-13T03:37:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/307996323",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2715647?v=4",
      "events_url": "https://api.github.com/users/BurtHarris/events{/privacy}",
      "followers_url": "https://api.github.com/users/BurtHarris/followers",
      "following_url": "https://api.github.com/users/BurtHarris/following{/other_user}",
      "gists_url": "https://api.github.com/users/BurtHarris/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BurtHarris",
      "id": 2715647,
      "login": "BurtHarris",
      "node_id": "MDQ6VXNlcjI3MTU2NDc=",
      "organizations_url": "https://api.github.com/users/BurtHarris/orgs",
      "received_events_url": "https://api.github.com/users/BurtHarris/received_events",
      "repos_url": "https://api.github.com/users/BurtHarris/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BurtHarris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BurtHarris/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BurtHarris"
    }
  },
  {
    "author_association": "MEMBER",
    "body": " I believe https://github.com/PowerShell/PowerShell/issues/3415 is a way to address part of your concern.  This repo isn't for reporting Windiws PowerShell nor ISE issues, that would be [Uservoice](https://windowsserver.uservoice.com/forums/301869-powershell).  ",
    "created_at": "2017-06-13T05:14:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-308008885",
    "id": 308008885,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODAwODg4NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 4,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308008885/reactions"
    },
    "updated_at": "2017-06-13T05:14:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308008885",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "NONE",
    "body": "Thanks @SteveL-MSFT,  here's my Uservoice link: https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/19582069-inconsistant-handling-of-native-command-stderr.   Unfortunately I don't think this will get much attention as many people have dismissed it as something PowerShell can't handle.   \r\n\r\nAs to cross-platform PowerShell, in this case, I believe that the ISE provides the more desirable behavior, allowing easy access to trapping stderr.   I believe such behavior is also available using PS remoting, but haven't tested it.   Without this behavior (or something similar) it puts cross-platform PowerShell at a disadvantage from other environments which clearly separate stderr and stdout.     ",
    "created_at": "2017-06-13T17:27:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-308189570",
    "id": 308189570,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODE4OTU3MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308189570/reactions"
    },
    "updated_at": "2017-06-13T17:27:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308189570",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2715647?v=4",
      "events_url": "https://api.github.com/users/BurtHarris/events{/privacy}",
      "followers_url": "https://api.github.com/users/BurtHarris/followers",
      "following_url": "https://api.github.com/users/BurtHarris/following{/other_user}",
      "gists_url": "https://api.github.com/users/BurtHarris/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BurtHarris",
      "id": 2715647,
      "login": "BurtHarris",
      "node_id": "MDQ6VXNlcjI3MTU2NDc=",
      "organizations_url": "https://api.github.com/users/BurtHarris/orgs",
      "received_events_url": "https://api.github.com/users/BurtHarris/received_events",
      "repos_url": "https://api.github.com/users/BurtHarris/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BurtHarris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BurtHarris/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BurtHarris"
    }
  },
  {
    "author_association": "NONE",
    "body": "The parallel to `set -eu` is an interesting one.   However the assertions you made in #3415 $errorActionPreference not working for native commands  is NOT always true, nor documented as a feature.   I suggest it's an (undesirable) quirk of the way local native commands are implemented.   \r\n\r\nThe [MSDN public API docs](https://msdn.microsoft.com/en-us/library/system.management.automation.actionpreference(v=vs.85).aspx) say:\r\n\r\n> Defines the Action Preference options. These options determine what will happen when a particular type of event occurs. For example, setting shell variable ErrorActionPreference to \"Stop\" will cause the command to stop when an otherwise non-terminating error occurs.\r\n\r\n",
    "created_at": "2017-06-13T17:39:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-308192998",
    "id": 308192998,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODE5Mjk5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308192998/reactions"
    },
    "updated_at": "2017-06-13T17:40:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308192998",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2715647?v=4",
      "events_url": "https://api.github.com/users/BurtHarris/events{/privacy}",
      "followers_url": "https://api.github.com/users/BurtHarris/followers",
      "following_url": "https://api.github.com/users/BurtHarris/following{/other_user}",
      "gists_url": "https://api.github.com/users/BurtHarris/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BurtHarris",
      "id": 2715647,
      "login": "BurtHarris",
      "node_id": "MDQ6VXNlcjI3MTU2NDc=",
      "organizations_url": "https://api.github.com/users/BurtHarris/orgs",
      "received_events_url": "https://api.github.com/users/BurtHarris/received_events",
      "repos_url": "https://api.github.com/users/BurtHarris/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BurtHarris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BurtHarris/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BurtHarris"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "The difference between the ISE and the CLI should be fixed by https://github.com/PowerShell/PowerShell/commit/161940c9aae8aab88324cc1f30d61385bd98991a - but that change would need to be back ported to Windows PowerShell.\r\n\r\nWith that change, I expect (but have not confirmed) that you'll get consistency, but not the behavior you desire.\r\n\r\nI can say with certainty that tools do write to stderr under normal conditions, e.g., some tools write their logon/logo message to stderr to make it easy to redirect that message to `/dev/null` or `nul`, and that's why the default is to not report stderr output as an error in the cli.\r\n\r\n",
    "created_at": "2017-06-13T17:57:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-308198184",
    "id": 308198184,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODE5ODE4NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308198184/reactions"
    },
    "updated_at": "2017-06-13T17:57:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308198184",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "NONE",
    "body": "Thanks, @lzybkr .   That PR seems to further codify the _undesirable_ separation between native command and cmdLet by adding a Boolean flag to `_WriteErrorSkipAllowCheck`.     I suspect you are right, and it's not the behavior I want.    ",
    "created_at": "2017-06-13T18:17:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-308203520",
    "id": 308203520,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODIwMzUyMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308203520/reactions"
    },
    "updated_at": "2017-06-13T18:17:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308203520",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2715647?v=4",
      "events_url": "https://api.github.com/users/BurtHarris/events{/privacy}",
      "followers_url": "https://api.github.com/users/BurtHarris/followers",
      "following_url": "https://api.github.com/users/BurtHarris/following{/other_user}",
      "gists_url": "https://api.github.com/users/BurtHarris/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BurtHarris",
      "id": 2715647,
      "login": "BurtHarris",
      "node_id": "MDQ6VXNlcjI3MTU2NDc=",
      "organizations_url": "https://api.github.com/users/BurtHarris/orgs",
      "received_events_url": "https://api.github.com/users/BurtHarris/received_events",
      "repos_url": "https://api.github.com/users/BurtHarris/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BurtHarris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BurtHarris/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BurtHarris"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@SteveL-MSFT: The ISE is incidental, the problem _does_ affect PS Core:\r\n\r\n* When ~~remoting~~ a _host other than the console host_ is involved (which includes the ISE and _remoting_ contexts, even when invoked from the console), there is a fundamental difference in how external-utility calls are being handled; there is no obvious reason for this difference, and the inconsistency is problematic.\r\n\r\n* ~~The _remoting_ scenarios actually integrates much better with PowerShell's error handling when calling external utilities, whereas the current _non-remoting_ behavior is unhelpful.~~\r\n\r\nUndoubtedly, changing the behavior (at least by default) would be a high-profile breaking change.\r\n\r\nWhile there _is_ a documented difference in how remoting handles errors (from `Invoke-Command`'s help),\r\n\r\n> Errors that result from the command that Invoke-Command runs are included in the command results. Errors that would be terminating errors in a local command are treated as non-terminating errors in a remote command.\r\n\r\n, this difference does _not_ explain the current behavior with external utilities.\r\n\r\nLet me summarize Burt's findings for contrast:\r\n\r\n---\r\n\r\n**(Non-remoting) console-hosts invocations:**\r\n          \r\n```powershell\r\n& {\r\n  $shell, $option = (('sh', '-c'), ('cmd', '/c'))[$env:OS -eq 'Windows_NT']; \r\n  $Error.Clear(); $ErrorActionPreference = 'Stop'\r\n  try {  $null = & $shell $option nosuch } catch { 'dang!' }\r\n  $?; $Error.Count\r\n}\r\n```\r\n\r\nOutput:\r\n\r\n```none\r\n/bin/sh: nosuch: command not found   # (stderr printed straight to console in default color (Unix error message)\r\nFalse   # no exception triggered, $? reflects nonzero exit code\r\n0     # nothing was recorded in $Error\r\n```\r\n\r\n* Stderr output is passed straight through to the console, _not_ printed in red.\r\n* Since nothing is written to PowerShell's error stream - and therefore nothing getting captured in `$Error` -  using `$ErrorActionPreference = 'stop'` with `try` / `catch` has no effect.\r\n* The _only_ integration with PowerShell's error handling is that `$?` is set based on whether the exit code is zero (`$True`) or not (`$False`) (and the exit code is reflected in `$LASTEXITCODE`), but - unlike in the remoting scenarios - stderr output _alone_ does _not_ cause `$?` to be set to `$False`.\r\n\r\nCAVEAT: The behavior changes fundamentally when stderr is _redirected_ (becomes like the remoting-scenario behavior(!)): see #4002\r\n\r\nIn short:\r\n  * Without using explicit redirection (`2>&1` , `2>file`), there is no way to detect the presence of  or inspect stderr output.\r\n   * Unlike PowerShell errors, which print in red, stderr output blends in with stdout output in the console (though it wouldn't be captured or redirected as part of the success stream, given that it prints straight to the console (in the absence of explicit redirection of the _error_ stream)).\r\n\r\n---\r\n\r\n**Non-console-host invocations**, including in the ISE and in remoting contexts:\r\n\r\nThere, calls interact _differently_ with  PowerShell's error handling, with **stderr output treated as if _non-terminating errors_ had been reported**; specifically:\r\n\r\n```powershell\r\n# Run in *elevated* session, with *remoting set up*.\r\nInvoke-Command -Computer . {\r\n  $shell, $option = (('sh', '-c'), ('cmd', '/c'))[$env:OS -eq 'Windows_NT']; \r\n  $Error.Clear(); $ErrorActionPreference = 'Stop'\r\n  try {  $null = & $shell $option nosuch } catch { 'dang!' }\r\n  $?; $Error.Count\r\n}\r\n```\r\n\r\nOutput:\r\n\r\n```powershell\r\ndang!  # An exception was triggered and caught - stderr output was considered a non-terminating error\r\nTrue  # ($? is $True, because try/catch reset it)\r\n1  # The stderr line *was* recorded in $Error\r\n```\r\n\r\n* Every stderr output line is output as an error record and also recorded in the automatic `$Error` collection.\r\n\r\n* As in non-remoting consoles, automatic variable `$?` is set to `$False`  for nonzero exit codes, but _also_ when _any stderr output_ was produced - independently of the exit code.\r\n\r\n* Combining `$ErrorActionPreference = 'Stop'` with a `Try` / `Catch` handler ONLY triggers the catch handler if there's at least 1 line of _stderr_ output, and not with a nonzero exit code, even though the latter is the only true failure signal.\r\n\r\nIn short:\r\n\r\n* In ~~remoting scenarios~~ non-console-host invocations, _stderr output_ _behaves like non-terminating errors_ (as cmdlets would report).\r\n* However, there is _no_ complementary mapping of _nonzero exit codes_ to _terminating errors_, which means that `$ErrorActionPreference = 'Stop'` with a `Try` / `Catch`  doesn't catch a _quietly_ failing utility (one that signals failure by its _exit code only_).\r\n   * Explicitly testing `$LASTEXITCODE` (or `$?`, if no `try` / `catch` was involved) is still needed.\r\n   * ~~A possible solution is to make the behavior similar to that of .NET method calls (whose exceptions are treated as non-terminating errors _without_ `try` / `catch`, but _are_ caught if enclosed in `try` / `catch` - although that could be considered a historical wart itself); translated to this scenario:~~ \r\n     * ~~As before: outside of `try` / `catch`, merely reflect a nonzero exit code in `$LASTEXITCODE`, without further action.~~\r\n     * ~~New: inside of `try` / `catch`, throw an exception if the exit code is nonzero.~~\r\n",
    "created_at": "2017-06-13T20:44:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-308242927",
    "id": 308242927,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODI0MjkyNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 1,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308242927/reactions"
    },
    "updated_at": "2017-07-24T14:17:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308242927",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "I found 5 random complaints about the ISE or remoting reporting errors with native executables where there was no error:\r\n\r\nhttps://stackoverflow.com/questions/31449220/powershell-ise-wrongly-interprets-openssl-exe-normal-output-as-error\r\nhttps://stackoverflow.com/questions/10856609/why-is-powershell-ise-showing-errors-that-powershell-console-does-not-show\r\nhttps://stackoverflow.com/questions/12537254/tell-powershell-ise-to-not-send-stderr-to-write-error\r\nhttps://stackoverflow.com/questions/2095088/error-when-calling-3rd-party-executable-from-powershell-when-using-an-ide\r\nhttps://stackoverflow.com/questions/18380227/psexec-throws-error-messages-but-works-without-any-problems\r\n\r\nThis is why `powershell.exe` behaves as it does - it is **common** for tools to use stderr and not report errors, and automation is broken if we assume otherwise. If you follow the links, you'll see those tools are common as well - `git`, `hg`, `openssl`, and 2 SysInternals utilities: `psexec`, and `du`.",
    "created_at": "2017-06-13T21:43:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-308257646",
    "id": 308257646,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODI1NzY0Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308257646/reactions"
    },
    "updated_at": "2017-06-13T21:43:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308257646",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@lzybkr I agree with you that we can't rely on stderr to be an Error, but it seems we have difference in behavior between local and remote PowerShell and that we should fix\r\n\r\ncc @PowerShell/area-remoting ",
    "created_at": "2017-06-13T22:15:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-308264491",
    "id": 308264491,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODI2NDQ5MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308264491/reactions"
    },
    "updated_at": "2017-06-13T22:15:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308264491",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "This is not remoting specifc, nor ISE specific. There was a bug in the native command processor, which was worked around in the console host, but not in the \"default host\" which is used by remoting, nor was it worked around in the ISE host.  I referenced the real fix above - https://github.com/PowerShell/PowerShell/commit/161940c9aae8aab88324cc1f30d61385bd98991a\r\n\r\nYou can see the bug in an ordinary runspace:\r\n\r\n```powershell\r\n$ps = [powershell]::Create().AddScript('cmd /c nosuch')\r\n$ps.Invoke()\r\n$ps.Streams.Error\r\n```\r\n\r\nIn Windows PowerShell, you'll get:\r\n\r\n```\r\ncmd : 'nosuch' is not recognized as an internal or external command,\r\nAt line:1 char:1\r\n+ cmd /c nosuch\r\n+ ~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: ('nosuch' is not...ternal command,:String) [], RemoteException\r\n    + FullyQualifiedErrorId : NativeCommandError\r\n\r\noperable program or batch file.\r\n```\r\n\r\nIn PowerShell Core, you'll get:\r\n\r\n```\r\n'nosuch' is not recognized as an internal or external command,\r\noperable program or batch file.\r\n```\r\n",
    "created_at": "2017-06-13T22:38:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-308268807",
    "id": 308268807,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODI2ODgwNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308268807/reactions"
    },
    "updated_at": "2017-06-13T22:38:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308268807",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "NONE",
    "body": "I've found an apparently undocumented workaround that captures `stderr` into `$Error` independent of host.   Its actually a bit surprising, but might serve as a inspiration for developing a supported solution for native commands that fits better with PowerShell's error handling design, but doesn't present the breaking change.\r\n\r\n**If you add `2>$null` to a native command, it captures `stderr` into $Error!**   I haven't dug into *how* this works, but it seems consistent across hosts.    Further [detail here](https://stackoverflow.com/questions/44488202/powershell-streaming-output/44491420#44491420).\r\n\r\nNow I don't particularly like the syntax, but stumbled on it when I tried `2>` which generated *Missing file specification after redirection operator.*    I had hoped that something like `2>$a` might act like `-ErrorVariable a`, but that's wishful thinking.   Resorted to `$null` as a placeholder to get around the syntactic requirement for redirection, and got behavior (including trapping if $errorActionPreference='stop') that's pretty much what I had hoped for.\r\n\r\nMy poking around was inspired by the `2>&1` syntax helps out for cases where a command uses stderr for non-error output, and looking for a complementary notation.    To extend this concept further and support full `-ErrorVariable a` semantics, it might be possible to support a redirection syntax like `2>&a` (getting rid of the dollar sign is a good thing.)  Since redirection is implemented by the shell, and not passed to the child's argv, it's transparent to the native utility.   \r\n\r\nIf a further similar _redirection-like_ syntax were able to add `-ErrorAction` semantics, it would put native command execution on a similar footing to cmdlet execution.   I was thinking perhaps something like `2>+Stop` to give just one native command terminating stderr semantics.",
    "created_at": "2017-06-14T01:04:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-308290289",
    "id": 308290289,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODI5MDI4OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 2,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308290289/reactions"
    },
    "updated_at": "2017-06-14T02:13:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308290289",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2715647?v=4",
      "events_url": "https://api.github.com/users/BurtHarris/events{/privacy}",
      "followers_url": "https://api.github.com/users/BurtHarris/followers",
      "following_url": "https://api.github.com/users/BurtHarris/following{/other_user}",
      "gists_url": "https://api.github.com/users/BurtHarris/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BurtHarris",
      "id": 2715647,
      "login": "BurtHarris",
      "node_id": "MDQ6VXNlcjI3MTU2NDc=",
      "organizations_url": "https://api.github.com/users/BurtHarris/orgs",
      "received_events_url": "https://api.github.com/users/BurtHarris/received_events",
      "repos_url": "https://api.github.com/users/BurtHarris/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BurtHarris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BurtHarris/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BurtHarris"
    }
  },
  {
    "author_association": "NONE",
    "body": "Also, `DefaultHost` is used in other contexts, e.g. `Start-Job`.   Will the 161940c9aae8aab88324cc1f30d61385bd98991a fix be a breaking change for them as well? ",
    "created_at": "2017-06-14T02:09:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-308299156",
    "id": 308299156,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODI5OTE1Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308299156/reactions"
    },
    "updated_at": "2017-06-14T02:09:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308299156",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2715647?v=4",
      "events_url": "https://api.github.com/users/BurtHarris/events{/privacy}",
      "followers_url": "https://api.github.com/users/BurtHarris/followers",
      "following_url": "https://api.github.com/users/BurtHarris/following{/other_user}",
      "gists_url": "https://api.github.com/users/BurtHarris/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BurtHarris",
      "id": 2715647,
      "login": "BurtHarris",
      "node_id": "MDQ6VXNlcjI3MTU2NDc=",
      "organizations_url": "https://api.github.com/users/BurtHarris/orgs",
      "received_events_url": "https://api.github.com/users/BurtHarris/received_events",
      "repos_url": "https://api.github.com/users/BurtHarris/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BurtHarris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BurtHarris/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BurtHarris"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@lzybkr: Thanks for finding the real cause - I've cleaned up my previous post accordingly.\r\n\r\n> it is common for tools to use stderr and not report errors, and automation is broken if we assume otherwise\r\n\r\nYou're right: external utilities have no choice other than to use stderr for anything that's _not data_, so stderr is frequently used even for non-error messages, and the only true indicator of an external utility's success is its _exit code_.\r\nMy initial thought was that it would be harmless to treat stderr lines as non-terminating PS errors, as they'd just collect in `$Error` without stopping the script (and how they should be _formatted for display_  is a secondary issue). \r\n\r\n**But I can definitely see how you do NOT want your script to abort with `$ErrorActionPreference = 'Stop'` in effect just because an external utility happens to write to stderr, and how `$?` should be set solely based on the _exit code_**.\r\n\r\n**In an ironic twist, that is precisely what happens when you explicitly want to _suppress_ stderr output currently (or redirect it to a file) - see #4002:**\r\n\r\n```powershell\r\n & { $ErrorActionPreference = 'stop'; cmd /c nosuch 2>$null; $? } # ABORTS\r\n```\r\n\r\nAs @BurtHarris has discovered, `2>$null` doesn't actually _just_ mean \"discard that stream's output\" (and `2>file` doesn't _just_ mean \"save that stream's output to a file\"), but it currently _also_ means \"quietly record the output lines as error records in `$Error`\", which is:\r\n\r\n* (a) completely unexpected\r\n* (b) badly interacts with `$ErrorActionPreference = 'stop'`, as demonstrated (writing to `$Error` apparently is tantamount to a non-terminating error)\r\n\r\nHowever, as @BurtHarris  mentions, there _is_ value in making stderr output available to subsequent commands, at least on demand, but `2>$null` is clearly _not_ the way to do it.\r\n\r\nFor instance, being able to inspect stderr input is important for ill-behaved external utilities that, instead of signaling success via their exit code, write to stderr _only_.\r\n\r\nSo, as @BurtHarris  suggests, having something analogous to `-ErrorVariable` would be helpful.\r\nWhile surfacing that via `>` is a natural candidate, it makes it difficult to separate the immediate output behavior from the record-in-a-variable behavior, unless some presumably awkward compound syntax is devised.\r\n\r\nAn `-ErrorAction` analog might also be nice - which raises similar syntax questions - but, based on the discussion above, its semantics should be tied to the _exit code_, not to _stderr output_.\r\n\r\n    ",
    "created_at": "2017-06-14T02:55:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-308305373",
    "id": 308305373,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODMwNTM3Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308305373/reactions"
    },
    "updated_at": "2017-06-14T02:59:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308305373",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@BurtHarris: Some more thoughts on the syntax of `>$null` and `>...` in general:\r\n\r\n* There's nothing special about the _syntax_ of `> $null`: `$null` is a reference to a _variable_ whose _value_ is used as the filename.\r\n\r\n  * The _semantics_ are special, however (and documented neither in `about_Redirection` nor `about_Automatic_Variables`), because a `$null` value conveniently acts as a \"portable null device\"; that is, you can use it in lieu of `NUL` on Windows, and in lieu of `/dev/null` on Unix; using an _empty string_ works too. _Am I missing something here?_\r\n      * On Windows, you actually _must_ use `$null` or `''` instead of `NUL` in PowerShell, because using `NUL` results in the following error:\r\n`out-file : FileStream was asked to open a device that was not a file. For support for devices like 'com1:' or 'lpt1:', call CreateFile, then use the FileStream constructors that take an OS handle as an IntPtr.`\r\n       * On Unix, PowerShell's `$null` / `''` shortcut for `/dev/null` is _not_ available in POSIX-like shells: They have no `$null`-equivalent type, and attempting to use the empty string (null string) as a redirection target results in an _error_.\r\n\r\n* Similarly, in `>a`, `a` is simply a bareword (unquoted token) that is treated like an (expandable string; in this case, _literal_ filename `a`.\r\n\r\n* `>&a` is indeed promising for introducing new functionality, because `&` is already established as having into-a-different-target(-stream) semantics, yet currently only a _digit_ is supported after the `&` (the index of a different PS stream).\r\n   * The absence of `$` before `a`, if `a` denotes a variable, makes perfect sense and is consistent with how `-ErrorVariable` works, for instance: you're passing the _name_ of a variable, not its _value_.\r\n\r\n* To elaborate on my concern about separating output behavior from collecting-in-a-variable behavior:\r\n\r\nWith cmdlets and advanced functions, you can do the following:\r\n\r\n```powershell\r\n# Passes errors through and, *independently*, captures them in variable $err.\r\nGet-Item /nosuch -ErrorVariable err \r\n\r\n# Redirects (suppresses) errors and, *independently*, captures them in variable $err.\r\nGet-Item /nosuch 2>$null -ErrorVariable err \r\n```\r\n\r\nHow would that translate to the proposed `>&` syntax for native utilities?\r\n\r\n```powershell\r\n# Expectation based on > semantics: collect error in $err *only*, do not pass errors through.\r\n# How do you pass them trough *and* collect them?\r\ncmd /c nosuch 2>&err\r\n```\r\n\r\nTherefore, to have the same flexibility as with `-ErrorVariable`, additional syntax is required, which would require a \"mini-DSL\" in the argument to `>&`, which may be problematic:\r\n\r\nFor instance:\r\n\r\n```powershell\r\n# Double the `&` to express the desire to pass through?\r\ncmd /c nosuch 2>&&err\r\n```\r\n\r\nThat said, even the existing collect-in-output-variable common parameters already have a mini-DSL (micro-DSL?): prepending `+` to the variable name specifies that the existing output variable contents be _appended_ to (e.g., `-ErrorVariable +err`), which, too, would have to be part of the potential new `>&...` syntax).\r\n\r\n\r\n\r\n",
    "created_at": "2017-06-14T13:38:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-308433651",
    "id": 308433651,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODQzMzY1MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308433651/reactions"
    },
    "updated_at": "2017-07-24T14:19:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308433651",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@lzybkr:\r\n\r\nYou can still defeat the fix in [161940c](https://github.com/PowerShell/PowerShell/commit/161940c9aae8aab88324cc1f30d61385bd98991a) via the _results_ of remoting or jobs, in the _caller's_ context:\r\n\r\n* Remoting example (`Invoke-Command`):\r\n\r\n```powershell\r\n# Run on Windows, with elevation and remoting set up.\r\n# ABORTS\r\n> & { $ErrorActionPreference = 'Stop'; Invoke-Command -Computer . { cmd /c nosuch }; 'After' } \r\n'nosuch' is not recognized as an internal or external command,  # in red; 'After' never executes\r\n```\r\n\r\n* Job example:\r\n\r\n```powershell\r\n# Run on Unix\r\n> & { $ErrorActionPreference = 'Stop'; Receive-Job -Wait -AutoRemove (Start-Job { sh -c nosuch }); 'After' }\r\n/bin/sh: nosuch: command not found  # in red; 'After' never executes\r\n```\r\n\r\nWhile the embedded command by itself, executed locally (in PS Core) now behaves as expected (stderr passed through, uncolored, to the console), it seems [_speculation alert - see next comment_] that the underlying error records  (which the stderr lines are apparently still being _emitted as_ in the local case, but _without getting written to the error stream_) are ultimately _still sent to the error stream_, namely by `Invoke-Command` / `Receive-Job` - at which point `$ErrorActionPreference = 'Stop'` kicks in and aborts the pipeline.\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2017-06-14T15:24:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-308466659",
    "id": 308466659,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODQ2NjY1OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308466659/reactions"
    },
    "updated_at": "2017-06-14T16:06:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308466659",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I may be getting confused here (I don't have the full picture): My assumption was that the referenced fix  - which is already in (at least) beta.2 - would take effect for _all_ hosts, but both `Invoke-Cmd` and `Receive-Job` still exhibit the _old_ behavior - see below.\r\n\r\nIs there another fix pending?\r\n\r\n```powershell\r\n# Run on Windows, with elevation and remoting set up.\r\n> Invoke-Command -Computer . { $Error.Clear(); cmd /c nosuch; $Error.Count }\r\n'nosuch' is not recognized as an internal or external command,\r\noperable program or batch file.\r\n2\r\n```\r\n\r\n`cmd`'s stderr output _was_ recorded in `$Error` (2 items, because 2 stderr lines were output).\r\n\r\n```powershell\r\n# On Unix\r\n> Receive-Job -Wait -AutoRemove (Start-Job { $Error.Clear(); sh -c nosuch; $Error.Count })\r\n/bin/sh: nosuch: command not found\r\n1\r\n```\r\n\r\n`sh`'s stderr output _was_ recorded in `$Error`.\r\n",
    "created_at": "2017-06-14T16:04:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-308478881",
    "id": 308478881,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODQ3ODg4MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308478881/reactions"
    },
    "updated_at": "2017-06-14T16:04:12Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308478881",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "Sleeping on this I can see the argument for not having stderr output trigger the catch block, but it would be really great if having $errorActionPreference = 'stop' did throw an exception when the program exited with a non-zero status code.    Combine that with capturing the stderr in $error, and somehow reflected in the exception thrown on exit, and its a much better package.   I think I've seen another issue on the status code treatment.",
    "created_at": "2017-06-14T20:01:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-308541915",
    "id": 308541915,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODU0MTkxNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308541915/reactions"
    },
    "updated_at": "2017-06-14T20:03:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/308541915",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2715647?v=4",
      "events_url": "https://api.github.com/users/BurtHarris/events{/privacy}",
      "followers_url": "https://api.github.com/users/BurtHarris/followers",
      "following_url": "https://api.github.com/users/BurtHarris/following{/other_user}",
      "gists_url": "https://api.github.com/users/BurtHarris/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BurtHarris",
      "id": 2715647,
      "login": "BurtHarris",
      "node_id": "MDQ6VXNlcjI3MTU2NDc=",
      "organizations_url": "https://api.github.com/users/BurtHarris/orgs",
      "received_events_url": "https://api.github.com/users/BurtHarris/received_events",
      "repos_url": "https://api.github.com/users/BurtHarris/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BurtHarris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BurtHarris/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BurtHarris"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Aborting execution / throwing an exception on any stderr output would be terrible. Lots of programs use stderr as a general logging stream (especially if stdout is used used to speak an IPC protocol).",
    "created_at": "2018-01-04T07:32:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-355216356",
    "id": 355216356,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTIxNjM1Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 8,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 8,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/355216356/reactions"
    },
    "updated_at": "2018-01-04T07:32:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/355216356",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10532611?v=4",
      "events_url": "https://api.github.com/users/felixfbecker/events{/privacy}",
      "followers_url": "https://api.github.com/users/felixfbecker/followers",
      "following_url": "https://api.github.com/users/felixfbecker/following{/other_user}",
      "gists_url": "https://api.github.com/users/felixfbecker/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/felixfbecker",
      "id": 10532611,
      "login": "felixfbecker",
      "node_id": "MDQ6VXNlcjEwNTMyNjEx",
      "organizations_url": "https://api.github.com/users/felixfbecker/orgs",
      "received_events_url": "https://api.github.com/users/felixfbecker/received_events",
      "repos_url": "https://api.github.com/users/felixfbecker/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/felixfbecker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/felixfbecker/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/felixfbecker"
    }
  },
  {
    "author_association": "NONE",
    "body": "well.. I think it happens right now (on PS 5.1.16299.251). I've just battled with a bunch of web-app building utilities (node, npm, ..) that really like to emit progress/status/summary/sidenotes/warning to stderr. I run them on remote device via PS-Remoting and, literally, any warning from stderr broke jobs.. eh..",
    "created_at": "2018-04-17T11:15:48Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-381953163",
    "id": 381953163,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTk1MzE2Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/381953163/reactions"
    },
    "updated_at": "2018-04-17T11:17:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/381953163",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1564880?v=4",
      "events_url": "https://api.github.com/users/quetzalcoatl/events{/privacy}",
      "followers_url": "https://api.github.com/users/quetzalcoatl/followers",
      "following_url": "https://api.github.com/users/quetzalcoatl/following{/other_user}",
      "gists_url": "https://api.github.com/users/quetzalcoatl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/quetzalcoatl",
      "id": 1564880,
      "login": "quetzalcoatl",
      "node_id": "MDQ6VXNlcjE1NjQ4ODA=",
      "organizations_url": "https://api.github.com/users/quetzalcoatl/orgs",
      "received_events_url": "https://api.github.com/users/quetzalcoatl/received_events",
      "repos_url": "https://api.github.com/users/quetzalcoatl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/quetzalcoatl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quetzalcoatl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/quetzalcoatl"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "(Not having read all of the rather long discussion here but here's my take on the basic console host/non-console host issue)\r\n\r\nHistorically, there was a fundamental difference between the console host and any other host. In the console host, if the output of a native command was not redirected in script, then the executable got the native console handle and PowerShell was unaware of what is being written to stdout/stderr. This is necessary because many Windows console executables use the console APIs to , for example, color their output. In fact, originally output was always redirected but when we started using the Windows build system from PowerShell, the lack of colored output was intolerable. Even more important, it allows console editors like vim.exe to work. If output was redirected, it wouldn't be possible to use a console editor from PowerShell.  And so there is a complex calculation to decide if the command was redirected or not and if it isn't, it writes straight to the console. All other (non-console) hosts have to do redirection all the time. \r\n\r\nAs far as error handling behaviour goes, here's simple error output to the console:\r\n```\r\nPS[1] (78) > $ErrorActionPreference=\"stop\"\r\nPS[1] (79) > try { cmd /c nosuchexe   } catch { \"blargh\" }\r\n'nosuchexe' is not recognized as an internal or external command, operable program or batch file.\r\n```\r\nNo trap is fired because PowerShell is unaware of the error output. But as soon as you introduce redirection:\r\n```\r\nPS[1] (80) > try { cmd /c nosuchexe 2>1  } catch { \"blargh\" }\r\nblargh\r\n```\r\nthe trap fires. \r\n\r\nAs inconsistent as this behaviour seems, changing it on Windows would probably be very bad.  But one thing to consider - we should probably be throwing if $? is false after executing a native command instead of depending on the error output.\r\n",
    "created_at": "2018-04-24T23:30:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-384112301",
    "id": 384112301,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDExMjMwMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384112301/reactions"
    },
    "updated_at": "2018-04-24T23:30:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384112301",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "NONE",
    "body": "Fascinating @BrucePay.   Thanks for the history lesson.   \r\n\r\nI agree that use of the error output stream isn't a reasonable basis for throwing.  I like the idea of $? testing, but it seems like that might be a breaking change for scripts.",
    "created_at": "2018-04-25T02:42:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-384143628",
    "id": 384143628,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDE0MzYyOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384143628/reactions"
    },
    "updated_at": "2018-04-25T02:42:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384143628",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2715647?v=4",
      "events_url": "https://api.github.com/users/BurtHarris/events{/privacy}",
      "followers_url": "https://api.github.com/users/BurtHarris/followers",
      "following_url": "https://api.github.com/users/BurtHarris/following{/other_user}",
      "gists_url": "https://api.github.com/users/BurtHarris/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BurtHarris",
      "id": 2715647,
      "login": "BurtHarris",
      "node_id": "MDQ6VXNlcjI3MTU2NDc=",
      "organizations_url": "https://api.github.com/users/BurtHarris/orgs",
      "received_events_url": "https://api.github.com/users/BurtHarris/received_events",
      "repos_url": "https://api.github.com/users/BurtHarris/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BurtHarris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BurtHarris/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BurtHarris"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Interesting backstory, indeed.\r\n\r\n> As inconsistent as this behaviour seems\r\n\r\nTo illustrate that with two examples of counter-intuitive behavior:\r\n\r\n```powershell\r\n# Explicitly ignore stderr output.\r\n$ErrorActionPreference = 'Stop'; try { whoami -nosuchoption 2>$null } catch { \"blargh\" }\r\n\r\n# Explicitly make stderr output success output\r\n$ErrorActionPreference = 'Stop'; try { whoami -nosuchoption 2>&1 } catch { \"blargh\" }\r\n```\r\n\r\nEven though the user intent is clearly _not_ to treat the external program's stderr output as an error, the `catch` block fires.\r\n\r\n> changing it on Windows would probably be very bad\r\n\r\nThe predominant hosts on Windows are the console and the ISE:\r\n\r\nNote: VSCode is catching up and will presumably take over eventually; fortunately, its built-in console's behavior is consistent with the regular console's, and it can even handle colored output.\r\n\r\nThere already is a fundamental inconsistency between the two, as discussed above, which is worth addressing:\r\n\r\n```powershell\r\n# NO redirection:\r\n# Throws in the ISE, but not in the regular console.\r\n$ErrorActionPreference = 'Stop'; whoami -nosuchoption; 'after'\r\n```\r\n\r\n* **The ISE behavior should be aligned with that of the regular console**, given that production runs typically happen in the latter.\r\n\r\n* **The same goes for the invisible default host used in the context of _remoting_, including background jobs** - see [above](https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-308478881).\r\n\r\n---\r\n\r\nSeparately, **it's hard to imagine that anyone has _relied_ on the obscure behavior of `2>` redirection being introduced to a command causing _errors_ with `$ErrorActionPreference = 'Stop'` in effect**.\r\n\r\nTherefore, I think this **falls into [Bucket 3: Unlikely Grey Area](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area) and should be fixed as well.**\r\n\r\n---\r\n\r\n> we should probably be throwing if $? is false after executing a native command instead of depending on the error output.\r\n\r\nEven leaving backward compatibility aside, I don't think that `$?` being `$False` should throw _by default_, for two reasons:\r\n\r\n  * It makes more sense to conceive of an external program's non-success as a _non-terminating_ error (even though the PS distinction between non-terminating and (statement)-terminating doesn't apply), and `$?` commendably already reflects the success status (by being the equivalent of `$LASTEXITCODE -eq 0`).\r\n\r\n * Even though nonzero exit codes by convention signal failure, there are external programs that use them to convey _status_ information [too] (e.g, `Robocopy.exe` on Windows).\r\n\r\nThus, it would make sense for `$ErrorActionPreference` to apply to external (\"native\") programs too, as [@BurtHarris has previously suggested](https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-308541915), so that users could _opt into_ treating nonzero exit codes as fatal with value `'Stop'`.\r\n\r\n   * That said, introducing this now would be a seriously breaking change, so the best we can do is to introduce something like `$ExternalErrorActionPreference` to complement `$ErrorActionPreference`.\r\n\r\nAdditionally, it would be nice to be able to do that on a _per-command_ basis, analogous to `-ErrorAction Stop`, as [@BurtHarris has previously suggested](https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-308290289), which necessitates introducing new syntax.\r\n",
    "created_at": "2018-04-25T15:41:43Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-384333675",
    "id": 384333675,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDMzMzY3NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384333675/reactions"
    },
    "updated_at": "2018-04-25T20:46:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384333675",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 \r\n\r\n> Even leaving backward compatibility aside, I don't think that $? being $False should throw by default, for two reasons:\r\n\r\nNo - not by default, it would throw only if `$ErrorActionPreference= \"stop\"`. Sorry if I was unclear.\r\n\r\n@SteveL-MSFT \r\nAlso note that if this worked, the requirements expressed in #3415 would be largely mitigated.\r\n\r\n> Even though nonzero exit codes by convention signal failure, there are external programs that use nonzero exit code to convey status information [too] (e.g, Robocopy.exe on Windows).\r\n\r\nYeah - Windows is just wacky that way :-(  It's one of the reasons we started PowerShell. I would, however, be _very_ surprised to find any *nix utilities that didn't follow the 0==success; non-zero==error. Consider the `true` and `false` utilities. `true` is a program that simply exits with a 0 result code. `false` is a program that exits with 1. Regardless, there is no chance of us getting every Windows utility owner to sanitize their code so PowerShell script authors using a native command on Windows will just have to be aware of and deal with any idiosyncrasies. \r\n\r\n> Note: VSCode is catching up and will presumably take over eventually; fortunately, its built-in console's behavior is consistent with the regular console's, and it can even handle colored output.\r\n\r\nVSCode actually wraps a (new-style) conhost object so, rather obviously, it will have behaviour identical with the regular Windows console. Now if this had been possible when we did the ISE, we would have done the same thing. (We did explore some options like Detours and API hooking but it was deemed too fragile for our purposes.) And if Windows had had proper pseudo-ttys from the start everything would have been skittles and beer :-) It is ironic that the Unix legacy of physical terminals and serial cables led to an architecture (pseudo-ttys) so much more flexible than Window's console subsystem.",
    "created_at": "2018-04-25T19:43:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-384410554",
    "id": 384410554,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDQxMDU1NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384410554/reactions"
    },
    "updated_at": "2018-04-25T19:43:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384410554",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@BrucePay - you shouldn't be surprised that some *nix utilities use the exit code to signal a choice from multiple options, similar to `choice.exe` on Windows. One example is `whiptail`:\r\n\r\n```\r\njason@asdf01:~$ whiptail --yesno \"Run script?\" 20 60; echo \"Exit code $?\"\r\nExit code 0\r\njason@asdf01:~$ whiptail --yesno \"Run script?\" 20 60; echo \"Exit code $?\"\r\nExit code 1\r\n``` ",
    "created_at": "2018-04-25T20:04:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-384416433",
    "id": 384416433,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDQxNjQzMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384416433/reactions"
    },
    "updated_at": "2018-04-25T20:04:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384416433",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Good point, @lzybkr;  even more fundamentally, the [POSIX `test` utility](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/test.html)  (often in the guise of alias `[` - whether as a true external utility or as a shell builtin) expresses a negative _test result_ with exit code `1`.\r\n\r\n@BrucePay, similarly, `false` does not signal an _error_, just an \"unsuccessful result\", to quote from the `man` page on macOS.\r\n\r\n`set -e` in POSIX-like shells, as discussed in #3415,  has a bunch of complex rules that govern exceptions; while they generally make sense, they are also hard to remember; here are some important ones:\r\n\r\n* Commands that report a nonzero exit code  in _conditionals_ (`if`, `elif`, `while`, `until`) do _not_ cause a fatal error, and neither in a command / pipeline that starts with `!` (negation).\r\n\r\n* In a _pipeline_, only the pipeline's _overall_ exit code matters - i.e., as long as the _last_ command in the pipeline reports exit code `0`, no fatal error occurs. (Bash has the off-by-default `pipefail` option that makes the first failing command's exit code the overall exit code).\r\n\r\n* In `&&` and `||`-joined commands / pipelines, only the _last_ command's nonzero exit code causes a fatal error.\r\n\r\nSo, if we implement something like `$ExternalErrorActionPreference = 'Stop'` / a `set -e` equivalent, we need to decide how to handle all these cases.\r\n\r\nAside from that, it would still be handy to have an ad-hoc _opt-out_ mechanism (and _opt-in_; generally, as with `-ErrorAction`) to have a concise per-command mechanism for suppressing a fatal error.\r\n\r\nThough, once implemented, perhaps `&&` and `||` are sufficient, using the following idioms:\r\n\r\n```powershell\r\n# Ad-hoc opt-in to fatal error\r\nfoo -bar || throw\r\n\r\n# Ad-hoc opt-out from `$ExternalErrorActionPreference = 'Stop'` - assumes `set -e`-like rules\r\nfoo -bar || $null\r\n```\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2018-04-25T21:18:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-384437456",
    "id": 384437456,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDQzNzQ1Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384437456/reactions"
    },
    "updated_at": "2018-04-25T21:18:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384437456",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Yes, the `set -e` rules are insanely complex because *nix shell scripting implements so many operators just through executables like `[`.\r\n\r\nImo these problems don't apply to PowerShell because it has native `if`, `while`, `-Confirm`, `$host.ui.PromptForChoice()`. It is in the unique position to _not_ introduce these confusing rules, but instead introduce an option that works consistently. If you are writing a PowerShell script, there is no reason for you to use `[`. Maybe a shell script you _call into_ uses it, but then only the final exit code of the shell script matters. And if against all odds you do have a use case for this, you should wrap it in a try/catch or not use `$CommandErrorActionPreference = 'Stop'` (or whatever name is decided on).",
    "created_at": "2018-04-25T22:29:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-384453962",
    "id": 384453962,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDQ1Mzk2Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384453962/reactions"
    },
    "updated_at": "2018-04-25T22:29:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384453962",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10532611?v=4",
      "events_url": "https://api.github.com/users/felixfbecker/events{/privacy}",
      "followers_url": "https://api.github.com/users/felixfbecker/followers",
      "following_url": "https://api.github.com/users/felixfbecker/following{/other_user}",
      "gists_url": "https://api.github.com/users/felixfbecker/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/felixfbecker",
      "id": 10532611,
      "login": "felixfbecker",
      "node_id": "MDQ6VXNlcjEwNTMyNjEx",
      "organizations_url": "https://api.github.com/users/felixfbecker/orgs",
      "received_events_url": "https://api.github.com/users/felixfbecker/received_events",
      "repos_url": "https://api.github.com/users/felixfbecker/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/felixfbecker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/felixfbecker/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/felixfbecker"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@BrucePay \r\n> it allows console editors like vim.exe to work. If output was redirected, it wouldn't be possible to use a console editor from PowerShell.\r\n\r\nAnd considering I have these often used aliases in my profile:\r\n```\r\nNew-Alias nano 'C:\\Program Files\\Git\\usr\\bin\\nano.exe'\r\nNew-Alias vim  'C:\\Program Files\\Git\\usr\\bin\\vim.exe'\r\n```\r\nI appreciate the current behavior very much.  :-)",
    "created_at": "2018-04-26T01:12:48Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-384481432",
    "id": 384481432,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDQ4MTQzMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384481432/reactions"
    },
    "updated_at": "2018-04-26T01:12:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384481432",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@felixfbecker:\r\n\r\nGood point, but while the rules don't apply _directly_ to PowerShell, we still need to think carefully about how to _adapt_ them to our use:\r\n\r\nYes, PowerShell conditionals act on _outputs streams_ / _return values_, whereas conditionals in POSIX-like act on _invisible status values_ (exit codes), irrespective of outputs:\r\n\r\n```sh\r\n# Passes stdout and stderr *through* and acts on the exit code only.\r\n$ if ls /nosuch 2>&1; then echo 'YES'; else echo 'NO'; fi\r\nls: /nosuch: No such file or directory\r\nNO\r\n```\r\n\r\nvs.\r\n\r\n```powershell\r\n# *Captures* stdout and acts on whether that is *nonempty* only.\r\nPS> if (ls /nosuch 2>&1) { 'YES' } else { 'NO' }\r\nYES\r\n```\r\n\r\nThis is a fundamental difference that users will have to understand, irrespective of any `set -e` implementation in PowerShell.\r\n\r\nIn the context of a `set -e` PowerShell solution, however, the question still arises as to how to handle the above failure in the context of the `if` conditional:  Should the nonzero exit code be ignored due to its use in a _conditional_?\r\n\r\nThe same goes for nonzero exit codes in `&&` / `||` chains: for instance, if an external-program call is followed by `||`, it is very reasonable to assume that its failure is _anticipated_ and should therefore not result in an automatic fatal error.\r\n\r\n\r\n\r\n",
    "created_at": "2018-04-26T16:06:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-384697494",
    "id": 384697494,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDY5NzQ5NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384697494/reactions"
    },
    "updated_at": "2018-04-26T19:29:44Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384697494",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> In the context of a set -e PowerShell solution, however, the question still arises as to how to handle the above failure in the context of the if conditional: Should the nonzero exit code be ignored due to it use in a conditional?\r\n\r\nIn my opinion no. If you explicitly use `$CommandErrorPreference='Stop'` you should use a `try`/`catch` to catch a non-zero exit code:\r\n```powershell\r\ntry {\r\n  ls /nosuch 2>&1\r\n  'YES'\r\n} catch {\r\n  'NO'\r\n}\r\n```\r\njust like you would do with `Get-ChildItem`. If you did this with `Get-ChildItem` and had `$ErrorActionPreference='Stop'` you would have to use a try/catch too, and the point of this proposal is to allow the behaviour of native commands to match the behaviour of cmdlets. That inconsistency is more confusing than an inconsistency with bash - the inconsistency with bash already exists (for the good), but it's inconsistent between cmdlets and commands.\r\n\r\nAlso, PowerShell is a lot higher-level than bash. I wouldn't expect this to work in a higher-level language with exceptions either:\r\n```js\r\nif (await fs.readdir('/nosuch')) {\r\n  return 'YES'\r\n} else {\r\n  return 'NO'\r\n}\r\n```\r\n\r\nTL;DR no magic rules around conditionals. PowerShell is already different, but it should be consistent.",
    "created_at": "2018-04-26T19:28:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-384762349",
    "id": 384762349,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDc2MjM0OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384762349/reactions"
    },
    "updated_at": "2018-04-26T19:28:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384762349",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10532611?v=4",
      "events_url": "https://api.github.com/users/felixfbecker/events{/privacy}",
      "followers_url": "https://api.github.com/users/felixfbecker/followers",
      "following_url": "https://api.github.com/users/felixfbecker/following{/other_user}",
      "gists_url": "https://api.github.com/users/felixfbecker/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/felixfbecker",
      "id": 10532611,
      "login": "felixfbecker",
      "node_id": "MDQ6VXNlcjEwNTMyNjEx",
      "organizations_url": "https://api.github.com/users/felixfbecker/orgs",
      "received_events_url": "https://api.github.com/users/felixfbecker/received_events",
      "repos_url": "https://api.github.com/users/felixfbecker/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/felixfbecker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/felixfbecker/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/felixfbecker"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@felixfbecker:\r\n\r\nThat generally makes sense to me - the fewer rules the better, certainly.\r\n\r\nIn the context of _conditionals_ I agree that we don't need an exception.\r\n\r\nHowever, given the potential introduction of `&&`  and `||` (see #3241), the case is less clear-cut there:\r\n\r\nIn the absence of exceptions, the need for a concise way to opt-in/out of `$ErrorActionPreference` for a single command for _external_ programs then becomes more pressing (cmdlets/advanced functions can already do it with `-ErrorAction`):\r\n\r\nLet's take the following (contrived) example:\r\n\r\n```powershell\r\n# Get files from /dir1, if available, otherwise from /dir2\r\n$files = ls /dir1 2>$null || ls /dir2\r\n```\r\n\r\nWith `$ErrorActionPreference = 'Stop'` in effect (and no exceptions for non-final commands in `&&` / `||` chains), you'd  then have to write:\r\n\r\n```powershell\r\n# Get files from /dir1, if available, otherwise from /dir2\r\n$files = try { ls /dir1 2>$null } catch {} || ls /dir2\r\n```\r\n\r\nIf that is the only way to handle this situation - which it currently would be, short of not using `||` at all -  the utility of `&&` and `||` is severely curtailed.\r\n\r\nThe alternative to finding a per-external-program-call `-ErrorAction`-equivalent syntax is to retain _one_ `set -e` exception: to _not_ treat nonzero exit codes as fatal in `&&` / `||`-chained statements _except_ in the very last one.\r\n\r\nAs stated, the very act of using `&&` and `||` implies an expectation of potential failure, so I don't think this particular exception would be problematic.\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2018-04-26T20:15:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-384775097",
    "id": 384775097,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDc3NTA5Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384775097/reactions"
    },
    "updated_at": "2018-04-27T12:48:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384775097",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Ugh, I hate it when coupling between proposals is discovered :(\r\n\r\nI also noticed we were getting a bit off-topic here because this issue is about STDERR handling.\r\nMy stand on this is that STDERR output not cause an exception under any circumstances.\r\nIf we introduce a `set -e` equivalent, it might be useful to introduce a new magic variable like `$Stderr` to use in a `catch` block after a command failed, or a different stderr-to-variable-redirect operator as long as it doesn't mean tee'ing STDERR to both the error output _and_ the variable becomes difficult (because that is what I would usually want).",
    "created_at": "2018-04-26T21:22:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-384793007",
    "id": 384793007,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDc5MzAwNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384793007/reactions"
    },
    "updated_at": "2018-04-26T21:22:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/384793007",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10532611?v=4",
      "events_url": "https://api.github.com/users/felixfbecker/events{/privacy}",
      "followers_url": "https://api.github.com/users/felixfbecker/followers",
      "following_url": "https://api.github.com/users/felixfbecker/following{/other_user}",
      "gists_url": "https://api.github.com/users/felixfbecker/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/felixfbecker",
      "id": 10532611,
      "login": "felixfbecker",
      "node_id": "MDQ6VXNlcjEwNTMyNjEx",
      "organizations_url": "https://api.github.com/users/felixfbecker/orgs",
      "received_events_url": "https://api.github.com/users/felixfbecker/received_events",
      "repos_url": "https://api.github.com/users/felixfbecker/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/felixfbecker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/felixfbecker/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/felixfbecker"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Adding my too cents here. In my opinion, it is console behavior, what in fault here, not the ISE one.\r\n\r\nTechnically when you type `Command text here` in the PowerShell prompt, PowerShell effectively rewrite it like:\r\n```powershell\r\n. {Command text here} 2>&1 | Out-Default\r\n```\r\nSo, error stream (number 2) always redirected and with success stream (number 1) always piped to `Out-Default`. Thus, technically PowerShell should never patch `stdout` and `stderr` directly to console, but should redirect them and pass them to `Out-Default` for processing.\r\n![Console](https://user-images.githubusercontent.com/17184058/40884419-e3f5d96c-671b-11e8-9502-1c04101b577b.png)\r\n![ISE](https://user-images.githubusercontent.com/17184058/40884420-e420e882-671b-11e8-9864-f28047c8cfbc.png)\r\nAs you can see ISE does it properly in that case, but console host patch `stdout` and `stderr` directly to console and not allow customized `Out-Default` to process output.\r\nNote: that this is not console host flaw in particular, it is PowerShell engine checking presence of console window for process and act according to that. You can observe the same direct patching behavior in ISE if you allocate console windows yourself.\r\n![ISE with console](https://user-images.githubusercontent.com/17184058/40884643-6f1273a8-6720-11e8-8293-83021b17a0de.png)\r\nActually it is very easy to disable that direct patching. You just need that `Out-Default` command to have any name different from `Out-Default`:\r\n![Console](https://user-images.githubusercontent.com/17184058/40884717-ba1adccc-6721-11e8-9404-ad7d451c22d0.png)\r\nThus, if you want consistent behavior you can just use `New-Alias Out-Default Out-Host`, but running interactive applications in console after that would be problematic.",
    "created_at": "2018-06-03T08:40:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-394146666",
    "id": 394146666,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDE0NjY2Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/394146666/reactions"
    },
    "updated_at": "2018-06-03T08:41:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/394146666",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/17184058?v=4",
      "events_url": "https://api.github.com/users/PetSerAl/events{/privacy}",
      "followers_url": "https://api.github.com/users/PetSerAl/followers",
      "following_url": "https://api.github.com/users/PetSerAl/following{/other_user}",
      "gists_url": "https://api.github.com/users/PetSerAl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PetSerAl",
      "id": 17184058,
      "login": "PetSerAl",
      "node_id": "MDQ6VXNlcjE3MTg0MDU4",
      "organizations_url": "https://api.github.com/users/PetSerAl/orgs",
      "received_events_url": "https://api.github.com/users/PetSerAl/received_events",
      "repos_url": "https://api.github.com/users/PetSerAl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PetSerAl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PetSerAl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PetSerAl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @PetSerAl - that's great background information.\r\n\r\nI think we agree that the engine sending stdout and stderr directly to the console is justified for _technical_ reasons, as also explained by @BrucePay in more detail [above](https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-384112301).\r\n\r\nHowever, stderr output _not_ getting sent to PowerShell's error stream is also the right thing to do _conceptually_ - for _all_ hosts:\r\n\r\nGiven how common it is to send just diagnostic and other type of _non-error_ output to stderr, **it makes no sense to treat stderr as the equivalent of PowerShell's error stream** - only the latter is truly dedicated to errors only.\r\n(And sending all stderr lines as individual `[ErrorRecord]` instances to `$Error` would pollute the latter.)\r\n\r\nIn other words: the current behavior of non-console hosts such as the ISE is flawed, and the inconsistency should be resolved toward the current console behavior.\r\n\r\nHowever, it should be possible to _redirect_ stderr output on an _opt-in_ basis, via `2>`.\r\n\r\nWhile you _can_ do that in principle already, the fact that it is currently coupled with the `$ErrorActionPreference` value is problematic:\r\n\r\nGiven that you cannot infer from the presence of stderr output that an error has occurred, `2>` redirection should _always_ be possible, even when `$ErrorActionPreference = 'Stop'` happens to be in effect, for any host - see #4002\r\n\r\n",
    "created_at": "2018-06-06T21:15:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-395216165",
    "id": 395216165,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5NTIxNjE2NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/395216165/reactions"
    },
    "updated_at": "2018-06-06T21:15:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/395216165",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Would like to add that Azure the DevOps's PowerShell task is being treated as a remote context. As a result, lots of my team's build scripts work correctly during local development, but fail inexplicably when running in Azure DevOps.",
    "created_at": "2019-12-11T21:41:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-564745761",
    "id": 564745761,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NDc0NTc2MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/564745761/reactions"
    },
    "updated_at": "2019-12-11T21:41:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/564745761",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/37971212?v=4",
      "events_url": "https://api.github.com/users/reynoldsbd/events{/privacy}",
      "followers_url": "https://api.github.com/users/reynoldsbd/followers",
      "following_url": "https://api.github.com/users/reynoldsbd/following{/other_user}",
      "gists_url": "https://api.github.com/users/reynoldsbd/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/reynoldsbd",
      "id": 37971212,
      "login": "reynoldsbd",
      "node_id": "MDQ6VXNlcjM3OTcxMjEy",
      "organizations_url": "https://api.github.com/users/reynoldsbd/orgs",
      "received_events_url": "https://api.github.com/users/reynoldsbd/received_events",
      "repos_url": "https://api.github.com/users/reynoldsbd/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/reynoldsbd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/reynoldsbd/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/reynoldsbd"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I think this is worth going through with regards to our looking at this RFC: https://github.com/PowerShell/PowerShell-RFC/pull/88\r\n\r\nIt's hard for me to summarize what's coming out of this issue, but I think I agree with @mklement0 that we shouldn't make the breaking change of capturing stderr as errors by default. And I think we're more inclined to capture non-zero exit codes as part of the linked RFC. \r\n\r\nBut there's another issue about remote vs. local context (and/or differing hosts) that we maybe do want to address? ",
    "created_at": "2020-07-13T22:16:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-657820548",
    "id": 657820548,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzgyMDU0OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657820548/reactions"
    },
    "updated_at": "2020-07-13T22:16:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657820548",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1255187?v=4",
      "events_url": "https://api.github.com/users/joeyaiello/events{/privacy}",
      "followers_url": "https://api.github.com/users/joeyaiello/followers",
      "following_url": "https://api.github.com/users/joeyaiello/following{/other_user}",
      "gists_url": "https://api.github.com/users/joeyaiello/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/joeyaiello",
      "id": 1255187,
      "login": "joeyaiello",
      "node_id": "MDQ6VXNlcjEyNTUxODc=",
      "organizations_url": "https://api.github.com/users/joeyaiello/orgs",
      "received_events_url": "https://api.github.com/users/joeyaiello/received_events",
      "repos_url": "https://api.github.com/users/joeyaiello/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/joeyaiello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joeyaiello/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/joeyaiello"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I still believe strongly that stderr is not a reasonable indicator that a real error has taken place. If anything, the behavior should be changed such that we're consistent that stderr does *not* throw a PowerShell error. (Though again, I feel the opposite about non-zero exit codes, where are much more consistently thrown when erroneous behavior occurs.)",
    "created_at": "2020-07-29T23:05:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-665974894",
    "id": 665974894,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NTk3NDg5NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665974894/reactions"
    },
    "updated_at": "2020-07-29T23:05:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/665974894",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1255187?v=4",
      "events_url": "https://api.github.com/users/joeyaiello/events{/privacy}",
      "followers_url": "https://api.github.com/users/joeyaiello/followers",
      "following_url": "https://api.github.com/users/joeyaiello/following{/other_user}",
      "gists_url": "https://api.github.com/users/joeyaiello/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/joeyaiello",
      "id": 1255187,
      "login": "joeyaiello",
      "node_id": "MDQ6VXNlcjEyNTUxODc=",
      "organizations_url": "https://api.github.com/users/joeyaiello/orgs",
      "received_events_url": "https://api.github.com/users/joeyaiello/received_events",
      "repos_url": "https://api.github.com/users/joeyaiello/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/joeyaiello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joeyaiello/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/joeyaiello"
    }
  },
  {
    "author_association": "NONE",
    "body": "@joeyaiello\r\n> I still believe strongly that stderr is not a reasonable indicator that a real error has taken place. If anything, the behavior should be changed such that we're consistent that stderr does not throw a PowerShell error.\r\n\r\nWhat about to add an option to PowerShell that will treat `stderr` from native commands as [the information stream](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/write-information?view=powershell-7)?",
    "created_at": "2020-07-30T08:00:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-666206932",
    "id": 666206932,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NjIwNjkzMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/666206932/reactions"
    },
    "updated_at": "2020-07-30T08:00:12Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/666206932",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1651867?v=4",
      "events_url": "https://api.github.com/users/n9/events{/privacy}",
      "followers_url": "https://api.github.com/users/n9/followers",
      "following_url": "https://api.github.com/users/n9/following{/other_user}",
      "gists_url": "https://api.github.com/users/n9/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/n9",
      "id": 1651867,
      "login": "n9",
      "node_id": "MDQ6VXNlcjE2NTE4Njc=",
      "organizations_url": "https://api.github.com/users/n9/orgs",
      "received_events_url": "https://api.github.com/users/n9/received_events",
      "repos_url": "https://api.github.com/users/n9/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/n9/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/n9/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/n9"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@n9, we already have the ability to redirect the stderr stream selectively with `2>`.\r\n\r\nWhile this is somewhat wasteful - every line is wrapped in a `System.Management.Automation.ErrorRecord` instance (which, curiously, wraps a `System.Management.Automation.RemoteException` exception) with `FullyQualifiedErrorId` `NativeCommandError` - it works in principle.\r\n\r\nHowever, there are ~~two~~ three current problems - which I think are solvable without resorting to a different stream:\r\n\r\n* If `$ErrorActionPreference` happens to be `Stop`, the first stderr line redirected this way unexpectedly triggers a script-terminating (runspace-terminating) error - even though stderr output should never be assumed to be an error (originally reported in #4002).\r\n\r\n* Every stderr line redirected this way is needlessly recorded in the `$Error` collection (originally reported in #11133).\r\n\r\n* `$?` is unexpectedly set to `$false` if at least one stderr line is emitted, even if the process exits with exit code `0` (originally reported in #10512).\r\n\r\nIt sounds like all that is needed to exempt `NativeCommandError` records from being subject to `$ErrorActionPreference`, from getting recorded in `$Error` and from setting `$?` to `$false`.\r\n\r\nThere's also the tangentially related #11134\r\n",
    "created_at": "2020-07-30T16:10:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-666495478",
    "id": 666495478,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NjQ5NTQ3OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/666495478/reactions"
    },
    "updated_at": "2020-08-02T15:52:47Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/666495478",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "@mklement0, I am currently using redirection. \r\n\r\nMy suggestion is to have one option (similar to `$ErrorActionPreference`) that can optionally solve all three problems you have mentioned:\r\n\r\n1. *Somewhat wastefulness* of explicit redirection, especially, in case of scripts that call a lot of native commands like `git`.\r\n2. Triggering the error in case of `$ErrorActionPreference` = `Stop`.\r\n3. Needless recording in the `$Error` collection.\r\n\r\nThe current implementation is good for PowerShell commands, but complicates invoking of native commands.",
    "created_at": "2020-07-30T16:54:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-666522918",
    "id": 666522918,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NjUyMjkxOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/666522918/reactions"
    },
    "updated_at": "2020-07-30T16:54:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/666522918",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1651867?v=4",
      "events_url": "https://api.github.com/users/n9/events{/privacy}",
      "followers_url": "https://api.github.com/users/n9/followers",
      "following_url": "https://api.github.com/users/n9/following{/other_user}",
      "gists_url": "https://api.github.com/users/n9/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/n9",
      "id": 1651867,
      "login": "n9",
      "node_id": "MDQ6VXNlcjE2NTE4Njc=",
      "organizations_url": "https://api.github.com/users/n9/orgs",
      "received_events_url": "https://api.github.com/users/n9/received_events",
      "repos_url": "https://api.github.com/users/n9/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/n9/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/n9/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/n9"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@n9 \r\n\r\nYour suggestion won't solve 1., because writing to the information stream requires that stderr lines be wrapped in `System.Management.Automation.InformationRecord` instances.\r\n\r\n2. and 3. can be solved as I've suggested, as a direct fix - to me there is no need for the added complexity that comes with new features.\r\n\r\nGenerally, we want to _unify_ treatment of PowerShell commands and external programs as much as possible.\r\n\r\n\r\n",
    "created_at": "2020-07-30T17:03:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-666527603",
    "id": 666527603,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NjUyNzYwMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/666527603/reactions"
    },
    "updated_at": "2020-07-31T18:14:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/666527603",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "Reviewing this issue for the first time in over a year.   Thanks for the continued attention to it, please forgive me if I'm not fully up-to-date.\r\n\r\n@joeyaiello said\r\n> I still believe strongly that stderr is not a reasonable indicator that a real error has taken place.\r\n\r\nI would agree if we changed the word \"reasonable\" to \"sufficient\".   There are too many different practices in command-line native commands for it to be considered \"sufficient\".    The tricky part is that the meaning of stderr output is _both_ context and content dependent.  But a script knows (or defines) the context, and what content might indicate a real error or meaningful information stream event.\r\n\r\nHas any thought been put into using a preference variable to let a script customize the treatment of stderr handling?   Using $ErrorActionPreference is problematic, but how about something like $StderrActionPreference?\r\n\r\nI'm not sure if a simple true/false or ignore/continue/error/abort is flexible enough, but perhaps some sort of regex matching approach, similar to how IDEs are adapted to different compile tools (like a VSCode task problemMatcher.)  [This line-of-thought is perhaps informed by thought years ago about a composable text-to-object mapping facility for PS, but at the time I was thinking bout stdout text.]\r\n\r\n",
    "created_at": "2020-07-31T18:13:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-667272939",
    "id": 667272939,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NzI3MjkzOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/667272939/reactions"
    },
    "updated_at": "2020-07-31T18:43:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/667272939",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2715647?v=4",
      "events_url": "https://api.github.com/users/BurtHarris/events{/privacy}",
      "followers_url": "https://api.github.com/users/BurtHarris/followers",
      "following_url": "https://api.github.com/users/BurtHarris/following{/other_user}",
      "gists_url": "https://api.github.com/users/BurtHarris/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BurtHarris",
      "id": 2715647,
      "login": "BurtHarris",
      "node_id": "MDQ6VXNlcjI3MTU2NDc=",
      "organizations_url": "https://api.github.com/users/BurtHarris/orgs",
      "received_events_url": "https://api.github.com/users/BurtHarris/received_events",
      "repos_url": "https://api.github.com/users/BurtHarris/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BurtHarris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BurtHarris/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BurtHarris"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@BurtHarris there is an existing [RFC](https://github.com/PowerShell/PowerShell-RFC/pull/88) that the @PowerShell/powershell-committee supports for handling exit codes.  Stderr isn't reliable to detect errors as native tools use it as for anything that isn't intended to be stdout.  Exit codes have their own problems where non-zero doesn't indicate an error, but most of the time, a non-zero exit code is an error case.\r\n\r\nChanging stderr to be information stream is a breaking change in that redirection of stream 2 would not work as expected for native commands.  Unfortunately, I think we are stuck with this design.\r\n\r\nHowever, I agree with @mklement0's proposal that we special case `NativeCommandError` error records from triggering `$ErrorActionPreference` as a way to resolve this specific issue.",
    "created_at": "2020-07-31T20:03:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-667326937",
    "id": 667326937,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NzMyNjkzNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/667326937/reactions"
    },
    "updated_at": "2020-07-31T20:03:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/667326937",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@PowerShell/powershell-committee discussed this and agrees for 7.1 we should have `NativeCommandError` error records not trigger `$ErrorActionPreference` although a breaking change, but is likely bucket 3",
    "created_at": "2020-08-05T22:44:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-669572093",
    "id": 669572093,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2OTU3MjA5Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 4,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/669572093/reactions"
    },
    "updated_at": "2020-08-05T22:44:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/669572093",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Glad to see that this is getting tackled:\r\n\r\n* I see that it is currently implemented as an _experimental feature_, `PSNotApplyErrorActionToStderr`\r\n\r\n* Unfortunately, it doesn't address the `$?` issue (which I snuck in later [above](https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-666495478), based on #10512 - I should have made it explicit)\r\n\r\nThat is, even with the experimental feature enabled the following doesn't work as intended:\r\n\r\n```powershell\r\n# On Unix\r\nPS> sh -c 'ls nosuch; :' 2>$null; $?\r\nFalse # !! Should be $true\r\n```\r\n\r\nSince the _exit code_ of the `sh` command is `0`, `$?` should be `$true` - irrespective of the presence of stderr output, _whether redirected or not_.\r\n\r\nThis matters primarily with respect to `&&` and `||`:\r\n\r\n```powershell\r\n# On Unix\r\nPS> sh -c 'ls nosuch; :' 2>$null || 'why did I get here?'\r\nwhy did I get here?\r\n```\r\n\r\n\r\n",
    "created_at": "2020-08-07T22:15:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-670746527",
    "id": 670746527,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MDc0NjUyNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/670746527/reactions"
    },
    "updated_at": "2020-08-07T22:16:47Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/670746527",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Just so we don't lose track of this: see #13393",
    "created_at": "2020-08-10T20:44:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-671580477",
    "id": 671580477,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MTU4MDQ3Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/671580477/reactions"
    },
    "updated_at": "2020-08-10T20:44:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/671580477",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": ":tada:This issue was addressed in #13361, which has now been successfully released as `v7.1.0-preview.6`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.6)\n",
    "created_at": "2020-08-17T22:21:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-675144346",
    "id": 675144346,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTE0NDM0Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/675144346/reactions"
    },
    "updated_at": "2020-08-17T22:21:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/675144346",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/in/26612?v=4",
      "events_url": "https://api.github.com/users/msftbot%5Bbot%5D/events{/privacy}",
      "followers_url": "https://api.github.com/users/msftbot%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/msftbot%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/msftbot%5Bbot%5D/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apps/msftbot",
      "id": 48340428,
      "login": "msftbot[bot]",
      "node_id": "MDM6Qm90NDgzNDA0Mjg=",
      "organizations_url": "https://api.github.com/users/msftbot%5Bbot%5D/orgs",
      "received_events_url": "https://api.github.com/users/msftbot%5Bbot%5D/received_events",
      "repos_url": "https://api.github.com/users/msftbot%5Bbot%5D/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/msftbot%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msftbot%5Bbot%5D/subscriptions",
      "type": "Bot",
      "url": "https://api.github.com/users/msftbot%5Bbot%5D"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I was REALLY happy to see this was addressed. However, although the problem seemed to be fixed in 7.1.0-preview.7, it has regressed in 7.1.0-rc.1.  :'(   Was this intentional?  I didn't see anything in release notes about it; did I miss it? I hope that it can be re-fixed...  @SteveL-MSFT @mklement0 ",
    "created_at": "2020-10-20T23:40:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-713200612",
    "id": 713200612,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzIwMDYxMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/713200612/reactions"
    },
    "updated_at": "2020-10-20T23:40:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/713200612",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/771085?v=4",
      "events_url": "https://api.github.com/users/jazzdelightsme/events{/privacy}",
      "followers_url": "https://api.github.com/users/jazzdelightsme/followers",
      "following_url": "https://api.github.com/users/jazzdelightsme/following{/other_user}",
      "gists_url": "https://api.github.com/users/jazzdelightsme/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jazzdelightsme",
      "id": 771085,
      "login": "jazzdelightsme",
      "node_id": "MDQ6VXNlcjc3MTA4NQ==",
      "organizations_url": "https://api.github.com/users/jazzdelightsme/orgs",
      "received_events_url": "https://api.github.com/users/jazzdelightsme/received_events",
      "repos_url": "https://api.github.com/users/jazzdelightsme/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jazzdelightsme/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jazzdelightsme/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jazzdelightsme"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "(False alarm: it's still an experimental feature ('PSNotApplyErrorActionToStderr'), and I didn't realize it was on by default in prev7, and back to off in rc1.)",
    "created_at": "2020-10-21T01:35:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3996#issuecomment-713235772",
    "id": 713235772,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3996",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxMzIzNTc3Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/713235772/reactions"
    },
    "updated_at": "2020-10-21T01:35:20Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/713235772",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/771085?v=4",
      "events_url": "https://api.github.com/users/jazzdelightsme/events{/privacy}",
      "followers_url": "https://api.github.com/users/jazzdelightsme/followers",
      "following_url": "https://api.github.com/users/jazzdelightsme/following{/other_user}",
      "gists_url": "https://api.github.com/users/jazzdelightsme/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jazzdelightsme",
      "id": 771085,
      "login": "jazzdelightsme",
      "node_id": "MDQ6VXNlcjc3MTA4NQ==",
      "organizations_url": "https://api.github.com/users/jazzdelightsme/orgs",
      "received_events_url": "https://api.github.com/users/jazzdelightsme/received_events",
      "repos_url": "https://api.github.com/users/jazzdelightsme/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jazzdelightsme/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jazzdelightsme/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jazzdelightsme"
    }
  }
]
