[
  {
    "author_association": "COLLABORATOR",
    "body": "@iRon7 the general consensus in the community is to never use `[scriptblock]::Create()` or `Invoke-Expression` on any input that originates from somewhere the author does not have control over.\r\n\r\nGiven you have control over the string once it is loaded into a variable, I'd generally advise you verify the content of the string before you execute it as code.",
    "created_at": "2020-04-18T17:22:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12377#issuecomment-615907351",
    "id": 615907351,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12377",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNTkwNzM1MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615907351/reactions"
    },
    "updated_at": "2020-04-18T17:22:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/615907351",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> * Is there any _common_ way to **safely** pass expressions (or parts) to other cmdlets?\r\n\r\nIf you mean as text, you can use `Parser.ParseInput` to get an abstract syntax tree and analyze that (though if you're not already familar with the AST, it's very easy to miss something).  If you mean as a scriptblock, well as a command writer you can't really stop the caller from explicitly getting around best practices. As a sysadmin you can use applocker to enforce constrained language mode (to disable `[scriptblock]::Create()`) and restrict allowed commands.\r\n\r\n> * Is it possible to equip any of the existing commands that invoke expressions (like `Start-ThreadJob`) with a parameter that [Run Partially Trusted Code in a Sandbox](https://docs.microsoft.com/en-us/dotnet/framework/misc/how-to-run-partially-trusted-code-in-a-sandbox), meaning that the only connection for that script with the outside world would be the input (parameters) and the output of the script?\r\n\r\nCAS isn't supported in core, but I also don't think that's a sandbox in the way you're thinking.\r\n\r\n> * Shouldn't cmdlets (like `Sort-Object`) have any standard mechanism that prevents tempering with the system? meaning that these (calculated) expressions are only allowed to supply an output to the concerned cmdlet and noting else...\r\n\r\nI'm not really sure what the benefit would be.  If the code has already made it into a scriptblock, one of these are true:\r\n\r\n1. The code is trusted\r\n1. The environment isn't locked down\r\n1. Trusted code is creating scriptblocks from arbitrary user input",
    "created_at": "2020-04-19T03:58:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12377#issuecomment-616022427",
    "id": 616022427,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12377",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNjAyMjQyNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/616022427/reactions"
    },
    "updated_at": "2020-04-19T03:58:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/616022427",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "@vexx32, @SeeminglyScience, thank you for your responses.\r\n\r\n> the general consensus in the community is to never use `[scriptblock]::Create()` or `Invoke-Expression` on any input that originates from somewhere the author does not have control over.\r\n\r\n* The \"*community*\" should include developers writing (signed) scripts for enterprise companies and I am not so sure if they do recognize where their script might introduce a potential security hole for their company.\r\n* \"*... using `[scriptblock]::Create()`*\", <strike>the [`Invoke-Expression is considered harmful`](https://devblogs.microsoft.com/powershell/invoke-expression-considered-harmful/) but that is [primarily about preventing *unintended* execution of code (code injection)](https://stackoverflow.com/a/56988348/1701026). If it should take in account preventing against any deliberate malicious code injections, were does it differ from any other cmdlet/statement that invokes a command/script?</strike>.\r\nIt took me a while, but apparently the PowerShell security measurements against code injection emphasis on (not) fabricating a `[ScriptBlock]` rather than (securely) invoking them (that is where `Invoke-Expression` differs from other invitation methods and where the similarity with `[scriptblock]::Create()` is, where they both create script from a string.\r\n* \"*...any input that originates from somewhere the author does not have control over*\" if this is taken very strict, I guess this implies that you should only use hardcoded expressions. Meaning that if I want to make the example safe, I should change it to something like:\r\n\r\n```PowerShell\r\n$Sort = 'Name' # from Import-PowerShellDataFile .\\Configuration1.psd1\r\n$SortExpr = Switch ($Sort) {\r\n\t'Name' {{ $_.Name }}\r\n\t'Value' {{ $_.Value }}\r\n}\r\n$Data | Sort $SortExpr # (knowing that I can just do $Data | Sort $Sort, but that is not the point)\r\n```\r\n\r\nI am about to open a PSScriptAnalyzer `PSAvoidUsingScriptBlockCreate` \"*[ScriptBlock]::Create is used. Please remove [ScriptBlock]::Create from script and find other options instead*\" rule request for this as I like to conclude that for the same reason as **`PSAvoidUsingInvokeExpression`**,  `[ScriptBlock]::Create` should not be used as it fabricates a `[ScriptBlock]` based on input that ***either*** originates from somewhere the script author does not have control over **or could be a hardcoded as an expression `{ ... }` otherwise**.\r\nOr is this conclusion too short sighted?\r\n\r\nFor your background, I have a devops background and currently creating/maintaining some *reusable* PowerShell scripts and answering PowerShell question at StackOverflow for a hobby.  \r\nSome of these scripts have a `[ScriptBlock]` as a parameter, take [this stackoverflow example](https://stackoverflow.com/a/32890418/1701026):\r\n\r\n```PowerShell\r\nFunction Merge-Hashtables([ScriptBlock]$Operator) {\r\n    $Output = @{}\r\n    ForEach ($Hashtable in $Input) {\r\n        If ($Hashtable -is [Hashtable]) {\r\n            ForEach ($Key in $Hashtable.Keys) {$Output.$Key = If ($Output.ContainsKey($Key)) {@($Output.$Key) + $Hashtable.$Key} Else  {$Hashtable.$Key}}\r\n        }\r\n    }\r\n    If ($Operator) {ForEach ($Key in @($Output.Keys)) {$_ = @($Output.$Key); $Output.$Key = Invoke-Command $Operator}}\r\n    $Output\r\n}\r\n```\r\n\r\nSomehow I feel responsible of either:\r\n* Prevent the provided script coloring way outside the lines, meaning writing to the file system or registry where it is just supposed do nothing more than merging properties (in this case).\r\nOr:\r\n* Telling the user/developer/sysadmin that should never *use `[scriptblock]::Create()` or `Invoke-Expression` on any input that originates from somewhere the author does not have control over*, or better, refer to more formal drawer statement that also should apply to native cmdlets that have a `[ScriptBlock]`(or calculated expression) as a parameter.\r\n\r\nThe whole question actually arias from this [`ConvertTo-Expression` project](https://github.com/iRon7/ConvertTo-Expression) also related to this [How can I write a nested arbitrary associative Array value set to a .psd1 file in powershell?](https://stackoverflow.com/a/61301255/1701026) which does use `[scriptblock]::Create()` but I think it is actually safe by itself as it creates a `[ScriptBlock]` from an **object** and therefore the is output `[scriptblock]` is bound to just recreating the **object** (but I am not completely sure).\r\n\r\nAnyways, I have closed the request as it is clear (also after viewing the video at [PowerShell Security Best Practices](https://devblogs.microsoft.com/powershell/powershell-security-best-practices/) with the video recorded and available here: https://channel9.msdn.com/Events/Blue-Hat-Security-Briefings/BlueHat-Security-Briefings-Fall-2013-Sessions/PowerShell-Best-Practices) that there is no **way of** running partly trusted PowerShell code in a restricted security environment.\r\n\r\n\r\n<blockquote><img src=\"https://sec.ch9.ms/ch9/6293/6b23246a-31d5-4168-811c-1281ad1c6293/PowerShellBestPractices_960.jpg\" width=\"48\" align=\"right\"><div>Channel 9</div><div><strong><a href=\"https://channel9.msdn.com/Events/Blue-Hat-Security-Briefings/BlueHat-Security-Briefings-Fall-2013-Sessions/PowerShell-Best-Practices\">PowerShell Best Practices</a></strong></div><div>Microsoft's Lee Holmes talks about PowerShell operational security and PowerShell encrypting security in this BlueHat 2013 talk. Slides here:  https://blogs.msdn.microsoft.com/powershell/2013/12/16/po</div></blockquote>",
    "created_at": "2020-04-20T14:07:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12377#issuecomment-616577405",
    "id": 616577405,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12377",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNjU3NzQwNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/616577405/reactions"
    },
    "updated_at": "2020-04-20T14:10:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/616577405",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> that there is no way of running partly trusted PowerShell code in a restricted security environment.\r\n\r\nYou might be interested in reading about [constrained language mode](https://devblogs.microsoft.com/powershell/powershell-constrained-language-mode/).",
    "created_at": "2020-04-20T15:06:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12377#issuecomment-616613894",
    "id": 616613894,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12377",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNjYxMzg5NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/616613894/reactions"
    },
    "updated_at": "2020-04-20T15:06:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/616613894",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@iRon7 \r\n\r\nPowerShell does provide a mechanism to distinguish between trusted and untrusted code.  But it pointless for PowerShell to protect against dangerous scripts if the rest of the system is wide open to an attacker.  That is why PowerShell ConstrainedLanguage mode was designed to work with system wide application control polices such as AppLocker and WDAC (https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/windows-defender-application-control).\r\n\r\nWhen a system is locked down by policy, PowerShell will run in ConstrainedLanguage mode which greatly restricts it.  Only script files approved by the policy will run in FullLanguage.\n\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/windows-defender-application-control\">Application Control for Windows - Windows security</a></strong></div><div>Application Control restricts which applications users are allowed to run and the code that runs in the system core.</div></blockquote>",
    "created_at": "2020-04-20T15:30:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12377#issuecomment-616629312",
    "id": 616629312,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12377",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNjYyOTMxMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/616629312/reactions"
    },
    "updated_at": "2020-04-20T15:30:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/616629312",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/14019529?v=4",
      "events_url": "https://api.github.com/users/PaulHigin/events{/privacy}",
      "followers_url": "https://api.github.com/users/PaulHigin/followers",
      "following_url": "https://api.github.com/users/PaulHigin/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulHigin/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PaulHigin",
      "id": 14019529,
      "login": "PaulHigin",
      "node_id": "MDQ6VXNlcjE0MDE5NTI5",
      "organizations_url": "https://api.github.com/users/PaulHigin/orgs",
      "received_events_url": "https://api.github.com/users/PaulHigin/received_events",
      "repos_url": "https://api.github.com/users/PaulHigin/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PaulHigin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulHigin/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PaulHigin"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> I am about to open a PSScriptAnalyzer `PSAvoidUsingScriptBlockCreate` \"_[ScriptBlock]::Create is used. Please remove [ScriptBlock]::Create from script and find other options instead_\" rule request for this as I like to conclude that for the same reason as **`PSAvoidUsingInvokeExpression`**, `[ScriptBlock]::Create` should not be used as it fabricates a `[ScriptBlock]` based on input that _**either**_ originates from somewhere the script author does not have control over **or could be a hardcoded as an expression `{ ... }` otherwise**.\r\n> Or is this conclusion too short sighted?\r\n\r\nIt should work similar to the `Invoke-Expression` rule yeah.  Using `[scriptblock]::Create` instead of `Invoke-Expression` to get around the rule is a bit like using `$Host.UI.Write` instead of `Write-Host`.  Same thing in a different suit.\r\n\r\n> Somehow I feel responsible of either:\r\n> \r\n> * Prevent the provided script coloring way outside the lines, meaning writing to the file system or registry where it is just supposed do nothing more than merging properties (in this case).\r\n\r\nWhy would you need to though?  If they want to write to the registry while they're sorting why stop them?  If the caller creates a scriptblock, it's created in their security context/language mode/etc. If they load untrusted arbitrary code explicitly into that context just to sort then that sucks but it's not your responsibility.\r\n\r\n> * Telling the user/developer/sysadmin that should never _use `[scriptblock]::Create()` or `Invoke-Expression` on any input that originates from somewhere the author does not have control over_, or better, refer to more formal drawer statement that also should apply to native cmdlets that have a `[ScriptBlock]`(or calculated expression) as a parameter.\r\n\r\nIt's up to you how much you want to go out of your way to educate the consumer of your module, but the same applies to any built in command that takes a scriptblock.  Really it applies to most things, don't load code you don't trust, period.  You don't really need to tell the user this just like you don't need to tell them not to hard code a password when you accept a `SecureString`.\r\n\r\n> The whole question actually arias from this [`ConvertTo-Expression` project](https://github.com/iRon7/ConvertTo-Expression) also related to this [How can I write a nested arbitrary associative Array value set to a .psd1 file in powershell?](https://stackoverflow.com/a/61301255/1701026) which does use `[scriptblock]::Create()` but I think it is actually safe by itself as it creates a `[ScriptBlock]` from an **object** and therefore the is output `[scriptblock]` is bound to just recreating the **object** (but I am not completely sure).\r\n\r\n\r\nI didn't fully analyze it but it can be safe as long as you account for things breaking out of the string.  e.g.\r\n\r\n```powershell\r\nclass MyNastyObject {\r\n    [string] ToString() { return @'\r\n'; Invoke-Something; '\r\n'@\r\n}\r\n```\r\n\r\nOne way would be to parse the script string you generate before creating the `scriptblock` and use an `AstVisitor` to ensure that there's nothing other than `ConstantExpressionAst` and `StringConstantExpressionAst` (with a `StringConstantKind` of `SingleQuote`) present.\r\n\r\nAlso I'm not 100% sure why you'd want to do this.  I could understand returning a `string` that someone could copy and paste into a script, but I'm not 100% sure why it needs to be a scriptblock",
    "created_at": "2020-04-20T15:32:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12377#issuecomment-616630480",
    "id": 616630480,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12377",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNjYzMDQ4MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/616630480/reactions"
    },
    "updated_at": "2020-04-20T15:35:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/616630480",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I'm not sure if there's a public way to do this, but module manifests today are executed in Restricted Language Mode to read them in. That forbids anything non constant. There's also the `SafeGetValue()` API. Also there are the value building visitors designed precisely to take PowerShell ASTs and safely convert them to values:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/c41c39be2a172440f8efd57baa0c9a596df76326/src/System.Management.Automation/engine/parser/ConstantValues.cs#L324-L570\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/c41c39be2a172440f8efd57baa0c9a596df76326/src/System.Management.Automation/engine/parser/SafeValues.cs#L353-L801\r\n\r\n[There's also an alternative implementation in PSScriptAnalyzer](https://github.com/PowerShell/PSScriptAnalyzer/blob/9098e76a32e31f3ef73f1d513a706dbb9fbe57a1/Engine/Helper.cs#L1856-L2035)",
    "created_at": "2020-04-20T19:42:44Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12377#issuecomment-616768605",
    "id": 616768605,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12377",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNjc2ODYwNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/616768605/reactions"
    },
    "updated_at": "2020-04-20T19:42:44Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/616768605",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Also https://github.com/PowerShell/PowerShell/issues/11300 is related to your original use case",
    "created_at": "2020-04-20T23:45:35Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12377#issuecomment-616868060",
    "id": 616868060,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12377",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNjg2ODA2MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/616868060/reactions"
    },
    "updated_at": "2020-04-20T23:45:35Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/616868060",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "NONE",
    "body": "@SeeminglyScience \r\n\r\n> Also I'm not 100% sure why you'd want to do this. I could understand returning a string that someone could copy and paste into a script, but I'm not 100% sure why it needs to be a scriptblock\r\n\r\nThanks for the hint, I have updated my [ConvertTo-Expression](https://www.powershellgallery.com/packages?q=convertto-expression) script so that it returns a expression in the form of a `[String]`. All potential statements that can be exploit for code injections are removed and checked for with [https://devblogs.microsoft.com/powershell/powershell-injection-hunter-security-auditing-for-powershell-scripts/](https://devblogs.microsoft.com/powershell/powershell-injection-hunter-security-auditing-for-powershell-scripts/)\n\n<blockquote><img src=\"https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2018/08/defcon_header.png\" width=\"48\" align=\"right\"><div><img src=\"https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2019/02/Powershell_2561.png\" height=\"14\"> PowerShell</div><div><strong><a href=\"https://devblogs.microsoft.com/powershell/powershell-injection-hunter-security-auditing-for-powershell-scripts/\">PowerShell Injection Hunter: Security Auditing for PowerShell Scripts | PowerShell</a></strong></div><div>At the DEFCON security conference last year, we presented the session: “Get $pwnd: Attacking Battle Hardened Windows Server“. \nIn this talk, we went through some of the incredibly powerful ways that administrators can secure their high-value systems (for example, Just Enough Administration) and also dove into some of the mistakes that administrators sometimes make when exposing their PowerShell code to an attacker.</div></blockquote>",
    "created_at": "2020-05-11T11:10:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12377#issuecomment-626637014",
    "id": 626637014,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12377",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNjYzNzAxNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/626637014/reactions"
    },
    "updated_at": "2020-05-11T11:10:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/626637014",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  }
]
