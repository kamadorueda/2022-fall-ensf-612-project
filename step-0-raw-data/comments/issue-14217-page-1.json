[
  {
    "author_association": "MEMBER",
    "body": "`-Scope [CurrentUser|AllUsers]` makes sense (with it defaulting to `CurrentUser` so admin is not needed).\r\n\r\nShould probably have `-Channel [LTS|Stable|Preview]` with default to `LTS`.  Do we need a `-Version` type parameter?  I think initially we can skip it as the channels is more important.\r\n\r\nInstead of downloading from GitHub, the PowerShell team should publish the latest versions to an Azure blob.  Then we can have a aka.ms link that redirects to the correct address to do a HTTP GET download of the package.  `pwshup` would then perform whatever the local operation is to install it (run the interactive installer or use dpkg on Linux, for example).\r\n\r\nThe HTTP link can be something like: https://aka.ms/get-powershell?channel=lts&os=ubuntu20.04&arch=x64&pkg=tgz\r\n\r\nI think once we agree on the scope of the tool, user experience, and name, I can create a repo in PowerShell org to host it.",
    "created_at": "2020-11-22T03:46:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14217#issuecomment-731693993",
    "id": 731693993,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14217",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMTY5Mzk5Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731693993/reactions"
    },
    "updated_at": "2020-11-22T16:19:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731693993",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I wasn't sure if we'd use PowerShell-style command-line parameters over \"traditional CLI\" formatting (--parameter some-lowercase-value), but why not? It is meant for PowerShell after all, so I suggest we borrow the PowerShell command structure for parameters. The cool thing is that it would be relatively simple to produce a \"pwshup.ps1\" prototype in PowerShell to use as a reference specification for the final tool in Rust that would not depend on PowerShell.\r\n\r\nI suggest we borrow a lot of the parameter names and structure from the [\"Install-Module\"](https://docs.microsoft.com/en-us/powershell/module/powershellget/install-module?view=powershell-7.1) command family, starting with -Scope [CurrentUser|AllUsers], and expand from there to add what we need.\r\n\r\n-Channel [LTS|Stable|Preview] sounds good to me. I suggest that the default is set to 'Stable', most people probably want to use the latest, but not the preview builds. Choosing the LTS should be something explicit in my mind.\r\n\r\nAs for -Version, it would be an important one, but we may need multiple version-related parameters. Install-Module has -RequiredVersion, -MinimumVersion and -MaximumVersion, which I think we should borrow as well. This way, you can both specify a very specific version of PowerShell, and you can also give an acceptable version range. Most users won't bother and only install the latest, but this allows very powerful control for compatible versions of PowerShell if you ever encounter issues that demand it.\r\n\r\nAside from parameters, what should the initial command verbs and nouns be? I have made [a very similar tool in PowerShell for Remote Desktop Manager recently called RdmHelper](https://github.com/devolutions/RdmHelper-ps), but I wasn't sure about the noun choice for many of my commands. Nevertheless, this is where I am coming from when thinking about the naming for the commands in 'pwshup'. Here is a list that comes to mind for the obvious ones:\r\n\r\n- Install-PowerShell\r\n- Update-PowerShell\r\n- Uninstall-PowerShell\r\n\r\nBut we also need commands for operations like:\r\n- Detecting the latest upstream version, versus the currently installed version\r\n- Finding and returning CDN package download information (no installation)\r\n- Detecting and returning the list of local PowerShell installations (path, version, etc).\r\n- Detecting the full path to 'pwsh.exe' based on set of parameters when not in the PATH\r\n\r\nMost of this can probably be handled with a Get-PowerShell command that returns \"PowerShell objects\" as a JSON array of objects that can easily be processed with a ConvertFrom-Json command, with a few ways to simplify the output like just returning a single version number as a \"naked string\", making it easier to process without PowerShell.\r\n\r\nLast but not least, @SteveL-MSFT you said that it would be better to upload the releases in Azure blob storage instead of using GitHub releases. Is this something that is done today, or planned for the future? We also use Azure blob storage at Devolutions and it works great, but regardless of how the releases are published, we need a way to detect the following:\r\n\r\n- list of package versions by channel and platform\r\n- detect the CDN download URL for each package\r\n\r\nI originally thought that using GitHub releases may simplify things, because the assets are well structured, [and one can query the GitHub releases API rather easily](https://docs.github.com/en/free-pro-team@latest/rest/reference/repos#releases). Here is the [JSON output for what can be found in the PowerShell releases](https://api.github.com/repos/powershell/powershell/releases).\r\n\r\nAt Devolutions we have [a custom productinfo.htm page](https://devolutions.net/productinfo.htm) we use to expose such information in our own format. I don't necessarily recommend using it as a reference, but we would need something similar for 'pwshup' to detect the latest version and find the release artifact CDN download URLs. JSON-formatted data should be rather easy to process. Is there something like that already in place other than GitHub releases?",
    "created_at": "2020-11-22T15:57:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14217#issuecomment-731768838",
    "id": 731768838,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14217",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMTc2ODgzOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731768838/reactions"
    },
    "updated_at": "2020-11-22T15:57:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731768838",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/295841?v=4",
      "events_url": "https://api.github.com/users/awakecoding/events{/privacy}",
      "followers_url": "https://api.github.com/users/awakecoding/followers",
      "following_url": "https://api.github.com/users/awakecoding/following{/other_user}",
      "gists_url": "https://api.github.com/users/awakecoding/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/awakecoding",
      "id": 295841,
      "login": "awakecoding",
      "node_id": "MDQ6VXNlcjI5NTg0MQ==",
      "organizations_url": "https://api.github.com/users/awakecoding/orgs",
      "received_events_url": "https://api.github.com/users/awakecoding/received_events",
      "repos_url": "https://api.github.com/users/awakecoding/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/awakecoding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awakecoding/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/awakecoding"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "To expand on the whole \"is this a package manager specific to PowerShell\" questions from twitter, I suggest adding two parameters to improve control over package type and package manager usage:\r\n\r\n-PackageType: [msi|pkg|deb|rpm|zip|tar]\r\n-PackageManager: [chocolatey|winget|homebrew|aptitude|snapcraft]\r\n\r\nHowever, it really dumbs down to two things:\r\n1. Should we simply call an existing package manager or not? For instance, don't download the msi, call chocolatey or winget. On Linux, it uses the distro-provided package manager, but we could also wrap snapcraft, etc.\r\n2. Should we install a package or not? If calling a package manager, we don't. 'AllUsers' would default to a system package. 'CurrentUser' would download the archive and extract it.\r\n\r\nIn both cases, even if we provide the whole list of options, there really isn't much that you can't detect by default. For instance, if you detect that you already have pwsh installed through aptitude, it just makes sense to update it through an \"apt-get command\", same thing if you detect that it was installed through snapcraft with a snap command, etc.\r\n\r\nWhen not wrapping an existing package manager, I agree 'pwshup' becomes a package manager just for PowerShell. However, it doesn't need to be more than that. What's the alternative anyway? Go on the website, download the zip, extract it manually, fiddle with PATH, etc? There's definitely no harm in providing a tool like 'pwshup' to do it all without trying to replace any of the existing package managers, especially when no \"installable package\" is involved.\r\n\r\nI could see a tool like pwshup being extremely useful in cases like new platforms that don't yet have packages available, like PowerShell for Windows ARM64. It's possible to extract the zip and do it all yourself, but it is annoying, and having a tool like pwshup would have made it a breeze. I haven't checked the status for macOS on ARM64, but I bet it's going to be the same.",
    "created_at": "2020-11-22T16:40:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14217#issuecomment-731774736",
    "id": 731774736,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14217",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMTc3NDczNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731774736/reactions"
    },
    "updated_at": "2020-11-22T16:40:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731774736",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/295841?v=4",
      "events_url": "https://api.github.com/users/awakecoding/events{/privacy}",
      "followers_url": "https://api.github.com/users/awakecoding/followers",
      "following_url": "https://api.github.com/users/awakecoding/following{/other_user}",
      "gists_url": "https://api.github.com/users/awakecoding/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/awakecoding",
      "id": 295841,
      "login": "awakecoding",
      "node_id": "MDQ6VXNlcjI5NTg0MQ==",
      "organizations_url": "https://api.github.com/users/awakecoding/orgs",
      "received_events_url": "https://api.github.com/users/awakecoding/received_events",
      "repos_url": "https://api.github.com/users/awakecoding/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/awakecoding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awakecoding/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/awakecoding"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "I think the CLI syntax can be flexible as it's not a cmdlet.  I would suggest starting with cmdlet syntax consistency (with aliases for `-c` (Channel) and `-s` (Scope) and based on user feedback, we can decide if `--channel` and `--scope` is needed (not hard to add, but want to avoid confusion).\r\n\r\nThe purpose of having it in Azure blob storage instead of GitHub is that some customers have reported their enterprise doesn't allow access to GitHub, but I assume Azure is ok.  Also, to make it simple for `pwshup`, we can have a simple redirection Azure Function taking the parameters I noted above and redirect to the actual Azure blob download URL (we already have something similar today for getting latest pwsh version).\r\n\r\nA way to list available pkgs can also be supported via same or different Azure Functions HTTP endpoint returning the content as a JSON payload.\r\n\r\nYeah, defaulting to `Stable` instead of `LTS` might be better.  Again, I'm open to user feedback on this.  The default should be correct for majority of users and everyone else just needs to be specific.\r\n\r\nI don't think we need to support enumerating all the installed local versions of pwsh.  I think that might be better as part of some cmdlets.  I'd like `pwshup` to be simple and specific for initial pwsh install.\r\n\r\nI don't think `pwshup` should expose the different pkg types directly.  For `CurrentUser` it'll be a zip or tgz.  But for `AllUsers`, it should be the recommended one for the platform.  The only open question for me is on Linux, should `pwshup` register `packages.microsoft.com` and use literal `apt` or `yum` to install or download the deb/rpm and install it directly.  The benefit of the former is automatic dependency install while the latter requires more complexity in `pwshup`.",
    "created_at": "2020-11-22T17:56:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14217#issuecomment-731784782",
    "id": 731784782,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14217",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMTc4NDc4Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731784782/reactions"
    },
    "updated_at": "2020-11-22T17:56:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731784782",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "That sounds good to me, I am just concerned about the best way to get it started: it doesn't matter if it's in GitHub releases of the Azure CDN, what matters is that we have an HTTP endpoint to query and find the release packages available today.\r\n\r\nWindows and macOS both have relatively stable ABIs, such that it is easy to make a single binary that works well on multiple versions starting from a baseline. Linux is more difficult, but not impossible, the biggest issue is usually dependencies like OpenSSL and the libc version. However, you already have a fairly good system in place for Linux PowerShell builds, I suggest we simply provide prebuilt rustup binaries for the same targets supported by PowerShell. From there, a \"curl-able shell script\" can definitely do the distro-specific handling.\r\n\r\nThe other issue with Linux is that while you can download and install the package directly, updates should normally come from the package manager. Installation instructions always begin with \"add this new repository, update, then install\" and then with a bunch of distro-specific things to modify for each and very edition of Ubuntu or whatever else you are using. This could be automated for known-supported distributions. In the product I am working on, we borrowed a trick from the Google Chrome Linux package that automatically registers the Google Debian repository when installing the package.\r\n\r\nI say we can definitely support both and control it with parameters: install the package directly, or register + install through the distro-specific package repository. That alone would take a lot of the \"so, you need PowerShell, on Windows, do this, if you use chocolatey or winget, do this, on macOS, install the pkg or use homebrew, on Linux, well if you're on Ubuntu go for this, on RedHat go for that, if you'd rather use snapcraft then do this\" pain away.\r\n\r\nPretty much all of the manual installation steps that are documented over multiple pages can be dumbed down to one 'pwshup' command. If we can do that for all officially supported platforms, it'll be a huge win.\r\n\r\nAlso, one of the reasons why I'd like 'pwshup' is because it makes me scream internally that all I have on a brand new Windows Server 2019 Server Core Azure VM is Windows PowerShell 5.1, with no installable system feature. I usually install chocolatey and then install PowerShell with it, but there really has to be a better way. With pwshup it would be a one-liner everywhere I need the latest and greatest PowerShell 7. And I'm not even talking about the fact that *most* third-party package managers lag behind in terms of package distribution, you never get the very latest as it is released.",
    "created_at": "2020-11-22T18:16:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14217#issuecomment-731802830",
    "id": 731802830,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14217",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMTgwMjgzMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731802830/reactions"
    },
    "updated_at": "2020-11-22T18:16:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731802830",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/295841?v=4",
      "events_url": "https://api.github.com/users/awakecoding/events{/privacy}",
      "followers_url": "https://api.github.com/users/awakecoding/followers",
      "following_url": "https://api.github.com/users/awakecoding/following{/other_user}",
      "gists_url": "https://api.github.com/users/awakecoding/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/awakecoding",
      "id": 295841,
      "login": "awakecoding",
      "node_id": "MDQ6VXNlcjI5NTg0MQ==",
      "organizations_url": "https://api.github.com/users/awakecoding/orgs",
      "received_events_url": "https://api.github.com/users/awakecoding/received_events",
      "repos_url": "https://api.github.com/users/awakecoding/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/awakecoding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awakecoding/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/awakecoding"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "Agree that `pwshup` should handle updates, but I would suggest it currently only handle updates for installs it itself made (and not for any arbitrary installs the user may have made).\r\n\r\nI'll get more details on what we currently publish in Az Blob, but that's an easy problem to solve.\r\n\r\nI think registering `packages.microsoft.com` for Linux would be acceptable and keeps things simple particularly if there's prior art like Chrome doing the equivalent and users not bringing out pitch forks.\r\n\r\nIf the user agent provided by curl/wget is not sufficient to differentiate the Linux distro, I would agree a simple Bash script would be needed to download the right `pwshup` for the specific distro/version.\r\n\r\nWe can always add additional capability to `pwshup` in the future based on user feedback, but I don't want to turn this into \"yet another package manager\" and all the complexity, up keep, etc... that would go along with that.\r\n\r\nI can prototype the Azure Function endpoints this week to enable some prototyping in a script before converting to Rust.",
    "created_at": "2020-11-22T18:25:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14217#issuecomment-731805429",
    "id": 731805429,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14217",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMTgwNTQyOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731805429/reactions"
    },
    "updated_at": "2020-11-22T18:25:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731805429",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Regarding what Google does for [Linux packaging](https://www.google.com/linuxrepositories/):\r\n\r\nGoogle’s Linux packages are signed with GNU Privacy Guard (GPG) keys. **Google’s packages will automatically configure your package manager to verify product updates with the public signing key, but you may also install it separately** if, for instance, you want to verify the integrity of an initial package download. Follow the instructions below to manually configure your package manager to use the keys.\r\n\r\nThe installer package basically runs a post-install cron job to configure the key trust and add the package repository automatically. There is a way to disable this behaviour that is [described in the chromium FAQ](https://www.chromium.org/developers/linux-technical-faq).\r\n\r\nI think we've got enough material to get started at this point, I do suggest you prototype things entirely in PowerShell and leave the Rust code to us (at least initially). What we'd need the most on our side would be to have the structure in place to query package information and CDN download URLs when it becomes ready.\r\n\r\nLet's focus on the obvious functionality with the biggest value that won't cause a lot of stir, then expand from there. Thanks a lot for your time!",
    "created_at": "2020-11-22T18:38:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14217#issuecomment-731809271",
    "id": 731809271,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14217",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMTgwOTI3MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731809271/reactions"
    },
    "updated_at": "2020-11-22T18:38:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731809271",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/295841?v=4",
      "events_url": "https://api.github.com/users/awakecoding/events{/privacy}",
      "followers_url": "https://api.github.com/users/awakecoding/followers",
      "following_url": "https://api.github.com/users/awakecoding/following{/other_user}",
      "gists_url": "https://api.github.com/users/awakecoding/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/awakecoding",
      "id": 295841,
      "login": "awakecoding",
      "node_id": "MDQ6VXNlcjI5NTg0MQ==",
      "organizations_url": "https://api.github.com/users/awakecoding/orgs",
      "received_events_url": "https://api.github.com/users/awakecoding/received_events",
      "repos_url": "https://api.github.com/users/awakecoding/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/awakecoding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awakecoding/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/awakecoding"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Related #13534 #11222 #12701",
    "created_at": "2020-11-22T19:27:09Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14217#issuecomment-731828343",
    "id": 731828343,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14217",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczMTgyODM0Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731828343/reactions"
    },
    "updated_at": "2020-11-22T19:27:09Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/731828343",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "NONE",
    "body": "This is really exciting!  Has work begun?\r\n\r\nLooking for volunteers?",
    "created_at": "2020-12-01T19:03:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14217#issuecomment-736755097",
    "id": 736755097,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14217",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNjc1NTA5Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/736755097/reactions"
    },
    "updated_at": "2020-12-01T19:03:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/736755097",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16146732?v=4",
      "events_url": "https://api.github.com/users/sharpninja/events{/privacy}",
      "followers_url": "https://api.github.com/users/sharpninja/followers",
      "following_url": "https://api.github.com/users/sharpninja/following{/other_user}",
      "gists_url": "https://api.github.com/users/sharpninja/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/sharpninja",
      "id": 16146732,
      "login": "sharpninja",
      "node_id": "MDQ6VXNlcjE2MTQ2NzMy",
      "organizations_url": "https://api.github.com/users/sharpninja/orgs",
      "received_events_url": "https://api.github.com/users/sharpninja/received_events",
      "repos_url": "https://api.github.com/users/sharpninja/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/sharpninja/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sharpninja/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/sharpninja"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@sharpninja we haven't begun the work on this, but it could get started without having to wait on the upcoming CDN download URLs just by using the GitHub release API. We expect to get started on this at the end of 2020 / beginning of 2021 at Devolutions, but if you know Rust and would like to contribute, we could get something going quite fast.",
    "created_at": "2020-12-01T20:00:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14217#issuecomment-736784395",
    "id": 736784395,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14217",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNjc4NDM5NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/736784395/reactions"
    },
    "updated_at": "2020-12-01T20:00:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/736784395",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/295841?v=4",
      "events_url": "https://api.github.com/users/awakecoding/events{/privacy}",
      "followers_url": "https://api.github.com/users/awakecoding/followers",
      "following_url": "https://api.github.com/users/awakecoding/following{/other_user}",
      "gists_url": "https://api.github.com/users/awakecoding/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/awakecoding",
      "id": 295841,
      "login": "awakecoding",
      "node_id": "MDQ6VXNlcjI5NTg0MQ==",
      "organizations_url": "https://api.github.com/users/awakecoding/orgs",
      "received_events_url": "https://api.github.com/users/awakecoding/received_events",
      "repos_url": "https://api.github.com/users/awakecoding/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/awakecoding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awakecoding/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/awakecoding"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "I expect to have some time later this week or next week to look into this and prototype it in PS Script",
    "created_at": "2020-12-01T21:36:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14217#issuecomment-736835762",
    "id": 736835762,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14217",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNjgzNTc2Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/736835762/reactions"
    },
    "updated_at": "2020-12-01T21:36:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/736835762",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "NONE",
    "body": "Rust?",
    "created_at": "2020-12-02T01:40:16Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14217#issuecomment-736930991",
    "id": 736930991,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14217",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNjkzMDk5MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/736930991/reactions"
    },
    "updated_at": "2020-12-02T01:40:16Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/736930991",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16146732?v=4",
      "events_url": "https://api.github.com/users/sharpninja/events{/privacy}",
      "followers_url": "https://api.github.com/users/sharpninja/followers",
      "following_url": "https://api.github.com/users/sharpninja/following{/other_user}",
      "gists_url": "https://api.github.com/users/sharpninja/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/sharpninja",
      "id": 16146732,
      "login": "sharpninja",
      "node_id": "MDQ6VXNlcjE2MTQ2NzMy",
      "organizations_url": "https://api.github.com/users/sharpninja/orgs",
      "received_events_url": "https://api.github.com/users/sharpninja/received_events",
      "repos_url": "https://api.github.com/users/sharpninja/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/sharpninja/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sharpninja/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/sharpninja"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "How would we ship a `pwshup` executable on all platforms? It would need to be available in all the package managers that `pwsh` ships in.",
    "created_at": "2020-12-04T18:43:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14217#issuecomment-738951768",
    "id": 738951768,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14217",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczODk1MTc2OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/738951768/reactions"
    },
    "updated_at": "2020-12-04T18:43:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/738951768",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2644648?v=4",
      "events_url": "https://api.github.com/users/TylerLeonhardt/events{/privacy}",
      "followers_url": "https://api.github.com/users/TylerLeonhardt/followers",
      "following_url": "https://api.github.com/users/TylerLeonhardt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TylerLeonhardt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TylerLeonhardt",
      "id": 2644648,
      "login": "TylerLeonhardt",
      "node_id": "MDQ6VXNlcjI2NDQ2NDg=",
      "organizations_url": "https://api.github.com/users/TylerLeonhardt/orgs",
      "received_events_url": "https://api.github.com/users/TylerLeonhardt/received_events",
      "repos_url": "https://api.github.com/users/TylerLeonhardt/repos",
      "site_admin": true,
      "starred_url": "https://api.github.com/users/TylerLeonhardt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TylerLeonhardt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TylerLeonhardt"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@TylerLeonhardt it would essentially be package-less, and distributed directly as a self-contained executable which is copied to a local directory from where it will be launched. If you want to get an idea of the intended look and feel, I suggest you try installing the Rust toolchain using [rustup](https://rustup.rs/) even if you don't intend to start doing Rust development. 'pwshup' would borrow most of the principles from rustup but adapt them to PowerShell instead.",
    "created_at": "2020-12-04T18:49:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14217#issuecomment-738954784",
    "id": 738954784,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14217",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczODk1NDc4NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/738954784/reactions"
    },
    "updated_at": "2020-12-04T18:49:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/738954784",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/295841?v=4",
      "events_url": "https://api.github.com/users/awakecoding/events{/privacy}",
      "followers_url": "https://api.github.com/users/awakecoding/followers",
      "following_url": "https://api.github.com/users/awakecoding/following{/other_user}",
      "gists_url": "https://api.github.com/users/awakecoding/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/awakecoding",
      "id": 295841,
      "login": "awakecoding",
      "node_id": "MDQ6VXNlcjI5NTg0MQ==",
      "organizations_url": "https://api.github.com/users/awakecoding/orgs",
      "received_events_url": "https://api.github.com/users/awakecoding/received_events",
      "repos_url": "https://api.github.com/users/awakecoding/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/awakecoding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awakecoding/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/awakecoding"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@awakecoding I've installed rustup before. It curl's to sh. The thing is, we have that for PowerShell already:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/master/tools/install-powershell.sh-README.md#usage\r\n\r\nAnd I'm curious what this pwshup would really give us beyond what this script already does...\r\n\r\nAnd if you say \"it also supports updates\" I feel like an `Update-PowerShell` cmdlet could do this - something that has been asked for already https://github.com/PowerShell/PowerShell/issues/8663 https://github.com/PowerShell/PowerShell/issues/12678 https://github.com/PowerShell/PowerShell/issues/11222\n\n<blockquote><img src=\"https://repository-images.githubusercontent.com/49609581/aad0ad80-cdec-11ea-8248-a37bc0571bfd\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell\">PowerShell/PowerShell</a></strong></div><div>PowerShell for every system! Contribute to PowerShell/PowerShell development by creating an account on GitHub.</div></blockquote>",
    "created_at": "2020-12-04T19:05:16Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14217#issuecomment-738962210",
    "id": 738962210,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14217",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczODk2MjIxMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/738962210/reactions"
    },
    "updated_at": "2020-12-04T19:05:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/738962210",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2644648?v=4",
      "events_url": "https://api.github.com/users/TylerLeonhardt/events{/privacy}",
      "followers_url": "https://api.github.com/users/TylerLeonhardt/followers",
      "following_url": "https://api.github.com/users/TylerLeonhardt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TylerLeonhardt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TylerLeonhardt",
      "id": 2644648,
      "login": "TylerLeonhardt",
      "node_id": "MDQ6VXNlcjI2NDQ2NDg=",
      "organizations_url": "https://api.github.com/users/TylerLeonhardt/orgs",
      "received_events_url": "https://api.github.com/users/TylerLeonhardt/received_events",
      "repos_url": "https://api.github.com/users/TylerLeonhardt/repos",
      "site_admin": true,
      "starred_url": "https://api.github.com/users/TylerLeonhardt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TylerLeonhardt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TylerLeonhardt"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "I have concerns with what `pwshup` brings to the table but all that aside, I question whether `pwshup` provides more value right now than say, shipping in Microsoft Update [like our friends did in .NET](https://devblogs.microsoft.com/dotnet/net-core-updates-coming-to-microsoft-update/).\r\n\r\nLinux users are used to installing packages using *insert package manager* but Windows users on the other hand continue to say \"we need PowerShell in box or at the very very least in Microsoft Update\".\r\n\r\nThe Windows customers that want to use PowerShell but can't because they don't want to download it via the existing ways themselves will still likely not use a `pwshup` executable so those customers are still not accounted for.",
    "created_at": "2020-12-04T19:31:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14217#issuecomment-738974995",
    "id": 738974995,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14217",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczODk3NDk5NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/738974995/reactions"
    },
    "updated_at": "2020-12-04T19:31:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/738974995",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2644648?v=4",
      "events_url": "https://api.github.com/users/TylerLeonhardt/events{/privacy}",
      "followers_url": "https://api.github.com/users/TylerLeonhardt/followers",
      "following_url": "https://api.github.com/users/TylerLeonhardt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TylerLeonhardt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TylerLeonhardt",
      "id": 2644648,
      "login": "TylerLeonhardt",
      "node_id": "MDQ6VXNlcjI2NDQ2NDg=",
      "organizations_url": "https://api.github.com/users/TylerLeonhardt/orgs",
      "received_events_url": "https://api.github.com/users/TylerLeonhardt/received_events",
      "repos_url": "https://api.github.com/users/TylerLeonhardt/repos",
      "site_admin": true,
      "starred_url": "https://api.github.com/users/TylerLeonhardt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TylerLeonhardt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TylerLeonhardt"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@TylerLeonhardt regarding Microsoft Update distribution, I think you should definitely do it regardless of what happens with a tool like 'pwshup'. Otherwise this is like saying there is no platform-provided package distribution in place, like a Linux distribution without an official distribution channel for packages. This being said, there will never be a one-size-fits-all solution, only multiple solutions to the same problem, and it will probably always remain so.\r\n\r\nTo really understand why a tool like 'pwshup' makes sense, consider customers that find such a solution acceptable (obviously) and that want a uniform way to get the latest PowerShell installed and up-to-date on all platforms, insisting on the pain of doing that in a consistent manner on Windows, macOS and Linux. Windows-only customers will probably choose Microsoft Update but many would still just use chocolatey or winget, but I suspect many just download the .msi directly, many macOS users will choose homebrew if they have it, or download and install the macOS package directly, and Linux users will either follow the distro-specific instructions to add the package repository and install the package or use a snap package. Long story short, if you care more about PowerShell 7 than package managers, you realize it does stand in the way in a big way.\r\n\r\nIt is specifically for those users that 'pwshup' is meant to: you care vastly more about getting the latest and greatest PowerShell 7 installed and updated in a consistent manner across *all platforms*. This pattern works well for Rust because well, I guess Rust developers care a lot more about getting the latest and greatest Rust toolchains than their platform-specific distribution channel. My dream is that regardless of the platform (Windows, macOS, Linux) my very first step is to bootstrap the latest PowerShell and keep it up to date, such that I can use at a hard dependency.\r\n\r\nI don't think we need to go very far in what the tool does: there exists a suitable package for all platforms already, all pwshup really needs to do for a basic system installation is automate the downloading of the platform-specific package and install it, just as if you were following the docs on how to install it for your platform. This would probably mean downloading the .msi and installing it automatically on WIndows, downloading and installing the .pkg on macOS, and for Linux, I suppose we could detect the distribution and perform the same operations as in the docs, with an option to possibly add the repository to get the updates through the official package manager afterwards.\r\n\r\nIn the spirit of full disclosure, the *real* reason why we are looking into getting this tool built, it is because we need it into [Wayk Bastion](https://wayk.devolutions.net/), the commercial product I am working on. We just released [an initial version of Wayk PowerShell Remoting](https://docs.devolutions.net/wayk/client/psremoting.html) that replaces the PowerShell SSH transport with a rendezvous WebSocket transport, and out-of-band authentication. Our Wayk Agent comes with a built-in remote desktop capabilities (not RDP, but our own protocol), and we want to use PowerShell 7 as the ultimate cross-platform unattended management protocol.\r\n\r\nWe write a lot of Rust code for Wayk, which is why it is a natural fit for us to look into making 'pwshup' in Rust, heavily inspired or even partially based on the original 'rustup'. However, a major issue we face is how to get PowerShell installed and kept up to date on all machines managed by our Wayk Agent. Of course, we could make a custom solution inside our agent, leaving others to implement a similar tool for themselves, but we would rather do it cleanly as 'pwshup' and take feedback from the community, because we think we're definitely not the only ones facing this very problem.\r\n\r\nI should also insist on the fact that pwshup should be a fully standalone executable, something which we know can be particularly difficult especially on Linux, but we used to such difficulties because our Wayk Agent needs to be fully self-contained and require pretty much no hard dependencies to operate properly. We do a lot of static linking and lot of custom builds for external dependencies, but hopefully it should be much simpler to get this done for a simpler tool like pwshup.\r\n\r\nIn the end, what would happen is our Wayk Agent would use the pwshup executable to install and update PowerShell 7 on hundreds if not thousands of machines running Windows, macOS and Linux. These would all be machines for which we cannot rely on external dependencies and tools to be present in the first place, except our Wayk Agent, and no direct connectivity is possible outside of what the Wayk Agent provides.\r\n\r\nIf we can get there, then it means we can start building on top of PowerShell 7 as a true cross-platform solution, because all of sudden PowerShell 7 *became the platform*. Install-Module + private/enterprise nuget repositories can easily be used to install and deploy anything that is required on top of this stable, uniform PowerShell baseline. Remote installation and updates can then be controlled easily through our Wayk Agent, but for anybody else this is just a tool they can integrate or call directly to achieve exactly the same result.\r\n\r\nSorry for the wall of text, I just wished to bring more background into the reasons why we're doing this :) I hope I made it a bit clearer as to what our goals are: we are going to build such a tool anyway for our needs, but we really feel like there is a need for it in the community. I think the worst that can happen is nobody likes and it dies on its own, but it wouldn't change the fact that we'd be using it ourselves. If this happens, we'd just ship it ourselves, and it wouldn't be official, but Steve appeared to like the original idea and suggested we could make it an official thing.",
    "created_at": "2020-12-04T20:17:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14217#issuecomment-738996914",
    "id": 738996914,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14217",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczODk5NjkxNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/738996914/reactions"
    },
    "updated_at": "2020-12-04T20:27:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/738996914",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/295841?v=4",
      "events_url": "https://api.github.com/users/awakecoding/events{/privacy}",
      "followers_url": "https://api.github.com/users/awakecoding/followers",
      "following_url": "https://api.github.com/users/awakecoding/following{/other_user}",
      "gists_url": "https://api.github.com/users/awakecoding/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/awakecoding",
      "id": 295841,
      "login": "awakecoding",
      "node_id": "MDQ6VXNlcjI5NTg0MQ==",
      "organizations_url": "https://api.github.com/users/awakecoding/orgs",
      "received_events_url": "https://api.github.com/users/awakecoding/received_events",
      "repos_url": "https://api.github.com/users/awakecoding/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/awakecoding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awakecoding/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/awakecoding"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "But you still need a separate install script for `pwshup` on Windows vs non-Windows no? This is exactly what we already provide with the [`install-powershell.ps1`](https://github.com/PowerShell/PowerShell/blob/master/tools/install-powershell.ps1-README.md#install-powershell-core-using-the-msi-installer) vs [`install-powershell.sh`](https://github.com/PowerShell/PowerShell/blob/master/tools/install-powershell.sh-README.md#usage).\r\n\r\nBut it just gets you PowerShell instead of something that will get you PowerShell.\r\n\r\nTo me, `pwshup` just pushes the problem up... and then you also have to figure out how to update `pwshup` itself if it ever needs an update...\r\n\r\n",
    "created_at": "2020-12-04T21:33:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14217#issuecomment-739032551",
    "id": 739032551,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14217",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczOTAzMjU1MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/739032551/reactions"
    },
    "updated_at": "2020-12-04T21:33:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/739032551",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2644648?v=4",
      "events_url": "https://api.github.com/users/TylerLeonhardt/events{/privacy}",
      "followers_url": "https://api.github.com/users/TylerLeonhardt/followers",
      "following_url": "https://api.github.com/users/TylerLeonhardt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TylerLeonhardt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TylerLeonhardt",
      "id": 2644648,
      "login": "TylerLeonhardt",
      "node_id": "MDQ6VXNlcjI2NDQ2NDg=",
      "organizations_url": "https://api.github.com/users/TylerLeonhardt/orgs",
      "received_events_url": "https://api.github.com/users/TylerLeonhardt/received_events",
      "repos_url": "https://api.github.com/users/TylerLeonhardt/repos",
      "site_admin": true,
      "starred_url": "https://api.github.com/users/TylerLeonhardt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TylerLeonhardt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TylerLeonhardt"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@TylerLeonhardt oh for the \"curl-able\" install, I get your point, but I consider that gravy on top, separate from 'pwshup'. This technique is probably only really usable on macOS and Linux with the built-in shell to detect the right executable to download, for Windows of course there can be a PowerShell one-liner similar to how chocolatey is installed.\r\n\r\nAs for updating the updating tool itself, rustup has a way of doing it which you can trigger using \"rustup self update\", otherwise it does it regularly on its own just by using the tool: https://rust-lang.github.io/rustup/basics.html#keeping-rustup-up-to-date\r\n\r\nThis part can be a bit tricky to implement (an executable replacing itself) but there are ways to do it, I would look at how rustup does it first and implement the same technique.\r\n\r\nBy the way, there is no curl-able wrapper shell-script for rustup on Windows, you just download rustup-init.exe and launch it. However, this could definitely be modified to become a chocolatey-style PowerShell one-liner. This is only required for the initial installation, after that rustup can self update either manually or when you call the tool to run updates, it uses it as an opportunity to update itself as well.\r\n\r\nI get your point that it may look like it defeats the purpose, but not if you consider that all you have to do is download and launch the right executable for your platform only once. After that, you only need to call the 'pwshup' tool to install PowerShell, update PowerShell, and update pwshup itself (we could do like rustup and self-update when the tool is called). Even if you skip the curl-able URL part, it just becomes a matter of downloading and launching the right executable for your platform, and regular browser user agent detection can help with presenting the detected platform first to the user.\r\n\n\n<blockquote><img src=\"favicon.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://rust-lang.github.io/rustup/basics.html#keeping-rustup-up-to-date\">Basic usage - The rustup book</a></strong></div></blockquote>",
    "created_at": "2020-12-04T22:00:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14217#issuecomment-739045915",
    "id": 739045915,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14217",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczOTA0NTkxNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/739045915/reactions"
    },
    "updated_at": "2020-12-04T22:00:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/739045915",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/295841?v=4",
      "events_url": "https://api.github.com/users/awakecoding/events{/privacy}",
      "followers_url": "https://api.github.com/users/awakecoding/followers",
      "following_url": "https://api.github.com/users/awakecoding/following{/other_user}",
      "gists_url": "https://api.github.com/users/awakecoding/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/awakecoding",
      "id": 295841,
      "login": "awakecoding",
      "node_id": "MDQ6VXNlcjI5NTg0MQ==",
      "organizations_url": "https://api.github.com/users/awakecoding/orgs",
      "received_events_url": "https://api.github.com/users/awakecoding/received_events",
      "repos_url": "https://api.github.com/users/awakecoding/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/awakecoding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awakecoding/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/awakecoding"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I am with @TylerLeonhardt here. \r\nThere is no single standard, and there are many package managers and distribution channels. `pushup` will be another among many, but will not replace them.\r\n\r\n.Net and PowerShell itself are officially supported on limited set of systems and any updater must follow this. Also it is security sensitive area - files should be signed and distribution channel should be explicitly trusted. So if this project is implemented, then it will require careful support and monitoring.\r\n\r\n@awakecoding If you need just-another-updater why do you not implement it and share with community?",
    "created_at": "2020-12-05T04:01:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14217#issuecomment-739119300",
    "id": 739119300,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14217",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczOTExOTMwMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/739119300/reactions"
    },
    "updated_at": "2020-12-05T04:01:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/739119300",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@iSazonov we are volunteering to implement pwshup ourselves, we'll probably get it done by the beginning of 2021. As I said earlier, we need it for our product, but Steve has shown interest in maybe making it an official tool. It is also my opinion that this is something worth sharing with the community.\n\nThe actual work is pending changes to get PowerShell Azure CDN download URLs instead of using GitHub releases as I originally suggested. I don't want to pressure Steve into getting those changes done faster, as we are not in a rush to get the work done this month.\n\nMy ideal timeline would be to put some of our developers from Devolutions to work on it in January of 2021, but if the Azure CDN changes are done earlier than that, we can always plan otherwise.",
    "created_at": "2020-12-05T04:29:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14217#issuecomment-739123697",
    "id": 739123697,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14217",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczOTEyMzY5Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/739123697/reactions"
    },
    "updated_at": "2020-12-05T04:29:47Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/739123697",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/295841?v=4",
      "events_url": "https://api.github.com/users/awakecoding/events{/privacy}",
      "followers_url": "https://api.github.com/users/awakecoding/followers",
      "following_url": "https://api.github.com/users/awakecoding/following{/other_user}",
      "gists_url": "https://api.github.com/users/awakecoding/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/awakecoding",
      "id": 295841,
      "login": "awakecoding",
      "node_id": "MDQ6VXNlcjI5NTg0MQ==",
      "organizations_url": "https://api.github.com/users/awakecoding/orgs",
      "received_events_url": "https://api.github.com/users/awakecoding/received_events",
      "repos_url": "https://api.github.com/users/awakecoding/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/awakecoding/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awakecoding/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/awakecoding"
    }
  }
]
