[
  {
    "author_association": "COLLABORATOR",
    "body": "As far as I know, the only time you'll get a raw exception is if there's a _parse_ error in the PowerShell script itself; i.e., PowerShell's own language parser throws the exception. In _most_ cases this won't surface, but if it does I believe ParseExceptions have an `ErrorRecord` property that you can make use of for a bit of an easier time with this kind of case. 🙂 \r\n\r\nDo you know of any reproducible examples that produce an `Exception` object within the `catch` block?",
    "created_at": "2019-10-08T18:40:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10735#issuecomment-539647551",
    "id": 539647551,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10735",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzOTY0NzU1MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/539647551/reactions"
    },
    "updated_at": "2019-10-08T18:40:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/539647551",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "Currently i have no Example. I will dig into.\r\n\r\nIf you execute the following Example you will see that the InvocationInfo is not set to the advanced function. The properties \"MyCommand\" and \"InvocationName\" of the InvocationInfo are Empty !\r\n\r\nTo set the InvocationInfo to $PSCmdlet.MyInvocation is one part of me suggestion.\r\n\r\n```powershell\r\nFunction Get-ErrorHandling {\r\n\r\n    [CmdletBinding()]\r\n    Param()\r\n\r\n    Process {\r\n       Try {\r\n\r\n              [double]::Parse('Hello')\r\n\r\n       } Catch {\r\n\r\n            $PSCmdlet.WriteError($_)\r\n       }\r\n    }\r\n}\r\n\r\nGet-ErrorHandling\r\n\r\n$Error[0] | select -ExpandProperty InvocationInfo | select *\r\n\r\n```\r\n",
    "created_at": "2019-10-08T20:02:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10735#issuecomment-539678679",
    "id": 539678679,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10735",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzOTY3ODY3OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/539678679/reactions"
    },
    "updated_at": "2019-10-08T20:02:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/539678679",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1510464?v=4",
      "events_url": "https://api.github.com/users/Kriegel/events{/privacy}",
      "followers_url": "https://api.github.com/users/Kriegel/followers",
      "following_url": "https://api.github.com/users/Kriegel/following{/other_user}",
      "gists_url": "https://api.github.com/users/Kriegel/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Kriegel",
      "id": 1510464,
      "login": "Kriegel",
      "node_id": "MDQ6VXNlcjE1MTA0NjQ=",
      "organizations_url": "https://api.github.com/users/Kriegel/orgs",
      "received_events_url": "https://api.github.com/users/Kriegel/received_events",
      "repos_url": "https://api.github.com/users/Kriegel/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Kriegel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Kriegel/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Kriegel"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I was actually under the impression that was already done, interesting. In most cases I've seen, I'm pretty sure the InvocationInfo / MyCommand information is set when you call `$PSCmdlet.WriteError()`\r\n😕 ",
    "created_at": "2019-10-08T20:16:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10735#issuecomment-539684352",
    "id": 539684352,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10735",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzOTY4NDM1Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/539684352/reactions"
    },
    "updated_at": "2019-10-08T20:16:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/539684352",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "There is a very lenghtly article in [PowerShell Magazin to create Cusom ErrorRecords](https://www.powershellmagazine.com/2011/09/14/custom-errors/) \r\nI think PowerShell schould do the heavy lifting for the user.\r\n\r\nthis will fail:\r\n```powershell\r\nFunction Get-ErrorHandling {\r\n\r\n    [CmdletBinding()]\r\n    Param()\r\n\r\n    Process {\r\n       $PSCmdlet.WriteError(([Exception]::new(\"error message\")))\r\n    }\r\n}\r\n\r\nGet-ErrorHandling\r\n```\r\neven in this blog post the User must create an custom ErrorRecord before using the ThrowTerminatingError() Method ;-)\r\n[https://vexx32.github.io/2019/01/31/PowerShell-Error-Handling/](https://vexx32.github.io/2019/01/31/PowerShell-Error-Handling/ )\n\n<blockquote><div><strong><a href=\"https://vexx32.github.io/2019/01/31/PowerShell-Error-Handling/\">Error Handling in PowerShell - Best Practices</a></strong></div><div>There are a few different kinds of errors in PowerShell, and it can be a little bit of a minefield on occasion.\nThere are always two sides to consider, too: how you write code that creates errors, and how you handle those errors in your own code.\nLet's have a look at some ways to effectively utilise the different kinds of errors you can work with in PowerShell, and how to handle them.\n\n</div></blockquote>",
    "created_at": "2019-10-08T20:30:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10735#issuecomment-539690629",
    "id": 539690629,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10735",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzOTY5MDYyOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/539690629/reactions"
    },
    "updated_at": "2019-10-08T20:30:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/539690629",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1510464?v=4",
      "events_url": "https://api.github.com/users/Kriegel/events{/privacy}",
      "followers_url": "https://api.github.com/users/Kriegel/followers",
      "following_url": "https://api.github.com/users/Kriegel/following{/other_user}",
      "gists_url": "https://api.github.com/users/Kriegel/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Kriegel",
      "id": 1510464,
      "login": "Kriegel",
      "node_id": "MDQ6VXNlcjE1MTA0NjQ=",
      "organizations_url": "https://api.github.com/users/Kriegel/orgs",
      "received_events_url": "https://api.github.com/users/Kriegel/received_events",
      "repos_url": "https://api.github.com/users/Kriegel/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Kriegel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Kriegel/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Kriegel"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@Kriegel in that example, what would the error ID, category and target object be?",
    "created_at": "2019-10-09T12:55:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10735#issuecomment-539987892",
    "id": 539987892,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10735",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzOTk4Nzg5Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/539987892/reactions"
    },
    "updated_at": "2019-10-09T12:55:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/539987892",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "@SeeminglyScience  \r\n\r\nYou can answer your question by yourself, If you run the following Code you will see what is inside\r\n```powershell \r\nWrite-Error -Exception (([Exception]::new(\"error message\"))) 2>&1 | Select-Object *\r\n```\r\n\r\n$PSCmdlet.WriteError() should have overloads to fill out even this Properties.\r\nLike i said a very similar Interface like the Write-Error Cmdlet archived with overloads.\r\n\r\nFully overloads in pseudo-code may look like so:\r\n```powershell\r\n# ErrorRecord \r\n $PsCmdlet.WriteError(System.Management.Automation.ErrorRecord  ErrorRecord, string  CategoryReason, string  CategoryTargetName, string  CategoryActivity, string  CategoryTargetType, string  RecommendedAction)\r\n \t    \r\n # with Exception\r\n $PsCmdlet.WriteError(System.Exception  Exception, string  Message, System.Management.Automation.ErrorCategory  Category, string  ErrorId, System.Object  TargetObject, string  RecommendedAction, string  CategoryActivity, string  CategoryReason, string  CategoryTargetName, string  CategoryTargetType)\r\n \r\n # no Exception\r\n $PsCmdlet.WriteError(string  Message, System.Management.Automation.ErrorCategory  Category, string  ErrorId, System.Object  TargetObject, string  RecommendedAction, string  CategoryActivity, string  CategoryReason, string  CategoryTargetName, string  CategoryTargetType)\r\n``` \r\n\r\nIdeally the Write- cmdlets (classes) and the Cmdlet.WriteXxxxx() Methods, share their code base, so we have to maintain only one code base AND having the same behavior.\r\nBut that is out of scope here. \r\n\r\nIdeally the User can even control which InvocationInfo he will provide with all Write* cmdlets and Methods.\r\nBut that is out of scope here. ",
    "created_at": "2019-10-09T14:14:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10735#issuecomment-540020538",
    "id": 540020538,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10735",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDAyMDUzOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/540020538/reactions"
    },
    "updated_at": "2019-10-09T14:22:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/540020538",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1510464?v=4",
      "events_url": "https://api.github.com/users/Kriegel/events{/privacy}",
      "followers_url": "https://api.github.com/users/Kriegel/followers",
      "following_url": "https://api.github.com/users/Kriegel/following{/other_user}",
      "gists_url": "https://api.github.com/users/Kriegel/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Kriegel",
      "id": 1510464,
      "login": "Kriegel",
      "node_id": "MDQ6VXNlcjE1MTA0NjQ=",
      "organizations_url": "https://api.github.com/users/Kriegel/orgs",
      "received_events_url": "https://api.github.com/users/Kriegel/received_events",
      "repos_url": "https://api.github.com/users/Kriegel/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Kriegel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Kriegel/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Kriegel"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Yeah I know, the point I was trying (poorly) to make was that those details are lost (or rather replaced with meaningless defaults).  If such an overload was added, it could lead to a significant amount of first time binary module writers skipping all of those details completely.\r\n\r\nIn general my opinion is that if you want to emit a \"proper\" error (one that reflects the users context) then those details should be specified.  I would like to see an overload like `WriteError(Exception,string,ErrorCategory,object)` that just creates the `ErrorRecord` for you while still requiring the information.\r\n\r\nAlso I don't really see a problem with adding a switch to `Write-Error` to change context.",
    "created_at": "2019-10-09T14:31:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10735#issuecomment-540028319",
    "id": 540028319,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10735",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDAyODMxOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/540028319/reactions"
    },
    "updated_at": "2019-10-09T14:31:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/540028319",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "@SeeminglyScience  Whats driving me since PS 2.0 is Logging.\r\n\r\nFrom a Logging perspective we only need a message.  (lol)\r\n\r\nOk... + Timestamp and Source (like script name) perhaps + severity (which here can be Error or Critical for fatal errors or Warning for non terminating Errors).\r\n\r\nWhich Propertie Data an ErrorRecord consumer needs can vary much ...\r\nA developer may need the inner exception (which is not allways there)\r\nFor Credential Errors, a security guy may need the Username and Windows Process / Thread\r\nA Monitoring system may need  ..... \r\n\r\nThat is a reason to create customized  ErrorRecords.\r\n\r\nCurrently the Automatic created ErrorRecords mostly fullfill developer debuging needs.\r\nWhich is good.\r\n\r\n- ErrorID\r\nit is only a string.\r\nLike a Tag to search for or to trigger something?\r\nTherfor you can also use the Exception type and / or (Key-)Words inside the self made message.\r\n(Message is also simply a string ;-) ) \r\n\r\n- Category\r\nis an enum with 32 members does they fit all needs or do they are meanigfull for everything?\r\nAre they also simply Tags ?\r\n\r\n- TargetObject\r\nis not allways applicable.\r\nYou can even create shouldprocess queries without target object ... \r\n\r\ndo not make the corset to tight.\r\n\r\nin gennrell I am with you! Correct filled properties are better.\r\n\r\nWith `Write-Error` the open land is allready here!",
    "created_at": "2019-10-09T17:00:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10735#issuecomment-540092691",
    "id": 540092691,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10735",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDA5MjY5MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/540092691/reactions"
    },
    "updated_at": "2019-10-09T17:00:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/540092691",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1510464?v=4",
      "events_url": "https://api.github.com/users/Kriegel/events{/privacy}",
      "followers_url": "https://api.github.com/users/Kriegel/followers",
      "following_url": "https://api.github.com/users/Kriegel/following{/other_user}",
      "gists_url": "https://api.github.com/users/Kriegel/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Kriegel",
      "id": 1510464,
      "login": "Kriegel",
      "node_id": "MDQ6VXNlcjE1MTA0NjQ=",
      "organizations_url": "https://api.github.com/users/Kriegel/orgs",
      "received_events_url": "https://api.github.com/users/Kriegel/received_events",
      "repos_url": "https://api.github.com/users/Kriegel/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Kriegel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Kriegel/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Kriegel"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> From a Logging perspective we only need a message. (lol)\r\n\r\nI hear ya, but logging isn't really the main purpose of error stream.   That said, if I was using it for logging I'd definitely still keep at the very least the `ErrorId` in the log.\r\n\r\n>ErrorID\r\n> it is only a string.\r\n> Like a Tag to search for or to trigger something?\r\n> Therfor you can also use the Exception type and / or (Key-)Words inside the self made message.\r\n> (Message is also simply a string ;-) )\r\n\r\nIt's a unique identifier for an error that *isn't localized*.  Exception type isn't as specific (most things end up throwing the same few exceptions like `ArgumentException`, `InvalidOperationException`, etc) and `Message` is meant to be localized so you can't depend on it's contents.\r\n\r\n>Category\r\n>is an enum with 32 members does they fit all needs or do they are meanigfull for everything?\r\n>Are they also simply Tags ?\r\n\r\nI wouldn't say they fit all needs, but they're general enough to give you an idea of what type of error it is without having a specific list of exact error ID's.\r\n\r\n> TargetObject\r\n> is not allways applicable.\r\n> You can even create shouldprocess queries without target object ...\r\n\r\nYeah not always, but when it is it can really come in handy.  I personally think that parameter could be optional, but not the others.",
    "created_at": "2019-10-09T17:27:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10735#issuecomment-540104321",
    "id": 540104321,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10735",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDEwNDMyMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/540104321/reactions"
    },
    "updated_at": "2019-10-09T17:27:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/540104321",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I think we need to sort out the various issues here:\r\n\r\n* To my knowledge, `$_` in `catch` block is _always_ a `System.Management.Automation.ErrorRecord` instance. \r\n   * That is what you, @vexx32, mostly stated. I don't think parse errors come into play here, because any code that can't be parsed doesn't get to even _execute_, and code that traps a parse error from the outside again sees a `System.Management.Automation.ErrorRecord` instance.\r\n\r\n* **Writing this `ErrorRecord` instance to the error stream with `$PSCmdlet.WriteError($_)` or `Write-Error -ErrorRecord $_` essentially _passes it through_ - with whatever invocation info it contains - and _PowerShell should already have supplied the appropriate invocation information_.**\r\n\r\n   * If you didn't catch the error and let an exception become a statement-terminating error, you would see the very same `ErrorRecord` instance in `$Error[0]` afterwards.\r\n\r\n* It may be surprising that an exception that occurs during a .NET method invocation is (implicitly) wrapped in an `ErrorRecord` instance that _doesn't_ fill in the the invocation info's `.InvocationName` or `.MyCommand` properties, but that is really _a separate issue_ - note that **the _script-level_ invocation information is always there, however**.\r\n\r\nI can't personally speak to what aspects of the current behavior are by design or not, but here's my understanding of it:\r\n\r\n* Cmdlet-originated errors - whether nonterminating or terminating - result in `.MyCommand` being filled in - as a `System.Management.Automation.CmdletInfo` instance - but not `.InvocationName`\r\n\r\n* All other _terminating errors_ - runtime exceptions such as `1/0`, method exceptions such as `[int]::Parse('no')`, and `throw` statements, result in neither `.MyCommand` nor `.InvocationName` being filled in.\r\n\r\n*  `Write-Error` errors from within a function _do_ reflect the function name in `.MyCommand` - as a `System.Management.Automation.FunctionInfo`  instance  - and whatever alias name may have been used during invocation in `.InvocationName` (as a string).\r\n\r\nHowever, **in _all_ cases the function context _is_ available (albeit somewhat informally), namely via  the `.ScriptStackTrace` property**.\r\n\r\n---\r\n\r\nIn short:\r\n\r\n* There is generally no need to construct your own `ErrorRecord` instance in a `catch` block\r\n\r\n* If the invocation info that _PowerShell already implicitly adds_ when it wraps exceptions in `ErrorRecord`'s is lacking, we should discuss that _separately_.\r\n\r\n---\r\n\r\nP.S.: Curiously, `Write-Error -Exception $_.Exception` seems to behave no differently than `Write-Error -ErrorRecord $_`, though `Write-Error -Exception $_.Exception.InnerException` does seem to create a new `ErrorRecord` that suggest the enclosing function as the source - not sure what's going on there.\r\n",
    "created_at": "2019-10-09T20:10:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10735#issuecomment-540170468",
    "id": 540170468,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10735",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDE3MDQ2OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/540170468/reactions"
    },
    "updated_at": "2019-10-09T20:10:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/540170468",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "see also #3190 Implement New-ErrorRecord Cmdlet",
    "created_at": "2019-10-10T14:09:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10735#issuecomment-540604835",
    "id": 540604835,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10735",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDYwNDgzNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/540604835/reactions"
    },
    "updated_at": "2019-10-10T14:09:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/540604835",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1510464?v=4",
      "events_url": "https://api.github.com/users/Kriegel/events{/privacy}",
      "followers_url": "https://api.github.com/users/Kriegel/followers",
      "following_url": "https://api.github.com/users/Kriegel/following{/other_user}",
      "gists_url": "https://api.github.com/users/Kriegel/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Kriegel",
      "id": 1510464,
      "login": "Kriegel",
      "node_id": "MDQ6VXNlcjE1MTA0NjQ=",
      "organizations_url": "https://api.github.com/users/Kriegel/orgs",
      "received_events_url": "https://api.github.com/users/Kriegel/received_events",
      "repos_url": "https://api.github.com/users/Kriegel/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Kriegel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Kriegel/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Kriegel"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Sorry, I had missed part of this discussion before I posted my previous comment.\r\n\r\nNote that advanced functions shouldn't really have to call `$PSCmdlet.WriteError()` directly - the only good reason to do that it currently is to work around the `Write-Error` bug where `$?` isn't set to `$false` in the caller's context - see #3629\r\n\r\nThat leaves us with `Write-Error`, which already _does_ permit construction of custom `ErrorRecord` instances (as stated, `Write-Error -ErrorRecord $_` simply passes the error record through).\r\n\r\nWhile `Write-Error` already allows you to control _most_ aspects of the new custom `ErrorRecord` - `-ErrorId`, `-Category`, ... - the invocation info is _implicitly_ the calling site - which is sensible.\r\n\r\nI can't speak to the need to also control the invocation info explicitly, but if there is a need, it would stand to reason to introduce a new `Write-Error` parameter to do so, as @SeeminglyScience has already suggested.\r\n\r\nAs for #3190: Similarly, adding a `-AsTerminatingError` switch, as (in essence) suggested there by @JayKul  - or, more simply, `-Throw`, as proposed by @iSazonov  - to `Write-Error`, sounds like the right solution.\r\n\r\n---\r\n\r\nHowever, there are some oddities, as previously mentioned:\r\n\r\n* `.MyCommand` should arguably reflect the enclosing function if a terminating error occurred directly inside a function - again, this relates to the _implicit_ creation of `ErrorRecord` instances.\r\n\r\n* I've alluded it before, but there seems to be a bug if you use `Write-Error -Exception $_.Exception ...`, which unexpectedly behaves like `Write-Error -ErrorRecord $_` and ignores other parameters such as `-Category` - see #10774\r\n\r\n  * In short: wrapping the original exception in a custom `ErrorRecord` is currently broken, though, curiously, it does seem to work with `$_.Exception.InnerException`.",
    "created_at": "2019-10-10T14:32:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10735#issuecomment-540615883",
    "id": 540615883,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10735",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDYxNTg4Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/540615883/reactions"
    },
    "updated_at": "2019-10-11T13:50:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/540615883",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "@mklement0 \r\nDoes that mean a .NET developer should also use a call to the `Microsoft.PowerShell.Commands.WriteErrorCommand` to throw an ErrorRecord?\r\n\r\nAnd for what do we need the `cmdlet.WriteError()` Method then?\r\n\r\nI am the biggest fan to remove the multi-variant, multi-route.\r\n\r\nBut this will be a breaking change!?\r\n\r\nA PowerShell User can [\"Overwrite\" (Proxy) the Write-xxx Cmdlets](https://www.powershellgallery.com/packages/PSLog/5.0.0.200) but not the  WriteXxxx() Methods. \r\n\r\nI think we need an consistent interface and behavior for all. PowerShell Users and .NET developers. \r\n\r\nSo why not call the same base code with the WriteXxxx() Method and the Microsoft.PowerShell.Commands.WriteXxxxCommand ? AND Provide applicable overloads with the WriteXxxx() Methods.\r\nI think this can be done without breaking something?\r\n\r\n\r\n@SeeminglyScience \r\n\r\nAs an German guy, I see many, many scripts that fail in an international environment.\r\nEven see bad Example Scripts from MVPs in the Net that search for the \"Admistrators\" Group by Name. \r\nOr PerformanceCounter naming Horror.....\r\nI have written an RoboCopy log-file parser .... it is Multilingual   .....\r\n(I jump crazy laughing  into the running chainsaw ...)\r\n\r\nWe need an localization system that not disservice following workflows.\r\n\r\nFor this `ErrorID` and `Category` can help MUCH.\r\nBut ErrorID is a free text and both can also be empty.\r\n\r\nI think Microsoft best bed is to NOT translate.\r\n(this saves money for them... like to stop to translate the PowerShell help-files ....)\r\n\r\n> Message is meant to be localized so you can't depend on it's contents.\r\n\r\nWho translate my custom Message? It is translated automatically?",
    "created_at": "2019-10-11T10:55:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10735#issuecomment-541017096",
    "id": 541017096,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10735",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MTAxNzA5Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/541017096/reactions"
    },
    "updated_at": "2019-10-11T11:18:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/541017096",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1510464?v=4",
      "events_url": "https://api.github.com/users/Kriegel/events{/privacy}",
      "followers_url": "https://api.github.com/users/Kriegel/followers",
      "following_url": "https://api.github.com/users/Kriegel/following{/other_user}",
      "gists_url": "https://api.github.com/users/Kriegel/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Kriegel",
      "id": 1510464,
      "login": "Kriegel",
      "node_id": "MDQ6VXNlcjE1MTA0NjQ=",
      "organizations_url": "https://api.github.com/users/Kriegel/orgs",
      "received_events_url": "https://api.github.com/users/Kriegel/received_events",
      "repos_url": "https://api.github.com/users/Kriegel/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Kriegel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Kriegel/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Kriegel"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> We need an localization system that not disservice following workflows.\r\n\r\nThere's a lot of folks who aren't writing scripts with localization in mind, but that's sort of a culture problem in my opinion.  Lots of sysadmins don't need to care about localization, they're writing scripts for their organization which in a lot of cases will only be local.  It's hard to all of a sudden consider all of these things immediately upon publishing your first tool.  That and most PowerShell users tend to not report issues, so if your tool does get a little bit of reach, it's nearly impossible to tell how well it works with other language settings/keyboard layouts/etc.\r\n\r\nThe localization system is mostly fine, just some folks don't use it.  Making it harder to use it isn't going to help that situation though.\r\n\r\n> For this ErrorID and Category can help MUCH.\r\nBut ErrorID is a free text and both can also be empty.\r\n\r\nEven so, currently you have to explicitly decide to give useless values.  If `WriteError` took an `Exception` it would look an acceptable practice.\r\n\r\n> I think Microsoft best bed is to NOT translate.\r\n(this saves money for them... like to stop to translate the PowerShell help-files ....)\r\n\r\nI don't agree with that, but really it's not something up for debate.  They're going to, and they're not going to rip out the whole localization system 🤷‍♂ \r\n\r\n>Who translate my custom Message? It is translated automatically?\r\n\r\nNo it's not.  The point is that a consumer of an error record cannot depend on the content of `Message`.  If you are consuming your *own* error messages for logging purposes, I'd highly recommend looking into a library that is actually meant for logging like [Serilog](https://github.com/serilog/serilog).",
    "created_at": "2019-10-11T12:08:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10735#issuecomment-541037289",
    "id": 541037289,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10735",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MTAzNzI4OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/541037289/reactions"
    },
    "updated_at": "2019-10-11T12:08:20Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/541037289",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@Kriegel \r\n\r\n> I think we need a consistent interface and behavior for all. PowerShell Users and .NET developers.\r\n\r\nNo: Different audiences, different skill levels, different syntax.\r\n\r\nThere's plenty of duplication between PowerShell cmdlets and SDK methods already, for good reasons. `$PSCmdlet` is an awkward blurring of the lines to begin with; note that [about_Automatic_Variables]() mentions exactly _2_ of its members - `.ParameterSetName` and `.ShouldProcess()` - and you normally shouldn't need or even need to know about any others.\r\n\r\nYes, it make sense to _also_ provide a new `Cmdlet.WriteError()` overload _for C# developers_ who write cmdlets, to also make it easier for them to create custom `ErrorRecord` instances - see https://github.com/PowerShell/PowerShell/issues/3190#issuecomment-541078226\r\n\r\n\r\n\r\n",
    "created_at": "2019-10-11T14:05:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10735#issuecomment-541078689",
    "id": 541078689,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10735",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MTA3ODY4OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/541078689/reactions"
    },
    "updated_at": "2019-10-11T14:05:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/541078689",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "@mklement0 thank you for your comments here and on 3190 I learned much!\r\nThe more i dive into the Writexxxx streams the more I get the impression that the whole stream system needs an big revision.",
    "created_at": "2019-10-11T14:52:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10735#issuecomment-541097238",
    "id": 541097238,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10735",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MTA5NzIzOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/541097238/reactions"
    },
    "updated_at": "2019-10-11T14:52:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/541097238",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1510464?v=4",
      "events_url": "https://api.github.com/users/Kriegel/events{/privacy}",
      "followers_url": "https://api.github.com/users/Kriegel/followers",
      "following_url": "https://api.github.com/users/Kriegel/following{/other_user}",
      "gists_url": "https://api.github.com/users/Kriegel/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Kriegel",
      "id": 1510464,
      "login": "Kriegel",
      "node_id": "MDQ6VXNlcjE1MTA0NjQ=",
      "organizations_url": "https://api.github.com/users/Kriegel/orgs",
      "received_events_url": "https://api.github.com/users/Kriegel/received_events",
      "repos_url": "https://api.github.com/users/Kriegel/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Kriegel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Kriegel/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Kriegel"
    }
  }
]
