[
  {
    "author_association": "CONTRIBUTOR",
    "body": "Should one expect that this two are equivalent?\r\n```powershell\r\n$num = (write 0xa)\r\nSet-Variable num (write 0xa)\r\n```",
    "created_at": "2019-03-18T04:04:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-473762719",
    "id": 473762719,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Mzc2MjcxOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473762719/reactions"
    },
    "updated_at": "2019-03-18T04:04:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473762719",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/17184058?v=4",
      "events_url": "https://api.github.com/users/PetSerAl/events{/privacy}",
      "followers_url": "https://api.github.com/users/PetSerAl/followers",
      "following_url": "https://api.github.com/users/PetSerAl/following{/other_user}",
      "gists_url": "https://api.github.com/users/PetSerAl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PetSerAl",
      "id": 17184058,
      "login": "PetSerAl",
      "node_id": "MDQ6VXNlcjE3MTg0MDU4",
      "organizations_url": "https://api.github.com/users/PetSerAl/orgs",
      "received_events_url": "https://api.github.com/users/PetSerAl/received_events",
      "repos_url": "https://api.github.com/users/PetSerAl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PetSerAl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PetSerAl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PetSerAl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Yes, @PetSerAl - and they currently are, from what I can tell.\r\n\r\nUnfortunately, they are equivalent in the wrong way: `$num = (Write-Output 0xa)` too preserves the half-invisible `[psobject]` wrapper, so it looks like the problem goes deeper.\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2019-03-18T04:14:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-473764305",
    "id": 473764305,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Mzc2NDMwNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473764305/reactions"
    },
    "updated_at": "2019-03-18T04:17:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473764305",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "The problem is `Write-Output` itself, which itself outputs a `[psobject]`-wrapped instance.\r\n\r\nI would expect the following to work the same:\r\n\r\n```powershell\r\n0xa                 # -> 10\r\nWrite-Output 0xa    # -> 0xa !!\r\n```\r\n\r\nMore generally, the problem affects all functions / cmdlets that pass arguments  through that were bound to untyped  or `[object]` / `[psobject]` parameters:\r\n\r\n```powershell\r\n& { param($foo) $foo } 0xa  # -> 0xa !!\r\n& { param([int] $foo) $foo } 0xa  # -> 10 - due to explicit (re)-typing\r\n```\r\n",
    "created_at": "2019-03-18T05:27:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-473774580",
    "id": 473774580,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Mzc3NDU4MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473774580/reactions"
    },
    "updated_at": "2019-03-18T05:28:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473774580",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Seems like the issue comes from the parameter binding code. You should be able to verify that with Trace-Command, I would think?",
    "created_at": "2019-03-18T11:16:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-473869386",
    "id": 473869386,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Mzg2OTM4Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473869386/reactions"
    },
    "updated_at": "2019-03-18T11:16:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473869386",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@vexx32 Numeric literals within command ASTs are wrapped in a `PSObject` when they are compiled.\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/e91d6dcf56e4bbd406a144771979f77d13046856/src/System.Management.Automation/engine/parser/Compiler.cs#L3585-L3590\r\n\r\nMy understand is that this is done because the compiler can't tell if a parameter is actually typed as a numeric.  So if the parameter is typed as a string for instance, it would be unexpected to receive the string `15` instead of `0xf`.  The problem we're seeing here is that when the parameter is typed `PSObject`, it's just passing the wrapper made by the compiler.\r\n\r\nMaybe parameter binding should clear `PSObject.TokenText` when passing to a parameter typed as `PSObject`",
    "created_at": "2019-03-18T11:43:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-473876885",
    "id": 473876885,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Mzg3Njg4NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473876885/reactions"
    },
    "updated_at": "2019-03-18T11:43:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/473876885",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @vexx32 and @SeeminglyScience.\r\n\r\nWhile this preserve-the-original-string-representation behavior is arguably useful when calling _external programs_ - where arguments of technical necessity - must be passed as _strings_ (e.g., ` bash -c 'printf %s $1' - 0xa`) - I think in the realm of calling _PowerShell_ commands this behavior ultimately creates more confusion than it is being helpful.\r\n\r\nThe behavior is most likely to surface with `Write-Output` - instantly, if you output to the console - and `Set-Variable` / `New-Variable`, where such a wrapped argument is output / stored _as-is_.\r\n\r\nIt's especially tricky with `Set-Variable` / `New-Variable`, where the surprising stringification behavior may not surface until much later, but it can also affect custom functions with untyped / `[object]` / `[psobject]` parameters, as shown.\r\n\r\nA clean separation would be to only ever apply the behavior to external-program invocations.\r\n\r\nDo you think that's feasible, @SeeminglyScience?\r\n\r\nThe caveat is that while I don't think existing code would rely on the behavior in the context of `Set-Variable` / `New-Variable`, changing `Write-Output` behavior is a much more public change: `Write-Output 0xa`, when printed to the console, would then yield `10`, and no longer `0xa`.\r\n",
    "created_at": "2019-03-18T20:44:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-474093196",
    "id": 474093196,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDA5MzE5Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/474093196/reactions"
    },
    "updated_at": "2019-03-18T20:44:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/474093196",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 \r\n\r\n> A clean separation would be to only ever apply the behavior to external-program invocations.\r\n> Do you think that's feasible, @SeeminglyScience?\r\n\r\nPretty significant risk imo.  I think any of these are likely to come up as an issue somewhere:\r\n\r\n```powershell\r\nfunction Write-String {\r\n    param([string] $Arg)\r\n    $Arg\r\n}\r\n\r\nWrite-String 0xfeed\r\nWrite-String 10l\r\nWrite-String 10ul\r\nWrite-String 10u\r\nWrite-String 10us\r\nWrite-String 10s\r\nWrite-String 0b011111111 # Granted this one depends on a pending PR from @vexx32\r\n```\r\n\r\nI think it would be better to clear `PSObject.TokenText` at the time of a successful parameter binding - **if** the parameter is typed as anything other than `string`.\r\n\r\n**Edit** Also:\r\n\r\n>  I think in the realm of calling PowerShell commands this behavior ultimately creates more confusion than it is being helpful.\r\n\r\nI think it's significantly more likely that the user is not aware of hex/explicit type postfix/etc syntax and instead are using it accidentally when trying to pass a string.",
    "created_at": "2019-03-19T01:03:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-474158121",
    "id": 474158121,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDE1ODEyMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/474158121/reactions"
    },
    "updated_at": "2019-03-19T01:07:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/474158121",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @SeeminglyScience  - tying and limiting the wrapping behavior to `[string]`-typed parameters makes sense and makes for a simple rule to remember.\r\n\r\nIt would change the behavior of `Write-Output`, though, correct? \r\nI'm personally fine with that, but not everyone may be.\r\n\r\n\r\n",
    "created_at": "2019-03-20T15:57:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-474900149",
    "id": 474900149,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDkwMDE0OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/474900149/reactions"
    },
    "updated_at": "2019-03-20T15:57:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/474900149",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I don't think there's anything wrong with making that change. After all, it would align Write-Output's behaviour more closely to the raw `$PSCmdlet.WriteObject()` which I think is a good thing as it means less nuances to worry about between cmdlets and functions.",
    "created_at": "2019-03-20T16:20:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-474910874",
    "id": 474910874,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDkxMDg3NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/474910874/reactions"
    },
    "updated_at": "2019-03-20T16:20:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/474910874",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Good point, @vexx32.\r\n\r\nNow that we've worked out the crux of the issue, it's worth opening a new issue focused on it and close this one.\r\n\r\nI'm happy to do it - unless you prefer to, @SeeminglyScience, given that you can provide more technical detail.\r\n\r\n\r\n",
    "created_at": "2019-03-20T16:32:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-474916931",
    "id": 474916931,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDkxNjkzMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/474916931/reactions"
    },
    "updated_at": "2019-03-20T16:32:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/474916931",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@mklement0 - external programs have little to do with the implemented behavior. In fact, it was Exchange that asked for unquoted tokens to be passed through as-is, so e.g. if you wanted to add a user, `Add-User 0xC00L ...`, you aren't adding user `3072`.\r\n\r\n@SeeminglyScience - I agree any change here is risky. For example, you've ignored `[object]` parameters that might eventually convert the value to a string.\r\n\r\nAs I see it, there are limited options:\r\n* Require all strings to use quotes - a horrible shell experience.\r\n* Maintain the token text for any token that might not round-trip - potentially very expensive for limited gain.\r\n* Compromise and accept some limited confusion.",
    "created_at": "2019-03-20T18:07:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-474963703",
    "id": 474963703,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDk2MzcwMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/474963703/reactions"
    },
    "updated_at": "2019-03-20T18:07:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/474963703",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @lzybkr.\r\n\r\n* To me, the current behavior makes the most sense for external programs, where PowerShell has no way of knowing what the target type is.\r\n\r\n* Exchange cmdlets, at least in their current incarnation, don't seem to be using `[object]` (or `[psobject]`) parameters; e.g., [`New-ADUser`](https://docs.microsoft.com/en-us/powershell/module/addsadministration/New-ADUser)'s `-Name` parameter is `[string]`-typed, and with @SeeminglyScience's proposed fix (keep the current behavior only for `[string]`-typed parameters), these would continue to work.\r\n\r\n  * I haven't looked at all cmdlets, however, so I presume there are - or at least used to be - `[object]` parameters somewhere, otherwise they wouldn't have asked for it.\r\n\r\n* Generally, given that an `[object]` / `[psobject]`-typed parameter retains its _inferred_ type, I think it's reasonable to make it exhibit _only_ that behavior, so if we didn't have to worry about backward compatibility, limiting the retain-the-string-representation behavior to `[string]`-typed parameters in PowerShell and for all external programs would make the most sense to me.\r\n\r\nWith backward compatibility a concern, I agree that the options you mention (apart from doing nothing) are impractical.\r\n\r\n~~However, how about the following ones, going back to the surprising behavior that prompted creation of this issue?~~\r\n\r\n* ~~Special-case `Set-Variable` to discard the cached string representation, so as to make its behavior consistent with direct assignment.~~\r\n  * ~~I think it's reasonable to assume that in the context of `Set-Variable` users are in more of a programming-language than in a shell mindset.~~\r\n\r\n* ~~and/or ignore the cached string representation in expression contexts such as with `-f`, which would be consistent with its already being ignored in an explicit `.ToString()` call and during string interpolation~~:\r\n",
    "created_at": "2019-03-20T19:24:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-474992904",
    "id": 474992904,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NDk5MjkwNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/474992904/reactions"
    },
    "updated_at": "2019-05-10T21:01:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/474992904",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": ">Special-case `Set-Variable` to discard the cached string representation, so as to make its behavior consistent with direct assignment.\r\n\r\nReturning to\r\n```powershell\r\n$num = (write 0xa)\r\nSet-Variable num (write 0xa)\r\n```\r\ncase. How should `Set-Variable` know, that is should no unwrap here to be consistent with direct assignment? Or more general case:\r\n```powershell\r\n$num = $a\r\nSet-Variable num $a\r\n```\r\n`Set-Variable` already consistent with direct assignment: if you start with the same value, then you will get same value assigned to variable. Can you describe the change to `Set-Variable` that will not break this?\r\n\r\nIf you start with different values, due to different parsing modes, then it is reasonable, IMHO, that you will end up with different results. And difference between expression and arguments parsing modes is not going anywhere, so you always have to keep it in mind. Adding additional exceptions on top of it just make whole system more complex: harder for newcomers to grasp, more corner cases to handle.\r\n\r\nAlso for general unwrapping `[object]` and `[psobject]` parameters, should all this change their behavior?:\r\n```powershell\r\nForEach-Object { [string]$_ } -InputObject 0xa\r\nInvoke-Command { param([string]$s) $s } -ArgumentList 0xa\r\nStart-Job { param([string]$s) $s } -ArgumentList 0xa | Receive-Job -Wait -AutoRemoveJob\r\nSet-Item Env:Var -Value 0xa\r\nSet-ItemProperty HKCU:\\Software Var -Value 0xa -Type String\r\nfunction ToString { param([string]$s) $s } function ToStringWrapper { ToString @args } ToStringWrapper 0xa\r\n```",
    "created_at": "2019-03-20T21:25:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-475034694",
    "id": 475034694,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTAzNDY5NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475034694/reactions"
    },
    "updated_at": "2019-03-20T21:25:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475034694",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/17184058?v=4",
      "events_url": "https://api.github.com/users/PetSerAl/events{/privacy}",
      "followers_url": "https://api.github.com/users/PetSerAl/followers",
      "following_url": "https://api.github.com/users/PetSerAl/following{/other_user}",
      "gists_url": "https://api.github.com/users/PetSerAl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PetSerAl",
      "id": 17184058,
      "login": "PetSerAl",
      "node_id": "MDQ6VXNlcjE3MTg0MDU4",
      "organizations_url": "https://api.github.com/users/PetSerAl/orgs",
      "received_events_url": "https://api.github.com/users/PetSerAl/received_events",
      "repos_url": "https://api.github.com/users/PetSerAl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PetSerAl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PetSerAl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PetSerAl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "A quick aside, @PetSerAl: Please don't use alias `write` for `Write-Output` in examples, because it isn't defined on Unix-like platforms.",
    "created_at": "2019-03-21T01:29:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-475086976",
    "id": 475086976,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTA4Njk3Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475086976/reactions"
    },
    "updated_at": "2019-03-21T01:29:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475086976",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Leaving backward compatibility aside for a moment, @PetSerAl:\r\n\r\n> How should Set-Variable know, that is should no unwrap here to be consistent with direct assignment?\r\n\r\nIt shouldn't have to know, nor should anyone else _after parameter binding_.\r\n\r\n>  Adding additional exceptions on top of it just make whole system more complex: harder for newcomers to grasp, more corner cases to handle.\r\n\r\nTrue: The awkward crutch of parsing something as a number first and then having it _half-pretend_ that it's a string, situationally, obscurely, should be ditched as early as possible.\r\n\r\nThe solution is to once-and-for-all decide at the time of parameter binding what type a given argument is and _discard the cached string representation_ once that decision is made.\r\n\r\n> Also for general unwrapping [object] and [psobject] parameters, should all these change their behavior?:\r\n\r\nBased on the proposal to keep the current behavior (only) with  `[string]`-typed parameters, none of these would change.\r\n\r\nSimilarly, with that proposal the asymmetry between `$var = ...` and `Set-Variable var` would automatically go away:\r\n\r\n`Write-Output` and `Set-Variable` would ditch the cached string representation on binding to their `[psobject]` / `[object]`-typed parameters (shout-out to #5551), and `$var` would receive the \"pure\" number in all 3 scenarios:\r\n\r\n```powershell\r\n# Would all behave the same if only [string]-typed parameters cached the \r\n# string representation.\r\n$var = 0xa\r\n$var = (Write-Output 0xa)\r\nSet-Variable var 0xa\r\n```\r\n\r\n",
    "created_at": "2019-03-21T01:54:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-475090275",
    "id": 475090275,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTA5MDI3NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475090275/reactions"
    },
    "updated_at": "2019-03-21T01:54:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475090275",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": ">Based on the proposal to keep the current behavior (only) with `[string]`-typed parameters, none of these would change.\r\n\r\n`ForEach-Object` `-InputObject` is `[psobject]`\r\n`Invoke-Command` `-ArgumentList` is `[object[]]`\r\n`Start-Job` `-ArgumentList` is `[object[]]`\r\n`Set-Item` `-Value` is `[object]`\r\n`Set-ItemProperty` `-Value` is `[object]`\r\n`$args` is `[object]`\r\n\r\nNone of them are `[string]`.",
    "created_at": "2019-03-21T03:13:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-475100984",
    "id": 475100984,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTEwMDk4NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475100984/reactions"
    },
    "updated_at": "2019-03-21T03:13:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475100984",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/17184058?v=4",
      "events_url": "https://api.github.com/users/PetSerAl/events{/privacy}",
      "followers_url": "https://api.github.com/users/PetSerAl/followers",
      "following_url": "https://api.github.com/users/PetSerAl/following{/other_user}",
      "gists_url": "https://api.github.com/users/PetSerAl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PetSerAl",
      "id": 17184058,
      "login": "PetSerAl",
      "node_id": "MDQ6VXNlcjE3MTg0MDU4",
      "organizations_url": "https://api.github.com/users/PetSerAl/orgs",
      "received_events_url": "https://api.github.com/users/PetSerAl/received_events",
      "repos_url": "https://api.github.com/users/PetSerAl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PetSerAl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PetSerAl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PetSerAl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@PetSerAl: All the specific uses of these in your previous examples expressly used `[string]`, and it was these uses I was referring to.",
    "created_at": "2019-03-21T03:17:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-475101367",
    "id": 475101367,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTEwMTM2Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475101367/reactions"
    },
    "updated_at": "2019-03-21T03:19:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475101367",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "But to the time you reach `[string]` point value would be already unwrapped, thus it would not be possible to see original string `0xa` instead of integer `10`.",
    "created_at": "2019-03-21T03:22:39Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-475102161",
    "id": 475102161,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTEwMjE2MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475102161/reactions"
    },
    "updated_at": "2019-03-21T03:22:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475102161",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/17184058?v=4",
      "events_url": "https://api.github.com/users/PetSerAl/events{/privacy}",
      "followers_url": "https://api.github.com/users/PetSerAl/followers",
      "following_url": "https://api.github.com/users/PetSerAl/following{/other_user}",
      "gists_url": "https://api.github.com/users/PetSerAl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PetSerAl",
      "id": 17184058,
      "login": "PetSerAl",
      "node_id": "MDQ6VXNlcjE3MTg0MDU4",
      "organizations_url": "https://api.github.com/users/PetSerAl/orgs",
      "received_events_url": "https://api.github.com/users/PetSerAl/received_events",
      "repos_url": "https://api.github.com/users/PetSerAl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PetSerAl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PetSerAl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PetSerAl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Good point, @PetSerAl, I hadn't considered that.",
    "created_at": "2019-03-21T03:29:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-475103066",
    "id": 475103066,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTEwMzA2Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475103066/reactions"
    },
    "updated_at": "2019-03-21T03:29:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475103066",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I have already been learning nearly every day that when a value needs to be numeric and its not part of the 'expression mode' logic, its best to wrap it in parenthesis.   Its a simple enough rule.\r\n\r\nSo these are equivalent:  (Guaranteed, internal or external, won't matter)\r\n```PowerShell\r\n$num = 0xa\r\nSet-Variable num (0xa)\r\n```\r\n\r\nConsider if you changed the input to:\r\n```PowerShell\r\n$num = -10\r\nSet-Variable num -10\r\n```\r\nIs `-10` a parameter name, a string value, or a numeric value?  For cmdlets and functions that do not bind to a numeric value type, it will be a string (as it cannot be a parameter name for a cmdlet or function, best I can determine).  But put parenthesis around it and its guaranteed to be a numeric, not a parameter name, or a string, unless it binds to a string, in which case it will then be reformatted by .ToString().\r\n\r\nSample of external access: (Windows 'more')\r\n```PowerShell\r\nmore 10.0000\r\n# tries to find file '10.000'\r\nmore (10.000)\r\n# tries to find file '10'\r\n```\r\n\r\nAlso consider if you would want the same behavior for numeric formats such as `+10`.  Its a numeric in expression mode, but a string in argument mode.  Also note that numeric formats such as `10kb` are also affected in argument mode.  Again, as long as its bound to a numeric type, it will be resolved as numeric, but otherwise it stays as a string, but `(10kb)` will guarantee its converted to numeric.   \r\n\r\nImagine the following:\r\n```PowerShell\r\nfunction bob ([string]$a) {$a}\r\nfunction hello ($a) {bob $a}\r\nhello 10kb\r\n```\r\nPowerShell will not know at the call to 'hello' that the value will be treated as a string, but later when 'hello' calls 'bob', its finally able to unwrap it to a string type.  Only its funny that if you put quotes around it, `{bob \"$a\"}` it converts it to a numeric value removing the original string content.   This is more alarming to me!\r\n",
    "created_at": "2019-03-21T04:23:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-475109650",
    "id": 475109650,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTEwOTY1MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475109650/reactions"
    },
    "updated_at": "2019-03-21T04:23:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475109650",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/26179051?v=4",
      "events_url": "https://api.github.com/users/msftrncs/events{/privacy}",
      "followers_url": "https://api.github.com/users/msftrncs/followers",
      "following_url": "https://api.github.com/users/msftrncs/following{/other_user}",
      "gists_url": "https://api.github.com/users/msftrncs/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/msftrncs",
      "id": 26179051,
      "login": "msftrncs",
      "node_id": "MDQ6VXNlcjI2MTc5MDUx",
      "organizations_url": "https://api.github.com/users/msftrncs/orgs",
      "received_events_url": "https://api.github.com/users/msftrncs/received_events",
      "repos_url": "https://api.github.com/users/msftrncs/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/msftrncs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msftrncs/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/msftrncs"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "True, @msftrncs, wrapping in parentheses can always be used to disambiguate.\r\n\r\n> Again, as long as its bound to a numeric type, it will be resolved as numeric, but otherwise it stays as a string,\r\n\r\nNo: a literal token  that would become a number in expression mode also becomes a number in argument mode, _even if it is bound to an untyped / `[object]` / `[psobject]` parameter_, and that's where the confusion starts.\r\n\r\nThe only difference is that such a number parsed in argument mode _stringifies_ to its original form.\r\n\r\nNote the docs also incorrectly suggest that unquoted arguments in argument mode are always _strings_; from [about_Parsing](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_parsing?view=powershell-6), emphasis added:\r\n\r\n>  In argument mode, each value is treated _as an expandable string_\r\n\r\nTo demonstrate that this is not true:\r\n\r\n```powershell\r\n# Script block with untyped parameter\r\nPS> & { param($p) $p + 1 } 1kb\r\n1025  # 1kb became [int] 1024\r\n```\r\n\r\nMy (limited) understanding is that the to-number conversion happens _before_ the target command's parameters are even being consulted - and that's where the need for the \"dual nature\" of such arguments comes from: it is now a number that must _situationally_ act as if it were a string in its original form.\r\n\r\nThere may be a good reason for this up-front typing, but it's not obvious to me.\r\n\r\n---\r\n\r\n > if you put quotes around it, {bob \"$a\"} it converts it to a numeric value removing the original string content. This is more alarming to me!\r\n\r\n**Indeed: the stringification currently doesn't work the way it should _in PowerShell code_**, as my previous examples also showed:\r\n\r\n* `\"$var\"` stringifies to the _default_ number representation, as you point out, not the cached string representation.\r\n* so does `$var.ToString()`\r\n\r\nExcept via the formatting system (by default to-console output or via `Out-*` / `Format-*` calls), the only way to get the cached representation in an expression is to call `.psobject.ToString()` rather than `.ToString()`:\r\n\r\n```powershell\r\nPS> & { param($p) \"$p\"; $p.ToString(); $p.psobject.ToString() } 1kb\r\n1024  # !!\r\n1024  # !!\r\n1kb\r\n```\r\n\r\nConversely, the cached string representation does kick in with `-f`, as shown in the OP:\r\n\r\n```powershell\r\n& { param($p) \"{0:N1}`n{1:N1}\" -f $p, $p.psobject.baseobject } 1kb\r\n1kb  # !! number formatting ignore; cached string representation used.\r\n1,024.0  \r\n```\r\n\r\nIf you call `[string]::Format()` directly instead of `-f`, the variable again acts as number:\r\n\r\n```powershell\r\nPS> & { param($p) [string]::Format('{0:N1}', $p) } 1kb\r\n1,024.0 \r\n```\r\n\r\nIn short:\r\n\r\n* In _PowerShell code_, the cached string representation is currently more of a hindrance than a feature.\r\n\r\n* By contrast, in _cmdlets_, both `object` and `PSObject`-typed parameters (which both effectively receive a `PSObject` instance) do consistently see the cached string representation with `.ToString()`.",
    "created_at": "2019-03-21T05:14:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-475115396",
    "id": 475115396,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTExNTM5Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475115396/reactions"
    },
    "updated_at": "2019-03-21T05:14:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475115396",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@lzybkr \r\n\r\n> @SeeminglyScience - I agree any change here is risky. For example, you've ignored [object] parameters that might eventually convert the value to a string.\r\n\r\nYup I incorrectly assumed the `psobject` would be unwrapped similar to when used for CLR method parameters typed as `object`.  It does make sense that that logic wouldn't extend to command parameter binding though.\r\n\r\nThat definitely complicates things, I no longer recommend my original suggestion.  Instead, maybe it should just be documented.",
    "created_at": "2019-03-21T14:27:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-475251221",
    "id": 475251221,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTI1MTIyMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475251221/reactions"
    },
    "updated_at": "2019-03-21T14:37:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475251221",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the discussion, it cleared some conceptual fog for me.\r\n\r\nThanks to @PetSerAl's illuminating examples, it's clear that we can't change the current behavior without breaking things.\r\n\r\nHowever, arguably the following _fixes_ to the behavior of PowerShell code are called for, for consistency - though I suspect no one feels any urgency to make them:\r\n\r\n* `\"$v\"` and `$v.ToString()` should use the cached string representation.\r\n* `Set-Content` should use the cached string representation (the way `Out-File` / `>` and the formatting system in general already do).\r\n\r\nThe behavior with `-f` is debatable - either behavior is defensible.\r\n\r\n---\r\n\r\nIn the spirit of #6745 and @PetSerAl's comment:\r\n\r\n> Adding additional exceptions on top of it just make whole system more complex: harder for newcomers to grasp, more corner cases to handle.\r\n\r\nIn that vein I wish what the documentation states _were_ true:\r\n\r\n> In argument mode, each value is treated as an expandable string\r\n\r\nThat is, a simple rule would be that everything unquoted (that isn't expression-based) is a _string_, _until instructed otherwise_, either by eventually explicitly binding to a specifically typed parameter or implicitly through the usual type conversions in expressions.\r\n\r\nAs an _optimization_ technique only, so as not to duplicate parsing effort, it may make sense to _reverse_ the logic and package the string with a cached number instance, if it was found to be a potential number literal during parsing, to be used if and when to-number conversion is called for. But this would have to be a mere _implementation detail_ that must never peek from behind the curtain.\r\n\r\nThe current behavior amounts to an odd blurring of the lines between argument mode and expression mode. \r\n\r\nAs an aside: Somewhat ironically, if things worked this way, it would amount to the opposite of what I (misguidedly) originally asked for; that is, to then truly create an `[int]`-typed value with `Set-Variable`, the argument would have to be enclosed in `(...)`: `Set-Variable num (0xa)`; otherwise `$num` would receive a _string_ value.\r\n",
    "created_at": "2019-05-10T20:39:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9157#issuecomment-491423258",
    "id": 491423258,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9157",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTQyMzI1OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/491423258/reactions"
    },
    "updated_at": "2019-05-10T20:39:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/491423258",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
