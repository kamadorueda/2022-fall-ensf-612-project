[
  {
    "author_association": "CONTRIBUTOR",
    "body": "Unfortunately, hard-link support was never implemented in PowerShell Core - see #11562.\r\n",
    "created_at": "2021-04-01T22:45:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15139#issuecomment-812216756",
    "id": 812216756,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15139",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjIxNjc1Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812216756/reactions"
    },
    "updated_at": "2021-04-01T22:45:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812216756",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "Thank you, I am looking for a windows powershell which have new-item relative symbolic links bug fix and hard links .Target feature, any suggestion?",
    "created_at": "2021-04-02T02:24:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15139#issuecomment-812281122",
    "id": 812281122,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15139",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjI4MTEyMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812281122/reactions"
    },
    "updated_at": "2021-04-02T02:27:12Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812281122",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/30518126?v=4",
      "events_url": "https://api.github.com/users/lededev/events{/privacy}",
      "followers_url": "https://api.github.com/users/lededev/followers",
      "following_url": "https://api.github.com/users/lededev/following{/other_user}",
      "gists_url": "https://api.github.com/users/lededev/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lededev",
      "id": 30518126,
      "login": "lededev",
      "node_id": "MDQ6VXNlcjMwNTE4MTI2",
      "organizations_url": "https://api.github.com/users/lededev/orgs",
      "received_events_url": "https://api.github.com/users/lededev/received_events",
      "repos_url": "https://api.github.com/users/lededev/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lededev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lededev/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lededev"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "The following adds a `.HardLinks` ETS property to `System.IO.FileInfo` instances (only for _files_, given that directories don't support hardlinks), but note that Unix isn't supported.\r\n\r\n* It incurs once-per-session compilation overhead due to use of `Add-Type` with C# code that uses P/Invoke declarations to call the Windows API, when you first access the property.\r\n\r\n* If you'd rather not update type definitions, you can use the `Add-Type` call in isolation, and then call the static `GetHardLinks` method as follows, for instance:\r\n\r\n  * `[WinUtil.NTFS]::GetHardLinks('C:\\WINDOWS\\explorer.exe')`\r\n\r\n* If you'd rather override the existing `.Target` ETS property to integrate this functionality, for emulation of Windows PowerShell behavior, see the bottom section.\r\n\r\n```powershell\r\nUpdate-TypeData -Force -TypeName System.IO.FileInfo -MemberName HardLinks -MemberType ScriptProperty -Value {\r\n  if ($env:OS -ne 'Windows_NT') { \r\n    # Note: throw and Write-Error are quietly ignored in a ScriptProperty script block.\r\n    Write-Warning \"The .HardLinks property is only supported on Windows.\" \r\n    return , [string[]] @()\r\n  }\r\n  Add-Type -Name NTFS -Namespace WinUtil -UsingNamespace System.Text, System.Collections.Generic, System.IO -MemberDefinition @'\r\n\r\n    #region WinAPI P/Invoke declarations\r\n    [DllImport(\"kernel32.dll\", CharSet = CharSet.Unicode, SetLastError = true)]\r\n    static extern IntPtr FindFirstFileNameW(string lpFileName, uint dwFlags, ref uint StringLength, StringBuilder LinkName);\r\n\r\n    [DllImport(\"kernel32.dll\", CharSet = CharSet.Unicode, SetLastError = true)]\r\n    static extern bool FindNextFileNameW(IntPtr hFindStream, ref uint StringLength, StringBuilder LinkName);\r\n\r\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\r\n    static extern bool FindClose(IntPtr hFindFile);\r\n\r\n    [DllImport(\"kernel32.dll\", CharSet = CharSet.Unicode, SetLastError = true)]\r\n    static extern bool GetVolumePathName(string lpszFileName, [Out] StringBuilder lpszVolumePathName, uint cchBufferLength);\r\n\r\n    public static readonly IntPtr INVALID_HANDLE_VALUE = (IntPtr)(-1); // 0xffffffff;\r\n    public const int MAX_PATH = 65535; // Max. NTFS path length.\r\n    #endregion\r\n\r\n    /// <summary>\r\n    //// Returns the enumeration of hardlinks for the given *file* as full file paths, if any,\r\n    //// excluding the input file itself.\r\n    /// </summary>\r\n    /// <remarks>\r\n    /// If the file has only one hardlink (itself) or the target volume doesn't support enumerating hardlinks,\r\n    /// an emtpty sting array is returned.\r\n    /// An exception occurs if you specify a non-existent path or a path to a\r\n    /// directory (directories don't support hardlinks)\r\n    /// </remarks>\r\n    public static string[] GetHardLinks(string filePath)\r\n    {\r\n      string fullFilePath = Path.GetFullPath(filePath);\r\n      if (Directory.Exists(fullFilePath))\r\n      {\r\n        throw new ArgumentException(\"Only files support hardlinks, \\\"\" + filePath + \"\\\" is a directory.\");\r\n      }\r\n      StringBuilder sbPath = new StringBuilder(MAX_PATH);\r\n      uint charCount = (uint)sbPath.Capacity; // in/out character-count variable for the WinAPI calls.\r\n      // Get the volume (drive) part of the target file's full path (e.g., @\"C:\\\")\r\n      GetVolumePathName(fullFilePath, sbPath, (uint)sbPath.Capacity);\r\n      string volume = sbPath.ToString();\r\n      // Trim the trailing \"\\\" from the volume path, to enable simple concatenation\r\n      // with the volume-relative paths returned by the FindFirstFileNameW() and FindFirstFileNameW() functions,\r\n      // which have a leading \"\\\"\r\n      volume = volume.Substring(0, volume.Length > 0 ? volume.Length - 1 : 0);\r\n      // Loop over and collect all hard links as their full paths.\r\n      IntPtr findHandle;\r\n      if (INVALID_HANDLE_VALUE == (findHandle = FindFirstFileNameW(fullFilePath, 0, ref charCount, sbPath)))\r\n      {\r\n        if (! File.Exists(fullFilePath))\r\n        {\r\n          throw new FileNotFoundException(\"File not found: \" + filePath);\r\n        }\r\n        // Otherwise: the target volume doesn't support enumerating hardlinks.\r\n        return Array.Empty<string>();\r\n      }\r\n      List<string> links = new List<string>();\r\n      do\r\n      {\r\n        string fullHardlinkPath = volume + sbPath.ToString();\r\n        if (! fullHardlinkPath.Equals(fullFilePath, StringComparison.OrdinalIgnoreCase)) \r\n        {\r\n          links.Add(fullHardlinkPath); // Add the full path to the result list.\r\n        }\r\n        charCount = (uint)sbPath.Capacity; // Prepare for the next FindNextFileNameW() call.\r\n      } while (FindNextFileNameW(findHandle, ref charCount, sbPath));\r\n      FindClose(findHandle);\r\n      return links.ToArray();\r\n    }\r\n\r\n'@\r\n  , [WinUtil.NTFS]::GetHardLinks($this.FullName)  \r\n}\r\n```\r\n\r\n**Sample call**:\r\n\r\n```powershell\r\nPS> (Get-Item 'C:\\WINDOWS\\explorer.exe').HardLinks\r\nC:\\Windows\\WinSxS\\amd64_microsoft-windows-explorer_31bf3856ad364e35_10.0.19041.844_none_2fabf330d88d7dfd\\explorer.exe\r\n```\r\n\r\n---\r\n\r\nOverriding the `.Target` property with integrated hardlink support on Windows, which emulates what Windows PowerShell does:\r\n\r\n```powershell\r\nUpdate-TypeData -Force -TypeName System.IO.FileInfo -MemberName Target -MemberType ScriptProperty -Value {\r\n\r\n  # NOTE: Paste the Add-Type command from above here.\r\n  #       Alternatively, run the Add-Type command separately, beforehand.\r\n\r\n  # Output the target, if the file at hand is a symbolic link (reparse point).\r\n  , [string[]] @($target = [Microsoft.PowerShell.Commands.InternalSymbolicLinkLinkCodeMethods]::GetTarget($this))\r\n  # If it isn't, and we're on Windows, look for and output hardlinks, if any.\r\n  if ($env:OS -eq 'Windows_NT' -and -not $target) {\r\n    , [WinUtil.NTFS]::GetHardLinks($this.FullName)\r\n  }\r\n}\r\n```\r\n\r\n**Sample call**:\r\n\r\n```powershell\r\nPS> (Get-Item 'C:\\WINDOWS\\explorer.exe').Target\r\nC:\\Windows\\WinSxS\\amd64_microsoft-windows-explorer_31bf3856ad364e35_10.0.19041.844_none_2fabf330d88d7dfd\\explorer.exe\r\n```\r\n",
    "created_at": "2021-04-02T15:01:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15139#issuecomment-812567971",
    "id": 812567971,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15139",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjU2Nzk3MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812567971/reactions"
    },
    "updated_at": "2022-10-18T16:09:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812567971",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "The PowerShell Engine WG reviewed this issue and agreed that this is a bug that should be addressed -- on Windows, `Target` should be able to resolve a hard link just like in Windows PowerShell 5.1; on Unix platforms, investigation should be done to see if it's possible to retain the same behavior as on Windows.\r\n",
    "created_at": "2022-10-17T22:47:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15139#issuecomment-1281591022",
    "id": 1281591022,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15139",
    "node_id": "IC_kwDOAvT7bc5MY4bu",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1281591022/reactions"
    },
    "updated_at": "2022-10-17T22:47:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1281591022",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "If pwsh resolves the hard link what constitutes the target? You could potentially have multiple files that are the same hard link and there isn’t really a single target as they are all essentially the same. Would the Target property return it as a list or have some mechanism to select one of them?",
    "created_at": "2022-10-18T00:28:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15139#issuecomment-1281660214",
    "id": 1281660214,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15139",
    "node_id": "IC_kwDOAvT7bc5MZJU2",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1281660214/reactions"
    },
    "updated_at": "2022-10-18T00:28:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1281660214",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8462645?v=4",
      "events_url": "https://api.github.com/users/jborean93/events{/privacy}",
      "followers_url": "https://api.github.com/users/jborean93/followers",
      "following_url": "https://api.github.com/users/jborean93/following{/other_user}",
      "gists_url": "https://api.github.com/users/jborean93/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jborean93",
      "id": 8462645,
      "login": "jborean93",
      "node_id": "MDQ6VXNlcjg0NjI2NDU=",
      "organizations_url": "https://api.github.com/users/jborean93/orgs",
      "received_events_url": "https://api.github.com/users/jborean93/received_events",
      "repos_url": "https://api.github.com/users/jborean93/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jborean93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jborean93/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jborean93"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "If I remember correctly we removed this for performance reasons years ago.\r\n\r\nWindows API allows to get all hard link targets by mean of enumerating API and it is slow.\r\nOn Unix API allows to get inode, then we have to enumerate all volume to find all elements with the same inode. It is very slow too. (Notice, we use this (inode tracking) to stop enumerating on cycles)\r\n\r\nIf we really want the feature I suggest to develop new cmdlet.",
    "created_at": "2022-10-18T03:04:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15139#issuecomment-1281752037",
    "id": 1281752037,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15139",
    "node_id": "IC_kwDOAvT7bc5MZfvl",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1281752037/reactions"
    },
    "updated_at": "2022-10-18T03:05:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1281752037",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "The code that resolves hard link was never enabled for PowerShell Core. That was because when initially porting Windows PowerShell to CoreCLR, the target was NanoServer and CoreSystem, where the needed Win32 APIs `FindFirstFileName`, `FindNextFileName`, and `FindClose` were not available. So, the code was disabled for CoreCLR at the time, and then I guess it was removed later after open source by some cleanup efforts. Below is the original code:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/source-depot/src/System.Management.Automation/namespaces/FileSystemProvider.cs#L7885-L7949\r\n\r\n> If pwsh resolves the hard link what constitutes the target?\r\n\r\nThe behavior in Windows PowerShell 5.1 is returning the list of files other than the file you try to resolve from:\r\n\r\n![image](https://user-images.githubusercontent.com/127450/196570826-28fefa65-9525-4a4d-92c6-f8e6b43dcb52.png)\r\n\r\n> If we really want the feature I suggest to develop new cmdlet.\r\n\r\nI personally agree that using `Target` for hard link is a little off -- it's not a target, but files that share the same inode.\r\nI like the idea of having new cmdlets for this functionality.\r\n",
    "created_at": "2022-10-19T00:44:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15139#issuecomment-1283191531",
    "id": 1283191531,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15139",
    "node_id": "IC_kwDOAvT7bc5Me_Lr",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1283191531/reactions"
    },
    "updated_at": "2022-10-19T00:45:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1283191531",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I think that there's agreement that reporting hard-links via `.Target` is problematic, both conceptually and in terms of performance (and in terms of PS Core-specific backward compatibility, given that `.Target` is a _single_, `[string]`-typed value, as @jborean93 points out).\r\n\r\nAn alternative to providing a separate cmdlet - which seems like overkill for such a specific feature - is to provide an ETS _method_ (`CodeMethod`) , say, `.GetHardLinks()` (which would need to be documented along with its performance implications, especially on Unix-like platforms, as noted by @iSazonov, if implemented there as well).\r\n\r\n\r\n\r\n",
    "created_at": "2022-10-19T02:53:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15139#issuecomment-1283336202",
    "id": 1283336202,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15139",
    "node_id": "IC_kwDOAvT7bc5MfigK",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1283336202/reactions"
    },
    "updated_at": "2022-10-19T02:53:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1283336202",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> The code that resolves hard link was never enabled for PowerShell Core. That was because when initially porting Windows PowerShell to CoreCLR, the target was NanoServer and CoreSystem, where the needed Win32 APIs `FindFirstFileName`, `FindNextFileName`, and `FindClose` were not available. So, the code was disabled for CoreCLR at the time, and then I guess it was removed later after open source by some cleanup efforts. Below is the original code:\r\n> \r\n> https://github.com/PowerShell/PowerShell/blob/source-depot/src/System.Management.Automation/namespaces/FileSystemProvider.cs#L7885-L7949\r\n\r\nRemoved in #8789.\r\n\r\n> I like the idea of having new cmdlets for this functionality.\r\n\r\nYou forget to add \"in new community module\" 😺 \r\n",
    "created_at": "2022-10-19T03:38:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15139#issuecomment-1283375313",
    "id": 1283375313,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15139",
    "node_id": "IC_kwDOAvT7bc5MfsDR",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1283375313/reactions"
    },
    "updated_at": "2022-10-19T16:23:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1283375313",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  }
]
