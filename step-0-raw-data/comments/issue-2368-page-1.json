[
  {
    "author_association": "MEMBER",
    "body": "I think that if you need specific events to be present, you can't assume that any eventlog file on our CI system will have what you need. I think the best approach is to provide a the specific .evtx file that you need (an additional file for use by a test should go into the `assets` directory where the `Pester` script is.\n\nI'll be adding a few more Get-WinEvent tests shortly\n",
    "created_at": "2016-09-28T20:21:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/2368#issuecomment-250287977",
    "id": 250287977,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/2368",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDI4Nzk3Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/250287977/reactions"
    },
    "updated_at": "2016-09-28T20:21:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/250287977",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10214008?v=4",
      "events_url": "https://api.github.com/users/JamesWTruher/events{/privacy}",
      "followers_url": "https://api.github.com/users/JamesWTruher/followers",
      "following_url": "https://api.github.com/users/JamesWTruher/following{/other_user}",
      "gists_url": "https://api.github.com/users/JamesWTruher/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JamesWTruher",
      "id": 10214008,
      "login": "JamesWTruher",
      "node_id": "MDQ6VXNlcjEwMjE0MDA4",
      "organizations_url": "https://api.github.com/users/JamesWTruher/orgs",
      "received_events_url": "https://api.github.com/users/JamesWTruher/received_events",
      "repos_url": "https://api.github.com/users/JamesWTruher/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JamesWTruher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JamesWTruher/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JamesWTruher"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@JamesWTruher Thanks for the quick help!\n\nThus  .evtx file.\nHere I have one doubt. If we use predetermined file it will be too difficult to maintain and easy to break. The best way to create the evtx on-the-fly from the auxiliary text file containing events in XML format. This requires writing provider on C#. I'm not sure that the solution already exists.\n\nI found another way to meet the task of testing event filters:\n\n> Enable and clear PrintService log\n> Create three dummy printers\n> Print to the printers\n> Make filter test\n\nI suppose it is easier than evtx (but is not so universally).\n\nSamle code:\n\n```\nContext 'Get-WinEvent FilterHashtable parameter' { \n        # for this set of tests we need to have a log which has multiple events with UsedData section (ex. PrintService log)\n\nBeforeAll {\n   if ( ! $IsWindows ) { return } # @JamesWTruher you dont mentioned in your test guide fot \"Context\"\n\n   // PrintService/Operational is Disabled by default\n   // Required admins rights\n   // wevtutil sl <logname> /e:true\n   $EventLog = Get-WinEvent -LogName Microsoft-Windows-PrintService/Operational\n   if ( $EventLog.IsEnabled )\n   {\n      $IsEventLogEnabled = $true\n   } else\n   {\n      $EventLog.IsEnabled = $true\n      $EventLog.saveChanges()\n      $IsEventLog = $false\n   }\n   # Is this possible in a test environment?\n   Clear-EventLog -LogName Microsoft-Windows-PrintService/Operational\n\n   # Create dummy printers\n   rundll32 printui.dll,PrintUIEntry /if /b \"Test Null Printer 1\" /f \"%systemroot%\\inf\\ntprint.inf\" /r \"nul:\" /m \"Generic / Text Only\" /z\n   rundll32 printui.dll,PrintUIEntry /if /b \"Test Null Printer 2\" /f \"%systemroot%\\inf\\ntprint.inf\" /r \"nul:\" /m \"Generic / Text Only\" /z\n   rundll32 printui.dll,PrintUIEntry /if /b \"Test Null Printer 3\" /f \"%systemroot%\\inf\\ntprint.inf\" /r \"nul:\" /m \"Generic / Text Only\" /z\n\n   # Create print events\n   \"Test text 1\" | Out-Printer -Name \"Test Null Printer 1\"\n   \"Test text 2\" | Out-Printer -Name \"Test Null Printer 1\"\n   \"Test text 3\" | Out-Printer -Name \"Test Null Printer 1\"\n   \"Test text 1\" | Out-Printer -Name \"Test Null Printer 2\"\n   \"Test text 2\" | Out-Printer -Name \"Test Null Printer 2\"\n   \"Test text 3\" | Out-Printer -Name \"Test Null Printer 2\"\n   \"Test text 1\" | Out-Printer -Name \"Test Null Printer 3\"\n   \"Test text 2\" | Out-Printer -Name \"Test Null Printer 3\"\n   \"Test text 3\" | Out-Printer -Name \"Test Null Printer 3\"\n}\n\nAfterAll {\n   # By default Disable PrintService log\n   if ( !$IsEventLogEnabled )\n   {\n      $EventLog.IsEnabled = $false\n      $EventLog.saveChanges()\n   }\n\n   # Delete dummy printers\n   rundll32 printui.dll,PrintUIEntry /dl /n \"Test Null Printer 1\"\n   rundll32 printui.dll,PrintUIEntry /dl /n \"Test Null Printer 2\"\n   rundll32 printui.dll,PrintUIEntry /dl /n \"Test Null Printer 3\"\n\n}\n```\n",
    "created_at": "2016-09-29T05:50:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/2368#issuecomment-250376296",
    "id": 250376296,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/2368",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDM3NjI5Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/250376296/reactions"
    },
    "updated_at": "2016-09-29T05:50:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/250376296",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "If a evtx file works on all platforms we support, I think it's reasonable to use a fixed file, but I do like the idea of generating one as well as long as it's easy to control exactly what goes in it.\n\nYour sample uses printers - I don't think that would work everywhere we might test PowerShell, e.g. on Nano.\n\nI have a [simple example](https://gist.github.com/lzybkr/6e4436d300a9050ef398a2f15554fc12) of creating an EventSource in PowerShell. I think it's possible to adapt this sample so it produces events for the event log, but I haven't tried, so that's on approach I'd look into.\n\nThe `Windows PowerShell` events are also a good source of events to generate the evtx from, but that could be a tiny bit more fragile depending on how you test and on any changes we might make in generating events.\n",
    "created_at": "2016-09-29T17:24:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/2368#issuecomment-250534174",
    "id": 250534174,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/2368",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDUzNDE3NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/250534174/reactions"
    },
    "updated_at": "2016-09-29T17:24:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/250534174",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@lzybkr Thanks for comments.\n\nClear about Nano and printers.\n\nNow @JamesWTruher made evtx. This is some trick. And it can only be supported by Powershell team. :confused:\n\nI'd like to see something that the community can support themselves without the ability to break current tests and waiting help from Powershell team.\nThe simplest way to log needed events is New-WinEvent. In this case, we only need to register custom provider which will support events of the desired format (event templates). I'm not sure what New-EventLog is suitable.\n",
    "created_at": "2016-09-30T08:38:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/2368#issuecomment-250690892",
    "id": 250690892,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/2368",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MDY5MDg5Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/250690892/reactions"
    },
    "updated_at": "2016-09-30T08:40:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/250690892",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "Resolved via PR #2373\n",
    "created_at": "2016-10-07T19:17:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/2368#issuecomment-252338152",
    "id": 252338152,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/2368",
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MjMzODE1Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/252338152/reactions"
    },
    "updated_at": "2016-10-07T19:17:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/252338152",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  }
]
