[
  {
    "author_association": "COLLABORATOR",
    "body": "Nice analysis but not quite complete as PowerShell natively handles category a).e.g. `PS > netstat.exe` just works.  My intention when I added `Start-Process` was to handle the *exceptional* case where `Invoke-Item` and native commands were insufficient e.g. starting a background console process without relying on `ShellExecute` or jobs. It's a relatively thin layer on top of the `Process` class and that shows through (to the detriment of the cmdlet). IMHO, the fact that `Invoke-Item` doesn't handle URIs should be fixed first before we do anything with `Start-Process`. I'm OK with adding a specific discoverable command for URIs but should probably be `Invoke-URI` rather than `Start` since you can't stop it.",
    "created_at": "2018-06-28T18:05:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7201#issuecomment-401123252",
    "id": 401123252,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7201",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTEyMzI1Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/401123252/reactions"
    },
    "updated_at": "2018-06-28T18:05:20Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/401123252",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @BrucePay.\r\n\r\n> as PowerShell natively handles category a).e.g. PS > netstat.exe just works.\r\n\r\nYes, but the focus of my analysis were all the _other_ scenarios where an external program / resource is executed / opened: asynchronously (at least by default), with no (direct) connection to the standard streams.\r\n(Leaving aside that it's a common beginner mistake (for people with a C# background) to think that `Start-Process` is needed for the it-just-works-with-direct-invocation scenario, i.e., for synchronous execution of _console_ programs with the standard streams connected.)\r\n\r\n> before we do anything with `Start-Process`\r\n\r\nAside from completing the work to bring `Start-Process` on (near-)par with the way it works in Windows PowerShell (now that `.UseShellExecute` is available), I wasn't suggesting any changes to `Start-Process` - those who are used to how it works in Windows PowerShell and know that (b) and (c) functionality are built in can continue to use it as they're used to.\r\n\r\nMy suggestion was to _additionally_ give category (c) (URI launching) a distinct cmdlet (`Start-Uri`), and to provide an alias for the already (b)-focused `Invoke-Item`, so as to make its name comply with PowerShell's naming rules (see below).\r\n\r\nThe net effect would be that each category would have a distinct cmdlet (despite the fact that `Start-Process` can do it all).\r\n\r\n> the fact that Invoke-Item doesn't handle URIs should be fixed first\r\n\r\nMy concern is that the `Item` noun suggests too strongly that the cmdlet acts on _PS provider items_ only, which URIs are not, hence the suggestion to add a URI-focused cmdlet.\r\n\r\nHere too we could take the same approach however: add URI support to `Invoke-Item` as well, in addition to providing a dedicated `Start-Uri` cmdlet.\r\n\r\n>  should probably be `Invoke-URI` rather than `Start` since you can't stop it.\r\n\r\nI was thinking `Start` in order to reflect the _asynchronous_ nature of the operation. \r\n\r\nThat said, not being able to stop the operation is unusual in this case, so we could consider a \"non-committal\" alternative such as `Open` (a verb that is commonly applied to documents and URIs even outside of PowerShell).\r\n\r\nBy contrast, `Invoke` strikes me as not appropriate, based on what the [documentation](https://docs.microsoft.com/en-us/powershell/developer/cmdlet/approved-verbs-for-windows-powershell-commands) tells us (emphasis added):\r\n\r\n> `Invoke` vs. `Start`: The **`Invoke` verb** is used to perform an operation that is **generally a synchronous operation**, such as running a command. The **`Start` verb** is used to begin an operation that is **generally an asynchronous operation**, such as starting a process.\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2018-06-28T19:59:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7201#issuecomment-401155073",
    "id": 401155073,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7201",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQwMTE1NTA3Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/401155073/reactions"
    },
    "updated_at": "2018-06-29T03:02:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/401155073",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
