[
  {
    "author_association": "COLLABORATOR",
    "body": "I'm not sure I quite get the purpose of this. Could you elaborate on what this would be used for? ðŸ™‚ ",
    "created_at": "2019-07-01T18:13:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507369662",
    "id": 507369662,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzM2OTY2Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507369662/reactions"
    },
    "updated_at": "2019-07-01T18:13:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507369662",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "you could write things like this:\r\n`Get-EventLog -LogName System -After (4hAgo)`\r\n\r\nPreferable without the parentheses as well",
    "created_at": "2019-07-01T18:32:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507375921",
    "id": 507375921,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzM3NTkyMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507375921/reactions"
    },
    "updated_at": "2019-07-01T18:32:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507375921",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7513795?v=4",
      "events_url": "https://api.github.com/users/Bartolomeus-649/events{/privacy}",
      "followers_url": "https://api.github.com/users/Bartolomeus-649/followers",
      "following_url": "https://api.github.com/users/Bartolomeus-649/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bartolomeus-649/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Bartolomeus-649",
      "id": 7513795,
      "login": "Bartolomeus-649",
      "node_id": "MDQ6VXNlcjc1MTM3OTU=",
      "organizations_url": "https://api.github.com/users/Bartolomeus-649/orgs",
      "received_events_url": "https://api.github.com/users/Bartolomeus-649/received_events",
      "repos_url": "https://api.github.com/users/Bartolomeus-649/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Bartolomeus-649/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bartolomeus-649/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Bartolomeus-649"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Gotcha, so you're looking to have a native syntax for defining datetime objects, and making it (effectively) a first-class type in PS.\r\n\r\nThis kind of thing should probably be implemented at the tokenizer level rather than being a function in practice, just to make it a good bit faster to handle and work with. In fact, if you can safely assume that the first character is _going_ to be numeric you could even add it as a specific set of numeric suffixes similar to the ones I did in #7813 (and at least one other PR).",
    "created_at": "2019-07-01T18:46:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507380629",
    "id": 507380629,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzM4MDYyOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507380629/reactions"
    },
    "updated_at": "2019-07-01T18:46:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507380629",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@Bartolomeus-649 \r\n\r\n> As a last step, when no other function, cmdLet, application or whatever is found, then use the regEx on the potential command and see if it match.\\\r\n\r\nYou should be able to implement this (or at least prototype it) in PowerShell as is using the `CommandNotFoundAction`  . Here's an (old) example I wrote to do autoloading in PowerShell (this was before we added it natively.)\r\n\r\n```powershell\r\n\r\n$executioncontext.InvokeCommand.CommandNotFoundAction = {\r\n    $ModuleTable = Get-ModuleAutoLoadData\r\n    $commandName = $_.CommandName\r\n    $moduleName = $ModuleTable[$commandName]\r\n    if ($moduleName)\r\n    {\r\n        $mod = Import-Module -Name $moduleName -PassThru\r\n        $cmd = $mod.ExportedCommands[$commandName]\r\n        if ($cmd)\r\n        {\r\n            $_.Command = $cmd\r\n            $_.StopSearch = $true\r\n        }\r\n    }\r\n}\r\n```",
    "created_at": "2019-07-01T18:55:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507383441",
    "id": 507383441,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzM4MzQ0MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507383441/reactions"
    },
    "updated_at": "2019-07-01T18:55:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507383441",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "You can, absolutely. The one reason I'd say _please don't_ here is that CommandNotFoundException is already exceedingly slow, and this would further slow it down. For limited use cases this is fine, and maybe that's enough here, but otherwise.... no thanks. ðŸ˜„ ",
    "created_at": "2019-07-01T19:42:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507398221",
    "id": 507398221,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzM5ODIyMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507398221/reactions"
    },
    "updated_at": "2019-07-01T19:42:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507398221",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "I was thinking something much more generic, not just for dates.\r\n\r\nThe regex defines how parameters should be extracted from the function name.\r\n\r\nAnother example\r\n\r\nThis would allow you to write `RcdGcdBcd` and get back :\r\n```\r\nColorContext :\r\nA            : 255\r\nR            : 205\r\nG            : 205\r\nB            : 205\r\nScA          : 1\r\nScR          : 0.6104956\r\nScG          : 0.6104956\r\nScB          : 0.6104956\r\n\r\n```\r\n```\r\nfunction /R(?<red>\\d{3}|[0-9a-f]{2})G(?<green>\\d{1,3}|[0-9a-f]{2})B(?<blue>\\d{1,3}|[0-9a-f]{2})/([string]$red, $green, $blue)\r\n{\r\n    [byte]$redInt;\r\n    [byte]$greenInt;\r\n    [byte]$bleuInt;\r\n\r\n    if($red.Length -eq 3)\r\n    {\r\n        $redInt =  [Int64]::Parse($red, [System.Globalization.NumberStyles]::HexNumber);\r\n        $blueInt =  [Int64]::Parse($blue, [System.Globalization.NumberStyles]::HexNumber);\r\n        $bleInt =  [Int64]::Parse($green, [System.Globalization.NumberStyles]::HexNumber);\r\n    }\r\n    else\r\n   {\r\n        $redInt =  [Int64]::Parse($red);\r\n        $blueInt =  [Int64]::Parse($blue);\r\n        $bleInt =  [Int64]::Parse($green);        \r\n   }\r\n\r\n    return [System.Windows.Media.Color]::FromRgb($redInt, $greenInt, $blueInt);\r\n}\r\n\r\n```\r\n\r\nThe main point is you should be able to use it inline just about anywhere, without any parentheses, arguments and other stuff that take up space and lowers readability. \r\n\r\nAlso, they should be deterministic and [100% pure functions](https://en.wikipedia.org/wiki/Pure_function) .\r\n\r\n\r\n\r\n",
    "created_at": "2019-07-01T19:45:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507399243",
    "id": 507399243,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzM5OTI0Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507399243/reactions"
    },
    "updated_at": "2019-07-01T19:45:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507399243",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7513795?v=4",
      "events_url": "https://api.github.com/users/Bartolomeus-649/events{/privacy}",
      "followers_url": "https://api.github.com/users/Bartolomeus-649/followers",
      "following_url": "https://api.github.com/users/Bartolomeus-649/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bartolomeus-649/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Bartolomeus-649",
      "id": 7513795,
      "login": "Bartolomeus-649",
      "node_id": "MDQ6VXNlcjc1MTM3OTU=",
      "organizations_url": "https://api.github.com/users/Bartolomeus-649/orgs",
      "received_events_url": "https://api.github.com/users/Bartolomeus-649/received_events",
      "repos_url": "https://api.github.com/users/Bartolomeus-649/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Bartolomeus-649/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bartolomeus-649/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Bartolomeus-649"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Given the contexts where function calls are currently permitted, this wouldn't be possible to do without changing how functions themselves work in PS.\r\n\r\nSo this would have to happen on a different level, but I'm not clear on how you would have this work, given that some of these what would be function names might actually want to be used for other things?",
    "created_at": "2019-07-01T19:48:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507400307",
    "id": 507400307,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzQwMDMwNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507400307/reactions"
    },
    "updated_at": "2019-07-01T19:48:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507400307",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "@vexx32 I agree, it should not be slow, but I can't see how testing a compiled regex on a string with a typical length of a function or cmdlet name would really be an issue.",
    "created_at": "2019-07-01T19:50:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507400772",
    "id": 507400772,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzQwMDc3Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507400772/reactions"
    },
    "updated_at": "2019-07-01T19:50:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507400772",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7513795?v=4",
      "events_url": "https://api.github.com/users/Bartolomeus-649/events{/privacy}",
      "followers_url": "https://api.github.com/users/Bartolomeus-649/followers",
      "following_url": "https://api.github.com/users/Bartolomeus-649/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bartolomeus-649/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Bartolomeus-649",
      "id": 7513795,
      "login": "Bartolomeus-649",
      "node_id": "MDQ6VXNlcjc1MTM3OTU=",
      "organizations_url": "https://api.github.com/users/Bartolomeus-649/orgs",
      "received_events_url": "https://api.github.com/users/Bartolomeus-649/received_events",
      "repos_url": "https://api.github.com/users/Bartolomeus-649/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Bartolomeus-649/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bartolomeus-649/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Bartolomeus-649"
    }
  },
  {
    "author_association": "NONE",
    "body": "@vexx32 so, perhaps it's not a function then, it just looks like one...\r\n\r\n**r**function $regEx(arg1, ..) { ... }",
    "created_at": "2019-07-01T19:52:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507401629",
    "id": 507401629,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzQwMTYyOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507401629/reactions"
    },
    "updated_at": "2019-07-01T19:52:47Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507401629",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7513795?v=4",
      "events_url": "https://api.github.com/users/Bartolomeus-649/events{/privacy}",
      "followers_url": "https://api.github.com/users/Bartolomeus-649/followers",
      "following_url": "https://api.github.com/users/Bartolomeus-649/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bartolomeus-649/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Bartolomeus-649",
      "id": 7513795,
      "login": "Bartolomeus-649",
      "node_id": "MDQ6VXNlcjc1MTM3OTU=",
      "organizations_url": "https://api.github.com/users/Bartolomeus-649/orgs",
      "received_events_url": "https://api.github.com/users/Bartolomeus-649/received_events",
      "repos_url": "https://api.github.com/users/Bartolomeus-649/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Bartolomeus-649/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bartolomeus-649/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Bartolomeus-649"
    }
  },
  {
    "author_association": "NONE",
    "body": "> So this would have to happen on a different level, but I'm not clear on how you would have this work, given that some of these what would be function names might actually want to be used for other things?\r\n\r\n@vexx32 well, if the name is used for something else then we would never get to the step where we would even see if a regex would match or not, so that shouldn't be an issue.",
    "created_at": "2019-07-01T19:57:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507403070",
    "id": 507403070,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzQwMzA3MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507403070/reactions"
    },
    "updated_at": "2019-07-01T19:57:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507403070",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7513795?v=4",
      "events_url": "https://api.github.com/users/Bartolomeus-649/events{/privacy}",
      "followers_url": "https://api.github.com/users/Bartolomeus-649/followers",
      "following_url": "https://api.github.com/users/Bartolomeus-649/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bartolomeus-649/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Bartolomeus-649",
      "id": 7513795,
      "login": "Bartolomeus-649",
      "node_id": "MDQ6VXNlcjc1MTM3OTU=",
      "organizations_url": "https://api.github.com/users/Bartolomeus-649/orgs",
      "received_events_url": "https://api.github.com/users/Bartolomeus-649/received_events",
      "repos_url": "https://api.github.com/users/Bartolomeus-649/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Bartolomeus-649/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bartolomeus-649/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Bartolomeus-649"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Right, it would need to be something... \"else.\"\r\n\r\nYou're proposing this be valid in more and wider contexts than a function is, so I think we could fairly easily run into issues where this would \"take over\" cmdlet argument values unnecessarily, and arguably in a pretty unexpected way. For example, say I want to pass an actual string value that happens to match this regex to my function. All of a sudden I'm getting back some other object I didn't ask for.\r\n\r\nI think that this might potentially lead to a great deal of confusion?",
    "created_at": "2019-07-01T19:58:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507403414",
    "id": 507403414,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzQwMzQxNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507403414/reactions"
    },
    "updated_at": "2019-07-01T19:58:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507403414",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "> For example, say I want to pass an actual string value that happens to match this regex to my function. All of a sudden I'm getting back some other object I didn't ask for.\r\n\r\n@vexx32 But you would never run one of these unless you get to the point that you don't know what to do with the thing you have, like just before the step where you today write the error message that you have no clue how to use something.",
    "created_at": "2019-07-01T20:03:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507404976",
    "id": 507404976,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzQwNDk3Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507404976/reactions"
    },
    "updated_at": "2019-07-01T20:03:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507404976",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7513795?v=4",
      "events_url": "https://api.github.com/users/Bartolomeus-649/events{/privacy}",
      "followers_url": "https://api.github.com/users/Bartolomeus-649/followers",
      "following_url": "https://api.github.com/users/Bartolomeus-649/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bartolomeus-649/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Bartolomeus-649",
      "id": 7513795,
      "login": "Bartolomeus-649",
      "node_id": "MDQ6VXNlcjc1MTM3OTU=",
      "organizations_url": "https://api.github.com/users/Bartolomeus-649/orgs",
      "received_events_url": "https://api.github.com/users/Bartolomeus-649/received_events",
      "repos_url": "https://api.github.com/users/Bartolomeus-649/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Bartolomeus-649/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bartolomeus-649/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Bartolomeus-649"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I understand that. Your initial proposal is to allow something like this:\r\n\r\n`Get-EventLog -LogName System -After (4hAgo)`\r\n\r\nAnd you mentioned it'd be more convenient without parentheses (to which I agree).\r\n\r\nHowever, in such a context you can't know if the user intended to pass a literal string value to that argument rather than have it be evaluated by the regex. Not sure how you're drawing the lines here, is all. :slightly_smiling_face: ",
    "created_at": "2019-07-01T20:14:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507408665",
    "id": 507408665,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzQwODY2NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507408665/reactions"
    },
    "updated_at": "2019-07-01T20:14:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507408665",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "when you write `Get-EventLog -LogName System -After (4hAgo)` and a function named `4hAgo` exists, then  you today execute the function, and there's no ambiguity or uncertainty whether you should pass in the string \"4hAgo\" or if you should call the function and pass in whatever it returns, right?\r\n\r\nBut if you instead write  `Get-EventLog -LogName System -After 4hAgo` and a function named `4hAgo` still exists, the string \"4hAgo\" get passed in as an argument, and you end up with an exception:\r\n`Get-EventLog : Cannot bind parameter 'After'. Cannot convert value \"4hago\" to type \"System.DateTime\". Error: \"The string was not recognized as a valid DateTime. There is an unknown word starting at index 1.\"`\r\n\r\nI think there should be no magic, you should be able to look at the command and determine if it will get a string or the result of this new funktion-ish thing.\r\n\r\nperhaps a prefix, like `Â¤4hAgo`?\r\n\r\n\r\n",
    "created_at": "2019-07-01T20:51:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507421373",
    "id": 507421373,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzQyMTM3Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507421373/reactions"
    },
    "updated_at": "2019-07-01T20:51:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507421373",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7513795?v=4",
      "events_url": "https://api.github.com/users/Bartolomeus-649/events{/privacy}",
      "followers_url": "https://api.github.com/users/Bartolomeus-649/followers",
      "following_url": "https://api.github.com/users/Bartolomeus-649/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bartolomeus-649/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Bartolomeus-649",
      "id": 7513795,
      "login": "Bartolomeus-649",
      "node_id": "MDQ6VXNlcjc1MTM3OTU=",
      "organizations_url": "https://api.github.com/users/Bartolomeus-649/orgs",
      "received_events_url": "https://api.github.com/users/Bartolomeus-649/received_events",
      "repos_url": "https://api.github.com/users/Bartolomeus-649/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Bartolomeus-649/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bartolomeus-649/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Bartolomeus-649"
    }
  },
  {
    "author_association": "NONE",
    "body": "I managed to get some kind of proof of concept/prototype based on the code provided by @BrucePay .\r\nNot sure if it's the right way to go about creating dynamic functions, but at least it works for one dynamic function at a time.\r\n\r\nwith this you can now write command like these, without there existing none of the \"Ago-functions\":\r\n```\r\nGet-EventLog -LogName System -After (4hAgo)\r\nGet-EventLog -LogName System -After (1wAgo)\r\nGet-EventLog -LogName System -After (1dAgo)\r\n\r\n```\r\n\r\n\r\n<details><summary>Source Code</summary>\r\n\r\n```powershell\r\n# https://regex101.com/r/EpiXHF/2\r\n[regex]$regEx = @\"\r\n(?mx-i)\r\n^\r\n    (?<amount>\\d+)\r\n    (?<unit>\r\n        (?: [s]    (?:econd  )? ) |\r\n        (?:        (?:Second )  ) |\r\n        (?: [M]    (?:inute  )? ) |\r\n        (?:        (?:minute )  ) |\r\n        (?: [h]    (?:our    )? ) |\r\n        (?:        (?:Hour   )  ) |\r\n        (?: [Dd]   (?:ay     )? ) |\r\n        (?: [Ww]   (?:eek    )? ) |\r\n        (?: [m]    (?:onth   )? ) |\r\n        (?:        (?:Month  )  ) |\r\n        (?: [Yy]   (?:ear    )? )\r\n    )(?:(?<=[\\D]{3})[s])?\r\n    (?<direction> [Aa]go)\r\n$\r\n\"@\r\n\r\n\r\nfunction __ago([int]$amount, [string]$unit, [string]$direction)\r\n{\r\n    if($direction.ToLower() -eq \"ago\")\r\n    {\r\n        $amount = $amount*-1;\r\n    }\r\n    else\r\n    {\r\n        throw \"Unsupported direction: $direction\";\r\n    }\r\n\r\n    [DateTime]$now = Get-Date;\r\n    [DateTime]$result = [DateTime]::MaxValue;\r\n    switch -Regex ($unit)\r\n    {\r\n         \"(?x-i) s | (?i) second\" {$result = $now.AddSeconds($amount);}\r\n         \"(?xi)  M | (?i) minute\" {$result = $now.AddMinutes($amount);}\r\n         \"(?x-i) h | (?i) hour\" {$result   = $now.AddHours($amount);}\r\n         \"(?xi)  d | (?i) days\" {$result   = $now.AddDays($amount);}\r\n         \"(?xi)  w | (?i) week\" {$result   = $now.AddDays($amount*7);}\r\n         \"(?x-i) m | (?i) month\" {$result  = $now.AddMonths($amount);}\r\n         \"(?xi)  y | (?i) year\" {$result   = $now.AddYears($amount);}\r\n        Default {throw \"Unsupported unit: $unit\"}\r\n    }\r\n\r\n    return $result;\r\n}\r\n\r\n#$executioncontext.InvokeCommand.CommandNotFoundAction = $null;\r\n$executioncontext.InvokeCommand.CommandNotFoundAction = {\r\n    $commandName = $_.CommandName.Replace(\"get-\", \"\");\r\n\r\n    if($regEx.IsMatch($commandName))\r\n    {\r\n        $matches = $regEx.Match($commandName);\r\n        $amount = $matches.Groups[\"amount\"].Value;\r\n        $unit = $matches.Groups[\"unit\"].Value;\r\n        $direction= $matches.Groups[\"direction\"].Value;\r\n\r\n        $__agoCommand = \"function tmpDummy(){__ago $amount `\"$unit`\" `\"$direction`\";}\";\r\n        $scriptBlockString =  $__agoCommand +\"(tmpDummy)\";\r\n\r\n       $scriptBlock = [ScriptBlock]::Create($scriptBlockString);\r\n\r\n        New-Module -Name \"dummy\"  -ScriptBlock $scriptBlock\r\n\r\n        $tmpCmd = Get-Command 'tmpDummy'\r\n\r\n        $_.Command = $tmpCmd;\r\n        $_.StopSearch = $true\r\n     }\r\n}\r\n```\r\n\r\n</details> ",
    "created_at": "2019-07-01T22:13:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507444761",
    "id": 507444761,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzQ0NDc2MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507444761/reactions"
    },
    "updated_at": "2019-07-01T22:13:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507444761",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7513795?v=4",
      "events_url": "https://api.github.com/users/Bartolomeus-649/events{/privacy}",
      "followers_url": "https://api.github.com/users/Bartolomeus-649/followers",
      "following_url": "https://api.github.com/users/Bartolomeus-649/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bartolomeus-649/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Bartolomeus-649",
      "id": 7513795,
      "login": "Bartolomeus-649",
      "node_id": "MDQ6VXNlcjc1MTM3OTU=",
      "organizations_url": "https://api.github.com/users/Bartolomeus-649/orgs",
      "received_events_url": "https://api.github.com/users/Bartolomeus-649/received_events",
      "repos_url": "https://api.github.com/users/Bartolomeus-649/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Bartolomeus-649/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bartolomeus-649/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Bartolomeus-649"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "You can do this today using an `ArgumentTransformationAttribute` e.g.:\r\n```\r\nusing namespace System\r\nusing namespace System.Management.Automation\r\n\r\nclass HumanizedTimespanTransformAttribute : ArgumentTransformationAttribute {\r\n    [object] Transform([EngineIntrinsics]$EngineIntrinsics, [object]$InputData) {\r\n        if ($InputData -isnot [string]) {\r\n            return $InputData\r\n        }\r\n\r\n        $now = $tmp = Get-Date;\r\n        switch -regex ($InputData) {\r\n            '(?<hrs>\\d+)(?=h)'  { $tmp = $tmp.AddHours($matches[\"hrs\"]) }\r\n            '(?<mins>\\d+)(?=m)' { $tmp = $tmp.AddMinutes($matches[\"mins\"]) }\r\n            '(?<secs>\\d+)(?=s)' { $tmp = $tmp.AddSeconds($matches[\"secs\"]) }\r\n        }\r\n\r\n        [TimeSpan]$timespan = $tmp - $now\r\n        return $timespan\r\n    }\r\n}\r\n\r\nfunction Test-HumanizedTimespanTransform {\r\n    [CmdletBinding()]\r\n    param(\r\n        [HumanizedTimespanTransform()]\r\n        [timespan]\r\n        $TimeSpan\r\n    )\r\n\r\n    $TimeSpan\r\n}\r\n\r\nTest-HumanizedTimespanTransform 4h30m5s\r\n```\r\nOutputs:\r\n```\r\nDays              : 0\r\nHours             : 4\r\nMinutes           : 30\r\nSeconds           : 5\r\nMilliseconds      : 0\r\nTicks             : 162050000000\r\nTotalDays         : 0.18755787037037\r\nTotalHours        : 4.50138888888889\r\nTotalMinutes      : 270.083333333333\r\nTotalSeconds      : 16205\r\nTotalMilliseconds : 16205000\r\n```",
    "created_at": "2019-07-01T23:27:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507460924",
    "id": 507460924,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzQ2MDkyNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507460924/reactions"
    },
    "updated_at": "2019-07-01T23:30:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507460924",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "NONE",
    "body": "So how does `ArgumentTransformationAttribute `make a command like this work?\r\n`Get-EventLog -LogName System -After 4h39m20s`",
    "created_at": "2019-07-02T00:03:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507467583",
    "id": 507467583,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzQ2NzU4Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507467583/reactions"
    },
    "updated_at": "2019-07-02T00:03:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507467583",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7513795?v=4",
      "events_url": "https://api.github.com/users/Bartolomeus-649/events{/privacy}",
      "followers_url": "https://api.github.com/users/Bartolomeus-649/followers",
      "following_url": "https://api.github.com/users/Bartolomeus-649/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bartolomeus-649/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Bartolomeus-649",
      "id": 7513795,
      "login": "Bartolomeus-649",
      "node_id": "MDQ6VXNlcjc1MTM3OTU=",
      "organizations_url": "https://api.github.com/users/Bartolomeus-649/orgs",
      "received_events_url": "https://api.github.com/users/Bartolomeus-649/received_events",
      "repos_url": "https://api.github.com/users/Bartolomeus-649/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Bartolomeus-649/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bartolomeus-649/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Bartolomeus-649"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "With `ArgumentTransformationAttibute` you have to apply that where the function is defined, which in this case is within PowerShell itself.  However, you can work-around this apparent limitation by using a proxy command - a command that wraps another command where you can do things before and/or after that actual command is invoked. In this case, we will apply our custom attribute to the `Before` and `After` parameter declarations:\r\n```poweshell\r\nusing namespace System\r\nusing namespace System.Management.Automation\r\n\r\nclass HumanizedDateTimeTransformAttribute : ArgumentTransformationAttribute {\r\n    [object] Transform([EngineIntrinsics]$EngineIntrinsics, [object]$InputData) {\r\n        if ($InputData -isnot [string]) {\r\n            return $InputData\r\n        }\r\n\r\n        $result = Get-Date;\r\n        switch -regex ($InputData) {\r\n            '(?<hrs>\\d+)(?=h)'  { $result = $result.AddHours(-1 * $matches[\"hrs\"]) }\r\n            '(?<mins>\\d+)(?=m)' { $result = $result.AddMinutes(-1 * $matches[\"mins\"]) }\r\n            '(?<secs>\\d+)(?=s)' { $result = $result.AddSeconds(-1 * $matches[\"secs\"]) }\r\n        }\r\n\r\n        return $result\r\n    }\r\n}\r\n\r\n\r\n<#\r\n.ForwardHelpTargetName Microsoft.PowerShell.Management\\Get-EventLog\r\n.ForwardHelpCategory Cmdlet\r\n#>\r\nfunction Get-EventLog {\r\n    [CmdletBinding(DefaultParameterSetName = 'LogName', HelpUri = 'https://go.microsoft.com/fwlink/?LinkID=113314', RemotingCapability = 'SupportedByCommand')]\r\n    param(\r\n        [Parameter(ParameterSetName = 'LogName', Mandatory = $true, Position = 0)]\r\n        [Alias('LN')]\r\n        [string]\r\n        ${LogName},\r\n\r\n        [Parameter(ParameterSetName = 'LogName')]\r\n        [ValidateRange(0, 2147483647)]\r\n        [int]\r\n        ${Newest},\r\n\r\n        [Alias('Cn')]\r\n        [ValidateNotNullOrEmpty()]\r\n        [string[]]\r\n        ${ComputerName},\r\n\r\n        [Parameter(ParameterSetName = 'LogName')]\r\n        [HumanizedDateTimeTransform()]\r\n        [ValidateNotNullOrEmpty()]\r\n        [datetime]\r\n        ${After},\r\n\r\n        [Parameter(ParameterSetName = 'LogName')]\r\n        [HumanizedDateTimeTransform()]\r\n        [ValidateNotNullOrEmpty()]\r\n        [datetime]\r\n        ${Before},\r\n\r\n        [Parameter(ParameterSetName = 'LogName')]\r\n        [ValidateNotNullOrEmpty()]\r\n        [string[]]\r\n        ${UserName},\r\n\r\n        [Parameter(ParameterSetName = 'LogName', Position = 1)]\r\n        [ValidateRange(0, 9223372036854775807)]\r\n        [ValidateNotNullOrEmpty()]\r\n        [long[]]\r\n        ${InstanceId},\r\n\r\n        [Parameter(ParameterSetName = 'LogName')]\r\n        [ValidateNotNullOrEmpty()]\r\n        [ValidateRange(1, 2147483647)]\r\n        [int[]]\r\n        ${Index},\r\n\r\n        [Parameter(ParameterSetName = 'LogName')]\r\n        [Alias('ET')]\r\n        [ValidateNotNullOrEmpty()]\r\n        [ValidateSet('Error', 'Information', 'FailureAudit', 'SuccessAudit', 'Warning')]\r\n        [string[]]\r\n        ${EntryType},\r\n\r\n        [Parameter(ParameterSetName = 'LogName')]\r\n        [Alias('ABO')]\r\n        [ValidateNotNullOrEmpty()]\r\n        [string[]]\r\n        ${Source},\r\n\r\n        [Parameter(ParameterSetName = 'LogName')]\r\n        [Alias('MSG')]\r\n        [ValidateNotNullOrEmpty()]\r\n        [string]\r\n        ${Message},\r\n\r\n        [Parameter(ParameterSetName = 'LogName')]\r\n        [switch]\r\n        ${AsBaseObject},\r\n\r\n        [Parameter(ParameterSetName = 'List')]\r\n        [switch]\r\n        ${List},\r\n\r\n        [Parameter(ParameterSetName = 'List')]\r\n        [switch]\r\n        ${AsString})\r\n\r\n    begin {\r\n        try {\r\n            $outBuffer = $null\r\n            if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {\r\n                $PSBoundParameters['OutBuffer'] = 1\r\n            }\r\n            $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('Microsoft.PowerShell.Management\\Get-EventLog', [System.Management.Automation.CommandTypes]::Cmdlet)\r\n            $scriptCmd = {& $wrappedCmd @PSBoundParameters }\r\n            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)\r\n            $steppablePipeline.Begin($PSCmdlet)\r\n        }\r\n        catch {\r\n            throw\r\n        }\r\n    }\r\n\r\n    process {\r\n        try {\r\n            $steppablePipeline.Process($_)\r\n        }\r\n        catch {\r\n            throw\r\n        }\r\n    }\r\n\r\n    end {\r\n        try {\r\n            $steppablePipeline.End()\r\n        }\r\n        catch {\r\n            throw\r\n        }\r\n    }\r\n}\r\n\r\nGet-EventLog -LogName System -After 4h39min20s\r\n\r\nGet-EventLog -LogName System -Before 24h -Newest 10\r\n```\r\nFYI you can use the following snippet to create a proxy command for any command:\r\n```\r\n$cmd = Get-Command Get-EventLog\r\n$metadata = [System.Management.Automation.CommandMetaData]::new($cmd)\r\n[System.Management.Automation.ProxyCommand]::Create($metadata)\r\n```",
    "created_at": "2019-07-02T00:29:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507472505",
    "id": 507472505,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzQ3MjUwNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507472505/reactions"
    },
    "updated_at": "2019-07-02T00:32:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507472505",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "NONE",
    "body": "not very generic...\r\n\r\nThe main point is you should be able to use it inline just about anywhere, without any parentheses, arguments and other stuff that take up space and lowers readability.",
    "created_at": "2019-07-02T00:36:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507473500",
    "id": 507473500,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzQ3MzUwMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507473500/reactions"
    },
    "updated_at": "2019-07-02T00:36:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507473500",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7513795?v=4",
      "events_url": "https://api.github.com/users/Bartolomeus-649/events{/privacy}",
      "followers_url": "https://api.github.com/users/Bartolomeus-649/followers",
      "following_url": "https://api.github.com/users/Bartolomeus-649/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bartolomeus-649/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Bartolomeus-649",
      "id": 7513795,
      "login": "Bartolomeus-649",
      "node_id": "MDQ6VXNlcjc1MTM3OTU=",
      "organizations_url": "https://api.github.com/users/Bartolomeus-649/orgs",
      "received_events_url": "https://api.github.com/users/Bartolomeus-649/received_events",
      "repos_url": "https://api.github.com/users/Bartolomeus-649/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Bartolomeus-649/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bartolomeus-649/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Bartolomeus-649"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "All that said, it would be nice to have built-in type coercion from strings specifying a duration to DateTime and TimeSpan.  Such a feature would require an RFC spelling out the tokens/syntax specifying such duration values.",
    "created_at": "2019-07-02T00:36:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507473616",
    "id": 507473616,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzQ3MzYxNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507473616/reactions"
    },
    "updated_at": "2019-07-02T00:36:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507473616",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Actually [ArgumentTransformationAttribute](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.argumenttransformationattribute?view=pscore-6.2.0) is quite generic and is **the** prescribed mechanism to do what you are asking for - **transforming an argument from one type to another**. \r\n\r\nPerhaps a better ask would be to be able to register custom `ArgumentTransformationAttributes` to existing commands' parameters like you can with `ArgumentCompleterAttribute` via `Register-ArgumentCompleter`.  ",
    "created_at": "2019-07-02T00:44:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507474917",
    "id": 507474917,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzQ3NDkxNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507474917/reactions"
    },
    "updated_at": "2019-07-02T00:47:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507474917",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "NONE",
    "body": "> The main point is you should be able to use it inline just about anywhere, without any parentheses, arguments and other stuff that take up space and lowers readability.\r\n\r\nI know it's not what you ask, but if you add a script method on type string, you should be able to do that.\r\n\r\n> Get-EventLog -LogName System -After \"4h39min20s\".Auto()\r\n\r\nPowerShell humanizer use this technics :\r\n https://github.com/dfinke/PowerShellHumanizer/blob/master/String.types.ps1xml\r\n",
    "created_at": "2019-07-02T01:29:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507482376",
    "id": 507482376,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzQ4MjM3Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507482376/reactions"
    },
    "updated_at": "2019-07-02T01:29:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/507482376",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6187529?v=4",
      "events_url": "https://api.github.com/users/fMichaleczek/events{/privacy}",
      "followers_url": "https://api.github.com/users/fMichaleczek/followers",
      "following_url": "https://api.github.com/users/fMichaleczek/following{/other_user}",
      "gists_url": "https://api.github.com/users/fMichaleczek/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/fMichaleczek",
      "id": 6187529,
      "login": "fMichaleczek",
      "node_id": "MDQ6VXNlcjYxODc1Mjk=",
      "organizations_url": "https://api.github.com/users/fMichaleczek/orgs",
      "received_events_url": "https://api.github.com/users/fMichaleczek/received_events",
      "repos_url": "https://api.github.com/users/fMichaleczek/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/fMichaleczek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fMichaleczek/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/fMichaleczek"
    }
  },
  {
    "author_association": "NONE",
    "body": "@rkeithhill I think you are missing the point.\r\n\r\n1. It has nothing to do with converting one datatyp to another\r\n2. There could be more than one of these active at the same time, how would PowerShell know which one to use?\r\n3. It's generic and works EVERYWHERE by default, just like you don't need to register a new cmdLet with other cmdLets, you should not need to do this here either.\r\n4. It has nothing to do with dates or time, that was just an example to make the whole concept a bit more concrete\r\n\r\nCheck out my proof of concept/prototype above https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507421373 based on the [suggestion/code](https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507383441) from @BrucePay .\r\n\r\nAlso, as @vexx32 pointed out, it probably need to be [something \"else\" than a function](https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-507403414)",
    "created_at": "2019-07-26T09:38:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10042#issuecomment-515382091",
    "id": 515382091,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10042",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNTM4MjA5MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/515382091/reactions"
    },
    "updated_at": "2019-07-26T09:38:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/515382091",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7513795?v=4",
      "events_url": "https://api.github.com/users/Bartolomeus-649/events{/privacy}",
      "followers_url": "https://api.github.com/users/Bartolomeus-649/followers",
      "following_url": "https://api.github.com/users/Bartolomeus-649/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bartolomeus-649/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Bartolomeus-649",
      "id": 7513795,
      "login": "Bartolomeus-649",
      "node_id": "MDQ6VXNlcjc1MTM3OTU=",
      "organizations_url": "https://api.github.com/users/Bartolomeus-649/orgs",
      "received_events_url": "https://api.github.com/users/Bartolomeus-649/received_events",
      "repos_url": "https://api.github.com/users/Bartolomeus-649/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Bartolomeus-649/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bartolomeus-649/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Bartolomeus-649"
    }
  }
]
