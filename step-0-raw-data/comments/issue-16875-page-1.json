[
  {
    "author_association": "COLLABORATOR",
    "body": "@MartinGC94 Is it possible to split the PR on some more simple and small to speed up the code review?",
    "created_at": "2022-02-12T16:33:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/16875#issuecomment-1037290711",
    "id": 1037290711,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16875",
    "node_id": "IC_kwDOAvT7bc4908zX",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1037290711/reactions"
    },
    "updated_at": "2022-02-12T16:33:50Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1037290711",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@iSazonov Not in a meaningful way IMO. The code is basically doing this:\r\n\r\n1. Extract interesting information from types to the type cache\r\n2. Build the typecache with this information\r\n3. Analyze script/session state for using statements and PS type definitions\r\n4. Use the type cache, using information and input to find the best/shortest completion names\r\n5. Create the completions\r\n\r\nAside from step 3, every step relies on the previous steps so a PR for step 2 would either not compile, or require the code from step 1 to be included which would just end up making step 5 look exactly like this PR. It would probably also be hard to judge the cache design on its own without seeing how it gets used.\r\n\r\nMaybe a deeper explanation of what I've done and the design will help:\r\nPractically all of the code in the `types` region has been deleted, so you can just ignore all the line removal/changes and just look at it as if that whole section was written from scratch.  \r\nHere's an example of what the type cache looks like:\r\n```\r\nTypeCache\r\n├───TypeNameMap\r\n│   ├───A\r\n│   │   ├───AutolinkInline\r\n│   │   │    └───Markdig.Syntax.Inlines.AutolinkInline\r\n│   │   └───AutolinkInlineRenderer\r\n│   │       ├───Markdig.Renderers.Normalize.Inlines.AutolinkInlineRenderer\r\n│   │       └───Markdig.Renderers.Html.Inlines.AutolinkInlineRenderer\r\n│   └───B\r\n│       ├───BlankLineBlock\r\n│       │    └───Markdig.Syntax.BlankLineBlock\r\n│       └───Block\r\n│           └───Markdig.Syntax.Block\r\n├───NamespaceMap\r\n│   └───A\r\n│       ├───AutoLinks\r\n│       │    └───Markdig.Extensions.AutoLinks\r\n│       └───AutoIdentifiers\r\n│           └───Markdig.Extensions.AutoIdentifiers\r\n├───NamespaceContent\r\n│   └───System.Management.Automation\r\n│       ├───Namespaces\r\n│       │    ├───System.Management.Automation.Tracing\r\n│       │    └───System.Management.Automation.Security\r\n│       └───Typenames\r\n│           ├───PowerShellAssemblyLoadContextInitializer\r\n│           └───PowerShellUnsafeAssemblyLoad\r\n├───CompletionInfo\r\n│   └───Markdig.IMarkdownExtension\r\n│       ├───ListItemText\r\n│       │   └───IMarkdownExtension\r\n│       └───ToolTip\r\n│           └───Markdig.IMarkdownExtension\r\n├───TypeAcceleratorMap\r\n│   └───Alias\r\n│       ├───FullName\r\n│       │   └───System.Management.Automation.AliasAttribute\r\n│       ├───ListItemText\r\n│       │   └───AliasAttribute\r\n│       └───ToolTip\r\n│           └───Class System.Management.Automation.AliasAttribute\r\n└───RootNamespaces\r\n    ├───Markdig\r\n    ├───Microsoft\r\n    └───System\r\n```\r\nTypeNameMap groups short type names by the first character in the short type name, then the short name itself and finally all the full names with that same type name.  \r\nNamespaceMap works just like the typename map, except instead of the short type name it uses the last sub namespace as the key.  \r\nNamespaceContent uses full namespace names as the key to find types/namespaces directly under that namespace.  \r\nCompletionInfo uses the full type names to find the static completion info (ListItemText and ToolTip)  \r\nTypeAcceleratorMap is similar to CompletionInfo except it uses the Type Accelerator name as the key and it also includes the full name. As I'm writing this I'm realizing an optimization here could be to just store the full name and then use the fullname to look up the completion info from the CompletionInfo.  \r\nRootNamespaces just contains a hashset of the root namespaces like \"System\".\r\n\r\nThe basic idea is to quickly be able to look up necessary data when I have a full name and to limit the scope of searches when I only have a partial name.\r\n\r\nHere's a quick summary of the order I would review the methods in and what they do:\r\n1: InitializeTypeCache - Finds types from 3 different sources, hands them off to a different method to extract interesting type info and adds them to the cache.\r\n2: GetTypeInfoForCompletion - Extracts interesting type info using either the type or the full type name. The interesting info is the shortname, fullname, namespace, tooltip and list item text.\r\n3: AddTypeToCache - Uses the type and namespace info from before to create and populate the different tables in the cache\r\n4: GetUsingInfo - Finds using statements in the script or the session state and finds type definitions in the script text or modules specified with `using module`\r\n5: CompleteType Uses the input to search the collected \"using\" info, type definitions and type cache for completions, utilizing GetShortestNonConflictingTypeName to well, get the shortest non conflicting type name for each found type.\r\n6: CompleteNamespace I literally copy pasted CompleteType and removed all the type specific stuff so you've practically already reviewed this at this point.",
    "created_at": "2022-02-12T23:05:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/16875#issuecomment-1037557684",
    "id": 1037557684,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16875",
    "node_id": "IC_kwDOAvT7bc4919-0",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1037557684/reactions"
    },
    "updated_at": "2022-02-12T23:05:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1037557684",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/42123497?v=4",
      "events_url": "https://api.github.com/users/MartinGC94/events{/privacy}",
      "followers_url": "https://api.github.com/users/MartinGC94/followers",
      "following_url": "https://api.github.com/users/MartinGC94/following{/other_user}",
      "gists_url": "https://api.github.com/users/MartinGC94/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/MartinGC94",
      "id": 42123497,
      "login": "MartinGC94",
      "node_id": "MDQ6VXNlcjQyMTIzNDk3",
      "organizations_url": "https://api.github.com/users/MartinGC94/orgs",
      "received_events_url": "https://api.github.com/users/MartinGC94/received_events",
      "repos_url": "https://api.github.com/users/MartinGC94/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/MartinGC94/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MartinGC94/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/MartinGC94"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@MartinGC94 Thanks for depth explanation! \r\n\r\nDoes InitializeTypeCache start in startup time? My ask is about makes sense prepopulate the cache in build time?",
    "created_at": "2022-02-13T17:17:23Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/16875#issuecomment-1038273985",
    "id": 1038273985,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16875",
    "node_id": "IC_kwDOAvT7bc494s3B",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1038273985/reactions"
    },
    "updated_at": "2022-02-13T17:17:23Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1038273985",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@iSazonov when you attempt to complete a namespace or type the cache is initialized if the cache is null. The cache is invalidated AKA changed to null whenever a new assembly is loaded.  \r\nI like the idea of having a factory default cache that is built at compile time that includes all the types that are always available to PowerShell. I don't know how I would implement that though and we would still need a dynamic cache to handle new types from external sources.",
    "created_at": "2022-02-13T18:54:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/16875#issuecomment-1038342711",
    "id": 1038342711,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16875",
    "node_id": "IC_kwDOAvT7bc4949o3",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1038342711/reactions"
    },
    "updated_at": "2022-02-13T18:54:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1038342711",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/42123497?v=4",
      "events_url": "https://api.github.com/users/MartinGC94/events{/privacy}",
      "followers_url": "https://api.github.com/users/MartinGC94/followers",
      "following_url": "https://api.github.com/users/MartinGC94/following{/other_user}",
      "gists_url": "https://api.github.com/users/MartinGC94/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/MartinGC94",
      "id": 42123497,
      "login": "MartinGC94",
      "node_id": "MDQ6VXNlcjQyMTIzNDk3",
      "organizations_url": "https://api.github.com/users/MartinGC94/orgs",
      "received_events_url": "https://api.github.com/users/MartinGC94/received_events",
      "repos_url": "https://api.github.com/users/MartinGC94/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/MartinGC94/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MartinGC94/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/MartinGC94"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@MartinGC94 My main concern is whether the cache initialized in non-interactive scenarios like schedule task and at startup time in other scenarios - all these could be cause noticeable delay. If yes it makes sense to prepopulate the cache otherwise it is initialized at first tab-completion and I guess users will see no delay really and we have no need to complicate.",
    "created_at": "2022-02-14T05:39:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/16875#issuecomment-1038665601",
    "id": 1038665601,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16875",
    "node_id": "IC_kwDOAvT7bc496MeB",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1038665601/reactions"
    },
    "updated_at": "2022-02-14T05:39:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1038665601",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@iSazonov  Non-interactive scenarios are not affected. As mentioned, it's only initialized when tab completing a namespace/type for the first time, which is the same way it works today.  \r\nI still see value in creating a portion of the cache in advance because a delay of almost 200ms is noticeable, and this is on a good computer. I've seen systems where the first type completion took a few seconds to complete.  \r\nThis is probably not the right PR to introduce this precompiled cache however, since it's already pretty big.",
    "created_at": "2022-02-14T10:36:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/16875#issuecomment-1038924233",
    "id": 1038924233,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16875",
    "node_id": "IC_kwDOAvT7bc497LnJ",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1038924233/reactions"
    },
    "updated_at": "2022-02-14T10:37:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1038924233",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/42123497?v=4",
      "events_url": "https://api.github.com/users/MartinGC94/events{/privacy}",
      "followers_url": "https://api.github.com/users/MartinGC94/followers",
      "following_url": "https://api.github.com/users/MartinGC94/following{/other_user}",
      "gists_url": "https://api.github.com/users/MartinGC94/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/MartinGC94",
      "id": 42123497,
      "login": "MartinGC94",
      "node_id": "MDQ6VXNlcjQyMTIzNDk3",
      "organizations_url": "https://api.github.com/users/MartinGC94/orgs",
      "received_events_url": "https://api.github.com/users/MartinGC94/received_events",
      "repos_url": "https://api.github.com/users/MartinGC94/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/MartinGC94/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MartinGC94/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/MartinGC94"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": ">since it's already pretty big\r\n\r\nSince you rebuild all type cache code it already makes no sense :-) \r\n\r\nI suggest you consider to create Source Generator. You can use follow examples:\r\n\r\n- #15603 - more correct implementation as SG\r\n- https://github.com/iSazonov/PowerShell/commit/f83729faaba404e85b9483717793fb88784d9e23 - more old but more clear to the PR.\r\n\r\nAlso I suggest you consider to have two type cache - (1) prepopulated with SG, (2) created at run time for new loaded dll-s. ",
    "created_at": "2022-02-14T12:32:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/16875#issuecomment-1039034222",
    "id": 1039034222,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16875",
    "node_id": "IC_kwDOAvT7bc497mdu",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1039034222/reactions"
    },
    "updated_at": "2022-02-14T12:32:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1039034222",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "NONE",
    "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
    "created_at": "2022-02-21T14:00:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/16875#issuecomment-1046910410",
    "id": 1046910410,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16875",
    "node_id": "IC_kwDOAvT7bc4-ZpXK",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1046910410/reactions"
    },
    "updated_at": "2022-02-21T14:00:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1046910410",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/in/26612?v=4",
      "events_url": "https://api.github.com/users/msftbot%5Bbot%5D/events{/privacy}",
      "followers_url": "https://api.github.com/users/msftbot%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/msftbot%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/msftbot%5Bbot%5D/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apps/msftbot",
      "id": 48340428,
      "login": "msftbot[bot]",
      "node_id": "MDM6Qm90NDgzNDA0Mjg=",
      "organizations_url": "https://api.github.com/users/msftbot%5Bbot%5D/orgs",
      "received_events_url": "https://api.github.com/users/msftbot%5Bbot%5D/received_events",
      "repos_url": "https://api.github.com/users/msftbot%5Bbot%5D/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/msftbot%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msftbot%5Bbot%5D/subscriptions",
      "type": "Bot",
      "url": "https://api.github.com/users/msftbot%5Bbot%5D"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I've thought of something, currently type accelerators use the resolved shortname as the list item text, for example `float` gets `Single` as its list item text but wouldn't it make more sense for it to use the type accelerator name? I mean if you are typing in \"Float\" and you get an IntelliSense menu you would naturally look for \"Float\" and not \"Single\", right?",
    "created_at": "2022-03-04T02:25:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/16875#issuecomment-1058762753",
    "id": 1058762753,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16875",
    "node_id": "IC_kwDOAvT7bc4_G3AB",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1058762753/reactions"
    },
    "updated_at": "2022-03-04T02:25:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1058762753",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/42123497?v=4",
      "events_url": "https://api.github.com/users/MartinGC94/events{/privacy}",
      "followers_url": "https://api.github.com/users/MartinGC94/followers",
      "following_url": "https://api.github.com/users/MartinGC94/following{/other_user}",
      "gists_url": "https://api.github.com/users/MartinGC94/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/MartinGC94",
      "id": 42123497,
      "login": "MartinGC94",
      "node_id": "MDQ6VXNlcjQyMTIzNDk3",
      "organizations_url": "https://api.github.com/users/MartinGC94/orgs",
      "received_events_url": "https://api.github.com/users/MartinGC94/received_events",
      "repos_url": "https://api.github.com/users/MartinGC94/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/MartinGC94/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MartinGC94/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/MartinGC94"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "This seems like overcomplicating.",
    "created_at": "2022-03-05T19:17:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/16875#issuecomment-1059818226",
    "id": 1059818226,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16875",
    "node_id": "IC_kwDOAvT7bc4_K4ry",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1059818226/reactions"
    },
    "updated_at": "2022-03-05T19:17:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1059818226",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@iSazonov What do you mean overcomplicating? Assuming it's in response to my last comment, it's just a matter of changing a single line to use a different property when building the completion result.",
    "created_at": "2022-03-05T19:32:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/16875#issuecomment-1059820157",
    "id": 1059820157,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16875",
    "node_id": "IC_kwDOAvT7bc4_K5J9",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1059820157/reactions"
    },
    "updated_at": "2022-03-05T19:32:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1059820157",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/42123497?v=4",
      "events_url": "https://api.github.com/users/MartinGC94/events{/privacy}",
      "followers_url": "https://api.github.com/users/MartinGC94/followers",
      "following_url": "https://api.github.com/users/MartinGC94/following{/other_user}",
      "gists_url": "https://api.github.com/users/MartinGC94/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/MartinGC94",
      "id": 42123497,
      "login": "MartinGC94",
      "node_id": "MDQ6VXNlcjQyMTIzNDk3",
      "organizations_url": "https://api.github.com/users/MartinGC94/orgs",
      "received_events_url": "https://api.github.com/users/MartinGC94/received_events",
      "repos_url": "https://api.github.com/users/MartinGC94/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/MartinGC94/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MartinGC94/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/MartinGC94"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Assuming it's in response to my last comment, it's just a matter of changing a single line to use a different property when building the completion result.\r\n\r\nYes, it is for your comment. Personally I don't like this - looks weird and mislead me.",
    "created_at": "2022-03-07T13:35:04Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/16875#issuecomment-1060694250",
    "id": 1060694250,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16875",
    "node_id": "IC_kwDOAvT7bc4_OOjq",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1060694250/reactions"
    },
    "updated_at": "2022-03-07T13:35:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1060694250",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I agree that it would have made sense to have `ListItemText` match the `CompletionText`. That's always been strange to me. The tooltip still shows the underlying type anyway.\r\n\r\nThat said, it will create confusion in some places. Like if you go to complete `[Parameter` you'll get `System.Reflection.Metadata.Parameter` and `ParameterAttribute` with the same list item text. That's sort of it's own issue, because every time I go to do it I forget I need to look for `ParameterAttribute` because I don't want it to complete as that. But anyway worth noting as a potential downside.\r\n\r\n**Edit:** And I see you point out the issue that would create in PSRL as well where it would only ever complete `SRM.Parameter` due to duplicate list item texts :/",
    "created_at": "2022-03-07T14:14:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/16875#issuecomment-1060731417",
    "id": 1060731417,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16875",
    "node_id": "IC_kwDOAvT7bc4_OXoZ",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1060731417/reactions"
    },
    "updated_at": "2022-03-07T15:08:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1060731417",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "This pull request has been automatically marked as Review Needed because it has been there has not been any activity for **7 days**.\nMaintainer, please provide feedback and/or mark it as `Waiting on Author`",
    "created_at": "2022-03-16T02:00:44Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/16875#issuecomment-1068653501",
    "id": 1068653501,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16875",
    "node_id": "IC_kwDOAvT7bc4_slu9",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1068653501/reactions"
    },
    "updated_at": "2022-03-16T02:00:44Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1068653501",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/in/26612?v=4",
      "events_url": "https://api.github.com/users/msftbot%5Bbot%5D/events{/privacy}",
      "followers_url": "https://api.github.com/users/msftbot%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/msftbot%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/msftbot%5Bbot%5D/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apps/msftbot",
      "id": 48340428,
      "login": "msftbot[bot]",
      "node_id": "MDM6Qm90NDgzNDA0Mjg=",
      "organizations_url": "https://api.github.com/users/msftbot%5Bbot%5D/orgs",
      "received_events_url": "https://api.github.com/users/msftbot%5Bbot%5D/received_events",
      "repos_url": "https://api.github.com/users/msftbot%5Bbot%5D/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/msftbot%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msftbot%5Bbot%5D/subscriptions",
      "type": "Bot",
      "url": "https://api.github.com/users/msftbot%5Bbot%5D"
    }
  },
  {
    "author_association": "NONE",
    "body": "### ![](https://img.shields.io/static/v1?label=Quantified&message=Extra%20Large&color=red)\r\n\r\nThis PR has `799` quantified lines of changes. In general, a change size of upto `200` lines is ideal for the best PR experience!\r\n\r\n------\r\n\r\n<details >\r\n    <summary display=\"inline\"> <strong>Quantification details</strong></summary>\r\n    <p />\r\n\r\n```\r\nLabel      : Extra Large\r\nSize       : +521 -278\r\nPercentile : 93.3%\r\n\r\nTotal files changed: 6\r\n\r\nChange summary by file extension:\r\n.cs : +460 -271\r\n.ps1 : +61 -7\r\n```\r\n> Change counts above are quantified counts, based on the [PullRequestQuantifier customizations](https://github.com/microsoft/PullRequestQuantifier/blob/main/docs/prquantifier-yaml.md).\r\n    \r\n</details>\r\n\r\n\r\n<details>\r\n    <summary display=\"inline\"> <strong>Why proper sizing of changes matters</strong> </summary>\r\n    <p/>\r\n    <p/>\r\n\r\nOptimal pull request sizes drive a better predictable PR flow as they strike a\r\nbalance between between PR complexity and PR review overhead. PRs within the\r\noptimal size (typical small, or medium sized PRs) mean:\r\n\r\n- Fast and predictable releases to production:\r\n  - Optimal size changes are more likely to be reviewed faster with fewer\r\niterations.\r\n  - Similarity in low PR complexity drives similar review times.\r\n- Review quality is likely higher as complexity is lower:\r\n  - Bugs are more likely to be detected.\r\n  - Code inconsistencies are more likely to be detected.\r\n- Knowledge sharing is improved within the participants:\r\n  - Small portions can be assimilated better.\r\n- Better engineering practices are exercised:\r\n  - Solving big problems by dividing them in well contained, smaller problems.\r\n  - Exercising separation of concerns within the code changes.\r\n\r\n#### What can I do to optimize my changes\r\n\r\n- Use the PullRequestQuantifier to quantify your PR accurately\r\n  - Create a context profile for your repo using the [context generator](https://github.com/microsoft/PullRequestQuantifier/releases)\r\n  - Exclude files that are not necessary to be reviewed or do not increase the review complexity. Example: Autogenerated code, docs, project IDE setting files, binaries, etc. Check out the `Excluded` section from your `prquantifier.yaml` context profile. \r\n  - Understand your typical change complexity, drive towards the desired complexity by adjusting the label mapping in your `prquantifier.yaml` context profile.\r\n  - Only use the labels that matter to you, [see context specification](./docs/prquantifier-yaml.md) to customize your `prquantifier.yaml` context profile.\r\n- Change your engineering behaviors\r\n  - For PRs that fall outside of the desired spectrum, review the details and check if:\r\n    - Your PR could be split in smaller, self-contained PRs instead\r\n    - Your PR only solves one particular issue. (For example, don't refactor and code new features in the same PR).\r\n\r\n#### How to interpret the change counts in git diff output\r\n\r\n- One line was added: `+1 -0`\r\n- One line was deleted: `+0 -1`\r\n- One line was modified: `+1 -1` (git diff doesn't know about modified, it will\r\ninterpret that line like one addition plus one deletion)\r\n- Change percentiles: Change characteristics (addition, deletion, modification)\r\nof this PR in relation to all other PRs within the repository.\r\n\r\n</details>\r\n\r\n<p />\r\n\r\n------\r\n\r\nWas this comment helpful? <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiTWFydGluR0M5NCIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNjg3NSIsIkV2ZW50VHlwZSI6IlRodW1ic1VwIn0=&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs up\"><strong>:thumbsup:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiTWFydGluR0M5NCIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNjg3NSIsIkV2ZW50VHlwZSI6Ik5ldXRyYWwifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Neutral\"><strong>&nbsp;:ok_hand:</strong></a> <a href=\"https://pullrequestquantifierfeedback.azurewebsites.net/feedback?payload=eyJBdXRob3JOYW1lIjoiTWFydGluR0M5NCIsIlJlcG9zaXRvcnlMaW5rIjoiaHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvUG93ZXJTaGVsbCIsIlB1bGxSZXF1ZXN0TGluayI6Imh0dHBzOi8vZ2l0aHViLmNvbS9Qb3dlclNoZWxsL1Bvd2VyU2hlbGwvcHVsbC8xNjg3NSIsIkV2ZW50VHlwZSI6IlRodW1ic0Rvd24ifQ==&amp;anonymous=True\" target=\"_blank\" title=\"Thumbs down\"><strong>&nbsp;:thumbsdown:</strong></a> (<a href=\"MAILTO:prquantifier@microsoft.com\" title=\"Mail to prquantifier@microsoft.com\">Email</a>)\r\n[Customize PullRequestQuantifier](https://github.com/PowerShell/PowerShell/blob/master/.github/prquantifier.yaml) for this repository.\r\n\r\n",
    "created_at": "2022-08-20T01:42:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/16875#issuecomment-1221202481",
    "id": 1221202481,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16875",
    "node_id": "IC_kwDOAvT7bc5IyhIx",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1221202481/reactions"
    },
    "updated_at": "2022-08-20T01:42:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1221202481",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/in/93966?v=4",
      "events_url": "https://api.github.com/users/pull-request-quantifier%5Bbot%5D/events{/privacy}",
      "followers_url": "https://api.github.com/users/pull-request-quantifier%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/pull-request-quantifier%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/pull-request-quantifier%5Bbot%5D/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apps/pull-request-quantifier",
      "id": 76597500,
      "login": "pull-request-quantifier[bot]",
      "node_id": "MDM6Qm90NzY1OTc1MDA=",
      "organizations_url": "https://api.github.com/users/pull-request-quantifier%5Bbot%5D/orgs",
      "received_events_url": "https://api.github.com/users/pull-request-quantifier%5Bbot%5D/received_events",
      "repos_url": "https://api.github.com/users/pull-request-quantifier%5Bbot%5D/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/pull-request-quantifier%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pull-request-quantifier%5Bbot%5D/subscriptions",
      "type": "Bot",
      "url": "https://api.github.com/users/pull-request-quantifier%5Bbot%5D"
    }
  }
]
