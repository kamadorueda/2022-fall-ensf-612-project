[
  {
    "author_association": "CONTRIBUTOR",
    "body": "@rjmholt, here's some background information that hopefully paints the full picture.\r\n\r\nFWIW, I compiled a version with `/bin/sh` on macOS 10.15.3, and it worked fine. The system Bash version (`/bin/bash`), 3.2.57, hasn't changed since 10.10 (Yosemite), long before the oldest version supported by PowerShell (10.13, High Sierra)\r\n\r\nThe `-l` / `--login` option was introduced in Bash 2.0.\r\n\r\nThe short of it is: I recommend updating the incorrect comment in the source code to avoid confusion and to provide a brief rationale for the choice of `/bin/zsh`.\r\n\r\n----\r\n\r\n**macOS default user and system shells:**\r\n\r\n**Default interactive user shell (configurable by each user)**:\r\n* up to 10.14 (Mojave): `/bin/bash`, version 3.2.57(1) since 10.10 (Yosemite)\r\n* from 10.15 (Catalina): `/bin/zsh`\r\n\r\n**System default shell, `/bin/sh`**:\r\n* as of 10.15 (Catalina): `/bin/bash`, 3.2.57(1) (and the respective Bash versions on older macOS versions) - _for licensing reasons, Bash on macOS hasn't received updates since 10.10, and won't in the future_.\r\n\r\n    * Even though Bash automatically enters POSIX compatibility mode when invoked via a symlink named `sh` or with `$0` set to `/bin/sh`, `sh`, or `-sh` (to request a login shell), (e.g., via `exec -l -a <value-for-$0> /bin/bash`), _older_ macOS versions had a _custom build_ of Bash as stand-alone binary `/bin/sh`, which provided additional POSIX compliance, as presumably required by the UNIX 03 certification macOS has.\r\n\r\n  *  As of at least macOS 10.15, that is no longer the case: `/bin/sh` is a _stub_ executable that re-`exec`s itself as whatever the configurable symlink at `/private/var/select/sh` points to, which - according to `man sh` - is allowed to target `bash`, `dash`, or `zsh`, and by default targets `/bin/bash` (which itself is now the custom build for increased POSIX compliance); that is, 10.15 now allows reconfiguring what shell acts as `/bin/sh` by modifying symlink `/private/var/select/sh` (which requires `sudo`).\r\n\r\n* Will a different shell ever become `/bin/sh` on macOS?\r\n\r\n    * `/bin/zsh` too is capable of running in POSIX compatibility mode when invoked as discussed above for Bash (as currently used by PowerShell).\r\n\r\n    * Since no automatic startup process processes `/etc/profile` and `~/.profile` on macOS - only the individual user shell instances created on demand do - the capabilities of `/bin/sh` are primarily important for portable shell scripts that use a `#!/bin/sh` shebang line.\r\n\r\n        * Therefore, if macOS ever wants to support potential new POSIX shell-language features introduced after Bash 3.2.57, it'll have to replace `/bin/sh` with a more modern shell, which is now easy to do, given the `/private/var/select/sh`-based mechanism described above.\r\n\r\n",
    "created_at": "2020-03-27T20:42:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12134#issuecomment-605306163",
    "id": 605306163,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12134",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTMwNjE2Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/605306163/reactions"
    },
    "updated_at": "2020-03-27T21:50:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/605306163",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "As I say, I originally tried the /bin/sh invocation and it didn't work for me. But if you've tried it and it works, then perhaps you can open a PR and we can try out your changes?\r\n\r\nIs there any observable behavioural difference in using /bin/zsh that you've noted?",
    "created_at": "2020-03-28T18:49:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12134#issuecomment-605503007",
    "id": 605503007,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12134",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTUwMzAwNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/605503007/reactions"
    },
    "updated_at": "2020-03-28T18:49:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/605503007",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "My original concern was that use of `/bin/zsh` wasn't necessary, and that the ramifications of using it in lieu of `/bin/sh` weren't clear and that it's always better to avoid special-casing.\r\n\r\n> Is there any observable behavioural difference in using /bin/zsh that you've noted?\r\n\r\nThere are at least two I personally know of (detailed below), but there may be more.\r\nThat said, they may not matter in practice.\r\n\r\nTherefore, among the **solutions** below, I'd be personally fine with (a), but I hope that at least _that_ will be considered - fixing a misleading comment in the source code is simple and well worth it.\r\n\r\n* **Solution (a)**: Stick with `/bin/zsh`, but amend the source-code comment with a proper rationale / background info (and perhaps even a link to this conversation).\r\n\r\n* **Solution (b)**: Revert to `/bin/sh` (only if tests show that it works, of course).\r\n\r\n  * This means that responsibility for providing a modern-enough POSIX-compliant shell as `/bin/sh` rests on macOS itself. While it still is (a custom build) of `bash` as of macOS 10.15, they've laid the groundwork for easily switching to either `/bin/dash` or `/bin/zsh` in future versions. Also, users can already switch of their own accord in 10.15 (requires `sudo`) - though I think switching the _system_ shell on individual machines is asking for trouble.\r\n\r\n* **Solution (c)**: on macOS 10.15 and above, switch to `/bin/dash` for better performance:\r\n\r\n  * I haven't done any tests, and my guess is that in practice there's not much of a difference, but the no-frills `/bin/dash` is built for speed, and its binary size is also only about 1 / 5th to 1 / 6th of that of `bash` / `zsh`.\r\n\r\n  * Obviously, this amounts to special-casing too (macOS 10.14 and below do not come with `/bin/dash`).\r\n\r\n  * Thus, since macOS 10.14 and below can't use `/bin/dash` yet, this solution must be combined with either (a) or (b).\r\n\r\n---\r\n\r\n**Behavioral differences** between  Bash  (acting as `/bin/sh`) and `/bin/zsh` in POSIX compatibility mode:\r\n\r\n* The `echo` built-in _does_ interpret `\\` escape sequences in Bash running as `sh` (due to the macOS custom build of it), `zsh` does _not_; e.g, `echo 'a\\nb'` prints `a<newline>b` in Bash-as-sh (on macOS only), but `a\\nb` _verbatim_ in Zsh-as-sh. Additionally, `echo -n hi` prints `-n hi` _verbatim_ in Bash-as-sh (no options whatsoever are recognized), whereas it prints `hi` _without a trailing newline_  (due to option `-n`) in Zsh-as-sh.\r\n\r\n   * As stated, macOS goes out of its way for this behavior, with a custom Bash build, presumably for the  official UNIX 03 certification, as such systems that report as XSI-compliant (an optional superset of the standard that macOS implements) are required to exhibit this behavior.\r\n\r\n   * `/bin/dash` too exhibits this behavior, always (but not `/bin/zsh` when acting as `sh`).\r\n\r\n   * As of macOS 10.15, there isn't any code in the standard `etc/profile` / `~/.profile` files (and files sourced from the former) where this difference matters - though conceivably with user additions it could.\r\n\r\n* As a side effect of Bash acting as `/bin/sh`, the `$BASH` shell variable is set and there's conditional code in `/etc/profile` that sources additional, Terminal.app-specific code if `$BASH` is found to be set.\r\n\r\n   * That said, this code - intended for terminal session-specific state restoration on restart for Bash, via shell functions - doesn't matter to PowerShell and it's arguably better _not_ to waste time executing it, so use of `/bin/zsh` is actually an _advantage_ in this respect; `/bin/dash` would _not_ execute it either.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-03-30T12:55:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12134#issuecomment-605981629",
    "id": 605981629,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12134",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTk4MTYyOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/605981629/reactions"
    },
    "updated_at": "2020-03-30T13:05:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/605981629",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
