[
  {
    "author_association": "CONTRIBUTOR",
    "body": "I'm seeing very different results.\r\n\r\nFirst, my first few runs of the test had wildly varying results (on PS5.1), but for the life of me I don't know why. After some experimentation I ended up with this, which gave more consistent results:\r\n\r\n```powershell\r\n$big = , (Get-Item /) * 1e6\r\n\r\n# PSv3+ operation statement (using parameters directly rather than a script block)\r\n(Measure-Command { $big | ForEach-Object Name }).TotalSeconds\r\n# Script block\r\n(Measure-Command { $big | ForEach-Object { $_.Name } }).TotalSeconds\r\n```\r\nOn Windows PowerShell 5.1, direct property access takes me 12-13 seconds, whereas the scriptblock takes 6-7.\r\n\r\nOn PowerShell Core 6.1.0-rc.1 (official release; not one I built myself) (windows amd64), direct property access still takes 12-13 seconds... but scriptblock now takes 9 seconds.\r\n\r\nSo I do observe a slowdown from PS5.1 to PS6... but it's in scriptblock processing.\r\n\r\nOh... wait... you are saying that you expect direct prop access to be not slower than scriptblock...\r\n\r\nWell, the two have very different code paths... and it's not hard to pick out a thing or two that seem like they would make things way slower, such as in the prop access path, we format a \"should process\" string, and then call `ShouldProcess` *for every single input object*.\r\n\r\n```csharp\r\n    // should process\r\n    string propertyAction = String.Format(CultureInfo.InvariantCulture,\r\n        InternalCommandStrings.ForEachObjectPropertyAction, resolvedPropertyName);\r\n\r\n    if (ShouldProcess(_targetString, propertyAction))\r\n    {\r\n        try\r\n        {\r\n            WriteToPipelineWithUnrolling(_propGetter.GetValue(InputObject, resolvedPropertyName));\r\n        }\r\n```\r\n\r\nWhereas for the scriptblock path, we just blast through and execute the script for every input.\r\n\r\nAt the very least you could try lifting out the `propertyAction` string to avoid the `String.Format` for every input, but note that you can't just lift it straight out--the `resolvedPropertyName` could theoretically be different for every input object (but not very likely...)--so you would have to cache it, for strictly equivalent behavior.\r\n\r\nBut I don't know how much difference that would make... maybe `ShouldProcess` is more expensive. :/\r\n\r\nAnyway, has anybody else noticed/filed the slowdown of the scriptblock path from 5.1 to 6?\r\n",
    "created_at": "2018-09-06T05:02:09Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7700#issuecomment-418965346",
    "id": 418965346,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7700",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODk2NTM0Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/418965346/reactions"
    },
    "updated_at": "2018-09-06T05:02:09Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/418965346",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/771085?v=4",
      "events_url": "https://api.github.com/users/jazzdelightsme/events{/privacy}",
      "followers_url": "https://api.github.com/users/jazzdelightsme/followers",
      "following_url": "https://api.github.com/users/jazzdelightsme/following{/other_user}",
      "gists_url": "https://api.github.com/users/jazzdelightsme/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jazzdelightsme",
      "id": 771085,
      "login": "jazzdelightsme",
      "node_id": "MDQ6VXNlcjc3MTA4NQ==",
      "organizations_url": "https://api.github.com/users/jazzdelightsme/orgs",
      "received_events_url": "https://api.github.com/users/jazzdelightsme/received_events",
      "repos_url": "https://api.github.com/users/jazzdelightsme/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jazzdelightsme/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jazzdelightsme/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jazzdelightsme"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "This is the relevant code that handles member resolution and method/property access for ForEach-Object:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/759c4abde811aff1490dec92e438d61e341c3181/src/System.Management.Automation/engine/InternalCommands.cs#L317-L596\r\n\r\nIt's long, it's convoluted, and a significant portion of it is long blocks of comments. All of this leads me to believe that there should be a much simpler solution available. I'm not certain if I have the background know-how in terms of improving it significantly, but it certainly looks like it could use some improvement.",
    "created_at": "2019-04-20T17:34:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7700#issuecomment-485145715",
    "id": 485145715,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7700",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NTE0NTcxNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/485145715/reactions"
    },
    "updated_at": "2019-04-20T17:34:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/485145715",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "It would be a mistake to make this just about member resolution. I mean, yes, the member resolution needs to be faster, but even scriptblock execution is an order of magnitude _slower_ than just the call operator with a scriptblock.\r\n\r\nObviously the fastest way (by far) to get a single member is just to use member unrolling (i.e., wrap the expression in a parenthesis and write the property name), which is several times faster than even a filter...\r\n\r\n| Duration| CommandLine\r\n| --------| -----------\r\n| 6.91423 | $Names = $lots \\| % Name |\r\n| 4.41294 | $Names = $lots \\| % { $_.Name } |\r\n| 0.83100 | $Names = foreach($f in $lots) { $f.Name } |\r\n| 0.64787 | $Names = $lots \\| nameFilter |\r\n| 0.55108 | $Names = $lots \\| &{process{$_.ToString()}} |\r\n| 0.20108 | $Names = $lots.Name |\r\n\r\nMy point is that while we should be concerned about the speed of `% Name` versus `% { $_.Name }` this cmdlet is slower in everything it does than any other way of doing those things!\r\n\r\nWe should also be _very_ concerned about the speed of `% { $_.Name }` versus ` &{process{ $_. Name }}` or even ` foreach($f in $lots) { $f.Name }` ...\r\n\r\nMost people think of `(...) | ForEach-Object { ... }` as basically the same as `foreach(...){ ... }` but it actually takes 5x as long!",
    "created_at": "2019-04-21T03:55:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7700#issuecomment-485222634",
    "id": 485222634,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7700",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NTIyMjYzNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/485222634/reactions"
    },
    "updated_at": "2019-04-21T03:55:20Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/485222634",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/192942?v=4",
      "events_url": "https://api.github.com/users/Jaykul/events{/privacy}",
      "followers_url": "https://api.github.com/users/Jaykul/followers",
      "following_url": "https://api.github.com/users/Jaykul/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jaykul/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Jaykul",
      "id": 192942,
      "login": "Jaykul",
      "node_id": "MDQ6VXNlcjE5Mjk0Mg==",
      "organizations_url": "https://api.github.com/users/Jaykul/orgs",
      "received_events_url": "https://api.github.com/users/Jaykul/received_events",
      "repos_url": "https://api.github.com/users/Jaykul/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Jaykul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jaykul/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Jaykul"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@Jaykul Not that it fully explains the slowdown, but if you look at #9408 there's some definite _weirdness_ happening with the scriptblocks in this cmdlet.",
    "created_at": "2019-04-21T04:33:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7700#issuecomment-485224019",
    "id": 485224019,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7700",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NTIyNDAxOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/485224019/reactions"
    },
    "updated_at": "2019-04-21T04:33:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/485224019",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Weirdness? There's a few ways you can pass them in, but that's all just to support calling it without explicitly naming the script blocks (and still allow infinitely many `process` blocks).\r\n\r\nI doubt that's going to account for the slowdown. I'm guessing most of it is due to trying to cheat scope.",
    "created_at": "2019-04-22T04:14:04Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7700#issuecomment-485319564",
    "id": 485319564,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7700",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NTMxOTU2NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/485319564/reactions"
    },
    "updated_at": "2019-04-22T04:14:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/485319564",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/192942?v=4",
      "events_url": "https://api.github.com/users/Jaykul/events{/privacy}",
      "followers_url": "https://api.github.com/users/Jaykul/followers",
      "following_url": "https://api.github.com/users/Jaykul/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jaykul/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Jaykul",
      "id": 192942,
      "login": "Jaykul",
      "node_id": "MDQ6VXNlcjE5Mjk0Mg==",
      "organizations_url": "https://api.github.com/users/Jaykul/orgs",
      "received_events_url": "https://api.github.com/users/Jaykul/received_events",
      "repos_url": "https://api.github.com/users/Jaykul/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Jaykul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jaykul/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Jaykul"
    }
  }
]
