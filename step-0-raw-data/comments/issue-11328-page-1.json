[
  {
    "author_association": "COLLABORATOR",
    "body": "@stoneiii  In general it's best to avoid writing messages on import as a module import doesn't necessarily indicate a cmdlet is being invoked.  For instance, it's possible for the module to imported during tab completion, even if the subject command is completely unrelated.\r\n\r\nInstead, messages should be queued until the first command is invoked and displayed then.  For cmdlets, this is pretty easy to set up with a common base cmdlet class that implements `BeginProcessing`.\r\n\r\nIf you absolutely need to write a message for some reason, you would need to use the `PowerShell` class to invoke the corresponding `Write-*` cmdlet.",
    "created_at": "2019-12-16T13:03:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11328#issuecomment-566051721",
    "id": 566051721,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11328",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NjA1MTcyMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566051721/reactions"
    },
    "updated_at": "2019-12-16T13:03:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566051721",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "> @stoneiii In general it's best to avoid writing messages on import as a module import doesn't necessarily indicate a cmdlet is being invoked. For instance, it's possible for the module to imported during tab completion, even if the subject command is completely unrelated.\r\n> \r\n> Instead, messages should be queued until the first command is invoked and displayed then. For cmdlets, this is pretty easy to set up with a common base cmdlet class that implements `BeginProcessing`.\r\n> \r\n> If you absolutely need to write a message for some reason, you would need to use the `PowerShell` class to invoke the corresponding `Write-*` cmdlet.\r\n\r\nThanks for your answer!\r\nAnd would you please tell me which queue I shall use for caching my message?",
    "created_at": "2020-01-09T15:01:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11328#issuecomment-572600289",
    "id": 572600289,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11328",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MjYwMDI4OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/572600289/reactions"
    },
    "updated_at": "2020-01-09T15:01:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/572600289",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/14137267?v=4",
      "events_url": "https://api.github.com/users/stoneiii/events{/privacy}",
      "followers_url": "https://api.github.com/users/stoneiii/followers",
      "following_url": "https://api.github.com/users/stoneiii/following{/other_user}",
      "gists_url": "https://api.github.com/users/stoneiii/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/stoneiii",
      "id": 14137267,
      "login": "stoneiii",
      "node_id": "MDQ6VXNlcjE0MTM3MjY3",
      "organizations_url": "https://api.github.com/users/stoneiii/orgs",
      "received_events_url": "https://api.github.com/users/stoneiii/received_events",
      "repos_url": "https://api.github.com/users/stoneiii/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/stoneiii/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stoneiii/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/stoneiii"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "There's nothing really built in since it isn't a particularly common thing to need. I would do something like this:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Management.Automation;\r\nusing System.Management.Automation.Runspaces;\r\nusing System.Runtime.CompilerServices;\r\n\r\nnamespace MessageQueueExample\r\n{\r\n    public static class InitializationMessageQueue\r\n    {\r\n        private static readonly ConditionalWeakTable<Runspace, List<object>>.CreateValueCallback s_creator\r\n            = _ => new List<object>();\r\n\r\n        private static readonly ConditionalWeakTable<Runspace, List<object>> s_storage\r\n            = new ConditionalWeakTable<Runspace, List<object>>();\r\n\r\n        public static List<object> GetQueueFromTLS()\r\n        {\r\n            Runspace runspace = Runspace.DefaultRunspace;\r\n            if (runspace == null)\r\n            {\r\n                throw new PSInvalidOperationException(\r\n                    \"There is no Runspace available to run scripts in this thread. You can \"\r\n                    + \"provide one in the DefaultRunspace property of the System.Management\"\r\n                    + \".Automation.Runspaces.Runspace type.\");\r\n            }\r\n\r\n            return s_storage.GetValue(runspace, s_creator);\r\n        }\r\n\r\n        public static void DisplayPendingMessages(PSCmdlet context)\r\n        {\r\n            List<object> messages = GetQueueFromTLS();\r\n            if (messages.Count == 0)\r\n            {\r\n                return;\r\n            }\r\n\r\n            object[] messagesCopy = messages.ToArray();\r\n            messages.Clear();\r\n            foreach (object message in messagesCopy)\r\n            {\r\n                switch (message)\r\n                {\r\n                    case ErrorRecord error: context.WriteError(error); break;\r\n                    case WarningRecord warning: context.WriteWarning(warning.Message); break;\r\n                    case VerboseRecord verbose: context.WriteVerbose(verbose.Message); break;\r\n                    case DebugRecord debug: context.WriteDebug(debug.Message); break;\r\n                    case InformationRecord info: context.WriteInformation(info); break;\r\n                    default: context.WriteInformation(message, Array.Empty<string>()); break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public class ModuleInit : IModuleAssemblyInitializer\r\n    {\r\n        public void OnImport()\r\n        {\r\n            try\r\n            {\r\n                // do a thing\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                InitializationMessageQueue.GetQueueFromTLS().Add(\r\n                    new ErrorRecord(\r\n                        e,\r\n                        \"my error\",\r\n                        ErrorCategory.NotSpecified,\r\n                        targetObject: null));\r\n            }\r\n        }\r\n    }\r\n\r\n    public abstract class MyModuleBaseCommand : PSCmdlet\r\n    {\r\n        protected sealed override void BeginProcessing()\r\n        {\r\n            InitializationMessageQueue.DisplayPendingMessages(this);\r\n            BeginProcessingInternal();\r\n        }\r\n\r\n        protected virtual void BeginProcessingInternal()\r\n        {\r\n        }\r\n    }\r\n\r\n    [Cmdlet(VerbsDiagnostic.Test, \"MessageQueueThing\")]\r\n    public class TestMessageQueueThingCommand : MyModuleBaseCommand\r\n    {\r\n        protected override void BeginProcessingInternal()\r\n        {\r\n            // Override this instead of BeginProcessing. Everything else would be\r\n            // the same. You could also remove sealed from BeginProcessing and just\r\n            // ensure that you always call base.BeginProcessing when overriding it.\r\n        }\r\n    }\r\n}\r\n```",
    "created_at": "2020-01-09T15:38:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11328#issuecomment-572616710",
    "id": 572616710,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11328",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MjYxNjcxMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/572616710/reactions"
    },
    "updated_at": "2020-01-09T15:38:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/572616710",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "@SeeminglyScience Really helpful! Thank you very much!",
    "created_at": "2020-01-13T14:17:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11328#issuecomment-573683637",
    "id": 573683637,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11328",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3MzY4MzYzNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/573683637/reactions"
    },
    "updated_at": "2020-01-13T14:17:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/573683637",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/14137267?v=4",
      "events_url": "https://api.github.com/users/stoneiii/events{/privacy}",
      "followers_url": "https://api.github.com/users/stoneiii/followers",
      "following_url": "https://api.github.com/users/stoneiii/following{/other_user}",
      "gists_url": "https://api.github.com/users/stoneiii/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/stoneiii",
      "id": 14137267,
      "login": "stoneiii",
      "node_id": "MDQ6VXNlcjE0MTM3MjY3",
      "organizations_url": "https://api.github.com/users/stoneiii/orgs",
      "received_events_url": "https://api.github.com/users/stoneiii/received_events",
      "repos_url": "https://api.github.com/users/stoneiii/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/stoneiii/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stoneiii/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/stoneiii"
    }
  }
]
