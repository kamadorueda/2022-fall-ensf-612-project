[
  {
    "author_association": "CONTRIBUTOR",
    "body": "I believe this is `by design`.  When you place the cmdlet/functions in a sub expression it runs the expression first and then squeezes the result to be treated as a variable.  When you do not put the cmdlet/function in a subexpression, the results of the cmdlets are yielded one at a time to the foreach loop.\r\n\r\nReturning  `$null` is still returning something and is conceptually different from returning nothing. \r\n\r\nIn this example, the Foreach loop will not run:\r\n\r\n```powershell\r\nfunction ReturnNothing {}\r\nforeach($result in ReturnNothing){'entered'}\r\n```\r\n\r\nHowever, in your example:\r\n\r\n```powershell\r\nfunction ReturnNull {$null}\r\nforeach($result in ReturnNull){'entered'}\r\n```\r\n\r\nThe Foreach runs because `ReturnNull` is being yielded to `$result` for each value returned. Since you are returning `$null` $result gets populated with `$null`",
    "created_at": "2017-12-12T11:30:33Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5674#issuecomment-351024889",
    "id": 351024889,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5674",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MTAyNDg4OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/351024889/reactions"
    },
    "updated_at": "2017-12-12T11:30:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/351024889",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6509955?v=4",
      "events_url": "https://api.github.com/users/markekraus/events{/privacy}",
      "followers_url": "https://api.github.com/users/markekraus/followers",
      "following_url": "https://api.github.com/users/markekraus/following{/other_user}",
      "gists_url": "https://api.github.com/users/markekraus/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/markekraus",
      "id": 6509955,
      "login": "markekraus",
      "node_id": "MDQ6VXNlcjY1MDk5NTU=",
      "organizations_url": "https://api.github.com/users/markekraus/orgs",
      "received_events_url": "https://api.github.com/users/markekraus/received_events",
      "repos_url": "https://api.github.com/users/markekraus/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/markekraus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markekraus/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/markekraus"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@tmolenh: \r\n\r\nThat's certainly a baffling inconsistency (related to the distinction between an expression and a command, as @markekraus explains), but there's a bigger issue underlying it:\r\n\r\nGiven that `$null` is a \"something\" (more on that below), this behavior is unexpected, so **my expectation is that _all_ of your commands enter the loop.**\r\n\r\nAnd that is indeed how things worked up to PSv2.\r\n\r\nPSv3, regrettably, changed the behavior of `foreach ($x in $null)` to _not_ enumerate anymore - i.e., to _not_  enter the loop body with `$null` bound to `$x` as the only element of the enumeration.\r\n\r\nI don't know what motivated this change - perhaps the goal was to prevent enumeration of references to _nonexistent variables_, given that such references default to `$null` (unless an error due to `Set-StrictMode -Version 1` or higher).\r\n\r\nPowerShell has always had the distinction between a _scalar_ `$null` (a \"something\") and a _null collection_ (\"nothing\"), the latter technically being singleton `[System.Management.Automation.Internal.AutomationNull]::Value`, most easily produced with the following statement: `& {}`.\r\n\r\nIn PSv2-, however, you couldn't store `[System.Management.Automation.Internal.AutomationNull]::Value` _in a variable_; on attempting to do so, the value was converted to `$null`.  \r\nSo, when dealing with _variables_, any original distinction between `$null` and a null collection was lost.\r\n\r\nPowerShell v3 fixed that: You can now store `[System.Management.Automation.Internal.AutomationNull]::Value` as well as `$null`  in a variable:\r\n\r\n```powershell\r\n$a = $null  # Store $null\r\n$null -eq $a  # $True\r\n@($a).Count # 1 - $null is \"something\"\r\n\r\n$b = & {}  # Store [System.Management.Automation.Internal.AutomationNull]::Value\r\n$null -eq $b # !! Also $True(!) - however:\r\n@($b).Count # 0(!) - [System.Management.Automation.Internal.AutomationNull]::Value is \"nothing\"\r\n\r\n# A more direct test, courtesy of @PetSerAl, from https://stackoverflow.com/a/30018601/45375\r\n[Object].GetMethod('ReferenceEquals').Invoke($null, @([System.Management.Automation.Internal.AutomationNull]::Value, $b)) # $True\r\n```\r\n\r\n<sup>[@PetSerAl's test](https://stackoverflow.com/a/30018601/45375) uses reflection rather than a direct call to `[object]::ReferenceEquals` to prevent PowerShell from quietly converting `[System.Management.Automation.Internal.AutomationNull]::Value` to `$null` and thereby thwarting the test.  \r\nThis treatment of `[System.Management.Automation.Internal.AutomationNull]::Value` as `$null` in certain contexts may offer a solution to the larger problem, however - see below.</sup>\r\n\r\nTherefore, the changes introduced in PSv3 represent both a step forward and a step back:\r\n\r\n* Step forward: The ability to store `[System.Management.Automation.Internal.AutomationNull]::Value` in variables, allowing the distinction between a null scalar (\"something\") and a null collection (\"nothing\").\r\n\r\n* Step backward: Not enumerating `$null` with `foreach` anymore introduced a regrettable inconsistency with pipeline behavior: `$null | % { 'entered' }` outputs `entered` - `$null` _is_ enumerated - whereas the seemingly equivalent `foreach ($x in $null) { 'entered' }` does not.\r\n\r\n   * This change _would_ have made much more sense as a _back-port_ to PSv2 and its inability to distinguish between the null scalar and the null collection in variables, so as to ensure that `foreach ($x in &{}) { 'entered' }` and `$result = & {}; foreach ($x in $result) { 'entered' }` behave the same.  \r\nPSv3+, by contrast, never needed this change - except perhaps to prevent enumeration of `$null` when referencing nonexistent variables (see below for thoughts on that) - and introducing it introduced the similar, but distinct inconsistency mentioned above.\r\n\r\n---\r\n\r\nAs for a way forward:\r\n\r\nWe obviously have to be very careful to make changes to such fundamental behaviors, but here's food for thought:\r\n\r\n* Make `$null` a \"something\" again in a `foreach` context, as used to be the case in PSv2: i.e, `foreach ($x in $null)` should again enter the loop once, with `$null` bound to `$x` - irrespective of whether the `$null` is a literal, the value of a variable or other expression, or direct output from a command.\r\n\r\n* Default references to _nonexistent variables_ to `[System.Management.Automation.Internal.AutomationNull]::Value` rather than `$null`, so that `foreach ($x in $NoSuchVariable)` does _not_ enumerate, effectively retaining the current behavior.\r\n   * Note that PowerShell treats `$null` and `[System.Management.Automation.Internal.AutomationNull]::Value` as equal in a _scalar_ context, so, ideally, this change would have no practical impact.\r\n   * Arguably, from a conceptual standpoint, in line with PowerShell's collection-oriented nature, references to nonexistent variables should always have evaluated to `[System.Management.Automation.Internal.AutomationNull]::Value` - i.e., \"nothing\".\r\n\r\nOf course, if users have gotten used to assuming that a `$null` is NOT enumerated in `foreach` loops, and therefore use _explicit_ initialization to `$null` to prevent enumeration, the above would be a breaking change:\r\n\r\n```powershell\r\n$val = $null  # explicit initialization to $null\r\n# ... \r\nforeach ($x in $val) ...   # with the proposed change, this would now enumerate\r\n```\r\n\r\nP.S.: As I've just realized, the very example that prompted you to create the issue demonstrates that you've indeed come to expect and rely on `foreach ($x in $null)` to _not_ enumerate the `$null`.",
    "created_at": "2017-12-17T14:49:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5674#issuecomment-352260793",
    "id": 352260793,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5674",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1MjI2MDc5Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/352260793/reactions"
    },
    "updated_at": "2017-12-17T15:01:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/352260793",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
