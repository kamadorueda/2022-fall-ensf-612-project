[
  {
    "author_association": "NONE",
    "body": "I like the general idea of this purpose but I think it needs some more background and deeper thoughts. E.g. why ANSI codes? You might also consider to base the help on a (downwards compatible) markdown format (meaning instead of `.EXAMPLE` use `# Example`) and color it when it is displayed. The advantage will be that it can be easily put online (e.g. github) without continuously having to maintain or reformat two separate versions.",
    "created_at": "2021-03-11T17:32:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14961#issuecomment-796910843",
    "id": 796910843,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14961",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NjkxMDg0Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/796910843/reactions"
    },
    "updated_at": "2021-03-11T17:32:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/796910843",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@p0W3RH311, this is an interesting idea to colorize the help system to provide a better viewing experience. I think a deeper discussion regarding the challenges of this would be helpful to understand the impact of adding colorizations to the help system. How does this impact terminals that can't display the alternative colors? The help information in PowerShell is built using a schematized markdown format using platyPS and would need to consider that as part of the solution.  I recommend opening this as a discussion in this repo to dive deeper into the details and help determine if a feature issue is desired.  Currently, the help is displayed as designed. ",
    "created_at": "2021-03-24T17:40:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14961#issuecomment-806027148",
    "id": 806027148,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14961",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNjAyNzE0OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/806027148/reactions"
    },
    "updated_at": "2021-03-24T17:40:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/806027148",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/12662278?v=4",
      "events_url": "https://api.github.com/users/theJasonHelmick/events{/privacy}",
      "followers_url": "https://api.github.com/users/theJasonHelmick/followers",
      "following_url": "https://api.github.com/users/theJasonHelmick/following{/other_user}",
      "gists_url": "https://api.github.com/users/theJasonHelmick/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/theJasonHelmick",
      "id": 12662278,
      "login": "theJasonHelmick",
      "node_id": "MDQ6VXNlcjEyNjYyMjc4",
      "organizations_url": "https://api.github.com/users/theJasonHelmick/orgs",
      "received_events_url": "https://api.github.com/users/theJasonHelmick/received_events",
      "repos_url": "https://api.github.com/users/theJasonHelmick/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/theJasonHelmick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theJasonHelmick/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/theJasonHelmick"
    }
  },
  {
    "author_association": "NONE",
    "body": "As commented earlier, why not (also) colorizing any block comment based on markdown (not removing any of its markdown formatting for editing) in the PowerShell and/or IDEs.\r\nThan instead of using a dot for help headers (like: `.SYNOPSIS`), also support a/any number of hashes (like: `## SYNOPSIS`) for a help header.\r\nWishful thinking:\r\n<img width=\"974\" alt=\"2021-03-24_19h12_09\" src=\"https://user-images.githubusercontent.com/8080834/112362570-ddf97280-8cd4-11eb-8268-89c2466353b4.png\">\r\nThis makes the transition to an online help much easier\r\nIn case the help is requested by the user, items as `SYNTAX` are colored by the system but any markdown used by the developer e.g. in the description is colored (and formatting removed)...\r\n\r\n\r\n\r\n",
    "created_at": "2021-03-24T18:30:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14961#issuecomment-806060083",
    "id": 806060083,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14961",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNjA2MDA4Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/806060083/reactions"
    },
    "updated_at": "2021-03-24T18:30:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/806060083",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I like this idea because right now - trying to distinguish one example from the next kind of bites. In this help output from `Get-WinEvent` can you tell where one example ends and the other begins?\r\n```\r\n    -----  ----\r\n        2  Warning\r\n      193  Information\r\n\r\n    The `Get-WinEvent` cmdlet uses the LogName parameter to specify the Windows PowerShell event log. The event\r\n    objects are stored in the `$Event` variable. The Count property of `$Event`shows the total number of logged events.\r\n\r\n    The `$Event` variable is sent down the pipeline to the `Group-Object` cmdlet. `Group-Object` uses the Property\r\n    parameter to specify the Id property and counts the objects by the event Id value. The NoElement parameter removes\r\n    other properties from the objects output. The grouped objects are sent down the pipeline to the `Sort-Object`\r\n    cmdlet. `Sort-Object` uses the Property parameter to sort the objects by Count . The Descending parameter displays\r\n    the output by count, from highest to lowest. In the output, the Count column contains the total number of each\r\n    event. The Name column contains the grouped event Id numbers.\r\n\r\n    The `$Event` variable is sent down the pipeline to the `Group-Object` cmdlet. `Group-Object` uses the Property\r\n    parameter to specify the LevelDisplayName property and counts the objects by LevelDisplayName . The objects are\r\n    grouped by the levels such as Warning and Information . The NoElement parameter removes other properties from the\r\n    output. In the output, the Count column contains the total number of each event. The Name column contains the\r\n    grouped LevelDisplayName .\r\n    Example 10: Get error events that have a specified string in their name\r\n\r\n    Get-WinEvent -LogName *PowerShell*, Microsoft-Windows-Kernel-WHEA* |\r\n      Group-Object -Property LevelDisplayName, LogName -NoElement |\r\n        Format-Table -AutoSize\r\n\r\n    Count  Name\r\n    -----  ----\r\n        1  Error, PowerShellCore/Operational\r\n       26  Information, Microsoft-Windows-Kernel-WHEA/Operational\r\n      488  Information, Microsoft-Windows-PowerShell/Operational\r\n       77  Information, PowerShellCore/Operational\r\n     9835  Information, Windows PowerShell\r\n       19  Verbose, PowerShellCore/Operational\r\n      444  Warning, Microsoft-Windows-PowerShell/Operational\r\n      512  Warning, PowerShellCore/Operational\r\n\r\n    The `Get-WinEvent` cmdlet gets log information from the computer. The LogName parameter uses a comma-separated\r\n    string with the asterisk (`*`) wildcard to specify the log names. The objects are sent down the pipeline to the\r\n    `Group-Object` cmdlet. `Group-Object` uses the Property parameter to group the objects by LevelDisplayName and\r\n    LogName . The NoElement parameter removes other properties from the output. The grouped objects are sent down the\r\n    pipeline to the `Format-Table` cmdlet. `Format-Table` uses the AutoSize parameter to format the columns. The Count\r\n    column contains the total number of each event. The Name column contains the grouped LevelDisplayName and LogName .\r\n    ------ Example 11: Get events from an archived event log ------\r\n\r\n    Get-WinEvent -Path 'C:\\Test\\Windows PowerShell.evtx'\r\n\r\n    ProviderName: PowerShell\r\n\r\n    TimeCreated              Id LevelDisplayName  Message\r\n    -----------              -- ----------------  -------\r\n    3/15/2019 13:54:13      403 Information       Engine state is changed from Available to Stopped...\r\n    3/15/2019 13:54:13      400 Information       Engine state is changed from None to Available...\r\n    3/15/2019 13:54:13      600 Information       Provider \"Variable\" is Started...\r\n    3/15/2019 13:54:13      600 Information       Provider \"Function\" is Started...\r\n    3/15/2019 13:54:13      600 Information       Provider \"FileSystem\" is Started...\r\n\r\n    The `Get-WinEvent` cmdlet gets log information from the computer. The Path parameter specifies the directory and\r\n    file name.\r\n    Example 12: Get a specific number of events from an archived event log\r\n\r\n    Get-WinEvent -Path 'C:\\Test\\PowerShellCore Operational.evtx' -MaxEvents 100\r\n\r\n    ProviderName: PowerShellCore\r\n```\r\nWhen you're quickly scanning for different examples, it's hard to spot the transition in PS help. The example formatting in PS in general needs some TLC.  Simply making sure there is a blank line above the start of a new example would help:\r\n```\r\n The `Get-WinEvent` cmdlet gets log information from the computer. The LogName parameter uses a comma-separated\r\n    string with the asterisk (`*`) wildcard to specify the log names. The objects are sent down the pipeline to the\r\n    `Group-Object` cmdlet. `Group-Object` uses the Property parameter to group the objects by LevelDisplayName and\r\n    LogName . The NoElement parameter removes other properties from the output. The grouped objects are sent down the\r\n    pipeline to the `Format-Table` cmdlet. `Format-Table` uses the AutoSize parameter to format the columns. The Count\r\n    column contains the total number of each event. The Name column contains the grouped LevelDisplayName and LogName .\r\n\r\n    ------ Example 11: Get events from an archived event log ------\r\n\r\n    Get-WinEvent -Path 'C:\\Test\\Windows PowerShell.evtx'\r\n\r\n    ProviderName: PowerShell\r\n\r\n    TimeCreated              Id LevelDisplayName  Message\r\n    -----------              -- ----------------  -------\r\n```\r\nBut color would help even more (as well as for quickly finding the example commands in the sea of text):\r\n![image](https://user-images.githubusercontent.com/5177512/112400381-e4d0b700-8ccd-11eb-9e56-83e9a12dfcce.png)\r\n",
    "created_at": "2021-03-24T21:26:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14961#issuecomment-806196889",
    "id": 806196889,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14961",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNjE5Njg4OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/806196889/reactions"
    },
    "updated_at": "2021-03-25T00:22:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/806196889",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "NONE",
    "body": "This issue has been marked as won't fix and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
    "created_at": "2021-07-08T21:00:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14961#issuecomment-876742669",
    "id": 876742669,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14961",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3Njc0MjY2OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/876742669/reactions"
    },
    "updated_at": "2021-07-08T21:00:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/876742669",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/in/26612?v=4",
      "events_url": "https://api.github.com/users/msftbot%5Bbot%5D/events{/privacy}",
      "followers_url": "https://api.github.com/users/msftbot%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/msftbot%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/msftbot%5Bbot%5D/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apps/msftbot",
      "id": 48340428,
      "login": "msftbot[bot]",
      "node_id": "MDM6Qm90NDgzNDA0Mjg=",
      "organizations_url": "https://api.github.com/users/msftbot%5Bbot%5D/orgs",
      "received_events_url": "https://api.github.com/users/msftbot%5Bbot%5D/received_events",
      "repos_url": "https://api.github.com/users/msftbot%5Bbot%5D/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/msftbot%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msftbot%5Bbot%5D/subscriptions",
      "type": "Bot",
      "url": "https://api.github.com/users/msftbot%5Bbot%5D"
    }
  }
]
