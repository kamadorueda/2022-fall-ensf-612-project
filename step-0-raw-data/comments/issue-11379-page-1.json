[
  {
    "author_association": "MEMBER",
    "body": "To clarify, the milestone just means it's something the team should discuss based on the feedback, not that we are committed to making this change.",
    "created_at": "2019-12-17T17:43:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-566671286",
    "id": 566671286,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NjY3MTI4Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566671286/reactions"
    },
    "updated_at": "2019-12-17T17:43:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566671286",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@mklement0\r\n> ? should never have been allowed as part of an identifier without enclosing it in {...}.\r\n\r\nUmmm - the initial base language for PowerShell was the Posix Shell which uses $? for the exit code q.e.d '?' is allowed in variable names unquoted.\r\n\r\n> it cannot (meaningfully) run on older versions\r\n\r\nSure it can:\r\n```powershell\r\nPS>  $abc?=@{a=1; b=2; c=3}\r\nPS>  $abc?.b                                                                                        1\r\nPS>  2                      \r\n```\r\n",
    "created_at": "2019-12-17T19:01:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-566702192",
    "id": 566702192,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NjcwMjE5Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566702192/reactions"
    },
    "updated_at": "2019-12-17T19:01:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566702192",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/50499275?v=4",
      "events_url": "https://api.github.com/users/bpayette/events{/privacy}",
      "followers_url": "https://api.github.com/users/bpayette/followers",
      "following_url": "https://api.github.com/users/bpayette/following{/other_user}",
      "gists_url": "https://api.github.com/users/bpayette/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/bpayette",
      "id": 50499275,
      "login": "bpayette",
      "node_id": "MDQ6VXNlcjUwNDk5Mjc1",
      "organizations_url": "https://api.github.com/users/bpayette/orgs",
      "received_events_url": "https://api.github.com/users/bpayette/received_events",
      "repos_url": "https://api.github.com/users/bpayette/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/bpayette/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bpayette/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/bpayette"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Sure it can:\r\n\r\nIt cannot run meaningfully _with the new semantics_ (null-conditional access) - that's all I meant to say.\r\n\r\n Yes, your example currently works, but _with different semantics_ (`abc?` _including the `?`_ being considered the variable name) - but for the reasons stated this corner case is worth abandoning for the sake of making `?.` work as expected.\r\n\r\n> The initial base language for PowerShell was the Posix Shell which uses `$?` for the exit code\r\n\r\n`$?` is an _exception_ in POSIX-like shells; you can _not_ do the following:\r\n\r\n```sh\r\n# bash, ksh, zsh, dash (all common /bin/sh implementations)\r\nfoo?='bar' # BOOM! E.g. \"bash: foo?=bar: command not found\"\r\n```\r\n\r\n(And, obviously, no one's asking that `$?` be abolished in PowerShell.)",
    "created_at": "2019-12-17T19:11:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-566706073",
    "id": 566706073,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NjcwNjA3Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566706073/reactions"
    },
    "updated_at": "2019-12-17T19:14:47Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566706073",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "And, as a matter of course, it should be mentioned, that _all other_ automatic variables in the same space as `$?` (i.e., `$^` and `$$`) are explicitly special-cased in the tokenizer. And, as a matter of fact, so is `$?`, even though it (currently) doesn't need to be.\r\n\r\nIt seems clear to me that it was expected at the time that code was written that `?` would not be a valid identifier character.",
    "created_at": "2019-12-17T19:47:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-566720411",
    "id": 566720411,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NjcyMDQxMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566720411/reactions"
    },
    "updated_at": "2019-12-17T19:47:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566720411",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I only know of one person who has used `?` at the end of variable names in their scripts, and that's @StartAutomating. Since he's actually used that syntax, I thought it worth drawing his attention to this discussion.\r\n\r\nAlso @vexx32, the reason that `$?` is special cased in the tokenizer is because you cannot create a variable with a name that starts with `?`. e.g. `$??? = 'foo'` will not parse. Variable names must start with alphanumeric characters or an underscore, and currently can contain alphanumeric characters, underscores, or, questionmarks. I'm in agreement that `?.` should be parsed as the null-conditional member access operator, but I wanted to clarify why `?` is special-cased in the tokenizer.",
    "created_at": "2019-12-17T20:37:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-566738732",
    "id": 566738732,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NjczODczMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566738732/reactions"
    },
    "updated_at": "2019-12-17T20:37:35Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566738732",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3515485?v=4",
      "events_url": "https://api.github.com/users/KirkMunro/events{/privacy}",
      "followers_url": "https://api.github.com/users/KirkMunro/followers",
      "following_url": "https://api.github.com/users/KirkMunro/following{/other_user}",
      "gists_url": "https://api.github.com/users/KirkMunro/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KirkMunro",
      "id": 3515485,
      "login": "KirkMunro",
      "node_id": "MDQ6VXNlcjM1MTU0ODU=",
      "organizations_url": "https://api.github.com/users/KirkMunro/orgs",
      "received_events_url": "https://api.github.com/users/KirkMunro/received_events",
      "repos_url": "https://api.github.com/users/KirkMunro/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KirkMunro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KirkMunro/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KirkMunro"
    }
  },
  {
    "author_association": "NONE",
    "body": "Thanks for drawing my attention to this chat.\r\n\r\nFor what it's worth, I have a few thoughts:\r\n\r\n1. While these variables are rare, no one want's to play whack-a-mole when back-compat breaks their scripts\r\n2. Deeply geeky folks aside, I'd expect that ${obj}?.Method() or $obj?.Method() will get little uptick.  There's a decade of guidance out on the web of how to manage nulls out there, and I don't see that many people switching from if ($obj) { $obj.Method() } _just to get on the v7 bandwagon_\r\n3. Additionally, most people who have problems with unexpected variable names learn the ${} syntax (you'd already hit it naturally with an underscore).  I'd expect the venn diagram overlap of \"people who want to use this feature\" to \"people who know ${} syntax already\" to be near 100%\r\n4. Since said syntax isn't as powerful as a full subexpression, and full subexpressions work both in core and not, I'd expect that most people will continue to use this going forward.\r\n\r\nSo, running the math, there are several concrete reasons _not_ to do this, and only one vague reason to do this (it _might_ be easier, for some users).  Given the low prevalence of ? in variable names, you _might_ be helping more people than you harm, but in my opinion it's a coin-toss.\r\n\r\nGiven such coin-toss potential of benefit, I will paraphrase Robert McNamara \"If we're darned if we do and darned if we don't, I'll pick darned if we don't\".",
    "created_at": "2019-12-17T20:52:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-566744018",
    "id": 566744018,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2Njc0NDAxOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 4,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566744018/reactions"
    },
    "updated_at": "2019-12-17T20:52:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566744018",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1043665?v=4",
      "events_url": "https://api.github.com/users/StartAutomating/events{/privacy}",
      "followers_url": "https://api.github.com/users/StartAutomating/followers",
      "following_url": "https://api.github.com/users/StartAutomating/following{/other_user}",
      "gists_url": "https://api.github.com/users/StartAutomating/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/StartAutomating",
      "id": 1043665,
      "login": "StartAutomating",
      "node_id": "MDQ6VXNlcjEwNDM2NjU=",
      "organizations_url": "https://api.github.com/users/StartAutomating/orgs",
      "received_events_url": "https://api.github.com/users/StartAutomating/received_events",
      "repos_url": "https://api.github.com/users/StartAutomating/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/StartAutomating/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/StartAutomating/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/StartAutomating"
    }
  },
  {
    "author_association": "NONE",
    "body": "I&nbsp;suggest&nbsp;doing it&nbsp;so&nbsp;that `$obj?.Method()`&nbsp;works as&nbsp;<code>$<var>obj</var></code><code>?.</code><code><var>Method</var>()</code> by&nbsp;default, and&nbsp;only fall&nbsp;back to&nbsp;<code>$<var>obj?</var></code><code>.</code><code><var>Method</var>()</code> when&nbsp;`$obj` doesn’t&nbsp;exist in&nbsp;scope, but&nbsp;`$obj?`&nbsp;does and&nbsp;`#requires ‑Version` isn’t&nbsp;v7+.",
    "created_at": "2019-12-17T21:26:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-566756120",
    "id": 566756120,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2Njc1NjEyMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566756120/reactions"
    },
    "updated_at": "2019-12-17T21:26:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566756120",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3889017?v=4",
      "events_url": "https://api.github.com/users/ExE-Boss/events{/privacy}",
      "followers_url": "https://api.github.com/users/ExE-Boss/followers",
      "following_url": "https://api.github.com/users/ExE-Boss/following{/other_user}",
      "gists_url": "https://api.github.com/users/ExE-Boss/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ExE-Boss",
      "id": 3889017,
      "login": "ExE-Boss",
      "node_id": "MDQ6VXNlcjM4ODkwMTc=",
      "organizations_url": "https://api.github.com/users/ExE-Boss/orgs",
      "received_events_url": "https://api.github.com/users/ExE-Boss/received_events",
      "repos_url": "https://api.github.com/users/ExE-Boss/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ExE-Boss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ExE-Boss/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ExE-Boss"
    }
  },
  {
    "author_association": "NONE",
    "body": "@ExE-Boss, that seems like a lot of exceptions to make for this particular rule.\r\n\r\nI repeat my questioning of the value of this particular rule.\r\n\r\nPast that, the question is \"what else do we not know about variable syntax that we might break?\"",
    "created_at": "2019-12-17T21:31:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-566757905",
    "id": 566757905,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2Njc1NzkwNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566757905/reactions"
    },
    "updated_at": "2019-12-17T21:31:20Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566757905",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1043665?v=4",
      "events_url": "https://api.github.com/users/StartAutomating/events{/privacy}",
      "followers_url": "https://api.github.com/users/StartAutomating/followers",
      "following_url": "https://api.github.com/users/StartAutomating/following{/other_user}",
      "gists_url": "https://api.github.com/users/StartAutomating/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/StartAutomating",
      "id": 1043665,
      "login": "StartAutomating",
      "node_id": "MDQ6VXNlcjEwNDM2NjU=",
      "organizations_url": "https://api.github.com/users/StartAutomating/orgs",
      "received_events_url": "https://api.github.com/users/StartAutomating/received_events",
      "repos_url": "https://api.github.com/users/StartAutomating/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/StartAutomating/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/StartAutomating/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/StartAutomating"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "If the consensus is to force `${...}` syntax for this, support for OptionalFeatures would be appreciated here, so that folks like myself who will use this syntax (I'll be using it _a lot_) can opt out of the noise.\r\n\r\nSince we're paraphrasing here:\r\n\"Logic clearly dictates that the needs of the many outweigh the needs of the few.\" - Spock\r\n\r\n> So, running the math, there are several concrete reasons _not_ to do this, and only one vague reason to do this (it _might_ be easier, for some users).\r\n\r\n@StartAutomating: There are multiple reasons, and they are concrete, not vague. Also, one of the goals of this is code simplicity. Having to wrap variable names with `{}` works directly against that goal.",
    "created_at": "2019-12-17T22:38:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-566780997",
    "id": 566780997,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2Njc4MDk5Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 11,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 11,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566780997/reactions"
    },
    "updated_at": "2019-12-17T22:38:12Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566780997",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3515485?v=4",
      "events_url": "https://api.github.com/users/KirkMunro/events{/privacy}",
      "followers_url": "https://api.github.com/users/KirkMunro/followers",
      "following_url": "https://api.github.com/users/KirkMunro/following{/other_user}",
      "gists_url": "https://api.github.com/users/KirkMunro/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KirkMunro",
      "id": 3515485,
      "login": "KirkMunro",
      "node_id": "MDQ6VXNlcjM1MTU0ODU=",
      "organizations_url": "https://api.github.com/users/KirkMunro/orgs",
      "received_events_url": "https://api.github.com/users/KirkMunro/received_events",
      "repos_url": "https://api.github.com/users/KirkMunro/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KirkMunro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KirkMunro/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KirkMunro"
    }
  },
  {
    "author_association": "NONE",
    "body": "I'm with @mklement0 and @KirkMunro on this. Personally I find the `${...}?` syntax unnatural and unnecessary complex. We have had breaking changes already and in this case it is small price to pay in exchange for clarity.",
    "created_at": "2019-12-17T23:39:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-566798501",
    "id": 566798501,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2Njc5ODUwMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 8,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 8,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566798501/reactions"
    },
    "updated_at": "2019-12-17T23:39:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566798501",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16168755?v=4",
      "events_url": "https://api.github.com/users/kborowinski/events{/privacy}",
      "followers_url": "https://api.github.com/users/kborowinski/followers",
      "following_url": "https://api.github.com/users/kborowinski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kborowinski/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/kborowinski",
      "id": 16168755,
      "login": "kborowinski",
      "node_id": "MDQ6VXNlcjE2MTY4NzU1",
      "organizations_url": "https://api.github.com/users/kborowinski/orgs",
      "received_events_url": "https://api.github.com/users/kborowinski/received_events",
      "repos_url": "https://api.github.com/users/kborowinski/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/kborowinski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kborowinski/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/kborowinski"
    }
  },
  {
    "author_association": "NONE",
    "body": "@StartAutomating \r\n\r\n> 3. Additionally, most people who have problems with unexpected variable names learn the ${} syntax (**you'd already hit it naturally with an underscore**).  I'd expect the venn diagram overlap of \"people who want to use this feature\" to \"people who know ${} syntax already\" to be near 100%\r\n\r\nThis doesn't hold up.  Underscores are valid characters in variable names.",
    "created_at": "2019-12-18T00:23:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-566809736",
    "id": 566809736,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NjgwOTczNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566809736/reactions"
    },
    "updated_at": "2019-12-18T00:23:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566809736",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/25436433?v=4",
      "events_url": "https://api.github.com/users/Halkcyon/events{/privacy}",
      "followers_url": "https://api.github.com/users/Halkcyon/followers",
      "following_url": "https://api.github.com/users/Halkcyon/following{/other_user}",
      "gists_url": "https://api.github.com/users/Halkcyon/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Halkcyon",
      "id": 25436433,
      "login": "Halkcyon",
      "node_id": "MDQ6VXNlcjI1NDM2NDMz",
      "organizations_url": "https://api.github.com/users/Halkcyon/orgs",
      "received_events_url": "https://api.github.com/users/Halkcyon/received_events",
      "repos_url": "https://api.github.com/users/Halkcyon/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Halkcyon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Halkcyon/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Halkcyon"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@vexx32 \r\n> It seems clear to me that it was expected at the time that code was written \r\n\r\nNope.",
    "created_at": "2019-12-18T04:55:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-566867161",
    "id": 566867161,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2Njg2NzE2MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 3,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566867161/reactions"
    },
    "updated_at": "2019-12-18T04:55:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566867161",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Swap the chars around? `$foo.?Property` looks non-clashing, because property names beginning with questions marks need quoting already:\r\n\r\n```\r\nPS C:\\> $foo = [pscustomobject]@{'?'=1; '?name'=2}\r\nPS C:\\> $foo.?name\r\nAt line:1 char:6\r\n+ $foo.?name\r\n+      ~\r\nMissing property name after reference operator.\r\n    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException\r\n    + FullyQualifiedErrorId : MissingPropertyName\r\nPS C:\\> $foo.'?name'\r\n2\r\n```\r\n\r\n",
    "created_at": "2019-12-18T08:39:29Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-566933199",
    "id": 566933199,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NjkzMzE5OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566933199/reactions"
    },
    "updated_at": "2019-12-18T08:39:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566933199",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/187787?v=4",
      "events_url": "https://api.github.com/users/HumanEquivalentUnit/events{/privacy}",
      "followers_url": "https://api.github.com/users/HumanEquivalentUnit/followers",
      "following_url": "https://api.github.com/users/HumanEquivalentUnit/following{/other_user}",
      "gists_url": "https://api.github.com/users/HumanEquivalentUnit/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/HumanEquivalentUnit",
      "id": 187787,
      "login": "HumanEquivalentUnit",
      "node_id": "MDQ6VXNlcjE4Nzc4Nw==",
      "organizations_url": "https://api.github.com/users/HumanEquivalentUnit/orgs",
      "received_events_url": "https://api.github.com/users/HumanEquivalentUnit/received_events",
      "repos_url": "https://api.github.com/users/HumanEquivalentUnit/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/HumanEquivalentUnit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/HumanEquivalentUnit/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/HumanEquivalentUnit"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@HumanEquivalentUnit, unfortunately, that would invite everlasting confusion with the long-established `?.` syntax used in C# and several other languages (also, you'd need to find an alternative form for the indexer (`${arr}?[0]`) as well, and something like `$arr[0]?` would invite confusion with the ternary operator)",
    "created_at": "2019-12-18T14:14:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-567048908",
    "id": 567048908,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzA0ODkwOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567048908/reactions"
    },
    "updated_at": "2019-12-18T14:14:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567048908",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "There isn't a neat solution. \r\n1. An unknown number of people use ? at the end of a variable names. While it is an optional feature one can say \"Don't turn it on if you run those scripts\" but the person turning it must check current and future scripts they get from whatever source.  \r\n2. Alternate syntax isn't a great option because it is importing something not-very-powershelly from C# \r\n3. Changing behavior based on #requires doesn't work outside a saved script, and will fail as soon as someone copies some code from a long script without setting the tag. \r\n4.`(dir *.ps2)?.count` and `(dir *.ps1)?.count ` show that it operand doesn't need to be a variable. \r\n`($Host)?.toString()  `/ `($null)?.toString()`   removes the need to put braces around the name. It's still extra keystrokes, but it is more logical and less ugy. \r\n\r\n",
    "created_at": "2019-12-18T15:58:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-567093963",
    "id": 567093963,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzA5Mzk2Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567093963/reactions"
    },
    "updated_at": "2019-12-18T15:58:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567093963",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16209593?v=4",
      "events_url": "https://api.github.com/users/jhoneill/events{/privacy}",
      "followers_url": "https://api.github.com/users/jhoneill/followers",
      "following_url": "https://api.github.com/users/jhoneill/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhoneill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jhoneill",
      "id": 16209593,
      "login": "jhoneill",
      "node_id": "MDQ6VXNlcjE2MjA5NTkz",
      "organizations_url": "https://api.github.com/users/jhoneill/orgs",
      "received_events_url": "https://api.github.com/users/jhoneill/received_events",
      "repos_url": "https://api.github.com/users/jhoneill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jhoneill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhoneill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jhoneill"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> 3. Changing behavior based on #requires doesn't work outside a saved script, and will fail as soon as someone copies some code from a long script without setting the tag.\r\n\r\nThis applies to _any_ code that uses features not supported in earlier versions.\r\nIf this were the overriding concern, no new language feature or new cmdlet / cmdlet parameter would ever be introduced.\r\n\r\n(Hopefully, in older code you have at least `Set-StrictMode -Version 1` in effect, in which case `$var?.foo` would fail loudly, due to no variable named `var?` existing).\r\n\r\n> 4. removes the need to put braces around the name.\r\n\r\nSubstituting `(...)` for `{...}` is only a marginal improvement.\r\n\r\nWhatever extra syntax is used, the problem here is the _need_ for extra syntax - for something that should just work _as-is_ - not just for typing convenience but also to meet _sensible expectations_.\r\n\r\n\r\n",
    "created_at": "2019-12-18T16:11:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-567100292",
    "id": 567100292,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzEwMDI5Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567100292/reactions"
    },
    "updated_at": "2019-12-18T16:11:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567100292",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "> > 1. Changing behavior based on #requires doesn't work outside a saved script, and will fail as soon as someone copies some code from a long script without setting the tag.\r\n> \r\n> This applies to _any_ code that uses features not supported in earlier versions.\r\n> If this were the overriding concern, no new language feature or new cmdlet / cmdlet parameter would ever be introduced.\r\n\r\nThat wasn't quite what I meant. Further up there was suggestion that if #requires specified pwsh 7 then the processing might be different. Lighting up a new behaviour only if you put #requires <version which enables it> isn't good .\r\n\r\n> \r\n> (Hopefully, in older code you have at least `Set-StrictMode -Version 1` in effect, in which case `$var?.foo` would fail loudly, due to no variable named `var?` existing).\r\n> \r\nIn my experience not much uses Set-Strictmode. Because (a) there is an assumption that the default without it is \"right\" and (b) the frequency of using things which rely on it being off is too high.  It's a common use for these operators.  In any case the problem is older code where $var? does exist and does have a foo property, but now  the code looks for $var ... Possibly the new processing would cause an error IF strictmode is set because $var doesn't exist....   \r\n\r\n> > 1. removes the need to put braces around the name.\r\n> \r\n> Substituting `(...)` for `{...}` is only a marginal improvement.\r\n> \r\nYes. ($x) is slightly better than ${x} but only slightly.  (`Get-user \"Bob\")?.disable()` is better than \r\n```\r\n$u = get-user \"bob\" \r\n($u)?.disable\r\n```\r\n\r\n> Whatever extra syntax is used, the problem here is the _need_ for extra syntax - for something that should just work _as-is_ - not just for typing convenience but also to meet _sensible expectations_.\r\n\r\nYes. \r\n`$var.   foo `   With white-space works.  `${foo}   ?.bar()` doesn't because ? is allowed in a function or alias name (?. is legal for both).  Lashing bits of C# syntax into existing syntax rules without breaking things isn't always practical  Sometimes, \"This is available in C#...\" really deserves the answer \"Yes. You know where C# is if you want it\". \r\n:-) \r\n\r\n ",
    "created_at": "2019-12-18T19:57:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-567187761",
    "id": 567187761,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzE4Nzc2MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567187761/reactions"
    },
    "updated_at": "2019-12-18T19:57:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567187761",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16209593?v=4",
      "events_url": "https://api.github.com/users/jhoneill/events{/privacy}",
      "followers_url": "https://api.github.com/users/jhoneill/followers",
      "following_url": "https://api.github.com/users/jhoneill/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhoneill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jhoneill",
      "id": 16209593,
      "login": "jhoneill",
      "node_id": "MDQ6VXNlcjE2MjA5NTkz",
      "organizations_url": "https://api.github.com/users/jhoneill/orgs",
      "received_events_url": "https://api.github.com/users/jhoneill/received_events",
      "repos_url": "https://api.github.com/users/jhoneill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jhoneill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhoneill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jhoneill"
    }
  },
  {
    "author_association": "NONE",
    "body": "To&nbsp;maintain **SemVer**&nbsp;compatibility, this&nbsp;should be&nbsp;done in&nbsp;a&nbsp;major&nbsp;release (preferably&nbsp;**7.0.0**).\r\n\r\nAlso&nbsp;see my&nbsp;suggestion&nbsp;above (<https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-566756120>).",
    "created_at": "2019-12-19T00:51:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-567279075",
    "id": 567279075,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzI3OTA3NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567279075/reactions"
    },
    "updated_at": "2019-12-19T00:51:50Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567279075",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3889017?v=4",
      "events_url": "https://api.github.com/users/ExE-Boss/events{/privacy}",
      "followers_url": "https://api.github.com/users/ExE-Boss/followers",
      "following_url": "https://api.github.com/users/ExE-Boss/following{/other_user}",
      "gists_url": "https://api.github.com/users/ExE-Boss/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ExE-Boss",
      "id": 3889017,
      "login": "ExE-Boss",
      "node_id": "MDQ6VXNlcjM4ODkwMTc=",
      "organizations_url": "https://api.github.com/users/ExE-Boss/orgs",
      "received_events_url": "https://api.github.com/users/ExE-Boss/received_events",
      "repos_url": "https://api.github.com/users/ExE-Boss/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ExE-Boss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ExE-Boss/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ExE-Boss"
    }
  },
  {
    "author_association": "NONE",
    "body": "@ExE-Boss Yes, it was your comment I was referring to when I said depending on #requires might not be the good idea it sound at first.  \r\nAnd yes, if one is to break any existing scripts the time to do is when the major version changes, so this needs to be done quickly or wait for V8 \r\n\r\nThese are still an experimental feature and are off by default in RC-1 , which I assume is going to stay the same for a shipping product. That **does** allow the behaviour to be changed (or even be second experimental feature) - it also should  block/ warn when trying to create a variable ending with certain characters.  If I enable it and then want to use scripts with errant variable names that puts the responsibility on me - of course it means that scripts I download which do that just look \"broken\" which is more tolerable under the \"experimental\" banner. \r\n     \r\n",
    "created_at": "2019-12-19T08:42:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-567393009",
    "id": 567393009,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzM5MzAwOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567393009/reactions"
    },
    "updated_at": "2019-12-19T08:42:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567393009",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16209593?v=4",
      "events_url": "https://api.github.com/users/jhoneill/events{/privacy}",
      "followers_url": "https://api.github.com/users/jhoneill/followers",
      "following_url": "https://api.github.com/users/jhoneill/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhoneill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jhoneill",
      "id": 16209593,
      "login": "jhoneill",
      "node_id": "MDQ6VXNlcjE2MjA5NTkz",
      "organizations_url": "https://api.github.com/users/jhoneill/orgs",
      "received_events_url": "https://api.github.com/users/jhoneill/received_events",
      "repos_url": "https://api.github.com/users/jhoneill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jhoneill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhoneill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jhoneill"
    }
  },
  {
    "author_association": "NONE",
    "body": "I'm not a serious PowerShell developer; I came here in search of a solution to a bug and happened to stumble upon this issue.  For command line scripting, I mostly use bash.  I'm probably in the demographic that Microsoft is trying to convince to switch to PowerShell Core: cross-platform developer in need of a quick scripting language that's less of a pain than bash.\r\n\r\nI've often found many of the decisions related to PowerShell's syntax unintuitive to people who aren't primarily PowerShell developers.  The last time I used PowerShell for something serious, I was appalled by the lack of a null coalescing operator, or even a ternary operator I could use instead--which resulted in me posting [this popular PowerShell answer on Stack Overflow](https://stackoverflow.com/a/17647824/1188377).  That was in 2013, and it's easily one of the top three reasons I've mostly avoided PowerShell ever since.  The whole point of a scripting language is that I want something quick and dirty with a lot of syntax sugar, not verbose if-else statements.\r\n\r\n@StartAutomating said:\r\n\r\n> Deeply geeky folks aside, I'd expect that ${obj}?.Method() or $obj?.Method() will get little uptick. There's a decade of guidance out on the web of how to manage nulls out there, and I don't see that many people switching from if ($obj) { $obj.Method() } just to get on the v7 bandwagon\r\n\r\nI'm just n=1, but as a non-PowerShell developer, I strongly disagree.  The new ? syntax is something I would find out about pretty quickly even as someone who touches PowerShell maybe once every few months, and it would definitely increase the odds of me using PowerShell in the future in place of alternatives.  If I then see that some crazy {} syntax is required for backwards compatibility, I'm going to roll my eyes and go back to whatever I was already using.\r\n\r\nI don't understand the emphasis on backwards compatibility here.  PowerShell Core already broke most of my existing scripts because they used parts of .NET that aren't in .NET Core.  (I'm not complaining about that--.NET Core is great, but if you're going to break backwards compatibility, now's your chance.)",
    "created_at": "2019-12-19T14:31:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-567512624",
    "id": 567512624,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzUxMjYyNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 10,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 10,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567512624/reactions"
    },
    "updated_at": "2019-12-19T14:45:35Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567512624",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/504130?v=4",
      "events_url": "https://api.github.com/users/Zenexer/events{/privacy}",
      "followers_url": "https://api.github.com/users/Zenexer/followers",
      "following_url": "https://api.github.com/users/Zenexer/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zenexer/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Zenexer",
      "id": 504130,
      "login": "Zenexer",
      "node_id": "MDQ6VXNlcjUwNDEzMA==",
      "organizations_url": "https://api.github.com/users/Zenexer/orgs",
      "received_events_url": "https://api.github.com/users/Zenexer/received_events",
      "repos_url": "https://api.github.com/users/Zenexer/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Zenexer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zenexer/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Zenexer"
    }
  },
  {
    "author_association": "NONE",
    "body": "First off, I believe my initial feedback has created a kerfuffle of misunderstanding.\r\n\r\nMy supposition was that ${} would not be _that weird to PowerShell developers_ , because they would already have to know this syntax form if they had ever embedded a variable with a ? or and underscore in a string.\r\n\r\nThanks for the many reminders that this syntax might be awkward to non-PowerShell developers.\r\n\r\nThe second part of my feedback might have gotten lost in the mix:  Because other alternatives to null-coalescing have existed for more time in PowerShell and are widely used, I don't know how much uptick the feature would have _with existing PowerShell users_.  You want to come in and say \"this is the one thing I need to start using PowerShell\", and I can't argue with your opinion (though I might say you're missing a forest of cool features looking for a tree of language familiarity).\r\n\r\nThe third bit of my feedback seems to have been blown out of proportion.  Speaking as one of the people who has occasionally used variables named like $IsThisRight? = Test-Something , my first reaction to hearing the potential news about this variable restriction was \"oh well, guess I'll have to rename some variables, I wasn't getting that much for it anyways.\"\r\n\r\nSo, to attempt to restate and end the thread:\r\n\r\n1. IMHO, ${} will probably not be that weird of a syntax for _existing_ PowerShell developers\r\n2. You're welcome to think this feature is cool; to me it's a language familiarity gateway drug, and I'd highly recommend everyone reading this thread learn how to rock assigning ifs/foreaches/whiles etc. \r\n3. As one of the impacted authors, I'm not getting something so mission critical from a ? at the end of my variables that I would be opposed to changing my code.\r\n\r\nOr, to be pithily short:\r\n\r\nDo this change if you want to.  I have little horse in this race.  If you do decide to do this, please broadcast the change clearly so that anyone else who has named variables with a ? can update accordingly.",
    "created_at": "2019-12-19T19:52:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-567637861",
    "id": 567637861,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzYzNzg2MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567637861/reactions"
    },
    "updated_at": "2019-12-19T19:52:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567637861",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1043665?v=4",
      "events_url": "https://api.github.com/users/StartAutomating/events{/privacy}",
      "followers_url": "https://api.github.com/users/StartAutomating/followers",
      "following_url": "https://api.github.com/users/StartAutomating/following{/other_user}",
      "gists_url": "https://api.github.com/users/StartAutomating/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/StartAutomating",
      "id": 1043665,
      "login": "StartAutomating",
      "node_id": "MDQ6VXNlcjEwNDM2NjU=",
      "organizations_url": "https://api.github.com/users/StartAutomating/orgs",
      "received_events_url": "https://api.github.com/users/StartAutomating/received_events",
      "repos_url": "https://api.github.com/users/StartAutomating/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/StartAutomating/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/StartAutomating/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/StartAutomating"
    }
  },
  {
    "author_association": "NONE",
    "body": "> The second part of my feedback might have gotten lost in the mix: Because other alternatives to null-coalescing have existed for more time in PowerShell and are widely used, I don't know how much uptick the feature would have with existing PowerShell users.\r\n\r\nI do definitely agree with that, and I don't want to be dismissive of your opinion.  It's always hard to make breaking changes like that, especially when the alternative might be intuitive to people who are already heavy users of the language.\r\n\r\n> You want to come in and say \"this is the one thing I need to start using PowerShell\", and I can't argue with your opinion (though I might say you're missing a forest of cool features looking for a tree of language familiarity).\r\n\r\nWell, I had a feeling that most non-PowerShell developers aren't really participating in these conversations--it's pure coincidence that I happened to stumble upon this.  My use of PowerShell will likely be very different from people who are writing libraries and open source tools.  I figured I'd just give the perspective of someone who's using PowerShell less as a fancy framework and more to get odd tasks done as fast as possible.  It's not meant to be dismissive of any other opinions--it's just another opinion from a perspective that probably isn't seen all that often here.\r\n\r\nBetter null handling isn't the one thing I need to start using PowerShell more: it's the second thing.  The first was cross-platform support, and I'm very impressed with how far that's come.  Personally, syntax sugar is a big deal for me when I'm choosing a language to do a given task: I want the syntax to make what I'm doing easier.  If I'm writing something that needs to be maintained by a lot of people, I'm probably going to want it to be more verbose; but if I'm writing a quick script for administrative or devops tasks, I just want a quick way to test for things like null.\r\n\r\n> The third bit of my feedback seems to have been blown out of proportion. Speaking as one of the people who has occasionally used variables named like $IsThisRight? = Test-Something , my first reaction to hearing the potential news about this variable restriction was \"oh well, guess I'll have to rename some variables, I wasn't getting that much for it anyways.\"\r\n\r\nFavoring backwards compatibility is always a fair argument.  However, in this particular case, it seems like a lot of PowerShell scripts are on the verge of breaking due to the transition to Core anyway.  When backwards compatibility breaks on a regular basis, it's frustrating, but I would be in favor of any breaking changes happening all at once, which means this is probably a good time.\r\n\r\nIn a scenario in which you're trying to target a whole new demographic--that is, non-Windows-centric developers--it might be necessary to make some breaking changes to compete with what's already out there.\r\n\r\n>  If you do decide to do this, please broadcast the change clearly so that anyone else who has named variables with a ? can update accordingly.\r\n\r\nTo be clear, I'm fine with needing to opt into the feature--that wouldn't deter me from using PowerShell.  I'm already accustomed to needing a bunch of `set` commands at the top of my bash scripts.  I wouldn't consider it ideal, but it'd have little impact on my decision to use PowerShell as long as it's well-documented.",
    "created_at": "2019-12-19T20:11:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-567644684",
    "id": 567644684,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzY0NDY4NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567644684/reactions"
    },
    "updated_at": "2019-12-19T20:17:23Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567644684",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/504130?v=4",
      "events_url": "https://api.github.com/users/Zenexer/events{/privacy}",
      "followers_url": "https://api.github.com/users/Zenexer/followers",
      "following_url": "https://api.github.com/users/Zenexer/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zenexer/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Zenexer",
      "id": 504130,
      "login": "Zenexer",
      "node_id": "MDQ6VXNlcjUwNDEzMA==",
      "organizations_url": "https://api.github.com/users/Zenexer/orgs",
      "received_events_url": "https://api.github.com/users/Zenexer/received_events",
      "repos_url": "https://api.github.com/users/Zenexer/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Zenexer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zenexer/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Zenexer"
    }
  },
  {
    "author_association": "NONE",
    "body": "> Personally, syntax sugar is a big deal for me when I'm choosing a language to do a given task\r\n\r\nThen you've come to the right language!  PowerShell is positively sacchrine with syntactic sugar.\r\n\r\nTo educate those who don't know, you can \"null coalese\" several ways in PowerShell:\r\n~~~\r\n$ListWhereNotNull = $null, 1, 2, $null, 3 -ne $null # This will check that each item is not null, and return a list of 1,2,3\r\n$FirstNonNull = @($null, 1, $null,2 -ne $null)[0]  # This will return the first non-null\r\n$lastNonNull = @($null, 1, 2, $null -ne $null)[-1] # This will return the last non-null, using a negative index\r\n$TheObjectPipelineWay = $null, 1, $null, 2 | Where-Object { $_ } | Select-Object -First 1\r\n$TheAssigningForeachWay = foreach ($item in $null, 1, 2, $null, 3, 4) { \r\n    if ($item -ne $null) { $item; break } \r\n}\r\n$FirstViaMultipleAssignment, $RestIDontCareAbout = $null, 1, $null, 2, 3,4, $null -ne $null\r\n~~~ \r\nThat's enough for now, but it should prove the point on the language syntax having much flexibility.  All of those demos will work all the way back to PowerShell 1.0 \r\n> However, in this particular case, it seems like a lot of PowerShell scripts are on the verge of breaking due to the transition to Core anyway. \r\n\r\nIn this you are incorrect.  Core actually has very few syntax breaking changes, and more modules than you'd think work just fine on core (+- some issues with Linux vs Windows pathing/newlines).   In more practical terms, your module is less likely to work on Core if you have some sort of Windows platform specific API dependency (e.g. I'm not going to hold my breath to get my WPF wrappers working on Linux).\r\n\r\nI still am fine either way with the syntax change:  I just felt that two of the assertions in the latest reply needed to be addressed and called out.\r\n\r\nRe: Syntactic sugar, my sarcastic mind quotes the movie \"Snatch\": \"I'm already sweet enough\"\r\nRe: breaking change potentials in Core: We have few now, and let's keep it that way as much as we can.",
    "created_at": "2019-12-19T20:42:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-567659406",
    "id": 567659406,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzY1OTQwNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 1,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567659406/reactions"
    },
    "updated_at": "2019-12-19T20:42:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567659406",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1043665?v=4",
      "events_url": "https://api.github.com/users/StartAutomating/events{/privacy}",
      "followers_url": "https://api.github.com/users/StartAutomating/followers",
      "following_url": "https://api.github.com/users/StartAutomating/following{/other_user}",
      "gists_url": "https://api.github.com/users/StartAutomating/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/StartAutomating",
      "id": 1043665,
      "login": "StartAutomating",
      "node_id": "MDQ6VXNlcjEwNDM2NjU=",
      "organizations_url": "https://api.github.com/users/StartAutomating/orgs",
      "received_events_url": "https://api.github.com/users/StartAutomating/received_events",
      "repos_url": "https://api.github.com/users/StartAutomating/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/StartAutomating/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/StartAutomating/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/StartAutomating"
    }
  },
  {
    "author_association": "NONE",
    "body": "@StartAutomating : *Are you saying i can't shoot?* because there's still place for more sugar I think 😜",
    "created_at": "2019-12-19T21:06:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-567676780",
    "id": 567676780,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzY3Njc4MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567676780/reactions"
    },
    "updated_at": "2019-12-19T21:06:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567676780",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16168755?v=4",
      "events_url": "https://api.github.com/users/kborowinski/events{/privacy}",
      "followers_url": "https://api.github.com/users/kborowinski/followers",
      "following_url": "https://api.github.com/users/kborowinski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kborowinski/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/kborowinski",
      "id": 16168755,
      "login": "kborowinski",
      "node_id": "MDQ6VXNlcjE2MTY4NzU1",
      "organizations_url": "https://api.github.com/users/kborowinski/orgs",
      "received_events_url": "https://api.github.com/users/kborowinski/received_events",
      "repos_url": "https://api.github.com/users/kborowinski/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/kborowinski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kborowinski/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/kborowinski"
    }
  },
  {
    "author_association": "NONE",
    "body": "> To educate those who don't know, you can \"null coalese\" several ways in PowerShell:\r\n\r\n[I did figure that out](https://stackoverflow.com/a/17647824/1188377) (that's my own answer that I wrote), but it felt like a kludge.  It's a cool idea with a lot of potential, but as one commenter on that Stack Overflow answer pointed out, evaluation doesn't short-circuit.  The `?.` operator means that this is usually no longer an issue when chaining calls/properties.  Back in 2013, though, it wasn't available--and, even then, there's an awful lot going on in these examples, and you can see in the comments how people found that confusing.  I had to break down exactly what these examples do symbol-by-symbol.\r\n\r\n> In this you are incorrect. Core actually has very few syntax breaking changes, and more modules than you'd think work just fine on core (+- some issues with Linux vs Windows pathing/newlines). In more practical terms, your module is less likely to work on Core if you have some sort of Windows platform specific API dependency (e.g. I'm not going to hold my breath to get my WPF wrappers working on Linux).\r\n\r\nI'm just speaking from experience in this regard, rather than actually going through and gathering proper statistics.  For example, pre-Core, I could generate a password with `[System.Web.Security.Membership]::GeneratePassword(32, 6)`, but `System.Web` isn't available in Core.  (I know I could probably load the old System.Web.dll, but I'd rather not do that if I don't have to.)  Syntax changes are actually easier for me to resolve than missing APIs.  Generating a bunch of Docker secrets for a devkit seems like a great place to use a quick script, but it's surprisingly more verbose in PowerShell Core than bash.  Of course, bash's solutions often look pretty ugly.\r\n\r\n> Re: Syntactic sugar, my sarcastic mind quotes the movie \"Snatch\": \"I'm already sweet enough\"\r\n\r\nIt depends.  Sometimes I feel like PowerShell is extraordinarily pleasant.  Dealing with null is one of those key areas where I usually don't feel that way--although I'd say the same for a lot of languages.  I also find the traditional inline PowerShell if-else statement to be cumbersome compared to a ternary operator or bash's `&&` and `||` chaining.  Since this is one of the key issues that caused me to drift away from PowerShell years ago, I figured it was worth mentioning.\r\n\r\nOn the other hand, I deal with a wide variety of languages on a daily basis, and no matter what I'm writing, I'm always thinking, \"this would be so much easier in language X!\"--and then when I'm using language X, I'm thinking, \"this would be so much easier in language Y!\"  But hey, if I get an opportunity to say that out loud and maybe sway the direction of the language, I'll take it.\r\n\r\nI'm not really interested in changing any minds here, just adding another perspective.\r\n\r\n> @StartAutomating : Are you saying i can't shoot? because there's still place for more sugar I think 😜\r\n\r\nI always love me some new syntax sugar!  I select programming languages like a kid going trick-or-treating on Halloween.",
    "created_at": "2019-12-19T21:07:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-567677167",
    "id": 567677167,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzY3NzE2Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567677167/reactions"
    },
    "updated_at": "2019-12-19T21:07:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567677167",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/504130?v=4",
      "events_url": "https://api.github.com/users/Zenexer/events{/privacy}",
      "followers_url": "https://api.github.com/users/Zenexer/followers",
      "following_url": "https://api.github.com/users/Zenexer/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zenexer/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Zenexer",
      "id": 504130,
      "login": "Zenexer",
      "node_id": "MDQ6VXNlcjUwNDEzMA==",
      "organizations_url": "https://api.github.com/users/Zenexer/orgs",
      "received_events_url": "https://api.github.com/users/Zenexer/received_events",
      "repos_url": "https://api.github.com/users/Zenexer/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Zenexer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zenexer/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Zenexer"
    }
  },
  {
    "author_association": "NONE",
    "body": "@Zenexer : I really like *Powershell*, I do. I'm fortunate enough to do *PS* extensively and daily at work. I love the flexibility, especially the symbiosis with .NET, oh man! That's why I care about its direction and that's why the `${...}?` syntax is so hard to accept to me.",
    "created_at": "2019-12-19T21:27:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-567683665",
    "id": 567683665,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzY4MzY2NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567683665/reactions"
    },
    "updated_at": "2019-12-19T21:29:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567683665",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16168755?v=4",
      "events_url": "https://api.github.com/users/kborowinski/events{/privacy}",
      "followers_url": "https://api.github.com/users/kborowinski/followers",
      "following_url": "https://api.github.com/users/kborowinski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kborowinski/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/kborowinski",
      "id": 16168755,
      "login": "kborowinski",
      "node_id": "MDQ6VXNlcjE2MTY4NzU1",
      "organizations_url": "https://api.github.com/users/kborowinski/orgs",
      "received_events_url": "https://api.github.com/users/kborowinski/received_events",
      "repos_url": "https://api.github.com/users/kborowinski/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/kborowinski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kborowinski/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/kborowinski"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Good points, but let me clarify a few things.\r\n\r\nFor better or worse, PowerShell to date hasn't used semantic versioning.\r\nA new major version only brought _new_ features, with an ironclad commitment to backward compatibility.\r\nBreaking changes started to creep in in Core, in part of necessity due to going cross-platform.\r\nMajor version v7.0 was chosen to signal an _increase_ in backward-compatibility: an attempt to provide a viable replacement for Windows PowerShell.\r\n\r\n[While many historical problems cannot be fixed without seriously breaking existing code](https://github.com/PowerShell/PowerShell/issues/6745) and can therefore only be offered as optional (opt-in) features, \r\n[bucket 3](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area) breaking changes should always be an option: make a fix / improvement that has the _potential_ to break existing code, but is unlikely to in practice; on balance, it is worth making to better the language.\r\n\r\nAs argued in the OP, the case at hand strikes me as a bucket 3 change; while we know that _some_ scripts will break (@StartAutomating will know how to fix his scripts), the data suggests that such cases are quite rare.\r\n\r\nWhy is it rare?\r\n\r\nBecause using `?` in variable names doesn't occur to most people altogether, and if it does,  they shouldn't expect it to work _without `{...}`_:  If all of the following work only with `{...}`, why would expect it to be different for `?`?: `. , ;` (`:` can't be used at all, because it is always interpreted as a drive separator)\r\n\r\nAllowing names  such as `$var?` or `$va?r` without also requiring `{...}` was a permissiveness that asked for trouble, and the trouble has arrived: it gets in the way of the evolution of the language, as in this case.\r\n\r\nThere are 3 new related features (at least related in syntactic form) inspired by C#:\r\n\r\n* Ternary conditionals - will be a bona fide feature in 7.0\r\n   * `(Get-Date).Second % 2 ? 'odd' : 'even'` \r\n* Null-coalescing operator - will be a bona fide feature in 7.0\r\n  * `$var ?? 'default'` and `$var ??= 'default'`\r\n* Null-conditional operator - the issue at hand - will be an _experimental_ feature in 7.0\r\n  * `$possiblyNull?.ToString()`\r\n\r\nAll of them have `?` as part of their syntax, and all of them are affected by the burden of legacy `$var?` parsing, though `?.` most obviously so:\r\n\r\n* While you could argue that something like `$var?1:0` is only of interest to code golfers, it would work just fine if `?` had syntactic function - currently you must use a _space_ before the `?`\r\n\r\n* By contrast, it strikes me as reasonable for someone to attempt `$var??='bar'` (perhaps less so `$baz = $foo??$bar`), which currently also require a space.\r\n\r\nThat is, if we stick with the current parsing of `$var?`, we're encumbering _three_ new features (albeit to varying degrees), 2 of which are already generally available (not experimental).\r\n\r\nThe issue with requiring `{...}` is _not_ just the inconvenience of typing: it is just as much about _not expecting the need for it_ in the first place, and later _forgetting the need for it_ (with potentially subtle malfunctioning) - because it so counter-intuitive.\r\n\r\n@ExE-Boss, I agree with @jhoneill  that implementing version-conditional behavior would be problematic. I don't think there is need to encumber the engine with backward-compatibility special-casing in this case.\r\n\r\n\r\n\r\n",
    "created_at": "2019-12-19T21:50:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-567690945",
    "id": 567690945,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzY5MDk0NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 6,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 6,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567690945/reactions"
    },
    "updated_at": "2019-12-19T21:56:09Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567690945",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "@mklement0 : It **is** unnatural/counter-intuitive/you-name-it. Brackets are hard, curly brackets even harder. There's no need for them in this case.",
    "created_at": "2019-12-19T22:19:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-567703525",
    "id": 567703525,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzcwMzUyNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567703525/reactions"
    },
    "updated_at": "2019-12-19T22:26:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567703525",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16168755?v=4",
      "events_url": "https://api.github.com/users/kborowinski/events{/privacy}",
      "followers_url": "https://api.github.com/users/kborowinski/followers",
      "following_url": "https://api.github.com/users/kborowinski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kborowinski/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/kborowinski",
      "id": 16168755,
      "login": "kborowinski",
      "node_id": "MDQ6VXNlcjE2MTY4NzU1",
      "organizations_url": "https://api.github.com/users/kborowinski/orgs",
      "received_events_url": "https://api.github.com/users/kborowinski/received_events",
      "repos_url": "https://api.github.com/users/kborowinski/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/kborowinski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kborowinski/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/kborowinski"
    }
  },
  {
    "author_association": "NONE",
    "body": "@mklement0  since agreement seems to be breaking out ... I think that's a good summary. \r\n\r\nI'm yet to be completely won over by adding C# constructs to PowerShell.  We already have issues in many places that there just aren't enough symbols on the keyboard. Is \">\" \"Greater than\", or \"redirect to\" ? Is \"=\" assignment or test-equality (different languages use := for assign or == for equality). People jumping between languages will forget to use `-eq` or `-gt `and we're stuck with that...  Is + arithmetic addition, or string/array concatenation. * is both multiplication and a wild card. % is Modulo and an alias for` forEach-object.  `\r\n\r\nPoor ? Is the alias for` Where-Object.` And is the name of an automatic variable. But try doing `Get-Alias ?` or` Get-Variable ?` ... and then it does the job of a wildcard.   \r\n\r\nDo `Get-PSdrive` and you see \"variable\" etc don't have a \":\" on the end of the name, adding one : onto a name causes it to be treated as a drive.   Unless of course you refer have written `\"$drive=\"C\"\r\n` and follow it with `\"$drive:temp\"` Anyone new to PowerShell (and the some old hands, when they're not thinking about it) will be baffled to know they've just invented a named scope \"drive\". \r\n\r\nSo against that ... one might say 'Create a new syntax with further uses for  \":\" and \"?\" are you crazy?' \r\nIIRC, on twitter @BrucePay  described the ternary operator as  \"Not very PowerShelly\" and I tend to agree. But the \"Make it more like C#\" voices won the day...  \r\n \r\nMost people would write `$PSEdition.length     -gt    2` \r\nbut  `$PSEdition.         length-gt2`  also works (you can even have a line break between the two halves.) \".\" is also overloaded serving as \"current directory\", \"run in this scope\" and \"member\"  However  in PS V1-V5 I can't think of any operators which **require** a leading  space;  \".\"  is odd in breaking if one _is_ present.  But, in order to parse, the ternary operator _might_ need a leading space \r\n`$host.debuggerEnabled?0:1`    is OK because \"?\" assumed _not_ to part of a property\r\n`$IsCoreCLR?0:1`  isn't because \"?\" is assumed to be part of the variable name. \r\n\r\nThe same is true for the null coalescing operators \r\n`$null??   \"default\"  ` needs a space `$true.length?? \"default\"` doesn't. \r\n\r\nPut the original use case at the top of the issue to one side for a moment. The above cases show that something isn't quite working. It would be fixed  if variable names containing \"?\" needed to be braced like names containing \".\" or \"+\" or \":\" , and @StartAutomating  who is a main user of \"?\" in names thinks that is a _break which could be handled_. Before we even get to null-members, it sounds like 'find a way to do it already'\r\n\r\nI think there is a **short time window** to put in an experimental feature requiring ? to be braced in names, and if that feature is ON - which should be the default - all the new ? operators should parse accordingly. Only if that feature is OFF would the parser require spaces or braces with these operators.. That is a breaking change, some scripts (a small unquantifiable number) would be broken unless an option was set (and disallowing the variable name should prevent $IsIt?.tostring() being the first error in a script, so the scripts should fail, not run dangerously). and ideally that should not happen with a point release (you're correct about  PowerShell not really using sem-ver, but it's still a good principle)\r\n\r\n \r\n\r\n\r\n\r\n\r\n",
    "created_at": "2019-12-20T07:57:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-567830396",
    "id": 567830396,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NzgzMDM5Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567830396/reactions"
    },
    "updated_at": "2019-12-20T07:57:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/567830396",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16209593?v=4",
      "events_url": "https://api.github.com/users/jhoneill/events{/privacy}",
      "followers_url": "https://api.github.com/users/jhoneill/followers",
      "following_url": "https://api.github.com/users/jhoneill/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhoneill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jhoneill",
      "id": 16209593,
      "login": "jhoneill",
      "node_id": "MDQ6VXNlcjE2MjA5NTkz",
      "organizations_url": "https://api.github.com/users/jhoneill/orgs",
      "received_events_url": "https://api.github.com/users/jhoneill/received_events",
      "repos_url": "https://api.github.com/users/jhoneill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jhoneill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhoneill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jhoneill"
    }
  },
  {
    "author_association": "NONE",
    "body": "> The issue with requiring {...} is not just the inconvenience of typing: it is just as much about not expecting the need for it in the first place, and later forgetting the need for it (with potentially subtle malfunctioning) - because it so counter-intuitive.\r\n\r\nThis is a good point and is largely what would annoy me about `${...?}` in practice.  Even if I know to use `{}`, there's a strong chance that I'll eventually forget, and that might result in subtle bugs that aren't obvious at first, since it'll probably still be syntactically valid.  `$var??='bar'` is a good example of that, although I'm normally pretty careful about spacing.",
    "created_at": "2019-12-20T23:51:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-568128006",
    "id": 568128006,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2ODEyODAwNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/568128006/reactions"
    },
    "updated_at": "2019-12-20T23:51:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/568128006",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/504130?v=4",
      "events_url": "https://api.github.com/users/Zenexer/events{/privacy}",
      "followers_url": "https://api.github.com/users/Zenexer/followers",
      "following_url": "https://api.github.com/users/Zenexer/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zenexer/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Zenexer",
      "id": 504130,
      "login": "Zenexer",
      "node_id": "MDQ6VXNlcjUwNDEzMA==",
      "organizations_url": "https://api.github.com/users/Zenexer/orgs",
      "received_events_url": "https://api.github.com/users/Zenexer/received_events",
      "repos_url": "https://api.github.com/users/Zenexer/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Zenexer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zenexer/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Zenexer"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @jhoneill, that's a nice illustration of how many symbols do a lot of double (triple, ...) duty in PowerShell.\r\nFor the most part, once you are aware of all uses, that's not a problem, for the following reasons:\r\n* different contexts (e.g., `*` as an operator vs. `*` as a wildcard char.)\r\n  * The different contexts for `?` actually have something in common, at a certain level of abstraction: You can conceive of the `?` in `Get-ChildItem | ? Target`, `$var?.Target`, `$?`, `$var ?? 'none'` as all involving a kind of _question_ and therefore _test_ or _conditional behavior_.\r\n* sensible polymorphic behavior (e.g., `+` performing concatenation with string).\r\n\r\nA problematic example is `&` (call operator vs. background operator), which is used in the same context with different semantics, depending only on its _position_.\r\n\r\n> It would be fixed if variable names containing \"?\" needed to be braced like names containing \".\" or \"+\" or \":\"\r\n\r\nIndeed, and that bears repeating: **the ability to use `?` in variable names won't go away - but you'll  have to use `{...}`** going forward: `${var?} = @{ foo=1 }; ${var?}?.foo`\r\n\r\nAs you demonstrate, **from the perspective of someone sensibly _not_ expecting `?` to be a valid char. in an _unbraced_ variable reference, `?.`, `??` and `? :` have effectively made the language (situationally) whitespace-sensitive for these operators**, which I know the team wants to avoid - for good reasons, because PowerShell generally isn't whitespace-sensitive (at least not one a single line, `.` for dot-sourcing being the justifiable exception; `?` as the `Where-Object` alias requiring a space after may be surprising (e.g., `gci|?target` doesn't work), but command names _do_ need to be separated from their arguments with whitespace).\r\n\r\nBeing able to put whitespace between `.` and a member name (`$obj.    foo`) primarily makes sense in multi-line statements, though the arguably more readable form - familiar from other languages - is to (also) allow whitespace _before_ the `.`:\r\n\r\n```powershell\r\n# This does NOT work - the . must be *immediately after* the expression / member\r\n(Get-Date)\r\n  .ToUniversalTime()  \r\n  .TimeOfDay\r\n```\r\n\r\nBeing able to do so would mirror the recently added ability to place `|` on the _next_ line:\r\n\r\n```powershell\r\n # Already works in PS Core\r\nGet-Date\r\n  | % ToUniversalTime\r\n  | % TimeOfDay\r\n```\r\n\r\nHowever, this would introduce unresolvable ambiguities with `.` as the dot-sourcing operator and command names that start with `.`  - however unlikely. (e.g., `. foo` on a new line could be a property access or a command that dot-sources a function or script named `foo` (which would have to be in `$env:PATH`); `.foo` could be the name of a _command_).\r\n\r\n@KirkMunro's multi line continuation RFC, while focused on allowing _commands_ to span multiple lines, would give us the next best solution - see https://github.com/PowerShell/PowerShell-RFC/pull/179#issuecomment-498734875.\r\n\r\nAs for the experimental feature being *on* by default: Fortunately, _preview_ releases - but not release candidates - now turn _all_ experimental features on by default; however, note that this is persistently overridden if you've ever run `Enable-ExperimentalFeature` either _without_ `-Scope` or with `-Scope CurrentUser` with whatever features you enabled there.\r\n\r\n",
    "created_at": "2019-12-21T20:55:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-568211282",
    "id": 568211282,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2ODIxMTI4Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/568211282/reactions"
    },
    "updated_at": "2019-12-21T20:55:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/568211282",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 While I agree with basically all of that, I fear we might be headed for derailing this particular discussion a little bit with the extra bits and pieces you have there; if you want to address the line-continuation around the dot-property operator, you may want to open a new issue for that if there isn't one already. 🙂 \r\n\r\nI agree that continuing to allow `?` as a normal variable name character is at best extremely confusing for users, as the character's use suddenly makes things whitespace sensitive, and historically at least, I don't think variable names have _ever_ been whitespace-sensitive in the past.\r\n\r\nIntroducing that ambiguity is, I think, more of a problem than making a breaking change and disallowing `?` from use in a variable name.  With the breaking change, we can easily build a PSSA rule to alert authors that the syntax is no longer permitted. However, the reverse is not so easily true, and unlike the breaking change it will not necessarily error out; it can very easily end up with users accidentally referencing the wrong variable silently, without knowing that's what they're doing.",
    "created_at": "2019-12-21T21:02:09Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-568211716",
    "id": 568211716,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2ODIxMTcxNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/568211716/reactions"
    },
    "updated_at": "2019-12-21T21:02:09Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/568211716",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@PowerShell/powershell-committee discussed this, we had analyzed the PowerShell corpus of scripts and there was quite a bit of usage of variable names ending with the question mark.  As such, we cannot break those folks and braces around PowerShell variable names is an existing language feature to distinguish the variable name from other characters (like within a string).",
    "created_at": "2020-08-26T22:25:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-681155223",
    "id": 681155223,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MTE1NTIyMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/681155223/reactions"
    },
    "updated_at": "2020-08-26T22:25:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/681155223",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> we had analyzed the PowerShell corpus of scripts and there was quite a bit of usage of variable names ending with the question mark\r\n\r\nThanks, @SteveL-MSFT - can you please share the results of this analysis?\r\n\r\n",
    "created_at": "2020-08-26T22:29:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-681156552",
    "id": 681156552,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MTE1NjU1Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/681156552/reactions"
    },
    "updated_at": "2020-08-26T22:29:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/681156552",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Yeah I'd be curious to see some of that, because I'm aware some community members did their own analysis and didn't get anything close to that kind of result.",
    "created_at": "2020-08-26T22:33:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-681157898",
    "id": 681157898,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MTE1Nzg5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/681157898/reactions"
    },
    "updated_at": "2020-08-26T22:33:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/681157898",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I would also like to see the results and method used. I did my own analysis of the [PowerShell Corpus](https://aka.ms/PowerShellCorpus) last night using the AST which took almost 6 hours to complete on my machine. There were a small number of files not able to be parsed due to Windows Defender quarantining the file. \r\n\r\nI found 11 unique variable names across 8 files ending in a question mark (excluding $? which showed up 8846 times). There were a total of 1,895,983, unique variables across 408,423 files. That means 0.0006% of all unique PowerShell variables in the corpus has a variable name ending with a question mark.\r\n\r\nHere are the 8 files and 11 unique variables:\r\n\r\n```powershell\r\nFile                 : C:\\Temp\\PowerShellCorpus\\Github\\alanrenouf_PowerActions\\Kill-VM.ps1\r\nQuestionMarkVars     : vParam?\r\nQuestionMarkVarCount : 1\r\n\r\nFile                 : C:\\Temp\\PowerShellCorpus\\Github\\anthonywlee_PowerShell\\Send_Notification.ps1\r\nQuestionMarkVars     : To?\r\nQuestionMarkVarCount : 1\r\n\r\nFile                 : C:\\Temp\\PowerShellCorpus\\Github\\aspear_My-PowerCLI-scripts\\my-labotomize-vms.ps1\r\nQuestionMarkVars     : vParam?\r\nQuestionMarkVarCount : 1\r\n\r\nFile                 : C:\\Temp\\PowerShellCorpus\\Github\\jlundstrom_Scripts\\Powershell\\7Zip SFX Creator\\Build.ps1\r\nQuestionMarkVars     : Title?\r\nQuestionMarkVarCount : 1\r\n\r\nFile                 : C:\\Temp\\PowerShellCorpus\\Github\\pslaughter_Working\\Setup-Host.ps1\r\nQuestionMarkVars     : HostIp?\r\nQuestionMarkVarCount : 1\r\n\r\nFile                 : C:\\Temp\\PowerShellCorpus\\Github\\stevenayers_PowerShell-Scripts\\Random Functions\\Add-OutlookConferenceRegionNumber.ps1\r\nQuestionMarkVars     : {key1?, key2?, key3?, key4?}\r\nQuestionMarkVarCount : 4\r\n\r\nFile                 : C:\\Temp\\PowerShellCorpus\\Github\\unixboy_powershell-stufff\\stopvm.ps1\r\nQuestionMarkVars     : vParam?\r\nQuestionMarkVarCount : 1\r\n\r\nFile                 : C:\\Temp\\PowerShellCorpus\\PowerShellGallery\\PsHg\\0.6.2\\PsHg.psm1\r\nQuestionMarkVars     : PsHg?\r\nQuestionMarkVarCount : 1\r\n```\r\n\r\nThis is the script used to generate the report:\r\n\r\n```powershell\r\nGet-ChildItem -Path C:\\Temp\\PowerShellCorpus -Include *.ps1, *.psm1 -File -Recurse | ForEach-Object -Parallel {\r\n    try {\r\n        $content = $PSItem | Get-Content\r\n\r\n        $ast = [System.Management.Automation.Language.Parser]::ParseInput($content, [ref]$null, [ref]$null)\r\n        $variables = $ast.FindAll({$args[0] -is [System.Management.Automation.Language.VariableExpressionAst ]}, $true)\r\n        \r\n        # First query because I forgot to exclude $? variables\r\n        # $nonQuestionMark = $variables | Where-Object VariablePath -notmatch '\\?$' | Select-Object -Unique\r\n        # $QuestionMark = $variables | Where-Object VariablePath -match '\\?$' | Select-Object -Unique\r\n\r\n        $nonQuestionMark = $variables |\r\n        Where-Object VariablePath -notmatch '\\?$' |\r\n        ForEach-Object { $_.VariablePath.UserPath.ToString() } |\r\n        Select-Object -Unique\r\n        \r\n        $QuestionMark = $variables |\r\n        Where-Object { $_.VariablePath -match '\\?$' -and $_.VariablePath.UserPath -ne '?' } |\r\n        ForEach-Object { $_.VariablePath.UserPath.ToString() } |\r\n        Select-Object -Unique\r\n\r\n        $output = [pscustomobject]@{\r\n            File = $PSItem\r\n            QuestionMarkVars = $QuestionMark\r\n            QuestionMarkVarCount = $QuestionMark.Count\r\n            NonQuestionMarkVars = $nonQuestionMark\r\n            NonQuestionMarkVarCount = $nonQuestionMark.Count\r\n        }\r\n\r\n        $output\r\n    }\r\n    catch {\r\n        throw\r\n    }\r\n}\r\n```\r\n\r\nLet me know if there is any issue with the method used to generate this report. Here is an example script used to test the audit.\r\n\r\n```powershell\r\n$abc = 'test'\r\n$isAwesome? = $true\r\n$?\r\n\r\n$test = {\r\n\t$?\r\n\t$isabc? = { $adce? = 'test' }\r\n\t${def?} = 123\r\n\t${is a bad var name?} = $isabc?\r\n}\r\n```\r\n\r\nResults in:\r\n\r\n```powershell\r\nFile                    : C:\\temp\\variable.ps1\r\nQuestionMarkVars        : {isAwesome?, isabc?, adce?, def?, is a bad var name?}\r\nQuestionMarkVarCount    : 5\r\nNonQuestionMarkVars     : {abc, true, test}\r\nNonQuestionMarkVarCount : 3\r\n```\r\n\r\nAs they say in math class, \"please show your work\" 😄 ",
    "created_at": "2020-08-27T15:16:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-682014513",
    "id": 682014513,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MjAxNDUxMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/682014513/reactions"
    },
    "updated_at": "2020-08-27T15:34:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/682014513",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/38873752?v=4",
      "events_url": "https://api.github.com/users/ThomasNieto/events{/privacy}",
      "followers_url": "https://api.github.com/users/ThomasNieto/followers",
      "following_url": "https://api.github.com/users/ThomasNieto/following{/other_user}",
      "gists_url": "https://api.github.com/users/ThomasNieto/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ThomasNieto",
      "id": 38873752,
      "login": "ThomasNieto",
      "node_id": "MDQ6VXNlcjM4ODczNzUy",
      "organizations_url": "https://api.github.com/users/ThomasNieto/orgs",
      "received_events_url": "https://api.github.com/users/ThomasNieto/received_events",
      "repos_url": "https://api.github.com/users/ThomasNieto/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ThomasNieto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ThomasNieto/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ThomasNieto"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Excellent sleuthing, @ThomasNieto - thank you.\r\n\r\nI think you can potentially eliminate even more cases, given that the form `${...}` will continue to work with the proposed change - e.g., it's only `$isAwesome?` we need to worry about, not `${isAwesome?}`\r\n\r\nWith your example file:\r\n\r\n```powershell\r\n$variables.Extent.Text.Where({ $_ -match '(?<!\\$)\\?$' }) | Select-Object -Unique\r\n```\r\n\r\nwe only get:\r\n\r\n```none\r\n$isAwesome?\r\n$isabc?\r\n$adce?\r\n```\r\n\r\nThat is, `${def?}` and `${is a bad var name?}` needn't be considered.\r\n\r\nP.S.: It's probably also better to use `$PSItem | Get-Content -Raw` to read the entire script as a single string.\r\n",
    "created_at": "2020-08-27T16:08:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-682044199",
    "id": 682044199,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MjA0NDE5OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/682044199/reactions"
    },
    "updated_at": "2020-08-27T16:22:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/682044199",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@mklement0 That's correct, I added those cases right before posting to ensure the script was not excluding variables with the curly brace notation all together.\r\n\r\nAfter updating the script with your recommendations the test file produces the following output like we expect.\r\n\r\n```powershell\r\nFile                    : C:\\temp\\variable.ps1\r\nQuestionMarkVars        : {isAwesome?, isabc?, adce?}\r\nQuestionMarkVarCount    : 3\r\nNonQuestionMarkVars     : {abc, true, test}\r\nNonQuestionMarkVarCount : 3\r\n```\r\n\r\nI ran the updated script on those 8 files and none of them are using the curly brace notation so the result is still 11 unique variables would be impacted with the proposed change.\r\n\r\nUpdated script:\r\n\r\n```powershell\r\nGet-ChildItem -Path C:\\Temp\\PowerShellCorpus -Include *.ps1, *.psm1 -File -Recurse | ForEach-Object -Parallel {\r\n    try {\r\n        $content = $PSItem | Get-Content -Raw\r\n\r\n        $ast = [System.Management.Automation.Language.Parser]::ParseInput($content, [ref]$null, [ref]$null)\r\n        $variables = $ast.FindAll({$args[0] -is [System.Management.Automation.Language.VariableExpressionAst ]}, $true)\r\n\r\n        $nonQuestionMark = $variables |\r\n        Where-Object VariablePath -notmatch '\\?$' |\r\n        ForEach-Object { $_.VariablePath.UserPath.ToString() } |\r\n        Select-Object -Unique\r\n        \r\n        $QuestionMark = $variables |\r\n        Where-Object { $_.VariablePath -match '\\?$' -and $_.VariablePath.UserPath -ne '?' -and $_.Extent.Text -match '(?<!\\$)\\?$' } |\r\n        ForEach-Object { $_.VariablePath.UserPath.ToString() } |\r\n        Select-Object -Unique\r\n\r\n        $output = [pscustomobject]@{\r\n            File = $PSItem\r\n            QuestionMarkVars = $QuestionMark\r\n            QuestionMarkVarCount = $QuestionMark.Count\r\n            NonQuestionMarkVars = $nonQuestionMark\r\n            NonQuestionMarkVarCount = $nonQuestionMark.Count\r\n        }\r\n\r\n        $output\r\n    }\r\n    catch {\r\n        throw\r\n    }\r\n}\r\n```",
    "created_at": "2020-08-27T16:37:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-682060222",
    "id": 682060222,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MjA2MDIyMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/682060222/reactions"
    },
    "updated_at": "2020-08-27T16:37:12Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/682060222",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/38873752?v=4",
      "events_url": "https://api.github.com/users/ThomasNieto/events{/privacy}",
      "followers_url": "https://api.github.com/users/ThomasNieto/followers",
      "following_url": "https://api.github.com/users/ThomasNieto/following{/other_user}",
      "gists_url": "https://api.github.com/users/ThomasNieto/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ThomasNieto",
      "id": 38873752,
      "login": "ThomasNieto",
      "node_id": "MDQ6VXNlcjM4ODczNzUy",
      "organizations_url": "https://api.github.com/users/ThomasNieto/orgs",
      "received_events_url": "https://api.github.com/users/ThomasNieto/received_events",
      "repos_url": "https://api.github.com/users/ThomasNieto/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ThomasNieto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ThomasNieto/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ThomasNieto"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @ThomasNieto - I was hoping we could get the percentage down to 0.0005%... (just kidding).\r\n\r\nSo the committee must have used a different - private? - corpus.\r\n\r\nSo, in addition to deciding the issue at hand, the question arises: does the [publicly available corpus](https://onedrive.live.com/?authkey=%21AC9cbXs%2DtwuSZ%2DE&cid=7874CFD565B38D4B&id=7874CFD565B38D4B%211091892&parId=7874CFD565B38D4B%211091891&action=locate) need updating? Is it officially maintained (currently dated 26 July 2017)?\r\n\r\n@SteveL-MSFT, can you please clarify?\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-08-27T17:07:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-682077453",
    "id": 682077453,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MjA3NzQ1Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/682077453/reactions"
    },
    "updated_at": "2020-08-27T17:07:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/682077453",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@mklement0 I rounded up so if you want to feel just a bit better its actually 0.00058% 😄 \r\n\r\nIn https://github.com/PowerShell/PowerShell-RFC/pull/223#discussion_r318340339 @adityapatwardhan did an analysis using the same public corpus I used and came up with 62% with variables ending with a question mark. I didn't see a response on how he came up with that percentage. Did the PS committee use that analysis to determine this request?",
    "created_at": "2020-08-27T17:52:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-682099437",
    "id": 682099437,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MjA5OTQzNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 1,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/682099437/reactions"
    },
    "updated_at": "2020-08-27T17:52:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/682099437",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/38873752?v=4",
      "events_url": "https://api.github.com/users/ThomasNieto/events{/privacy}",
      "followers_url": "https://api.github.com/users/ThomasNieto/followers",
      "following_url": "https://api.github.com/users/ThomasNieto/following{/other_user}",
      "gists_url": "https://api.github.com/users/ThomasNieto/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ThomasNieto",
      "id": 38873752,
      "login": "ThomasNieto",
      "node_id": "MDQ6VXNlcjM4ODczNzUy",
      "organizations_url": "https://api.github.com/users/ThomasNieto/orgs",
      "received_events_url": "https://api.github.com/users/ThomasNieto/received_events",
      "repos_url": "https://api.github.com/users/ThomasNieto/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ThomasNieto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ThomasNieto/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ThomasNieto"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Looking at the linked comment, I think what @adityapatwardhan is saying that  _among all variables that have `?` in their name_  62% have a `?` as the name's _last_ character.\r\n\r\nBy contrast, your analysis of the actual prevalence of (curly-brace-less) ending-in-`?` variables (as a percentage of variable usage overall) seems much more relevant.\r\n",
    "created_at": "2020-08-27T18:30:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-682118059",
    "id": 682118059,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MjExODA1OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/682118059/reactions"
    },
    "updated_at": "2020-08-27T20:26:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/682118059",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "At this point, it sounds like the committee is just saying \"we don't want to\" and if that's the case, why even have this feature if it's going to be clunky and un-used as a result?\r\n\r\n@ThomasNieto likewise I did an analysis somewhere around these issues and came up to similar results to yours.",
    "created_at": "2020-08-27T20:25:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-682172655",
    "id": 682172655,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MjE3MjY1NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/682172655/reactions"
    },
    "updated_at": "2020-08-27T20:26:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/682172655",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/25436433?v=4",
      "events_url": "https://api.github.com/users/Halkcyon/events{/privacy}",
      "followers_url": "https://api.github.com/users/Halkcyon/followers",
      "following_url": "https://api.github.com/users/Halkcyon/following{/other_user}",
      "gists_url": "https://api.github.com/users/Halkcyon/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Halkcyon",
      "id": 25436433,
      "login": "Halkcyon",
      "node_id": "MDQ6VXNlcjI1NDM2NDMz",
      "organizations_url": "https://api.github.com/users/Halkcyon/orgs",
      "received_events_url": "https://api.github.com/users/Halkcyon/received_events",
      "repos_url": "https://api.github.com/users/Halkcyon/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Halkcyon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Halkcyon/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Halkcyon"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@mburszley Thanks for doing your analysis. I wanted to use another method (ast vs regex) to confirm the results you got last year.",
    "created_at": "2020-08-27T20:35:09Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-682177286",
    "id": 682177286,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MjE3NzI4Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/682177286/reactions"
    },
    "updated_at": "2020-08-27T20:35:09Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/682177286",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/38873752?v=4",
      "events_url": "https://api.github.com/users/ThomasNieto/events{/privacy}",
      "followers_url": "https://api.github.com/users/ThomasNieto/followers",
      "following_url": "https://api.github.com/users/ThomasNieto/following{/other_user}",
      "gists_url": "https://api.github.com/users/ThomasNieto/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ThomasNieto",
      "id": 38873752,
      "login": "ThomasNieto",
      "node_id": "MDQ6VXNlcjM4ODczNzUy",
      "organizations_url": "https://api.github.com/users/ThomasNieto/orgs",
      "received_events_url": "https://api.github.com/users/ThomasNieto/received_events",
      "repos_url": "https://api.github.com/users/ThomasNieto/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ThomasNieto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ThomasNieto/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ThomasNieto"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I hear you, @mburszley, but re:\r\n\r\n> the committee is just saying \"we don't want to\"\r\n\r\nIf this truly was a _fiat_ decision - one not grounded in analysis of real-world usage -  it wouldn't bode well for the community at large, especially given that the _stated_ reason was a grounding in such analysis.\r\n\r\nThus, we should give the committee a chance to show the real-world usage analysis the decision was based on - or to recognize that the analysis fell short and reconsider the decision.\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-08-27T20:45:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-682181677",
    "id": 682181677,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MjE4MTY3Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/682181677/reactions"
    },
    "updated_at": "2020-08-27T20:45:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/682181677",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "What about my suggestion in <https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-566756120>?\r\n\r\n> I suggest doing it so that `$obj?.Method()` works as <code>$<var>obj</var></code><code>?.</code><code><var>Method</var>()</code> by default, and only fall back to <code>$<var>obj?</var></code><code>.</code><code><var>Method</var>()</code> when <code>$<var>obj</var></code> doesn’t exist in scope, but <code>$<var>obj?</var></code> does and `#requires ‑Version` isn’t v7+.\r\n\r\nI would expect that it would address most of the backwards compatibility concerns.",
    "created_at": "2020-08-28T01:06:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-682267361",
    "id": 682267361,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MjI2NzM2MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/682267361/reactions"
    },
    "updated_at": "2020-08-28T01:08:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/682267361",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3889017?v=4",
      "events_url": "https://api.github.com/users/ExE-Boss/events{/privacy}",
      "followers_url": "https://api.github.com/users/ExE-Boss/followers",
      "following_url": "https://api.github.com/users/ExE-Boss/following{/other_user}",
      "gists_url": "https://api.github.com/users/ExE-Boss/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/ExE-Boss",
      "id": 3889017,
      "login": "ExE-Boss",
      "node_id": "MDQ6VXNlcjM4ODkwMTc=",
      "organizations_url": "https://api.github.com/users/ExE-Boss/orgs",
      "received_events_url": "https://api.github.com/users/ExE-Boss/received_events",
      "repos_url": "https://api.github.com/users/ExE-Boss/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/ExE-Boss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ExE-Boss/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/ExE-Boss"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@ThomasNieto \r\n\r\n@mklement0 is correct, I did mean that *among the variables using `?`*, 62% use it at the end. \r\n\r\nFrom the results shown in comment [here](https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-682014513) seems all of the variables which use `?` use it at the end. Hence the proposal to make a non-breaking change.\r\n\r\nIf the requirement for `{..}` is removed then the script will still parse but the semantics will be different, which in my opinion is very dangerous. ",
    "created_at": "2020-09-01T00:07:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-684112190",
    "id": 684112190,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDExMjE5MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/684112190/reactions"
    },
    "updated_at": "2020-09-01T00:07:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/684112190",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/12820925?v=4",
      "events_url": "https://api.github.com/users/adityapatwardhan/events{/privacy}",
      "followers_url": "https://api.github.com/users/adityapatwardhan/followers",
      "following_url": "https://api.github.com/users/adityapatwardhan/following{/other_user}",
      "gists_url": "https://api.github.com/users/adityapatwardhan/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/adityapatwardhan",
      "id": 12820925,
      "login": "adityapatwardhan",
      "node_id": "MDQ6VXNlcjEyODIwOTI1",
      "organizations_url": "https://api.github.com/users/adityapatwardhan/orgs",
      "received_events_url": "https://api.github.com/users/adityapatwardhan/received_events",
      "repos_url": "https://api.github.com/users/adityapatwardhan/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/adityapatwardhan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adityapatwardhan/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/adityapatwardhan"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Sure... but analysis shows literally almost nobody is using them. \r\n\r\nSame as any other breaking change, it can be announced, introduced as an experimental feature for a time, and then documented and brought into stable.\r\n\r\nI see no reason to recommend an esoteric syntax when `?` as an identifier character is not actually being used in a remotely significant number of cases. ",
    "created_at": "2020-09-01T00:19:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-684116119",
    "id": 684116119,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDExNjExOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 5,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/684116119/reactions"
    },
    "updated_at": "2020-09-01T00:19:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/684116119",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> If the requirement for {..} is removed then the script will still parse but the semantics will be different, which in my opinion is very dangerous.\r\n\r\nAren't you also worried about folks using `?.` the way they do in C/C++/C# and getting the wrong result with no indication they did anything wrong?  For example:\r\n```\r\nPS> $res = \"My length is 15\"\r\nPS> $res?.Length\r\n0\r\n```\r\nSure, strict-mode will find this but I don't know that a lot of folks use strict mode.  So, to prevent a very small percentage of scripts from breaking, it seems we're setting up a lot of folks for failure using `?.`.  I'm not crazy about the trade-off.  That said, I definitely understand the desire to avoid breaking folks even if it's a very small number of folks.\r\n\r\nMaybe PowerShell needs an equivalent of `Enable-ExperimentalFeature`  call it `Enable-PSFeature`, for features that are no longer in the experimental state but are not ready to be turned on **by default**.  For scripts that execute with code like this `$?.GetType()` you could start emitting warnings that in the future this will break and that you should use `${?}.GetType()` instead.  Individual scripts could enable the feature with a `#requires -version 7.1 -feature PSNullConditionalOperators`.  Then maybe whenever PS 8 hits, the feature could be enabled by default. ",
    "created_at": "2020-09-07T18:35:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-688468363",
    "id": 688468363,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4ODQ2ODM2Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 7,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 7,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/688468363/reactions"
    },
    "updated_at": "2020-09-07T18:35:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/688468363",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "NONE",
    "body": "@rkeithhill 's example goes to straight to the point. \r\nForget for a moment what you know about how PowerShell works today.  When you see\r\n```\r\nPS> $res?.Length\r\n```\r\nIt looks like _name, operator, name_ - which of course it is.     \r\nWhich would make more sense: _\"?\" is part of the operator_ , or _\"?\" is part of the first name-element_  ?    \r\nIf these operators are needed (and I think they are \"not PowerShelly\") its a choice between something which will be used incorrectly and a small amount of breakage.  \r\n\r\nI would start putting rules into  psScriptAnalyzer  _now_ to say it's bad style to use certain [legal] characters in variable names. \r\n\r\nI don't like `Enable-feature`. Someone puts it in script to make something they want to use work, and an old script breaks if run after the new script, (but works the rest of the time). I've seen _third party script X fails after running script Y_ because Y turns on strict mode and X relies on it being off; the authors of both scripts are in my bad books. \r\n\r\n",
    "created_at": "2020-09-08T12:08:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-688823958",
    "id": 688823958,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4ODgyMzk1OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 6,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 6,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/688823958/reactions"
    },
    "updated_at": "2020-09-08T12:08:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/688823958",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16209593?v=4",
      "events_url": "https://api.github.com/users/jhoneill/events{/privacy}",
      "followers_url": "https://api.github.com/users/jhoneill/followers",
      "following_url": "https://api.github.com/users/jhoneill/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhoneill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jhoneill",
      "id": 16209593,
      "login": "jhoneill",
      "node_id": "MDQ6VXNlcjE2MjA5NTkz",
      "organizations_url": "https://api.github.com/users/jhoneill/orgs",
      "received_events_url": "https://api.github.com/users/jhoneill/received_events",
      "repos_url": "https://api.github.com/users/jhoneill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jhoneill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhoneill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jhoneill"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> I would start putting rules into psScriptAnalyzer now to say it's bad style to use certain [legal] characters in variable names.\r\n\r\nHere's the problem: if you change the way PowerShell tokenises variables, PSScriptAnalyzer will see them differently too. If you have a variable like `$res?`, then looking at something like this:\r\n\r\n```powershell\r\n{\r\n$res?.Length\r\n}.Ast.EndBlock.Statements[0].PipelineElements[0].Expression.Expression.VariablePath.UserPath\r\n```\r\n\r\ngives you\r\n\r\n```\r\nres?\r\n```\r\n\r\nBUT, if you change the way PowerShell is parsed in, say, 7.2, then you will get\r\n\r\n```\r\nres\r\n```\r\n\r\nNow PSScriptAnalyzer can't see the `?`, because it's no longer part of the variable name (by definition, since it's the change we're trying to test for). This is because PSScriptAnalyzer is a PowerShell module and reuses the same parser that ships in PowerShell. (And it would be totally unmaintainable and a recipe for disaster if it tried to reimplement it).\r\n\r\nThere are ways around this, like conditionally compiling PSScriptAnalyzer (and shipping a whole new assembly) to test the new 7.2 logic to supply the same diagnostic. But then you've increased complexity everywhere (or alternatively decreased your test surface) to service a somewhat cosmetic scenario.\r\n\r\nWorse, all the other tools out there that also rely on the AST won't have the capacity to sustain this kind of complexity even if PSScriptAnalyzer does. Most people building AST-targeting tools out there aren't going to compile against individual minor versions of PowerShell for perfect correctness. They probably won't even know about such a small breaking change, especially since it's not an error in any version; it's the most insidious form of breaking change, where one behaviour quietly becomes another.\r\n\r\nThat's basically what makes parser/tokeniser-level changes like this one more dangerous. Even PSScriptAnalyzer must bend over backwards to service them correctly, meaning they must be weighed against such onerous changes.",
    "created_at": "2020-09-08T20:29:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-689118465",
    "id": 689118465,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTExODQ2NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/689118465/reactions"
    },
    "updated_at": "2020-09-08T20:29:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/689118465",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@rjmholt, **while I think we can all appreciate how tricky a change like this is _in principle_, in this particular case it doesn't matter _in practice_, and I don't think a PSSA rule is even needed:**\r\n\r\n* [@ThomasNieto's analysis](https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-682014513) has shown that  - if we believe the corpus to be representative of all PowerShell code out there - that _virtually no one uses variables with names that end in `?`_.\r\n\r\n* If I were to guess, most people wouldn't even _think_ to use such variable names, because they wouldn't expect them to work (me included), and probably don't even notice the exception that the automatic `$?`  variable constitutes (whose name is equally an exception in POSIX-compatible shells such as `bash`).\r\n\r\n  * In fact, looking closer at @ThomasNieto's analysis reveals that, among the `8` files listed:\r\n      * `5` contain only _false positives_, namely variables uses inside _strings_ such as `\"Are you sure you want to kill $vParam?\"` - in fact, these uses are _broken_, and reveal that the script authors did _not_ expect `?` to be part of the variable name.\r\n     * `2` of those files are no longer publicly available.\r\n     * **Only _1_ of them is a [bona fide use of `?`-ending variables](https://github.com/stevenayers/PowerShell-Scripts/blob/master/Random%20Functions/Add-OutlookConferenceRegionNumber.ps1)** - as _Boolean_ variables (e.g., `$key1?`), which, as an aside, are therefore _not_ combined with the member-access operator, `.` /cc @stevenayers.\r\n\r\nBased on the above, this strikes me as a textbook [Bucket 3: Unlikely Grey Area](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area) change, which is therefore _acceptable_ - and I think the _benefits_ of this change have been argued persuasively.\r\n\r\n_Documenting_ the change in behavior (with a rationale) should suffice.\r\n\r\nOf course:\r\n\r\n1. this is predicated on (a) the analysis being correct and (b) the publicly available corpus being representative.\r\n\r\n2. it is starkly at odds with the committee's claim that \"there was quite a bit of usage of variable names ending with the question mark\" (which, of course, would only be a problem if such variable names aren't enclosed in `{...}`).\r\n\r\nProceeding on the assumption that 1. is true (we haven't heard anything to support 2.), we have two options:\r\n\r\n* Rip off the band-aid and simply disallow `?` in variable names going forward, unless enclosed in `{...}` (with the obvious exception of `$?`) - this will break the vanishingly small proportion of scripts that currently rely on that.\r\n\r\n   * That is, something like `$key1?` that is neither followed by `.` nor another `?` (`$key1??'else'`) nor a ternary expression (`$key1?1:0`) would cause a _parser error_.\r\n      * As the null-coalescing and ternary operator examples show, they too would benefit from this change - currently, you either need  a _space_ - `$key1 ?1:0` / `$key1 ??'else'` - or `{...}` - `${key1}?1:0` / `${key1}??'else'` \r\n   * Inside _expandable strings_, `?` would then no longer be considered part of a (non-`{...}`-enclosed) variable name, so we would actually _fix_ existing scripts that have mistakenly used strings such as `\"Are you sure you want to kill $vParam?\"`. 😁\r\n\r\n* If we really feel we need to avoid breaking the vanishingly small proportion of existing scripts, we _could_ consider the logic [proposed by @ExE-Boss](https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-682267361), but I don't think we want to introduce this conceptual complexity - let alone implementation complexity (which I can't really speak to).\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-09-09T22:36:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-689858916",
    "id": 689858916,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4OTg1ODkxNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 11,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 1,
      "laugh": 0,
      "rocket": 0,
      "total_count": 12,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/689858916/reactions"
    },
    "updated_at": "2020-09-10T22:00:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/689858916",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@SteveL-MSFT \r\n\r\nThanks for discussing this issue in the September community call (https://aka.ms/PSCommunityCall; as of this writing, the September call's recording has not been posted there, but is accessible at https://aka.ms/JoinPSCall, until the next call), starting at 46:00, based on @ThomasNieto's suggestion in the prior solicitation for discussion topics at   https://github.com/PowerShell/PowerShell-RFC/issues/260:\r\n\r\n(I was hoping to provide a direct link to the relevant portion of the recording, but that will have to wait until it is posted to YouTube and linked to at https://aka.ms/PSCommunityCall.)\r\n\r\nBased on your remarks in the recording:\r\n\r\n* Given that you indicated willingness to revisit this, please reopen this issue and re-tag it as `Review - Committee`.\r\n\r\n* As for your remarks that enclosing variable names in curly braces is a preexisting feature and that people object to having to use them in this case on _aesthetic_ grounds:\r\n\r\n  * I don't think anyone here _isn't_ aware that `{...}` _can_ and sometimes _must_ be used to disambiguate variable names.\r\n  * It is also not about _aesthetics_, it is primarily about _not getting the expected behavior_  in  manner that _fails quietly_, due to _not expecting to have to use `{...}` in this case_; a secondary concern is typing inconvenience.\r\n\r\n\r\n\r\n\r\n<blockquote><img src=\"https://avatars0.githubusercontent.com/u/11524380?s=400&v=4\" width=\"48\" align=\"right\"><div><img src=\"https://github.githubassets.com/favicons/favicon.svg\" height=\"14\"> GitHub</div><div><strong><a href=\"https://github.com/PowerShell/PowerShell-RFC\">PowerShell/PowerShell-RFC</a></strong></div><div>RFC (Request for Comments) documents for community feedback on design changes and improvements to PowerShell ecosystem - PowerShell/PowerShell-RFC</div></blockquote>\r\n<blockquote><img src=\"https://statics.teams.microsoft.com/hashedassets-launcher/favicon/favicon-96x96.png\" width=\"48\" align=\"right\"><div>Microsoft Teams</div><div><strong><a href=\"https://aka.ms/JoinPSCall\">Join conversation</a></strong></div></blockquote>",
    "created_at": "2020-09-24T17:20:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-698478048",
    "id": 698478048,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5ODQ3ODA0OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/698478048/reactions"
    },
    "updated_at": "2020-09-24T17:20:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/698478048",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I'm concerned that this issue - now seemingly indefinitely in a closed state - will fall through the cracks, so I've opened #14025 as a reminder to revisit it, and I invite everyone who's interested to show their support there.",
    "created_at": "2020-11-12T21:07:39Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11379#issuecomment-726342944",
    "id": 726342944,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11379",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNjM0Mjk0NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/726342944/reactions"
    },
    "updated_at": "2020-11-12T21:07:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/726342944",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
