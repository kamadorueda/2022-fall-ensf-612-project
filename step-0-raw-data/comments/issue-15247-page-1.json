[
  {
    "author_association": "COLLABORATOR",
    "body": "Please look examples from docs https://docs.microsoft.com/en-us/powershell/module/cimcmdlets/get-ciminstance?view=powershell-7.1 and say what scenarios are not covered?\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/cimcmdlets/get-ciminstance\">Get-CimInstance (CimCmdlets) - PowerShell</a></strong></div><div>The Get-CimInstance cmdlet gets the CIM instances of a class from a CIM server. You can specify either the class name or a query for this cmdlet. This cmdlet returns one or more CIM instance objects representing a snapshot of the CIM instances present on the CIM server. If the InputObject parameter is not specified, the cmdlet works in one of the following ways:  If neither the ComputerName parameter nor the CimSession parameter is specified, then this cmdlet works on local Windows Management Instrumentation (WMI) using a Component Object Model (COM) session. If either the ComputerName parameter or the CimSession parameter is specified, then this cmdlet works against the CIM server specified by either the ComputerName parameter or the CimSession parameter.  If the InputObject parameter is specified, the cmdlet works in one of the following ways:  If neither the ComputerName parameter nor the CimSession parameter is specified, then this cmdlet uses the CIM session or computer name from the input object. If the either the ComputerName parameter or the CimSession parameter is specified, then this cmdlet uses the either the CimSession parameter value or ComputerName parameter value.  </div></blockquote>",
    "created_at": "2021-04-16T17:09:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-821316766",
    "id": 821316766,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMTMxNjc2Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 2,
      "confused": 1,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/821316766/reactions"
    },
    "updated_at": "2021-04-16T17:09:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/821316766",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "NONE",
    "body": "> Please look examples from docs https://docs.microsoft.com/en-us/powershell/module/cimcmdlets/get-ciminstance?view=powershell-7.1 and say what scenarios are not covered?\r\n\r\nAs I have said, the scenario not covered is getting an object from an instance path:\r\n\r\n> I'd like to get a WMI object by [providing an instance path](https://docs.microsoft.com/en-us/windows/win32/wmisdk/retrieving-an-instance) to `Get-CimInstance` as is possible in most other WMI interfaces. This is possible both with from programmatic ones - the `IWbemXxx` COM interfaces, the Active Scripting interfaces (`SWbemXxx` objects), .NET, etc.) - and from the management and testing tools (`wmic.exe`, `wbemtest.exe`).\r\n> \r\n> I'd like to do in PowerShell the equivalent of:\r\n> \r\n> ```\r\n> Set locator = CreateObject(\"WbemScripting.SWbemLocator\")\r\n> Set service = locator.ConnectServer(machine, namespace)\r\n> \r\n> Set instance = service.Get(\"Win32_Whatever.Property=value,OtherProperty=other_value\")\r\n> ```\r\n\r\nYou see that line where there a class name followed by a period and then a list of property names and values? That. That is the scenario not covered by `Get-CimInstance`.\r\n\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/cimcmdlets/get-ciminstance\">Get-CimInstance (CimCmdlets) - PowerShell</a></strong></div><div>The Get-CimInstance cmdlet gets the CIM instances of a class from a CIM server. You can specify either the class name or a query for this cmdlet. This cmdlet returns one or more CIM instance objects representing a snapshot of the CIM instances present on the CIM server. If the InputObject parameter is not specified, the cmdlet works in one of the following ways:  If neither the ComputerName parameter nor the CimSession parameter is specified, then this cmdlet works on local Windows Management Instrumentation (WMI) using a Component Object Model (COM) session. If either the ComputerName parameter or the CimSession parameter is specified, then this cmdlet works against the CIM server specified by either the ComputerName parameter or the CimSession parameter.  If the InputObject parameter is specified, the cmdlet works in one of the following ways:  If neither the ComputerName parameter nor the CimSession parameter is specified, then this cmdlet uses the CIM session or computer name from the input object. If the either the ComputerName parameter or the CimSession parameter is specified, then this cmdlet uses the either the CimSession parameter value or ComputerName parameter value.  </div></blockquote>",
    "created_at": "2021-04-17T20:00:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-821879284",
    "id": 821879284,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMTg3OTI4NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/821879284/reactions"
    },
    "updated_at": "2021-04-17T20:00:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/821879284",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10606081?v=4",
      "events_url": "https://api.github.com/users/conioh/events{/privacy}",
      "followers_url": "https://api.github.com/users/conioh/followers",
      "following_url": "https://api.github.com/users/conioh/following{/other_user}",
      "gists_url": "https://api.github.com/users/conioh/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/conioh",
      "id": 10606081,
      "login": "conioh",
      "node_id": "MDQ6VXNlcjEwNjA2MDgx",
      "organizations_url": "https://api.github.com/users/conioh/orgs",
      "received_events_url": "https://api.github.com/users/conioh/received_events",
      "repos_url": "https://api.github.com/users/conioh/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/conioh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conioh/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/conioh"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I'm not super familiar with that syntax, so if I'm overlooking something just let me know (the docs referencing it don't really explain it super well from what I can see)... but it looks like it's just a different way of filtering the results? Get-CimInstance provides a WQL `-Filter` parameter for that.\r\n\r\nThe equivalent of `Set instance = service.Get(\"Win32_Whatever.Property=value,OtherProperty=other_value\")` would more or less be something like this -- I think?\r\n\r\n```powershell\r\nGet-CimInstance Win32_Whatever -Filter \"Property = 'value' AND OtherProperty = 'other value'\"\r\n```\r\n\r\nI'm not familiar enough with the history of why the specific syntax isn't still supported, but the functionality is very much there, if I understand your use case correctly.",
    "created_at": "2021-04-17T20:47:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-821885194",
    "id": 821885194,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMTg4NTE5NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/821885194/reactions"
    },
    "updated_at": "2021-04-17T20:47:12Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/821885194",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "> I'm not super familiar with that syntax, so if I'm overlooking something just let me know (the docs referencing it don't really explain it super well from what I can see)... but it looks like it's just a different way of filtering the results? Get-CimInstance provides a WQL `-Filter` parameter for that.\r\n> \r\n> The equivalent of `Set instance = service.Get(\"Win32_Whatever.Property=value,OtherProperty=other_value\")` would more or less be something like this -- I think?\r\n> \r\n> ```powershell\r\n> Get-CimInstance Win32_Whatever -Filter \"Property = 'value' AND OtherProperty = 'other value'\"\r\n> ```\r\n> \r\n> I'm not familiar enough with the history of why the specific syntax isn't still supported, but the functionality is very much there, if I understand your use case correctly.\r\n\r\nWell, that's just the thing. Some objects aren't available using filters or WQL queries. Their providers generate them on the fly, when asked for a specific instance by a specific instance path. A bit more information about instance paths is available at https://docs.microsoft.com/en-us/windows/win32/wmisdk/describing-an-instance-object-path and adjacent pages.\r\n\r\nI can't tell you if that's \"legal\" according to whatever (WMI, CIM, ...) specification, but the fact is that major Windows providers act that way, for example the `StorageWMI` provider.\r\n\r\nYou can try, for example, this (as admin since mounting VHDs require being an admin):\r\n\r\n```powershell\r\nPS C:\\> New-VHD \"C:\\new.vhd\" -Dynamic -SizeBytes 1GB | Out-Null\r\nPS C:\\> Get-CimInstance -Namespace \"root/Microsoft/Windows/Storage\" -ClassName \"MSFT_DiskImage\"\r\nPS C:\\> Get-CimInstance -Namespace \"root/Microsoft/Windows/Storage\" -Query \"SELECT * FROM MSFT_DiskImage\"\r\nPS C:\\> $img = [wmi]'\\root\\Microsoft\\Windows\\Storage:MSFT_DiskImage.ImagePath=\"C:\\\\new.vhd\",StorageType=0'\r\nPS C:\\> $mount = $img.Mount(3,0)\r\nPS C:\\> Get-Disk | Select-Object Number, FriendlyName, Size, PartitionStyle\r\n\r\nNumber FriendlyName                 Size PartitionStyle\r\n------ ------------                 ---- --------------\r\n     2 Msft Virtual Disk      1073741824 RAW\r\n     0 INTEL SSDPEKNW020T8 2048408248320 GPT\r\n\r\nPS C:\\>\r\n```\r\n\r\nOr, if you have an ISO file available, not necessarily as admin:\r\n\r\n```powershell\r\nPS C:\\> Get-Volume | Where-Object -Property DriveType -eq \"CD-ROM\"\r\nPS C:\\> Get-CimInstance -Namespace \"root/Microsoft/Windows/Storage\" -ClassName \"MSFT_DiskImage\"\r\nPS C:\\> Get-CimInstance -Namespace \"root/Microsoft/Windows/Storage\" -Query \"SELECT * FROM MSFT_DiskImage\"\r\nPS C:\\> $img = [wmi]'\\root\\Microsoft\\Windows\\Storage:MSFT_DiskImage.ImagePath=\"path\\\\to\\\\file.iso\",StorageType=0'\r\nPS C:\\> $mount = $img.Mount(3,0)\r\nPS C:\\> Get-Volume | Where-Object -Property DriveType -eq \"CD-ROM\"\r\n\r\nDriveLetter FriendlyName         FileSystemType DriveType HealthStatus OperationalStatus SizeRemaining    Size\r\n----------- ------------         -------------- --------- ------------ ----------------- -------------    ----\r\nE           SSS_X64FRE_EN-US_DV9 Unknown        CD-ROM    Healthy      OK                          0 B 4.51 GB\r\n\r\nPS C:\\> dir e:\r\n\r\n    Directory: E:\\\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd-r--          30/10/2018     1:33                boot\r\nd-r--          30/10/2018     1:33                efi\r\nd-r--          30/10/2018     1:34                sources\r\nd-r--          30/10/2018     1:34                support\r\n--r--          30/10/2018     1:28            128 autorun.inf\r\n--r--          30/10/2018     1:28         408074 bootmgr\r\n--r--          30/10/2018     1:28        1452856 bootmgr.efi\r\n--r--          30/10/2018     1:28          82440 setup.exe\r\n\r\nPS C:\\>\r\n```\r\n\r\nYou can make the same test using `wbemtest.exe`:\r\n\r\n1. Connect to the correct namespace:\r\n\r\n![image](https://user-images.githubusercontent.com/10606081/115127627-95398e80-9fe0-11eb-89d9-0ffee4171be6.png)\r\n\r\n2. _Enum Instances..._ of `MSFT_DiskImage`:\r\n\r\n![image](https://user-images.githubusercontent.com/10606081/115127644-bc905b80-9fe0-11eb-9e23-26199b0315f8.png)\r\n\r\n3. _Query..._ `SELECT * FROM MSFT_DiskImage`:\r\n\r\n![image](https://user-images.githubusercontent.com/10606081/115127651-d16cef00-9fe0-11eb-8cc7-105cc7c3bf20.png)\r\n\r\n4. _Open Instance..._ `MSFT_DiskImage.ImagePath=\"C:\\\\new.vhd\",StorageType=0`:\r\n\r\n![image](https://user-images.githubusercontent.com/10606081/115127667-f3ff0800-9fe0-11eb-84d6-759c83404a8b.png)\r\n\r\nNote that we didn't just create a new instance ourselves. We actually can't. `New-CimInstance` will fail and so will the _Create Instance..._ button in `wbemtest.exe`. This instance created by the provider contains the correct value for `StorageType`. Even though we passed the value corresponding to unknown we got an object with a value corresponding to \"VHD\". See the possible value at: https://docs.microsoft.com/en-us/previous-versions/windows/desktop/stormgmt/msft-diskimage#:~:text=VHD\r\n\r\nIf you try that with an ISO you'll get there 1.\r\n\r\nTo summarize: Using WQL is not the use case. It is exactly not what I want. Using a filter isn't too. Getting all objects from a certain class and then filtering them with `Where-Object` isn't either. Because all those methods don't work. I want to get an object by and instance path.\r\n\r\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/windows/win32/wmisdk/describing-an-instance-object-path\">Describing an Instance Object Path - Win32 apps</a></strong></div><div>An instance object path describes the location of an instance of a given class within a specific namespace.</div></blockquote>\r\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/previous-versions/windows/desktop/stormgmt/msft-diskimage\">MSFT\\_DiskImage class</a></strong></div><div>Represents a disk image.</div></blockquote>",
    "created_at": "2021-04-17T22:29:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-821896219",
    "id": 821896219,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMTg5NjIxOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/821896219/reactions"
    },
    "updated_at": "2021-04-19T19:48:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/821896219",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10606081?v=4",
      "events_url": "https://api.github.com/users/conioh/events{/privacy}",
      "followers_url": "https://api.github.com/users/conioh/followers",
      "following_url": "https://api.github.com/users/conioh/following{/other_user}",
      "gists_url": "https://api.github.com/users/conioh/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/conioh",
      "id": 10606081,
      "login": "conioh",
      "node_id": "MDQ6VXNlcjEwNjA2MDgx",
      "organizations_url": "https://api.github.com/users/conioh/orgs",
      "received_events_url": "https://api.github.com/users/conioh/received_events",
      "repos_url": "https://api.github.com/users/conioh/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/conioh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conioh/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/conioh"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I guess tis comes from Microsoft.Management.Infrastructure dll limitations. If so this will be never implemented.\r\n\r\nYou could use [wmisearcher] accelerator https://social.technet.microsoft.com/wiki/contents/articles/22799.powershell-use-the-wmiclass-accelerator-to-query-a-remote-host.aspx\n\n<blockquote><img src=\"/wiki/themes/TechNetMetro/favicon.ico\" width=\"48\" align=\"right\"><div><strong><a href=\"https://social.technet.microsoft.com/wiki/contents/articles/22799.powershell-use-the-wmiclass-accelerator-to-query-a-remote-host.aspx\">PowerShell: Use the Wmiclass Accelerator to Query a Remote Host - TechNet Articles - United States (English) - TechNet Wiki</a></strong></div><div>Technical articles, content and resources for IT Professionals working in Microsoft technologies</div></blockquote>",
    "created_at": "2021-04-18T17:23:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-822027455",
    "id": 822027455,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjAyNzQ1NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 1,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822027455/reactions"
    },
    "updated_at": "2021-04-18T17:23:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822027455",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "NONE",
    "body": "> I guess tis comes from Microsoft.Management.Infrastructure dll limitations. If so this will be never implemented.\r\n\r\nThis is completely wrong. Not even close. Please read again what I said in my original post:\r\n\r\n> ## Proposed technical implementation details (optional)\r\n> `Get-CimInstance` should have a `-Path` or `-InstancePath` parameter and if it is present it will pass the properties to `Microsoft.Management.Infrastructure.CimSession.GetInstanceAsync` like in the example at: https://docs.microsoft.com/en-us/windows/win32/wmisdk/retrieving-an-instance#:~:text=To%20retrieve%20an%20instance%20of%20a%20WMI%20class%20using%20C#%20(Microsoft.Management.Infrastructure)\r\n\r\nHere is a code sample adapted from the Microsoft example and exapnded to a full program that works with `root\\Microsoft\\Windows\\Storage:MSFT_DiskImage` instead of with `root\\cimv2:Win32_LogicalDisk`:\r\n\r\n```csharp\r\nusing System;\r\nusing Microsoft.Management.Infrastructure;\r\n\r\nnamespace ConsoleApp\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args) \r\n        {\r\n            string wmi_namespace = @\"root\\Microsoft\\Windows\\Storage\";\r\n            string wmi_class_name = \"MSFT_DiskImage\";\r\n\r\n            CimInstance wmi_object_instance_synth = new CimInstance(wmi_class_name, wmi_namespace);\r\n\r\n            wmi_object_instance_synth.CimInstanceProperties.Add(CimProperty.Create(\"ImagePath\", @\"path\\\\to\\\\file.iso\", CimFlags.Key));\r\n            wmi_object_instance_synth.CimInstanceProperties.Add(CimProperty.Create(\"StorageType\", 0, CimFlags.Key));\r\n            CimSession wmi_session = CimSession.Create(\"localhost\");\r\n\r\n            CimInstance wmi_object_instance = wmi_session.GetInstance(wmi_namespace, wmi_object_instance_synth);\r\n\r\n            Console.WriteLine(wmi_object_instance.CimInstanceProperties[\"StorageType\"]);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAs most people could see, this code uses `Microsoft.Management.Infrastructure.dll`, specifically the [`Microsoft.Management.Infrastructure.CimInstance`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.management.infrastructure.ciminstance?view=powershellsdk-7.0.0) and [`Microsoft.Management.Infrastructure.CimSession`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.management.infrastructure.cimsession?view=powershellsdk-7.0.0) classes. and demonstrates they have no such limitations.\r\n\r\nAll that is needed is to expose this capability through the `Get-CimInstance` cmdlet. Just as I said:\r\n\r\n> ## Proposed technical implementation details (optional)\r\n> `Get-CimInstance` should have a `-Path` or `-InstancePath` parameter and if it is present it will pass the properties to `Microsoft.Management.Infrastructure.CimSession.GetInstanceAsync` like in the example at: https://docs.microsoft.com/en-us/windows/win32/wmisdk/retrieving-an-instance#:~:text=To%20retrieve%20an%20instance%20of%20a%20WMI%20class%20using%20C#%20(Microsoft.Management.Infrastructure)\r\n\r\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/windows/win32/wmisdk/retrieving-an-instance\">Retrieving a WMI Instance - Win32 apps</a></strong></div><div>Retrieving an instance is one of the most common retrieval procedures you are likely to perform in WMI.</div></blockquote>",
    "created_at": "2021-04-18T19:38:39Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-822048346",
    "id": 822048346,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjA0ODM0Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822048346/reactions"
    },
    "updated_at": "2021-04-18T19:45:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822048346",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10606081?v=4",
      "events_url": "https://api.github.com/users/conioh/events{/privacy}",
      "followers_url": "https://api.github.com/users/conioh/followers",
      "following_url": "https://api.github.com/users/conioh/following{/other_user}",
      "gists_url": "https://api.github.com/users/conioh/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/conioh",
      "id": 10606081,
      "login": "conioh",
      "node_id": "MDQ6VXNlcjEwNjA2MDgx",
      "organizations_url": "https://api.github.com/users/conioh/orgs",
      "received_events_url": "https://api.github.com/users/conioh/received_events",
      "repos_url": "https://api.github.com/users/conioh/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/conioh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conioh/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/conioh"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Only code where we create `CimInstance` is `New-CimInstance` cmdlet. I have played a bit with the code but MMI.dll always returns \"The requested operation is not supported.\" for me.\r\nSee https://github.com/PowerShell/PowerShell/blob/720c615d047fd8c10b38e951e07ee3ec5e7c0c73/src/Microsoft.Management.Infrastructure.CimCmdlets/CimNewCimInstance.cs#L262 if you want to investigate more.",
    "created_at": "2021-04-19T04:20:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-822155237",
    "id": 822155237,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjE1NTIzNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 2,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822155237/reactions"
    },
    "updated_at": "2021-04-19T04:20:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822155237",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "NONE",
    "body": "> Only code where we create `CimInstance` is `New-CimInstance` cmdlet. I have played a bit with the code but MMI.dll always returns \"The requested operation is not supported.\" for me.\r\n> See\r\n> \r\n> https://github.com/PowerShell/PowerShell/blob/720c615d047fd8c10b38e951e07ee3ec5e7c0c73/src/Microsoft.Management.Infrastructure.CimCmdlets/CimNewCimInstance.cs#L262\r\n> \r\n> if you want to investigate more.\r\n\r\nUnfortunately this is once again completely incorrect. As I have said in my original post, the implementation for `Get-CimInstance` obviously uses the `CimInstance` class.\r\n\r\nHere is the direct link to the implementation of `GetCimInstanceInternal`:\r\nhttps://github.com/PowerShell/PowerShell/blob/720c615d047fd8c10b38e951e07ee3ec5e7c0c73/src/Microsoft.Management.Infrastructure.CimCmdlets/CimGetInstance.cs#L80\r\nwhich creates a `CimInstance` object on its sixth line: https://github.com/PowerShell/PowerShell/blob/720c615d047fd8c10b38e951e07ee3ec5e7c0c73/src/Microsoft.Management.Infrastructure.CimCmdlets/CimGetInstance.cs#L87\r\n\r\n`GetCimInstanceInternal` is called by `GetCimInstance` (a few lines above) which is called by `GetCimInstanceCommand.ProcessRecord`: https://github.com/PowerShell/PowerShell/blob/3c7f4b573e96684781b8e1935eeb0b981bcd93bc/src/Microsoft.Management.Infrastructure.CimCmdlets/GetCimInstanceCommand.cs#L478\r\n\r\nI have investigated the code and therefore I know what I'm talking about.",
    "created_at": "2021-04-19T09:36:44Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-822326212",
    "id": 822326212,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjMyNjIxMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822326212/reactions"
    },
    "updated_at": "2021-04-19T09:39:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822326212",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10606081?v=4",
      "events_url": "https://api.github.com/users/conioh/events{/privacy}",
      "followers_url": "https://api.github.com/users/conioh/followers",
      "following_url": "https://api.github.com/users/conioh/following{/other_user}",
      "gists_url": "https://api.github.com/users/conioh/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/conioh",
      "id": 10606081,
      "login": "conioh",
      "node_id": "MDQ6VXNlcjEwNjA2MDgx",
      "organizations_url": "https://api.github.com/users/conioh/orgs",
      "received_events_url": "https://api.github.com/users/conioh/received_events",
      "repos_url": "https://api.github.com/users/conioh/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/conioh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conioh/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/conioh"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Unfortunately this is once again completely incorrect.\r\n\r\nSure? \r\n\r\nIf we look your C# example https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-822048346 you do \"new CimInstance(wmi_class_name, wmi_namespace);\", then assign values to properties. The same you can make with \r\n```powershell\r\n$a=New-CimInstance -Namespace \"root/Microsoft/Windows/Storage\" -ClassName \"MSFT_DiskImage\" -Property @{ ImagePath=\"C:\\temp\\qqq.iso\" } -Key ImagePath -ClientOnly\r\n```\r\nThen docs say we could do:\r\n```powershell\r\nGet-CimInstance -CimInstance $a\r\n```\r\nbut this return an error for MSFT_DiskImage class. The example work for other classes.",
    "created_at": "2021-04-19T13:40:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-822475073",
    "id": 822475073,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjQ3NTA3Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 2,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822475073/reactions"
    },
    "updated_at": "2021-04-19T13:40:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822475073",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "NONE",
    "body": "> > Unfortunately this is once again completely incorrect.\r\n> \r\n> Sure?\r\n\r\nYes. Because I actually read both the documentation and what other people write to me.\r\n\r\n> \r\n> If we look your C# example [#15247 (comment)](https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-822048346) you do \"new CimInstance(wmi_class_name, wmi_namespace);\", then assign values to properties. The same you can make with\r\n> \r\n> ```powershell\r\n> $a=New-CimInstance -Namespace \"root/Microsoft/Windows/Storage\" -ClassName \"MSFT_DiskImage\" -Property @{ ImagePath=\"C:\\temp\\qqq.iso\" } -Key ImagePath -ClientOnly\r\n> ```\r\n> \r\n> Then docs say we could do:\r\n> \r\n> ```powershell\r\n> Get-CimInstance -CimInstance $a\r\n> ```\r\n> \r\n> but this return an error for MSFT_DiskImage class. The example work for other classes.\r\n\r\nWell, you say \"[T]he same you can make with\" but it's not the same. My code sets both the `ImagePath` property and the `StorageType` property, since the key is both of them. That's what `C:\\Windows\\System32\\wbem\\storagewmi.mof` says:\r\n\r\n```mof\r\n[dynamic : ToInstance,provider(\"StorageWMI\") : ToInstance,locale(1033)] \r\nclass MSFT_DiskImage\r\n{\r\n  [key,read : ToSubclass] string ImagePath;\r\n  [key,read : ToSubclass,ValueMap{\"0\", \"1\", \"2\", \"3\", \"4\"} : ToSubclass] uint32 StorageType;\r\n  [read : ToSubclass] string DevicePath;\r\n  [read : ToSubclass] uint64 FileSize;\r\n  [read : ToSubclass] uint64 Size;\r\n  [read : ToSubclass] uint64 LogicalSectorSize;\r\n  [read : ToSubclass] uint64 BlockSize;\r\n  [read : ToSubclass] boolean Attached;\r\n  [read : ToSubclass] uint32 Number;\r\n  [implemented] uint32 Mount([In,ValueMap{\"0\", \"2\", \"3\"} : ToSubclass] uint16 Access,[In] boolean NoDriveLetter,[Out,EmbeddedInstance(\"MSFT_DiskImage\") : ToSubclass] MSFT_DiskImage DiskImage);\r\n  [implemented] uint32 Dismount([Out,EmbeddedInstance(\"MSFT_DiskImage\") : ToSubclass] MSFT_DiskImage DiskImage);\r\n};\r\n```\r\n\r\nThat's why I gave both properties in the C# sample and in the `wbemtest.exe` sample and in the PowerShell using `[wmi]` sample.\r\n\r\nHere ya go:\r\n\r\n![image](https://user-images.githubusercontent.com/10606081/115262386-29206d00-a13d-11eb-8d4d-87b3c7b7e660.png)\r\n",
    "created_at": "2021-04-19T15:37:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-822566591",
    "id": 822566591,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjU2NjU5MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822566591/reactions"
    },
    "updated_at": "2021-04-19T19:50:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822566591",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10606081?v=4",
      "events_url": "https://api.github.com/users/conioh/events{/privacy}",
      "followers_url": "https://api.github.com/users/conioh/followers",
      "following_url": "https://api.github.com/users/conioh/following{/other_user}",
      "gists_url": "https://api.github.com/users/conioh/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/conioh",
      "id": 10606081,
      "login": "conioh",
      "node_id": "MDQ6VXNlcjEwNjA2MDgx",
      "organizations_url": "https://api.github.com/users/conioh/orgs",
      "received_events_url": "https://api.github.com/users/conioh/received_events",
      "repos_url": "https://api.github.com/users/conioh/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/conioh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conioh/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/conioh"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "It's an unfamiliar syntax to me, but from what I can tell that does seem to satisfy your original request, right? I tried with this set of commands:\r\n\r\n```powershell\r\nNew-Vhd C:\\new.vhd -Dynamic -SizeBytes 3mb > $null\r\n\r\n$params = @{\r\n    Namespace  = 'root/Microsoft/Windows/Storage'\r\n    Classname  = 'MSFT_DiskImage' \r\n    Key        = 'ImagePath', 'StorageType'\r\n    ClientOnly = $true\r\n    Property   = @{\r\n        ImagePath   = 'C:\\new.vhd'\r\n        StorageType = 0\r\n    }\r\n}\r\nGet-CimInstance @params | Get-CimInstance\r\n```\r\n\r\nWhich gets what appears to be the correct result:\r\n```\r\nAttached          : False\r\nBlockSize         : 2097152\r\nDevicePath        :\r\nFileSize          : 8192\r\nImagePath         : C:\\new.vhd\r\nLogicalSectorSize : 512\r\nNumber            :\r\nSize              : 3145728\r\nStorageType       : 2\r\nPSComputerName    :\r\n```\r\n\r\nI think we definitely need to improve documentation around this. Does this satisfy your use case here?",
    "created_at": "2021-04-19T16:10:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-822591428",
    "id": 822591428,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjU5MTQyOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822591428/reactions"
    },
    "updated_at": "2021-04-19T16:10:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822591428",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "I think it would be much preferable to support instance paths since:\r\n\r\n1. There's already code that uses them and depends on them. Writing once inside `Get-CimInstance`'s the code the parses the string and creates the properties is preferable to forcing every user who migrates VBS code to PS to do this.\r\n2. WMI objects themselves return the path in the [`__Path` system property](https://docs.microsoft.com/en-us/windows/win32/wmisdk/wmi-system-properties#:~:text=__path).\r\n\r\nThese two facts combined make it very useful to support getting an object by an instance path (e.g. because you save an object's \"identity\" via it's path, and try to get it at a later time) rather than via creating a \"search instance\".\r\n\r\nThe goal is to make it scriptable. That I was able to circumvent the issue because I manually parsed the string doesn't mean that the issue is resolved. (I actually used `[wmi]` because this time I didn't need remote access, and `[wmi]` supports paths.)\r\n\r\nThe issue for the software product known as \"PowerShell\" and the standard cmdlets that are built into it remains.",
    "created_at": "2021-04-19T16:58:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-822625248",
    "id": 822625248,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjYyNTI0OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822625248/reactions"
    },
    "updated_at": "2021-04-19T16:58:20Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822625248",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10606081?v=4",
      "events_url": "https://api.github.com/users/conioh/events{/privacy}",
      "followers_url": "https://api.github.com/users/conioh/followers",
      "following_url": "https://api.github.com/users/conioh/following{/other_user}",
      "gists_url": "https://api.github.com/users/conioh/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/conioh",
      "id": 10606081,
      "login": "conioh",
      "node_id": "MDQ6VXNlcjEwNjA2MDgx",
      "organizations_url": "https://api.github.com/users/conioh/orgs",
      "received_events_url": "https://api.github.com/users/conioh/received_events",
      "repos_url": "https://api.github.com/users/conioh/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/conioh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conioh/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/conioh"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I've definitely had a CIM/WMI provider or two force path usage in their APIs.  I can't remember which one (I want to say it was SCCM's client SDK somewhere) but I definitely have similar code for translating paths laying around.  It'd be really nice to have an API to do this in PowerShell.",
    "created_at": "2021-04-19T17:15:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-822636201",
    "id": 822636201,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjYzNjIwMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822636201/reactions"
    },
    "updated_at": "2021-04-19T17:15:20Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822636201",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Instance path (aka `__PATH` property) is an entity of WMIv1 and old WMI cmdlets (Get-WMIObject and others). The cmdlets was removed from PowerShell Core in 6.0. (Later `[wmi]` accelerator was added for backward compatibility after the API was ported to .Net Core for backward compatibility too. Notice, `[wmi]` accelerator works over old WMIv1 API.)\r\n\r\nNew cmdlets is CIM cmdlets. See docs https://docs.microsoft.com/en-us/powershell/scripting/whats-new/breaking-changes-ps6?view=powershell-7.1#wmi-v1-cmdlets\r\nWMIv1 API is not recommended for use. For this reason, I think the request will never be approved. It's amazing to translate the new API into the old one if we have already started deleting the old one.\r\n\r\n_Especially CIM and CDXML modules covers all old scenarios and more._ \r\n\r\nIf someone still needs this, then this is rather a topic for the community module. You can see [this](https://jdhitsolutions.com/blog/wmi/3105/adding-system-path-to-ciminstance-objects/) for an example.\r\n\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/scripting/whats-new/breaking-changes-ps6\">Breaking Changes for PowerShell 6.0 - PowerShell</a></strong></div><div>This article summarizes the differences between Windows PowerShell 5.1 and PowerShell 6.0.</div></blockquote>",
    "created_at": "2021-04-19T18:00:48Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-822664304",
    "id": 822664304,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjY2NDMwNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822664304/reactions"
    },
    "updated_at": "2021-04-19T18:00:50Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822664304",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@iSazonov I don't think there was any confusion over whether WMI was or was not deprecated.  Could you elaborate on your objections to adding path support to CIM?  It's not a particularly large task to add some helper methods or cmdlets for it, and could ease the transition of code working with some providers.",
    "created_at": "2021-04-19T18:12:35Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-822672024",
    "id": 822672024,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjY3MjAyNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822672024/reactions"
    },
    "updated_at": "2021-04-19T18:13:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822672024",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "Contrary to what was written above, both WMI (\"WMI v1\") and MI (\"WMI v2\") are implementations of CIM. The error in basic terminology is indicative of lack of understanding of the issue and adds up to the previous errors from above (such as claiming that two different pieces of code are \"same\" or claiming that the only cmdlet that uses the `CimInstance` class is `New-cimInstance`, etc.). MI intentionally supports WMI.\r\n\r\n\"[F]ull compatibility with the older Windows Management Instrumentation with WMI\" is stated as a fact: https://docs.microsoft.com/en-us/previous-versions/windows/desktop/wmi_v2/what-s-new-in-mi#compatibility-with-wmi and where there is an incompatibility it is a bug.\r\n\r\nFor example, [`MI_Application_NewSession`](https://docs.microsoft.com/en-us/windows/win32/api/mi/nf-mi-mi_application_newsession)'s `protocol` parameter supports two value \"WINRM\" and \"WMIDCOM\" and this is exposed in [`New-CimSessionOptions`](https://docs.microsoft.com/en-us/powershell/module/cimcmdlets/new-cimsessionoption?view=powershell-7.1)'s [`-Protocol` parameter](https://docs.microsoft.com/en-us/powershell/module/cimcmdlets/new-cimsessionoption?view=powershell-7.1#:~:text=Specifies%20the%20protocol%20to%20use).\r\n\r\nWe can actually see in `Microsoft.Management.Infrastructure.CimInstance`'s implementation [the intention to add getting objects' path to `Microsoft.Management.Infrastructure` once MI fixes it](https://github.com/PowerShell/MMI/blob/cf32fc695b32c2eae848b693395c09222fe1d2ae/src/Microsoft.Management.Infrastructure/CimInstance.cs#L250). The code is commented out rather than deleted.\r\n\r\nWhile generating a string from properties like in the link provided above is relatively easy, parsing a string into properties is somewhat more difficult and error prone (as are all string parsing operations). To make PowerShell more useful today, PS should not wait for Microsoft to add this to MI, then wait for the .NET wrapper of MI to add this too and then add this to the PS cmdlets. This is fixable right now.\n\n<blockquote><img src=\"https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/previous-versions/windows/desktop/wmi_v2/what-s-new-in-mi\">What's New in MI</a></strong></div><div>Windows 8 and Windows Server 2012 introduced new ways of creating Windows Management Infrastructure (MI) applications.</div></blockquote>",
    "created_at": "2021-04-19T18:51:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-822697477",
    "id": 822697477,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjY5NzQ3Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822697477/reactions"
    },
    "updated_at": "2021-04-19T18:51:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822697477",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10606081?v=4",
      "events_url": "https://api.github.com/users/conioh/events{/privacy}",
      "followers_url": "https://api.github.com/users/conioh/followers",
      "following_url": "https://api.github.com/users/conioh/following{/other_user}",
      "gists_url": "https://api.github.com/users/conioh/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/conioh",
      "id": 10606081,
      "login": "conioh",
      "node_id": "MDQ6VXNlcjEwNjA2MDgx",
      "organizations_url": "https://api.github.com/users/conioh/orgs",
      "received_events_url": "https://api.github.com/users/conioh/received_events",
      "repos_url": "https://api.github.com/users/conioh/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/conioh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conioh/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/conioh"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Could you elaborate on your objections to adding path support to CIM?\r\n\r\n@SeeminglyScience @vexx32 I am amazed that you have not been aware of this painful problem for many years.\r\nI propose to the participants a competition who will find the _author_ of the quote \"No plans to port MMI to C#\". :-)\r\nHint 1 [See](https://github.com/PowerShell/PowerShell/issues?q=is%3Aissue+mmi+deprecate+is%3Aclosed)\r\nHint 2 See 2018 year.\r\n\r\nMSFT is very adamant about this. It's also incredible but true that MSFT started work on removing CIM from PowerShell - they are now rewriting DSC to Json.\r\n\r\n> It's not a particularly large task to add some helper methods or cmdlets for it, and could ease the transition of code working with some providers.\r\n\r\nMy first question in the discussion was about _scenarios_. As you understand you need to share _huge important scenario_ so that MSFT change their global policy and agree to port MMI. It is fantastic :-)\r\n\r\nTo solve a similar situation with PowerShell remoting on Unix @jborean93 [forked OMI](https://www.bloggingforlogging.com/2020/08/21/wacky-wsman-on-linux/) It is not officially supported and distributed by MSFT but you still _can_ use this.\r\nSomebody could fork [PowerShell/MMI](https://github.com/PowerShell/MMI) but again it will be never officially supported and not distributed by MSFT but in this case _nobody can_ use it in PowerShell until it is completely removed from PowerShell (or you have to have fully custom PowerShell).\r\n\r\n@conioh All my statements are from a PowerShell perspective. So thanks for sharing [link](https://github.com/PowerShell/MMI/blob/cf32fc695b32c2eae848b693395c09222fe1d2ae/src/Microsoft.Management.Infrastructure/CimInstance.cs#L250) and confirmation my guess that (PowerShell) MMI does not support \"paths\".\r\n",
    "created_at": "2021-04-20T04:50:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-822971209",
    "id": 822971209,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjk3MTIwOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822971209/reactions"
    },
    "updated_at": "2021-04-20T04:50:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/822971209",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> @SeeminglyScience @vexx32 I am amazed that you have not been aware of this painful problem for many years.\r\n> I propose to the participants a competition who will find the _author_ of the quote \"No plans to port MMI to C#\". :-)\r\n\r\nDid someone ask for that in this thread?\r\n\r\n> MSFT is very adamant about this. It's also incredible but true that MSFT started work on removing CIM from PowerShell - they are now rewriting DSC to Json.\r\n\r\nThey're not removing CIM, they're just not relying on it for **DSC specifically** because it's not (easily) cross platform.\r\n\r\n> My first question in the discussion was about _scenarios_. As you understand you need to share _huge important scenario_ so that MSFT change their global policy and agree to port MMI. It is fantastic :-)\r\n\r\nJust to reiterate, adding a helper method or parameter set like `New-CimInstance -InstancePath` doesn't require porting anything.  It doesn't even require changes to MMI since that cmdlet is in this repo.",
    "created_at": "2021-04-20T13:59:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-823297905",
    "id": 823297905,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMzI5NzkwNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/823297905/reactions"
    },
    "updated_at": "2021-04-20T13:59:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/823297905",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I would make the case that this issue isn't so much adding something about how CIM is implemented in PowerShell, but rather how it might be used to _manage_ something like a storage item. I haven't seen a compelling and scenario where a lack of getting an object by path has been detrimental to the PowerShell ecosystem. I would argue that the community fills in the _management_ gap with a command or module that can use instance paths, in whatever manner works. ",
    "created_at": "2021-06-14T19:00:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-860920207",
    "id": 860920207,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MDkyMDIwNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/860920207/reactions"
    },
    "updated_at": "2021-06-14T19:00:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/860920207",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/12089920?v=4",
      "events_url": "https://api.github.com/users/jdhitsolutions/events{/privacy}",
      "followers_url": "https://api.github.com/users/jdhitsolutions/followers",
      "following_url": "https://api.github.com/users/jdhitsolutions/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdhitsolutions/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jdhitsolutions",
      "id": 12089920,
      "login": "jdhitsolutions",
      "node_id": "MDQ6VXNlcjEyMDg5OTIw",
      "organizations_url": "https://api.github.com/users/jdhitsolutions/orgs",
      "received_events_url": "https://api.github.com/users/jdhitsolutions/received_events",
      "repos_url": "https://api.github.com/users/jdhitsolutions/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jdhitsolutions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdhitsolutions/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jdhitsolutions"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I've been playing with this and have some proof of concept PowerShell functions.  https://jdhitsolutions.com/blog/powershell/8541/getting-ciminstance-by-path/\n\n<blockquote><img src=\"https://jdhitsolutions.com/blog/wp-content/uploads/2021/08/wmipath-1024x231.png\" width=\"48\" align=\"right\"><div><img src=\"https://jdhitsolutions.com/blog/wp-content/uploads/2015/03/faveicon-551a9375v1_site_icon-256x256.png\" height=\"14\"> The Lonely Administrator</div><div><strong><a href=\"https://jdhitsolutions.com/blog/powershell/8541/getting-ciminstance-by-path/\">Getting CIMInstance by Path • The Lonely Administrator</a></strong></div><div>Here's how I use CIM to get WMI objects by their path in PowerShell. We can use [wmi] in Windows PowerShell but what about PowerShell 7?</div></blockquote>",
    "created_at": "2021-08-20T16:35:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-902816417",
    "id": 902816417,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "IC_kwDOAvT7bc41z-Kh",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/902816417/reactions"
    },
    "updated_at": "2021-08-20T16:35:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/902816417",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/12089920?v=4",
      "events_url": "https://api.github.com/users/jdhitsolutions/events{/privacy}",
      "followers_url": "https://api.github.com/users/jdhitsolutions/followers",
      "following_url": "https://api.github.com/users/jdhitsolutions/following{/other_user}",
      "gists_url": "https://api.github.com/users/jdhitsolutions/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jdhitsolutions",
      "id": 12089920,
      "login": "jdhitsolutions",
      "node_id": "MDQ6VXNlcjEyMDg5OTIw",
      "organizations_url": "https://api.github.com/users/jdhitsolutions/orgs",
      "received_events_url": "https://api.github.com/users/jdhitsolutions/received_events",
      "repos_url": "https://api.github.com/users/jdhitsolutions/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jdhitsolutions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jdhitsolutions/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jdhitsolutions"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "The Cmdlets Working Group has reviewed this issue and has decided to close it as \"by design\"\r\n\r\nThe underlying problem is that the CIM cmdlets are built on top of  the Microsoft.Management.Infrastructure APIs which don't support this. \r\nWhile  Microsoft.Management.Infrastructure APIs don't support it, it would make things worse to have a -Path parameter that splits the path, because that creates the expectation this would work. \r\nAnd if you can't use the path it doesn't make a lot of sense to add it to the returned objects. \r\n\r\nIf those APIs change we probably should revisit it, but for now, we've accepted their limitations so it is by design",
    "created_at": "2022-03-02T17:16:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-1057177504",
    "id": 1057177504,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "IC_kwDOAvT7bc4_Az-g",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1057177504/reactions"
    },
    "updated_at": "2022-03-02T17:16:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1057177504",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10214008?v=4",
      "events_url": "https://api.github.com/users/JamesWTruher/events{/privacy}",
      "followers_url": "https://api.github.com/users/JamesWTruher/followers",
      "following_url": "https://api.github.com/users/JamesWTruher/following{/other_user}",
      "gists_url": "https://api.github.com/users/JamesWTruher/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JamesWTruher",
      "id": 10214008,
      "login": "JamesWTruher",
      "node_id": "MDQ6VXNlcjEwMjE0MDA4",
      "organizations_url": "https://api.github.com/users/JamesWTruher/orgs",
      "received_events_url": "https://api.github.com/users/JamesWTruher/received_events",
      "repos_url": "https://api.github.com/users/JamesWTruher/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JamesWTruher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JamesWTruher/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JamesWTruher"
    }
  },
  {
    "author_association": "NONE",
    "body": "@JamesWTruher, @jdhitsolutions, @SteveL-MSFT:\r\n\r\n> While Microsoft.Management.Infrastructure APIs don't support it, it would make things worse to have a -Path parameter that splits the path, because that creates the expectation this would work.\r\n\r\nThe expectation that it will work is indeed correct and already exists. You won't create it. There's nothing wrong with reinforcing it though since it is justified.\r\n\r\n> And if you can't use the path it doesn't make a lot of sense to add it to the returned objects.\r\n\r\nPerhaps you're right that it doesn't make a lot of sense to _add_ it to returned objects, but it is already \"added\" to returned objects.\r\nSo maybe it's the other way around? Since it is in fact, in the actual reality we live in, there in returned objects, and has use cases that can't be done in any other way (create new instance, get all instances and filter, etc.), maybe it should be added?\r\n\r\nI don't see how the Working Group addressed the points I raised earlier:\r\n\r\n> I think it would be much preferable to support instance paths since:\r\n> \r\n> 1. There's already code that uses them and depends on them. Writing once inside `Get-CimInstance`'s the code the parses the string and creates the properties is preferable to forcing every user who migrates VBS code to PS to do this.\r\n> 2. WMI objects themselves return the path in the [`__Path` system property](https://docs.microsoft.com/en-us/windows/win32/wmisdk/wmi-system-properties#:~:text=__path).\r\n> \r\n> These two facts combined make it very useful to support getting an object by an instance path (e.g. because you save an object's \"identity\" via it's path, and try to get it at a later time) rather than via creating a \"search instance\".\r\n\r\n\r\n",
    "created_at": "2022-03-02T22:04:16Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-1057441166",
    "id": 1057441166,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "IC_kwDOAvT7bc4_B0WO",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1057441166/reactions"
    },
    "updated_at": "2022-03-02T22:04:16Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1057441166",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10606081?v=4",
      "events_url": "https://api.github.com/users/conioh/events{/privacy}",
      "followers_url": "https://api.github.com/users/conioh/followers",
      "following_url": "https://api.github.com/users/conioh/following{/other_user}",
      "gists_url": "https://api.github.com/users/conioh/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/conioh",
      "id": 10606081,
      "login": "conioh",
      "node_id": "MDQ6VXNlcjEwNjA2MDgx",
      "organizations_url": "https://api.github.com/users/conioh/orgs",
      "received_events_url": "https://api.github.com/users/conioh/received_events",
      "repos_url": "https://api.github.com/users/conioh/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/conioh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conioh/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/conioh"
    }
  },
  {
    "author_association": "NONE",
    "body": "This issue has been marked as by-design and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
    "created_at": "2022-03-04T09:00:39Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15247#issuecomment-1058969175",
    "id": 1058969175,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15247",
    "node_id": "IC_kwDOAvT7bc4_HpZX",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1058969175/reactions"
    },
    "updated_at": "2022-03-04T09:00:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1058969175",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/in/26612?v=4",
      "events_url": "https://api.github.com/users/msftbot%5Bbot%5D/events{/privacy}",
      "followers_url": "https://api.github.com/users/msftbot%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/msftbot%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/msftbot%5Bbot%5D/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apps/msftbot",
      "id": 48340428,
      "login": "msftbot[bot]",
      "node_id": "MDM6Qm90NDgzNDA0Mjg=",
      "organizations_url": "https://api.github.com/users/msftbot%5Bbot%5D/orgs",
      "received_events_url": "https://api.github.com/users/msftbot%5Bbot%5D/received_events",
      "repos_url": "https://api.github.com/users/msftbot%5Bbot%5D/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/msftbot%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msftbot%5Bbot%5D/subscriptions",
      "type": "Bot",
      "url": "https://api.github.com/users/msftbot%5Bbot%5D"
    }
  }
]
