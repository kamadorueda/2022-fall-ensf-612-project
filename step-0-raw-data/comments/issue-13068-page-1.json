[
  {
    "author_association": "NONE",
    "body": "I like the idea and find it useful, but think it would be far more useful (I'm thinking specifically in the case of a DSL) if I can get a single string expansion. So if I've built a cmd.exe compatible string in my PS, I have a way to string verbatim to cmd.exe. Perhaps\r\n\r\n`&n -command $string\r\n`\r\n\r\nThat would potentially also let me specify my interpreter:\r\n\r\n`&n -shell /bin/sh -command $string\r\n`\r\nor\r\n`&n -shell cmd.exe -command $string\r\n`\r\n\r\nin terms of the name/operator, is \"&!\" in use? That has similarity to shbang( \"#!\" ).",
    "created_at": "2020-06-30T21:24:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652053672",
    "id": 652053672,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjA1MzY3Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652053672/reactions"
    },
    "updated_at": "2020-06-30T21:24:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652053672",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15186143?v=4",
      "events_url": "https://api.github.com/users/essentialexch/events{/privacy}",
      "followers_url": "https://api.github.com/users/essentialexch/followers",
      "following_url": "https://api.github.com/users/essentialexch/following{/other_user}",
      "gists_url": "https://api.github.com/users/essentialexch/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/essentialexch",
      "id": 15186143,
      "login": "essentialexch",
      "node_id": "MDQ6VXNlcjE1MTg2MTQz",
      "organizations_url": "https://api.github.com/users/essentialexch/orgs",
      "received_events_url": "https://api.github.com/users/essentialexch/received_events",
      "repos_url": "https://api.github.com/users/essentialexch/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/essentialexch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/essentialexch/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/essentialexch"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "`$!` is a good suggestion!\r\n\r\nThe shell can be specified by simply specifying it as the command:\r\n\r\n`&! /bin/sh -c blah`\r\n\r\nThe `$var` expansion creates a problem in that `$` may need to be literal to be passed to the native command/shell.  One of the problems this tries to avoid is when people need to figure out how to properly escape everything.  If you require variable expansion, you could always do:\r\n\r\n```powershell\r\n$mycommand = \"/bin/sh ls\"\r\nInvoke-Expression \"&! $mycommand\"\r\n```\r\n\r\nHowever, in cases where you want to mix PowerShell with the native command, it's probably best to use the current syntax and just be aware of what needs to be escaped properly as I would consider that advanced usage.",
    "created_at": "2020-06-30T21:31:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652057000",
    "id": 652057000,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjA1NzAwMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652057000/reactions"
    },
    "updated_at": "2020-06-30T21:31:50Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652057000",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "NONE",
    "body": "> ```powershell\r\n> $mycommand = \"/bin/sh ls\"\r\n> Invoke-Expression \"&! $mycommand\"\r\n> ```\r\n\r\nI can't believe you just suggested iex. :-)",
    "created_at": "2020-06-30T21:35:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652058525",
    "id": 652058525,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjA1ODUyNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 2,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652058525/reactions"
    },
    "updated_at": "2020-06-30T21:35:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652058525",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15186143?v=4",
      "events_url": "https://api.github.com/users/essentialexch/events{/privacy}",
      "followers_url": "https://api.github.com/users/essentialexch/followers",
      "following_url": "https://api.github.com/users/essentialexch/following{/other_user}",
      "gists_url": "https://api.github.com/users/essentialexch/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/essentialexch",
      "id": 15186143,
      "login": "essentialexch",
      "node_id": "MDQ6VXNlcjE1MTg2MTQz",
      "organizations_url": "https://api.github.com/users/essentialexch/orgs",
      "received_events_url": "https://api.github.com/users/essentialexch/received_events",
      "repos_url": "https://api.github.com/users/essentialexch/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/essentialexch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/essentialexch/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/essentialexch"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@essentialexch there are a few times where it's appropriate :)\r\n\r\nNote that in the example, expectation is that the user properly validated the contents of `$mycommand` before executing!",
    "created_at": "2020-06-30T21:36:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652058847",
    "id": 652058847,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjA1ODg0Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 3,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652058847/reactions"
    },
    "updated_at": "2020-06-30T21:36:44Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652058847",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Great writeup and a solution for problems like the one you described are definitely needed.\r\nI myself didn't know about `--%` and don't remember ever seeing it unfortunately. Therefore the proposed `&n` operator might suffer from similar discoverability problems and it doesn't look natural to me to combine a symbol with a character (and it reminds me of %f in C printf statements). Since it's a breaking change anyway Is there a reason why it couldn't be for example `&&`?\r\nMaybe it would me more intuitive to use something like brackets (or double braces?) to mark the area that you want to execute. Example: `& [ wsl ls ] | less`",
    "created_at": "2020-06-30T21:44:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652062658",
    "id": 652062658,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjA2MjY1OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652062658/reactions"
    },
    "updated_at": "2020-06-30T21:44:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652062658",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/9250262?v=4",
      "events_url": "https://api.github.com/users/bergmeister/events{/privacy}",
      "followers_url": "https://api.github.com/users/bergmeister/followers",
      "following_url": "https://api.github.com/users/bergmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/bergmeister/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/bergmeister",
      "id": 9250262,
      "login": "bergmeister",
      "node_id": "MDQ6VXNlcjkyNTAyNjI=",
      "organizations_url": "https://api.github.com/users/bergmeister/orgs",
      "received_events_url": "https://api.github.com/users/bergmeister/received_events",
      "repos_url": "https://api.github.com/users/bergmeister/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/bergmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bergmeister/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/bergmeister"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I agree `&!` is the more intuitive way to go for those coming from other shells, however in super-duper-linter I am usually running native commands by building a parameter array and then splatting it to the command.\r\n```\r\n$command = 'linter'\r\n$myargs = @(\r\n    '-config'\r\n    'linterconfig.path'\r\n)\r\nif ($Test) {$myargs += 'test'}\r\n& $command @myargs\r\n```\r\n\r\nSo this is the best way in case of conditional and whatnot for me",
    "created_at": "2020-06-30T21:48:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652064173",
    "id": 652064173,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjA2NDE3Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652064173/reactions"
    },
    "updated_at": "2020-06-30T21:48:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652064173",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15258962?v=4",
      "events_url": "https://api.github.com/users/JustinGrote/events{/privacy}",
      "followers_url": "https://api.github.com/users/JustinGrote/followers",
      "following_url": "https://api.github.com/users/JustinGrote/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinGrote/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JustinGrote",
      "id": 15258962,
      "login": "JustinGrote",
      "node_id": "MDQ6VXNlcjE1MjU4OTYy",
      "organizations_url": "https://api.github.com/users/JustinGrote/orgs",
      "received_events_url": "https://api.github.com/users/JustinGrote/received_events",
      "repos_url": "https://api.github.com/users/JustinGrote/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JustinGrote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinGrote/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JustinGrote"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@bergmeister I originally thought of `&&` as visually it's similar to `&` which many people know today.  However, `&&` being a pipeline chain operator may cause confusion about what it is supposed to do.  I like the `&!` suggestion currently.",
    "created_at": "2020-06-30T21:52:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652065807",
    "id": 652065807,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjA2NTgwNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652065807/reactions"
    },
    "updated_at": "2020-06-30T21:52:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652065807",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@JustinGrote, there's no reason to not continue to use that.  the `&!` syntax is really for cases where you just want to cut and paste or have some args that conflict with PowerShell syntax and don't want to or don't know how to escape properly",
    "created_at": "2020-06-30T21:54:29Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652066473",
    "id": 652066473,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjA2NjQ3Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 3,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652066473/reactions"
    },
    "updated_at": "2020-06-30T21:54:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652066473",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Oh man, I remember having discussions with Bruce and Jason about this a decade ago. My gut feeling is that inventing another operator seems unnecessary here. I know that some people on this thread have not heard about `--%` but I'll wager than there are more than you think. What's wrong with:\r\n\r\n```powershell\r\n# run ls in wsl, return results to powershell, then pipe to wsl again, to grep.\r\n& wsl ls | wsl grep -i \"foo\"  \r\n\r\n#  the entire pipeline right of wsl will run in wsl. \r\n& --% wsl ls | grep -i \"foo\"\r\n```\r\n\r\nWhy hasn't anyone suggested this? It's logically consistent with usage of `--%` elsewhere to say \"everything after this is to be passed without special powershell treatment.\"\r\n",
    "created_at": "2020-06-30T23:50:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652106267",
    "id": 652106267,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjEwNjI2Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652106267/reactions"
    },
    "updated_at": "2020-07-01T00:31:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652106267",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1844001?v=4",
      "events_url": "https://api.github.com/users/oising/events{/privacy}",
      "followers_url": "https://api.github.com/users/oising/followers",
      "following_url": "https://api.github.com/users/oising/following{/other_user}",
      "gists_url": "https://api.github.com/users/oising/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/oising",
      "id": 1844001,
      "login": "oising",
      "node_id": "MDQ6VXNlcjE4NDQwMDE=",
      "organizations_url": "https://api.github.com/users/oising/orgs",
      "received_events_url": "https://api.github.com/users/oising/received_events",
      "repos_url": "https://api.github.com/users/oising/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/oising/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oising/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/oising"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@oising well for one, that command doesn't work because you have to preface it with the command you want to run, are you suggesting adding the functionality?\r\n![image](https://user-images.githubusercontent.com/15258962/86188362-3fe4cd00-baf3-11ea-966f-1c34ad5909c9.png)\r\n\r\nThis kinda does what is expected:\r\n`function Invoke-LiteralCommand ($command) {Invoke-Expression \"& $command --% $args\"}`\r\n\r\n`Invoke-LiteralCommand ping -W 200 www.google.com | grep icmp`",
    "created_at": "2020-07-01T00:04:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652110219",
    "id": 652110219,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjExMDIxOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652110219/reactions"
    },
    "updated_at": "2020-07-01T00:04:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652110219",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15258962?v=4",
      "events_url": "https://api.github.com/users/JustinGrote/events{/privacy}",
      "followers_url": "https://api.github.com/users/JustinGrote/followers",
      "following_url": "https://api.github.com/users/JustinGrote/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinGrote/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JustinGrote",
      "id": 15258962,
      "login": "JustinGrote",
      "node_id": "MDQ6VXNlcjE1MjU4OTYy",
      "organizations_url": "https://api.github.com/users/JustinGrote/orgs",
      "received_events_url": "https://api.github.com/users/JustinGrote/received_events",
      "repos_url": "https://api.github.com/users/JustinGrote/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JustinGrote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinGrote/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JustinGrote"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@JustinGrote  Yes, I know it doesn't work now :) I am suggesting that _instead_ of `&n` or `&!` or whatever else is being talked about. It just makes more sense to me: `&` is call and `--%` is suppress powershell parsing; together they are coherent and more discoverable than adding something new. I don't like the idea of having a \"call\" and a \"call native\" operator. \r\n\r\nI've expanded my example to show the differences.",
    "created_at": "2020-07-01T00:25:48Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652116197",
    "id": 652116197,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjExNjE5Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652116197/reactions"
    },
    "updated_at": "2020-07-01T00:30:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652116197",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1844001?v=4",
      "events_url": "https://api.github.com/users/oising/events{/privacy}",
      "followers_url": "https://api.github.com/users/oising/followers",
      "following_url": "https://api.github.com/users/oising/following{/other_user}",
      "gists_url": "https://api.github.com/users/oising/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/oising",
      "id": 1844001,
      "login": "oising",
      "node_id": "MDQ6VXNlcjE4NDQwMDE=",
      "organizations_url": "https://api.github.com/users/oising/orgs",
      "received_events_url": "https://api.github.com/users/oising/received_events",
      "repos_url": "https://api.github.com/users/oising/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/oising/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oising/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/oising"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@oising I'd be cool with that over a new operator, though that is a lot of obtuse typing for \"new powershell user who knows bash\" which is what I assume this would be meant for.",
    "created_at": "2020-07-01T01:03:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652126267",
    "id": 652126267,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjEyNjI2Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652126267/reactions"
    },
    "updated_at": "2020-07-01T01:03:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652126267",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15258962?v=4",
      "events_url": "https://api.github.com/users/JustinGrote/events{/privacy}",
      "followers_url": "https://api.github.com/users/JustinGrote/followers",
      "following_url": "https://api.github.com/users/JustinGrote/following{/other_user}",
      "gists_url": "https://api.github.com/users/JustinGrote/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JustinGrote",
      "id": 15258962,
      "login": "JustinGrote",
      "node_id": "MDQ6VXNlcjE1MjU4OTYy",
      "organizations_url": "https://api.github.com/users/JustinGrote/orgs",
      "received_events_url": "https://api.github.com/users/JustinGrote/received_events",
      "repos_url": "https://api.github.com/users/JustinGrote/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JustinGrote/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JustinGrote/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JustinGrote"
    }
  },
  {
    "author_association": "NONE",
    "body": "> @oising I'd be cool with that over a new operator, though that is a lot of obtuse typing for \"new powershell user who knows bash\" which is what I assume this would be meant for.\r\n\r\nNot at all. It's for the PowerShell user that doesn't understand the complex quoting rules between PowerShell/cmd.exe/bash. As the issue title says \"call native\", for calling native executables.",
    "created_at": "2020-07-01T01:08:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652127669",
    "id": 652127669,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjEyNzY2OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652127669/reactions"
    },
    "updated_at": "2020-07-01T01:08:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652127669",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15186143?v=4",
      "events_url": "https://api.github.com/users/essentialexch/events{/privacy}",
      "followers_url": "https://api.github.com/users/essentialexch/followers",
      "following_url": "https://api.github.com/users/essentialexch/following{/other_user}",
      "gists_url": "https://api.github.com/users/essentialexch/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/essentialexch",
      "id": 15186143,
      "login": "essentialexch",
      "node_id": "MDQ6VXNlcjE1MTg2MTQz",
      "organizations_url": "https://api.github.com/users/essentialexch/orgs",
      "received_events_url": "https://api.github.com/users/essentialexch/received_events",
      "repos_url": "https://api.github.com/users/essentialexch/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/essentialexch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/essentialexch/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/essentialexch"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> > @oising I'd be cool with that over a new operator, though that is a lot of obtuse typing for \"new powershell user who knows bash\" which is what I assume this would be meant for.\r\n> \r\n> Not at all. It's for the PowerShell user that doesn't understand the complex quoting rules between PowerShell/cmd.exe/bash. As the issue title says \"call native\", for calling native executables.\r\n\r\nTrue, or for those of us who'd rather not have to think about them at all.",
    "created_at": "2020-07-01T01:16:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652130077",
    "id": 652130077,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjEzMDA3Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652130077/reactions"
    },
    "updated_at": "2020-07-01T01:16:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652130077",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1844001?v=4",
      "events_url": "https://api.github.com/users/oising/events{/privacy}",
      "followers_url": "https://api.github.com/users/oising/followers",
      "following_url": "https://api.github.com/users/oising/following{/other_user}",
      "gists_url": "https://api.github.com/users/oising/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/oising",
      "id": 1844001,
      "login": "oising",
      "node_id": "MDQ6VXNlcjE4NDQwMDE=",
      "organizations_url": "https://api.github.com/users/oising/orgs",
      "received_events_url": "https://api.github.com/users/oising/received_events",
      "repos_url": "https://api.github.com/users/oising/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/oising/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oising/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/oising"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Yeah I'm with @oising. This concept exists, it's just woefully insufficient. If we're going to implement something completely new we're better off deprecating/removing the old syntax. \r\n\r\nI feel oftentimes these ideas are voiced, not enough weight is given to their actual target demographic. If users are _already_ struggling to find the existing methods, **and** finding the existing methods lacking when they are found, it's a call to a) improve documentation, and b) improve the actual functionality of the existing operators.\r\n\r\nInstead we get a weird option c) which is supposed to somehow address the past issues whilst introducing yet _another_ operator which is relying on documentation which is **already** not accessible enough for users to find it naturally.\r\n\r\nI agree that error messages and/or the suggestions system should be used to help introduce these concepts. I don't agree that we need a third? fourth? fifth? (I've literally lost count, someone help me out here) way to invoke commands. The existing methods are insufficient -- that means we should _improve_ them, not leave them behind like cobwebs to confuse users further when they start digging into them.\r\n\r\nThe first question I tend to get when people realise there's 5 ways of doing something is \"why are there 2-3 ways that literally do the same thing but don't work as well\", and my answer is as it always has been -- the PS team is _way_ too focused on making sure everything from the past decade++ still works, when trying to add/improve functionality. Here we see it again, we have existing but insufficient implementations that need revision and improvement, and the solution proposed is to further muddy the pool by adding another potentially incomplete implementation.\r\n\r\nWe should be finishing what we start, not starting another implementation all over again, IMO.",
    "created_at": "2020-07-01T01:48:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652138851",
    "id": 652138851,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjEzODg1MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 7,
      "-1": 1,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 8,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652138851/reactions"
    },
    "updated_at": "2020-07-01T01:48:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652138851",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I believe if we are going to be using & for more than a few Unique use cases we should start thinking about making this considered a verb or look at standardization across the language. \r\n\r\nThe last thing I would want is confusion about what & is meant to do. In its entirety.\r\n",
    "created_at": "2020-07-01T01:50:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652139343",
    "id": 652139343,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjEzOTM0Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652139343/reactions"
    },
    "updated_at": "2020-07-01T01:50:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652139343",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/28855373?v=4",
      "events_url": "https://api.github.com/users/romero126/events{/privacy}",
      "followers_url": "https://api.github.com/users/romero126/followers",
      "following_url": "https://api.github.com/users/romero126/following{/other_user}",
      "gists_url": "https://api.github.com/users/romero126/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/romero126",
      "id": 28855373,
      "login": "romero126",
      "node_id": "MDQ6VXNlcjI4ODU1Mzcz",
      "organizations_url": "https://api.github.com/users/romero126/orgs",
      "received_events_url": "https://api.github.com/users/romero126/received_events",
      "repos_url": "https://api.github.com/users/romero126/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/romero126/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romero126/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/romero126"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I'd consider 3 scenarios:\r\n1. Full expansion - current PowerShell behavior.\r\n2. Full literal - that is proposed in the OP.\r\n3. Partial expansion - `wsl ls $path` still works\r\n\r\nI wonder where @mklement0 comments? :-)",
    "created_at": "2020-07-01T05:37:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652202432",
    "id": 652202432,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjIwMjQzMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652202432/reactions"
    },
    "updated_at": "2020-07-01T05:37:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652202432",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "NONE",
    "body": "At start of reading this thread I thought; great idea! But after reading comments it started me thinking. I have always found the & command  'not PS standards worthy\" and something reminding me of 'PERL days' (ugh). Introducing another non-standard PS command (not being noun-verb) will not help. Certainly not those less savvy at PS.\r\n\r\nI did not know about the --% parameter either. I use the same principle as @JustinGrote as a solution. \r\n\r\nCutting/pasting commands into PS shell has never been my main 'thing'.\r\nWould we not be better of replacing those native commands with PowerShell one's?\r\nMake path for replacing cmd.exe entirely...\r\n\r\nI vote for exploring improving existing commands. And - indeed - improving some documentation on --% and & usage\r\n\r\n@iSazonov the use case @SteveL-MSFT is proposing is the 'cut paste' scenario. Partial expansion would make things much more difficult I think (on the AST side of things)",
    "created_at": "2020-07-01T05:37:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652202653",
    "id": 652202653,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjIwMjY1Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652202653/reactions"
    },
    "updated_at": "2020-07-01T05:52:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652202653",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/13161629?v=4",
      "events_url": "https://api.github.com/users/peppekerstens/events{/privacy}",
      "followers_url": "https://api.github.com/users/peppekerstens/followers",
      "following_url": "https://api.github.com/users/peppekerstens/following{/other_user}",
      "gists_url": "https://api.github.com/users/peppekerstens/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/peppekerstens",
      "id": 13161629,
      "login": "peppekerstens",
      "node_id": "MDQ6VXNlcjEzMTYxNjI5",
      "organizations_url": "https://api.github.com/users/peppekerstens/orgs",
      "received_events_url": "https://api.github.com/users/peppekerstens/received_events",
      "repos_url": "https://api.github.com/users/peppekerstens/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/peppekerstens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/peppekerstens/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/peppekerstens"
    }
  },
  {
    "author_association": "NONE",
    "body": "Immediately though of “#!” and then “!#”. Liking the “&!”.",
    "created_at": "2020-07-01T06:46:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652226495",
    "id": 652226495,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjIyNjQ5NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652226495/reactions"
    },
    "updated_at": "2020-07-01T06:46:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652226495",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/25411814?v=4",
      "events_url": "https://api.github.com/users/SP3269/events{/privacy}",
      "followers_url": "https://api.github.com/users/SP3269/followers",
      "following_url": "https://api.github.com/users/SP3269/following{/other_user}",
      "gists_url": "https://api.github.com/users/SP3269/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SP3269",
      "id": 25411814,
      "login": "SP3269",
      "node_id": "MDQ6VXNlcjI1NDExODE0",
      "organizations_url": "https://api.github.com/users/SP3269/orgs",
      "received_events_url": "https://api.github.com/users/SP3269/received_events",
      "repos_url": "https://api.github.com/users/SP3269/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SP3269/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SP3269/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SP3269"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "We can probably look at adding token accelerators to function calls in the tokenizer. This would allow for the use of the following.\r\n\r\nIex -l \r\nOr Invoke-Expression -literal that stops parsing before passing up.\r\n\r\nI feel adding more unique tokens at the parsing level makes the barrier to entry go up and discoverability for this feature goes down.\r\n\r\nGet-Help & for example doesn't show up with anything.  And we have to look for it in about_Operators.\r\n\r\nHowever there are unique cases for the call_operator that doesn't get documented.\r\n& modulename { command }\r\nallows you to scope into a module. And I am certain there are more. But the discoverability on it is so low that it becomes difficult to find within the native documentation. And the community knows about it only through JSnover and a talk he gave showing us cool things.\r\n\r\nI believe whatever is decided on it needs to fully take into account how discoverable this \"feature\" is, from a new user perspective and keep in mind that newer users will try to use this on Powershell 5 not without knowing its new to pwsh core if the discoverability is too low.\r\n \r\n\r\n\r\n",
    "created_at": "2020-07-01T08:56:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652289130",
    "id": 652289130,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjI4OTEzMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652289130/reactions"
    },
    "updated_at": "2020-07-01T08:56:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652289130",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/28855373?v=4",
      "events_url": "https://api.github.com/users/romero126/events{/privacy}",
      "followers_url": "https://api.github.com/users/romero126/followers",
      "following_url": "https://api.github.com/users/romero126/following{/other_user}",
      "gists_url": "https://api.github.com/users/romero126/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/romero126",
      "id": 28855373,
      "login": "romero126",
      "node_id": "MDQ6VXNlcjI4ODU1Mzcz",
      "organizations_url": "https://api.github.com/users/romero126/orgs",
      "received_events_url": "https://api.github.com/users/romero126/received_events",
      "repos_url": "https://api.github.com/users/romero126/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/romero126/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romero126/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/romero126"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I'd love us to change the existing behaviour, but changing such a fundamental API in PowerShell would just break so many things. We could possibly consider migrating over with a configuration.\r\n\r\nBreaking things more directly might once have been possible before PS 6 went GA, but honestly, even then it would have been a serious threat to backward compatibility (not unlike Python's `print()` function).\r\n\r\nIn terms of passing arguments to subprocesses, I think both synchronous invocation and `Start-Process` invocation already have storied issues discussing an overhaul, and my feeling is that both need investing in at once for consistency. Start-Process in particular needs to update its support of passing an array of arguments.\r\n\r\nFor synchronous invocation with cmdline arg passing, I see four kinds of argument passing possible:\r\n\r\n- Current behaviour, which would become legacy, which is subject to `CommandLineToArgvW` on Windows and has unexpected results\r\n- Default behaviour, that should pass arguments by their expression value but apply the usual bareword token rules, so that things like `>` and `|` separate commands. In this mode, the value a subprocess takes from the expression should be what is displayed by `Write-Host $val`\r\n- Verbatim behaviour, where all tokens are interpreted as bareword strings until the escape token is seen. This is what `--%` is supposed to do today, but ideally would have only one end token that can be embedded on the same line like `--% ... %--`\r\n- Bash readline behaviour, where an alternate, sh-oriented escaping logic is applied, allowing simpler compatibility\r\n\r\nI think the first behaviour should be slowly phased out by introducing the second as an experimental feature and then swapping them.\r\n\r\nThe second and third behaviours could have their own sigils like `&!` and `&#` or perhaps `+% ... -%` or something. But for the verbatim mode, I think an important facet would be simplifying the escape token so that more tokens are taken verbatim. Similar to a heredoc.",
    "created_at": "2020-07-01T22:15:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652672924",
    "id": 652672924,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MjY3MjkyNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652672924/reactions"
    },
    "updated_at": "2020-07-01T22:19:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652672924",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "If the request is only to address copy-paste scenario like \"Any text content after this operator will call into the \"default shell\" of the OS to execute.\" why do not say this explicitly by `shell`? \r\n```powerhell\r\nPS> shell wsl ls | less\r\nPS> (shell wsl ls *.txt) | Select-String Hello\r\n\r\nIt is more discoverable and readable than cryptic operators in Forth/APL style.",
    "created_at": "2020-07-02T05:04:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652783476",
    "id": 652783476,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1Mjc4MzQ3Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652783476/reactions"
    },
    "updated_at": "2020-07-02T05:04:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/652783476",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "NONE",
    "body": "I absolutely don't see how this would resolve #1995: See https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-653174261\r\n\r\nAlso, the problem with WSL is a problem of the behavior of `wsl.exe` (see https://github.com/PowerShell/PowerShell/issues/12975#issuecomment-650353021) not of powershell.\r\n(Ok, there is a problem with powershell, but that's #1995)\r\n\r\nOh, and isn't this almost a duplicate of https://github.com/PowerShell/PowerShell/issues/12975 ? Because I can essentially mostly repeat, what I mentioned there:\r\n\r\n<blockquote>\r\n@bitcrazed \r\n<blockquote>The problem is that the lack of an ability to delimit a portion of a command-line to be passed varbatim to the receiving command/script is something that trips users up all the time.</blockquote>\r\n\r\nWhat do you mean by \"portion of a command-line to be passed varbatim\"?\r\n\r\nDo you mean \r\n\r\n1. pass some sequence of characters verbatim to the called executable, such that the called executable has this sequence of characters in one element of its argument array (e.g. those characters are then available in `argv[1]` in [main](https://docs.microsoft.com/en-us/cpp/cpp/main-function-command-line-args?view=vs-2019#command-line-arguments))\r\n\r\nOr do you mean\r\n\r\n2. insert some sequence of characters verbatim into the [`lpCommandLine` parameter of `CreateProcess`](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessw#parameters)\r\n\r\n---\r\n\r\nIf you mean (1.), then it essentially already works:\r\n```\r\nPS /home/User> /bin/echo 'cd / && ls . | cowsay'\r\ncd / && ls . | cowsay\r\nPS /home/User>\r\n```\r\n(Except for the problem of embedded quotes as discussed in https://github.com/PowerShell/PowerShell/issues/1995)\r\n\r\nOne could argue, that adding a one-line-here-string would improve some usecases, but I think, that's not really the point of this issue.\r\n\r\nAs this does already work more or less, I assume, you meant (2.)\r\n\r\n---\r\n\r\nIf you mean (2.), then let me state my opinion on that in a somewhat dramatic way:\r\n\r\nPlease please please don't add special syntax for this. This is basically what `--%` tried to do, which also should have never ever been implemented.\r\n\r\nWhy am I so strongly against this?\r\n\r\n1. It is a Windows only problem, so adding syntax would mean that powershell on Windows has different syntax than on Linux. (Or the syntax would be supported but is totally meaningless, as it is currently the case for `--%`)\r\n\r\n2. If the main commandline shell on Windows published by Microsoft adds a first-class feature (via special syntax opposed to via a cmdlet) to call executables that don't follow the typical [commandline parsing rules](https://docs.microsoft.com/en-us/cpp/cpp/main-function-command-line-args?view=vs-2019#parsing-c-command-line-arguments) (if the tool follows the typical rules, you don't need (2.), you can usually better use (1.)), then that encourages authors of command line tool, to not follow these rules, which only worsens the [\"Windows command line anarchy\"](https://stackoverflow.com/a/4094897/2770331). The less people follow the typical rules, the harder it is to programmaticly call external executables or generally write cross platform code, so I definitely think, that program authors should be encouraged to follow those typical rules.\r\n\r\n3. I strongly doubt, that this is a common use-case \r\n   >And this isn't just an issue that affects WSL: It also affects Windows Terminal's wt command-line invocations, and many other tools.\r\n   \r\n   Could you add some examples, where such problems occur? Because in case of WSL, I'd say that WSL's parsing of the commandline is simply [broken](https://github.com/Microsoft/WSL/issues/1746) (issue was about `bash.exe` but situation is by default not better with `wsl.exe`) in the default case - I'd consider every tool, that doesn't follow the typical [commandline parsing rules](https://docs.microsoft.com/en-us/cpp/cpp/main-function-command-line-args?view=vs-2019#parsing-c-command-line-arguments) broken, but WSL's default behavior is IMHO not even properly documented...\r\n\r\n   I said the \"default\" behavior of `wsl.exe` is broken - while writing this response, I noticed, that `wsl.exe` actually seems to behave as expected, when using `-e`:\r\n```\r\nPS C:\\> wsl -e bash -c 'cd / && ls . | cowsay'\r\n _______________________________________\r\n/ acct bin boot cache cygdrive data dev \\\r\n| etc home init lib lib64 lost+found    |\r\n| media mnt opt proc root run sbin snap |\r\n\\ srv sys tmp usr var                   /\r\n ---------------------------------------\r\n        \\   ^__^\r\n         \\  (oo)\\_______\r\n            (__)\\       )\\/\\\r\n                ||----w |\r\n                ||     ||\r\nPS C:\\>\r\n```\r\nSo the only thing missing for this explicit usecase is IMO a parameter to `wsl.exe` to call the default shell with the commandline arguments parsed as in any other normal exe.\r\n</blockquote>\r\n\r\nThe only thing regarding \"portion of a command-line to be passed varbatim to the receiving command/script\", that would be improved with this operator would be meaning (2.) above, and as mentioned, I think developing in that direction is bad.\r\n\r\nIf all you want to do is a shortcut do copy&paste existing command lines, why don't you add a cmdlet (e.g. `Invoke-Shell`, that calls `bash -c` on linux and `cmd /c` on windows?\r\nThen you could just do\r\n```\r\nInvoke-Shell @'\r\nwhatever existing comandline containg '\"quotes\"' or whatnot\r\n'@\r\n```\r\nIf it must be one line, then add one-line-here-string syntax, but please don't implement a special operator, that can't be properly found and just complicates everything.\r\n\r\nAnd please don't abandon #1995 for this!",
    "created_at": "2020-07-02T19:35:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-653186385",
    "id": 653186385,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MzE4NjM4NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 2,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653186385/reactions"
    },
    "updated_at": "2020-07-02T19:36:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653186385",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "+10 points for using the word \"sigil\".\r\n\r\nThe thing that is nice about `&!` versus `shell` is that \"shell\" is a common English word, therefore people might have an existing command named shell. (In fact, I have both a function named \"shell\" and a function named \"n\" (hence I don't like `&n`).)\r\n\r\n@oising: `& --%` is nice, except one of the express purposes of the proposed feature is to mean that `|` becomes something that is passed to the native shell; *not* something that brings you back into PowerShell parsing. And if we make the pipeline precedence different for `& --%` than for `foo $blah --% more args`, I would find that bewildering... what if you did `& $foo --% more args | blah`? Thus in my opinion, the proposed `&!` is different enough that it warrants having a different operator. (Put another way: the proposed functionality is related but *different* than combining `&` and `--%`.)\r\n\r\nThis feature is more than just for \"new PowerShell user who knows bash\" and \"user that doesn't know all the complex quoting/escaping rules\". It's also for the most expert of users, who just want to copy/paste a command from StackOverflow without having to go in and fiddle with everything. This happens to me quite a bit--a product I work on has a lot of documentation about how to do things, and the lingua franca is cmd.exe commands--so I have to go and deal with fixing the %VARIABLE_REFERENCES% etc.; it would be so much nicer to type `&! ` and then paste. In fact if this is implemented I will probably refer to it as \"the StackOverflow operator\". :D\r\n\r\n@vexx32: This isn't the \"one ring to rule them all\" call operator; just another tool in the toolbox to address a common problem. I don't think we should get rid of existing tools to make room for this one; they do different things. I understand that new users may feel overwhelmed when the toolbox has a hammer, a screwdriver, a drill, an impact drill, and a nailgun... but despite the fact that they are all for \"poking a pokey thing through one or more other things\", they are invaluable for a professional; all used in different (though related) situations.\r\n\r\n@TSlivede: I agree that #1995 is separate. But I disagree with \"It is a Windows only problem\": copying and pasting platform-specific commands from StackOverflow applies equally to any OS. (In fact, this would be very helpful for many people like me who are stronger on one platform than another--I am more proficient with Windows technologies, so when on Linux I tend to do a LOT of copying and pasting from SO.)\r\n\r\nWhether via a new operator `&!` or some `Invoke-Shell` command, I do not have such strong feelings as others... I sympathize with people complaining that the operators are hard to search for, etc. but I *really* like the terseness of `&!`.\r\n\r\n",
    "created_at": "2020-07-02T20:26:23Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-653205806",
    "id": 653205806,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MzIwNTgwNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 1,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653205806/reactions"
    },
    "updated_at": "2020-07-02T20:26:23Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653205806",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/771085?v=4",
      "events_url": "https://api.github.com/users/jazzdelightsme/events{/privacy}",
      "followers_url": "https://api.github.com/users/jazzdelightsme/followers",
      "following_url": "https://api.github.com/users/jazzdelightsme/following{/other_user}",
      "gists_url": "https://api.github.com/users/jazzdelightsme/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jazzdelightsme",
      "id": 771085,
      "login": "jazzdelightsme",
      "node_id": "MDQ6VXNlcjc3MTA4NQ==",
      "organizations_url": "https://api.github.com/users/jazzdelightsme/orgs",
      "received_events_url": "https://api.github.com/users/jazzdelightsme/received_events",
      "repos_url": "https://api.github.com/users/jazzdelightsme/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jazzdelightsme/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jazzdelightsme/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jazzdelightsme"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@jazzdelightsme this isn't \"another tool in the toolbox\" as much as it is \"another incredibly specific screwdriver attachment for a screwdriver that already has about 3-5 that are currently already _okay_ and could stand to be improved\" in my opinion.",
    "created_at": "2020-07-02T20:38:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-653210282",
    "id": 653210282,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MzIxMDI4Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653210282/reactions"
    },
    "updated_at": "2020-07-02T20:38:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653210282",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "@jazzdelightsme The \"Windows only\" part was perhaps more related to the issue where I originally posted that statement - yes OK, this is not an exact duplicate of that issue.\r\n\r\nIf #1995 is not abandoned and the feature requested here is not resolved via special Syntax but via a commandlet (or perhaps new Syntax for a one-line here string that works everywhere not just for this special case) then I am actually in favor of adding this functionality. (Or maybe not \"in favor\" but \"This is totally acceptable to me\") ",
    "created_at": "2020-07-02T20:56:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-653216773",
    "id": 653216773,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MzIxNjc3Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653216773/reactions"
    },
    "updated_at": "2020-07-02T21:02:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653216773",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "NONE",
    "body": "Another idea: If this is issue is actually about copy&pasting full commands that were intended for native shells, maybe PsReadLine could add a feature to roughly translate a command from bash or cmd style to powershell. The translation could be triggered by a special key combination or automatically if a parsing error occurs when trying to execute a command.\r\n\r\nThis would have the additional advantage of teaching users the Syntax of powershell.\r\n\r\nRegarding discoverability: PsReadLine could always display a message for a short time that the specific key combination can be used, whenever syntactically incorrect content (that would be valid after translation) is pasted.\r\n\r\nBut I could understand if this was just a bit to complex to realize.\r\n\r\n",
    "created_at": "2020-07-02T21:18:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-653224766",
    "id": 653224766,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MzIyNDc2Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653224766/reactions"
    },
    "updated_at": "2020-07-02T21:18:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653224766",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@jazzdelightsme did you talk to @joeyaiello?  I thought only he called it the `StackOverflow operator` which made me cringe even though it's very true",
    "created_at": "2020-07-02T21:31:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-653229206",
    "id": 653229206,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MzIyOTIwNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 1,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653229206/reactions"
    },
    "updated_at": "2020-07-02T21:31:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653229206",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@SteveL-MSFT No I didn't talk to anybody about this; I arrived at \"StackOverflow operator\" independently. xD",
    "created_at": "2020-07-02T22:14:43Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-653241454",
    "id": 653241454,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MzI0MTQ1NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 2,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653241454/reactions"
    },
    "updated_at": "2020-07-02T22:14:43Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653241454",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/771085?v=4",
      "events_url": "https://api.github.com/users/jazzdelightsme/events{/privacy}",
      "followers_url": "https://api.github.com/users/jazzdelightsme/followers",
      "following_url": "https://api.github.com/users/jazzdelightsme/following{/other_user}",
      "gists_url": "https://api.github.com/users/jazzdelightsme/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jazzdelightsme",
      "id": 771085,
      "login": "jazzdelightsme",
      "node_id": "MDQ6VXNlcjc3MTA4NQ==",
      "organizations_url": "https://api.github.com/users/jazzdelightsme/orgs",
      "received_events_url": "https://api.github.com/users/jazzdelightsme/received_events",
      "repos_url": "https://api.github.com/users/jazzdelightsme/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jazzdelightsme/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jazzdelightsme/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jazzdelightsme"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@jazzdelightsme \r\n\r\n> ... except one of the express purposes of the proposed feature is to mean that | becomes something that is passed to the native shell; not something that brings you back into PowerShell parsing.\r\n\r\nI'm not sure you've understood my suggestion; what you say is _precisely_ what I'm saying. Let me be more verbose with some strategically capitalized hints :D \r\n\r\n```powershell\r\n# NON-OPTIMAL SOLUTION: run \"ls\" in wsl, return results to powershell, then pipe to wsl again, to \"grep.\"\r\n& wsl ls | wsl grep -i \"foo\"  \r\n\r\n# NEW SOLUTION: the entire pipeline/string, INCLUDING THE PIPE SYMBOL, right of wsl will be executed in wsl. \r\n& --% wsl ls | grep -i \"foo\"\r\n\r\n# NEW SOLUTION: the entire pipeline AS ABOVE is sent to WSL, then the results are returned to powershell\r\n# and piped, in powershell, to foreach-object\r\n(& --% wsl ls | grep -i \"foo\") | % { \"match {0}\" -f $_ }\r\n\r\n# NEW SOLUTION: allow placing --% beyond first argument\r\n# pass everything right of --% to the command in $wsl \r\n$wsl = gcm wsl\r\n& $wsl --% ls | grep -i \"foo\"\r\n\r\n# or\r\n\r\n& wsl --% ls | grep -i \"foo\"\r\n\r\n# NEW SOLUTION: execute multiline pasted code without powershell parsing.\r\n& --% @'\r\n(pasted multiline code)\r\n@'\r\n``` \r\nWhat am I missing here? If the pipe appears after `--%` it's just another dumb character: an argument. There's no twiddling with operator precedence. If contained in a nested pipeline or subexpression, then start parsing for powershell again. \r\n\r\n> what if you did & $foo --% more args | blah?\r\n\r\nWell, that would attempt to execute the argument in `$foo` and pass `\"more\"`, `\"args\"`, `\"|\"` and `\"blah\"` to be treated as whatever's in `$foo` wants. The rules seem simple enough to me, but admittedly I've been using powershell/monad a long time. This isn't a major breaking change to `&` as `& $foo --% ...` treats `--%` like any other argument. So unless we've been using this sigil elsewhere nefariously, we should be safe. \r\n\r\nThoughts? \r\n",
    "created_at": "2020-07-03T00:41:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-653274186",
    "id": 653274186,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MzI3NDE4Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653274186/reactions"
    },
    "updated_at": "2020-07-03T01:29:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653274186",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1844001?v=4",
      "events_url": "https://api.github.com/users/oising/events{/privacy}",
      "followers_url": "https://api.github.com/users/oising/followers",
      "following_url": "https://api.github.com/users/oising/following{/other_user}",
      "gists_url": "https://api.github.com/users/oising/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/oising",
      "id": 1844001,
      "login": "oising",
      "node_id": "MDQ6VXNlcjE4NDQwMDE=",
      "organizations_url": "https://api.github.com/users/oising/orgs",
      "received_events_url": "https://api.github.com/users/oising/received_events",
      "repos_url": "https://api.github.com/users/oising/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/oising/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oising/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/oising"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I made multiple edits to the above, to cover partial line evaluation, multiline evaluation and variable positioning of `--%`.  All without introducing new sigils, operators or strange syntax. I think that covers it. The only thing is: Can the parser handle it? What do you think @lzybkr @JamesWTruher  @BrucePay  ?",
    "created_at": "2020-07-03T01:13:04Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-653280446",
    "id": 653280446,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MzI4MDQ0Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653280446/reactions"
    },
    "updated_at": "2020-07-03T01:21:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653280446",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1844001?v=4",
      "events_url": "https://api.github.com/users/oising/events{/privacy}",
      "followers_url": "https://api.github.com/users/oising/followers",
      "following_url": "https://api.github.com/users/oising/following{/other_user}",
      "gists_url": "https://api.github.com/users/oising/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/oising",
      "id": 1844001,
      "login": "oising",
      "node_id": "MDQ6VXNlcjE4NDQwMDE=",
      "organizations_url": "https://api.github.com/users/oising/orgs",
      "received_events_url": "https://api.github.com/users/oising/received_events",
      "repos_url": "https://api.github.com/users/oising/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/oising/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oising/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/oising"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Hear, hear, @TSlivede.\r\n\r\nForgive me for being blunt, but we've been talking about these issues for a looooong time:\r\n\r\nWhat this issue proposes  amounts to magical thinking:\r\nIt is related to the ill-fated, inherently problematic \"stop-parsing symbol\", `--%`, which in its current form is of limited use _on Windows_ (see https://github.com/MicrosoftDocs/PowerShell-Docs/issues/6149) and virtually useless on _Unix-like platforms_ (see https://github.com/MicrosoftDocs/PowerShell-Docs/issues/4963).\r\n`--%` should never have been implemented, and neither should this proposal be implemented as presented.\r\n\r\nThe magical thinking is a conceptually muddled conflation of two ideas:\r\n\r\n* (a) \"I want to pass space-separated tokens to some external program, allowing any barewords, without needing to worry about shell metacharacters such as `&` or `|`.\" - see https://github.com/PowerShell/PowerShell/issues/12975#issuecomment-646276628\r\n\r\n   * Of course, such a feature is at odds with using such commands _as part of a pipeline_ or with _pipeline-chaining operators_ (`&&` and `||`), and also placing additional commands on the same line, after `;` - and, not least, being able to use any _PowerShell variables and expressions_ in the command line.\r\n\r\n* (b) \"I want my command line treated the way I'm used to _from the shell I normally use_ (or the shell for which the command line was originally written)\", which, of course, _is_ subject to unquoted use of characters such as `&` or `|` being interpreted as metacharacters and therefore having _syntactic_ meaning.\r\n  * Case in point: neither `cmd` nor `/bin/sh` (or any POSIX-like shell such as `bash`) would accept `wsl ls | less` in a way that passes `ls`, `|` , and `less` _verbatim_ through to `wsl` - they'd all interpret _unquoted_ `|` as _their_ pipe symbol.\r\n\r\nThese ideas are at odds at one another, and require distinct solutions - neither of which requires special syntax per se:\r\n\r\n* The solution to (a) is to _abandon_ the idea and to instead use _PowerShell's own, existing syntax_ to ensure that metacharacters are used _verbatim_ - which invariably necessitates _quoting_ or _escaping_,:\r\n  * Either: quote barewords (tokens not enclosed in quotes) that contain metacharacters _as a whole_: `wsl ls '|' less`\r\n  * Or: `` ` ``-escape metacharacters _individually_ in barewords: ``wsl ls `| less``\r\n  * Or: use an _array [variable]_ to pass the arguments _verbatim_: `$wslArgs = 'ls', '|', 'less'; wsl $wslArgs`\r\n  * Of course, #1995 demonstrates that, regrettably, this approach is and always has been  broken when it comes to arguments that have _embedded_ `\"` _when calling external programs_  - _this needs to be addressed_: see below.\r\n\r\n* The solution to (b) is to actually _call the shell I normally use_, passing the command line _as a single string_.\r\n\r\n  * As @TSlivede suggests, an `Invoke-Shell` cmdlet to which you pass the command line _as a single string_ and which calls the _platform-native shell_ is the solution - and we already have syntax for verbatim strings (`'...'` or its here-string variant, `@'<newline>...<newline>'@`\r\n    * My recommendation is to call it `Invoke-NativeShell`, and to call `/bin/sh` - not `bash` - on Unix-like platforms.\r\n       * Additionally, I suggest defining `ins` as a succinct alias.\r\n  * This approach solves all conceptual problems with `--%` and with the proposal at hand:\r\n     * It make it very obvious where the command passed to the native shell ends (by virtue of being _a single string_), and it allows using an `Invoke-NativeShell` / `ins` call in a regular PowerShell pipeline / with PowerShell redirections without ambiguity.\r\n     * You can optionally use an _expandable_ string (`\"....\"` or its here-string variant) in order to embed _PowerShell_ variable values in the command line (something that `--%` can't do).\r\n\r\n---\r\n\r\nSince the powers that be have concluded that #1995 cannot be fixed lest backward compatibility be broken - after all, all existing workarounds would break, see https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-562334606 - the best thing we can do is to support the opt-in into the proper behavior with a syntax that is as succinct as possible, so as to minimize the pain of having to go out of your way to get the behavior that should always have been the default.\r\n\r\nTherefore: **special syntax such as `&!` should only be provided as the opt-in to get proper passing of arguments to external programs in order to address #1995**, based on the behavior proposed in @TSlivede's RFC - see https://github.com/PowerShell/PowerShell-RFC/pull/90. If a future PowerShell version is ever permitted to break backward compatibility, then it is direct invocation / invocation with `&` that should exhibit this behavior.\r\n\r\nFrom a user's perspective, this means: All I need to do is to satisfy _PowerShell's_ syntax requirements - see https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-640711192 - and I can rely on PowerShell to robustly pass the resulting verbatim tokens through to the target program - _this is a core mandate of any shell, which PowerShell has regrettably never satisfied with respect to external programs_.\r\n\r\nFor instance, the following command  - which currently does _not_ work as intended (when invoked directly or with `&` - see [this docs issue](https://github.com/MicrosoftDocs/PowerShell-Docs/issues/2361)) - should then work:\r\n\r\n```powershell\r\nPS> &! bash -c 'echo \"one two\"'\r\none two   # Currently (invoked with & instead of &! or with neither) prints only 'one', \r\n          # because PowerShell passes the entire argument (brokenly) as  \"echo \"one two\"\",\r\n          # which the target program sees as *2* verbatim arguments `echo one` and `two`\r\n```\r\n\r\nThose looking for a workaround in current / earlier PowerShell versions can find a simple function that will cover most use cases at https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-303345059 (limitations discussed at https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-649560892), and a more elaborate version at https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-562334606",
    "created_at": "2020-07-03T03:21:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-653319079",
    "id": 653319079,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MzMxOTA3OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653319079/reactions"
    },
    "updated_at": "2020-07-05T19:41:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653319079",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "P.S.: The discovery problem of (not only symbol-based) operators is a separate problem that  is well worth addressing in its own right: the solution is to _enhance `Get-Help` to allow operator lookup_ - see #11339, which also links to an interim solution.",
    "created_at": "2020-07-03T03:26:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-653320350",
    "id": 653320350,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MzMyMDM1MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653320350/reactions"
    },
    "updated_at": "2020-07-03T03:26:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653320350",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "> Since the powers that be have concluded that #1995 cannot be fixed lest backward compatibility be broken - after all, all existing workarounds would break, see #1995 (comment) - the best thing we can do is to support the opt-in into the proper behavior with a syntax that is as succinct as possible, so as to minimize the pain of having to go out of your way to get the behavior that should always have been the default.\r\n\r\n@mklement0 I think opt-in was a part of https://github.com/PowerShell/PowerShell/issues/1995 and that was rejected. So to me it sounds like wishful thinking. Am I wrong?",
    "created_at": "2020-07-03T07:52:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-653407226",
    "id": 653407226,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MzQwNzIyNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653407226/reactions"
    },
    "updated_at": "2020-07-03T07:52:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653407226",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/658865?v=4",
      "events_url": "https://api.github.com/users/AndrewSav/events{/privacy}",
      "followers_url": "https://api.github.com/users/AndrewSav/followers",
      "following_url": "https://api.github.com/users/AndrewSav/following{/other_user}",
      "gists_url": "https://api.github.com/users/AndrewSav/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/AndrewSav",
      "id": 658865,
      "login": "AndrewSav",
      "node_id": "MDQ6VXNlcjY1ODg2NQ==",
      "organizations_url": "https://api.github.com/users/AndrewSav/orgs",
      "received_events_url": "https://api.github.com/users/AndrewSav/received_events",
      "repos_url": "https://api.github.com/users/AndrewSav/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/AndrewSav/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AndrewSav/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/AndrewSav"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@AndrewSav, we originally only discussed an opt-in via configuration or preference variable.\r\n\r\nHowever, @joeyaiello said the following in https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-653164987 when he closed the issue (emphasis added):\r\n\r\n> Anything we touch here is just too much of a breaking change, and **we should address the problem with a new operator**\r\n\r\nA new operator _is_ an opt-in of sorts, but an unproblematic one, I hope (though the need for it is unfortunate, but that's the price of backward compatibility).\r\n\r\nWhile this proposal purportedly also solves #1995, it doesn't, given that it aims (primarily) at accommodating the syntax of _other_ shells. Given that both problems are worth solving, independently, my proposal was this:\r\n\r\n* Let's introduce a new operator, but use it solely to fix #1995 (via https://github.com/PowerShell/PowerShell-RFC/pull/90), i.e. to fix PowerShell's _own_ (non-other-shell-emulating) broken handling of argument passing to external programs.\r\n  * New code should then always use `&!` (or whatever form we decide on)  instead of `&` when calling external programs  (you can think of it as deprecating `&` for external programs).\r\n  * When calling _PowerShell_ commands, `&!` should act like `&` does now (there never was a problem), thereby enabling the consistent use of `&!`.\r\n\r\n* To solve the reuse-command-lines-from-other-shells problem, let's implement a `Invoke-NativeShell` / `ins` cmdlet that calls the platform-appropriate native shell (`cmd /c` on Windows, `/bin/sh -c` on Unix-like platforms) with the command line passed as a _single string_.\r\n\r\n   * In the simplest case, with no `'` present in the command line, a regular single-quoted string will work; e.g.:\r\n\r\n         ins 'ls | cat -n'\r\n\r\n   * With `'` present, they can either be _doubled_; e.g.:\r\n\r\n         ins 'echo ''hi'' | cat -n'\r\n\r\n   * or, if the desire is not to have to touch the command line at all, a here-string can be used (as already shown by @TSlivede) - while this syntax is a little more cumbersome, it should always work:\r\n\r\n         ins @'\r\n           echo 'hi' | cat -n\r\n         '@\r\n\r\n   * additionally, by using an _expandable_ (interpolating) string (`\"...\"` or `@\"<newline>...<newline>\"@`), you have the option of incorporating _PowerShell_ variables into the string passed to the native shell (something that `--%` doesn't support):\r\n\r\n         $foo = 'hi'\r\n         ins @\"\r\n           echo '$foo' | cat -n\r\n         \"@\r\n\r\n    * Note:\r\n         * `Invoke-NativeShell` cmdlet would be a fairly thin wrapper around `cmd /c` / `/bin/sh -c` calls, which you could obviously make directly yourself, but it does have the advantage that you don't need to know the specific executable name and command-line passing syntax. \r\n         * As a potentially beneficial side effect, you'll be able to use common parameters such as `-OutVariable`, and can think about whether to let the `-Error*` parameters act on _stderr_ (though, for symmetry, `Invoke-Command` should then too, which would be a breaking change).\r\n        * Since POSIX-like shells support _multiple_ arguments with `-c` - the first constituting the code to execute, and the subsequent ones the arguments to pass to that code, starting with `$0`(!) - e.g. `bash -c 'echo $@' _ 1 2 3` - optional additional arguments must be supported too. \r\n       * **Since the platform-native shell is being called, such calls are by definition _not_ portable, due to the fundamental differences between `cmd` and `sh`.\r\nThis is why it's so important to fix PowerShell's _own_ argument-passing (#1995), as it then provides a reliable, truly cross-platform method of invoking external programs.**\r\n\r\n---\r\n\r\nThe final piece of the puzzle is _documentation_.\r\n\r\nhttps://github.com/MicrosoftDocs/PowerShell-Docs/issues/5152 is a longstanding proposal to write a conceptual help topic about calling external programs (e.g., `about_Native_Calls`), which should, in a single location, cover _all_ aspects that are relevant to calling external programs; aside from what's already covered there (syntax pitfalls due to additional metacharacters, absence of a raw byte pipeline, non-integration with PowerShell error handling, ...), the issues at hand should be discussed as well:\r\n\r\n* How passing arguments with embedded `\"` (and _empty_ arguments) is broken in (hopefully soon-to-be) earlier versions (currently discussed in a separate proposal, https://github.com/MicrosoftDocs/PowerShell-Docs/issues/2361), and how to work around that (manual `\\`-escaping or use of one of the helper functions from #1995, one of which is succinct enough to be directly included in the topic).\r\n\r\n* How only `&!` should be used going forward to call native (external) executables, so as to ensure proper argument-passing.\r\n\r\n* How `Invoke-NativeShell` / `ins` can be used to execute command lines _written for the platform-native shell_ as-is.\r\n\r\n",
    "created_at": "2020-07-03T12:32:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-653526374",
    "id": 653526374,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1MzUyNjM3NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653526374/reactions"
    },
    "updated_at": "2020-07-05T12:05:47Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/653526374",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Interesting, today users can:\r\n1. direct invocation\r\n2. & operator\r\n3. Start-Process\r\n\r\nIt is not at all clear that users should use.\r\n\r\nAfter fixing broken behavior users will have the following features:\r\n1. direct invocation\r\n2. & operator\r\n3. Start-Process\r\n4. &! operator\r\n5. Start-ProcessV2\r\n\r\nIs not it too much for the shell to run `ping 127.0.0.1`?\r\n",
    "created_at": "2020-07-06T11:06:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-654166827",
    "id": 654166827,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NDE2NjgyNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/654166827/reactions"
    },
    "updated_at": "2020-07-06T11:06:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/654166827",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Yeah that's my main concern with adding yet another operator as well @iSazonov. It's already confusing, and this will not help. Documentation is only a part of the puzzle. Even if we have decent documentation, the mere fact that there are _five different ways_ to do it, each of which behaves a bit differently, will **always** cause confusion.\r\n\r\nIf we care about the UX at all, we should be opting to improve existing cases over adding yet more.",
    "created_at": "2020-07-06T11:54:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-654188099",
    "id": 654188099,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NDE4ODA5OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/654188099/reactions"
    },
    "updated_at": "2020-07-06T11:54:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/654188099",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "> If we care about the UX at all, we should be opting to improve existing cases over adding yet more.\r\n\r\nWhich you cannot because you must be backward compatible. I feel we are going in circles. https://github.com/PowerShell/PowerShell/issues/1995 was that and it was closed for that very reason.",
    "created_at": "2020-07-06T20:48:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-654457608",
    "id": 654457608,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NDQ1NzYwOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 1,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/654457608/reactions"
    },
    "updated_at": "2020-07-06T21:00:35Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/654457608",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/658865?v=4",
      "events_url": "https://api.github.com/users/AndrewSav/events{/privacy}",
      "followers_url": "https://api.github.com/users/AndrewSav/followers",
      "following_url": "https://api.github.com/users/AndrewSav/following{/other_user}",
      "gists_url": "https://api.github.com/users/AndrewSav/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/AndrewSav",
      "id": 658865,
      "login": "AndrewSav",
      "node_id": "MDQ6VXNlcjY1ODg2NQ==",
      "organizations_url": "https://api.github.com/users/AndrewSav/orgs",
      "received_events_url": "https://api.github.com/users/AndrewSav/received_events",
      "repos_url": "https://api.github.com/users/AndrewSav/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/AndrewSav/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AndrewSav/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/AndrewSav"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@iSazonov:\r\n\r\nThe existing lack of guidance needs to be addressed even if we don't introduce a new operator:\r\n\r\n* comprehensively, via the [proposed `about_Native_Calls` topic](https://github.com/MicrosoftDocs/PowerShell-Docs/issues/5152)\r\n\r\n* in the `Start-Process` topic specifically, which currently lacks any guidance as to when it use is appropriate - see https://github.com/MicrosoftDocs/PowerShell-Docs/issues/6239\r\n\r\nTo summarize briefly:\r\n\r\n* Don't use `Start-Process` to invoke _console_ (terminal) programs (unless - which is available on Windows only - you want to run them _in a new window_).\r\n\r\n* Direct invocation and invocation via `&` are _equivalent_; (leaving script blocks aside),`&` is only ever needed for _syntactic_ reasons, whenever the command name or path is _quoted_ and/or contains _variable references_.\r\n\r\n---\r\n\r\n> After fixing broken behavior users will have the following features:\r\n> direct invocation\r\n> * & operator\r\n> * Start-Process\r\n> * &! operator\r\n> * Start-ProcessV2\r\n\r\n* No, there won't be a `Start-ProcessV2`, just a _new parameter_, `-IndividualArguments` - see https://github.com/PowerShell/PowerShell/issues/5576#issuecomment-552124719\r\n\r\n* Yes, there will be `&!` (or whatever symbol we decide on), but it effectively _supersedes both `&` and direct invocation_ (at least for _external programs_, but you'll be able to use it with _all_ command forms) - which should be easy to communicate.\r\n\r\n> Is not it too much for the shell to run `ping 127.0.0.1`?\r\n\r\n`ping 127.0.0.1` will continue to work, but if you want `bash -c 'echo \"one two\"'` to work, you'll have to use \r\n`&! bash -c 'echo \"one two\"'`\r\n\r\nThat is unfortunate, but - given that the direct invocation / `&` behavior _cannot be fixed_ - it strikes me as the best solution.\r\n\r\nFortunately, it's a simple rule to memorize: _If you want predictable argument passing to external programs, use `&!`_\r\n\r\nAlternative forms of opt-in - configuration (via `powershell.config.json`) or a preference variable - are much more problematic:\r\n\r\n* The dynamic scoping of preference variables makes it too easy to inadvertently apply the opt-in to legacy code that wasn't designed for it - see https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-650262164\r\n\r\n* Configuration would apply to sessions as a whole, making opt-out impossible altogether.\r\n\r\n* In both cases, action is needed that is _separate_ from a specific call, and looking at a given call won't tell you how it will behave - by contrast, `&!` leaves no doubt as to which behavior will ensue.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-07-06T21:59:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-654486868",
    "id": 654486868,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NDQ4Njg2OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 1,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/654486868/reactions"
    },
    "updated_at": "2020-07-08T01:34:12Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/654486868",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "To the end user, it looks just as awful as if we launched a calculator and found there 5 buttons for the addition operation. 😄 \r\n\r\nIf we want to improve it so much that we are ready for such complications, then perhaps this is enough to accept a breaking change (for direct invocation and `&`) so as to simplify the behavior and release V8.0.\r\n\r\nIf our desire is not so strong, it is possible to sufficiently improve the diagnostics (`prog.exe param1 param2 -Whatif` and the same for Start-Process -WhatIf) so that it displays what `testargs` program displays and recommendations on how to correctly perform escaping.\r\n\r\nThe script developer can afford to spend time testing and using the debugger. But in an interactive session, any user wants simplicity, brevity and clarity, and this outweighs everything.\r\n\r\n\r\n\r\n",
    "created_at": "2020-07-07T04:48:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-654597300",
    "id": 654597300,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NDU5NzMwMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 4,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/654597300/reactions"
    },
    "updated_at": "2020-07-07T04:48:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/654597300",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@iSazonov:\r\n\r\n> then perhaps this is enough to accept a breaking change (for direct invocation and &) so as to simplify the behavior and release V8.0\r\n\r\nYou certainly have _my_ vote - **but do the powers that be support this plan**? [_update_ - see #13129]\r\nIf we do take a change of this magnitude, we can finally tackle all historical baggage - see #6745\r\n\r\n> If we want to improve it so much\r\n\r\nThere are two good reasons to want it that much: \r\n\r\n* To end years of pain due to broken argument-passing - as evidenced by #1995, many related issues, and countless Stack Overflow questions.\r\n\r\n* Because - as has been stated several times before - calling external programs with arguments is a _core mandate of any shell_.\r\n\r\nHistorically, in the Windows-only days, the dearth of capable external CLIs made the inability to call them properly less problematic, and users who stayed in the walled garden of PowerShell (calling only PowerShell-native commands) didn't feel the pain. But times sure have changed:\r\n\r\nWe live in the age of a wealth of cross-platform CLIs that are crucial to development, CI, and deployment tasks.\r\nIf PowerShell wants to be taken seriously as a shell, this problem must be addressed.\r\n\r\n---\r\n\r\nEven if an allowed-to-break-backward-compatibility v8.0 happens (fingers crossed), its release could be a long time away, and we _also_ need an interim solution.\r\n\r\nAs much as the proposed enhancement to the documentation are needed, I don't think they alone sufficiently ease the pain, for lack of a readily available runtime solution.\r\n\r\nI get that the operator is ugly, but a non-breaking solution _necessitates_ additional syntax (more to type), whatever its form.\r\n\r\nAn alternative to `&!` that is less ugly, easier to type, and doesn't \"pollute\" the language is to ship a built-in _function_ with a concise name, such as the `iep` function (*I*nvoke-*E*xternal*P*rogram) that masks all the problems, shown [here](https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-562334606).\r\n(Note that we already ship functions that either wrap other functionality (e.g., `pause`) or accommodate `cmd.exe` users (e.g., `cd..` [sic]).)\r\n\r\nThus, to get `bash -c 'echo \"one two\"'` to work properly, you'd call `iep bash -c 'echo \"one two\"'`\r\nOr, to use perhaps a more realistic scenario:\r\n\r\n```powershell\r\n# Pass JSON to an external utility (Unix example)\r\n# Without `iep`, the embedded double quotes are lost and *broken JSON* is passed.\r\niep /bin/echo '{ \"foo\": \"bar\" }'\r\n```\r\n\r\nAgain, we're ultimately talking about a _compromise_ in service to preserving backward compatibility - this is inevitably a nuisance to end users.\r\n\r\n---\r\n\r\n> improve the diagnostics (prog.exe param1 param2 -Whatif and the same for Start-Process -WhatIf) so that it displays what testargs program displays and recommendations on how to correctly perform escaping.\r\n\r\nSince direct / `&`-based invocation isn't a cmdlet call and all arguments are presumed to be pass-through arguments, treating `-WhatIf` as a common parameter amounts to a breaking change (however unlikely that is in practice).\r\n\r\nIf you're willing to accept such a change, we might as well (also) support a `-DoItRight` switch (or a symbol-based one, akin to `--%`)  as an opt-in for the fixed behavior  - and that strikes me as worse than the `iep`-prefix / `&!` approach.\r\n\r\n(A non-breaking diagnostic option, I suppose, would be to enhance `Invoke-Command`, which currently doesn't support `-WhatIf` - however, if we provide a well-documented opt-in to the correct behavior, I don't think this is worth doing.)\r\n\r\n\r\n\r\n",
    "created_at": "2020-07-07T13:18:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-654851541",
    "id": 654851541,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NDg1MTU0MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 4,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/654851541/reactions"
    },
    "updated_at": "2020-07-08T01:35:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/654851541",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "I agree with  @iSazonov that the situation is not ideal to introduce yet another thing to do something that it supposed to work, but as mentioned by @mklement0  waiting for a breaking release that properly fixes this could be a very very very long time, and a lot of us desperately need a solution ASAP. For all I can see, the best solution currently is to just use \r\nhttps://github.com/PowerShell/PowerShell/issues/1995#issuecomment-562334606  right?  \r\n",
    "created_at": "2020-07-09T18:34:33Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-656285658",
    "id": 656285658,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NjI4NTY1OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/656285658/reactions"
    },
    "updated_at": "2020-07-09T18:34:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/656285658",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/4319522?v=4",
      "events_url": "https://api.github.com/users/musm/events{/privacy}",
      "followers_url": "https://api.github.com/users/musm/followers",
      "following_url": "https://api.github.com/users/musm/following{/other_user}",
      "gists_url": "https://api.github.com/users/musm/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/musm",
      "id": 4319522,
      "login": "musm",
      "node_id": "MDQ6VXNlcjQzMTk1MjI=",
      "organizations_url": "https://api.github.com/users/musm/orgs",
      "received_events_url": "https://api.github.com/users/musm/received_events",
      "repos_url": "https://api.github.com/users/musm/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/musm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/musm/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/musm"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@mklement0 I'm not sure how a iep /invoke-externalprogram could work, since a cmdlet is subject to the same parameter munging we're trying to fix. This is a parser issue, right? If we tried to hide everything inside a cmdlet/function, I'd imagine it would be hideously complex given it would have to undo the munging/reconstruct intent. Or am I missing something?",
    "created_at": "2020-07-10T15:50:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-656746813",
    "id": 656746813,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1Njc0NjgxMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/656746813/reactions"
    },
    "updated_at": "2020-07-10T15:50:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/656746813",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1844001?v=4",
      "events_url": "https://api.github.com/users/oising/events{/privacy}",
      "followers_url": "https://api.github.com/users/oising/followers",
      "following_url": "https://api.github.com/users/oising/following{/other_user}",
      "gists_url": "https://api.github.com/users/oising/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/oising",
      "id": 1844001,
      "login": "oising",
      "node_id": "MDQ6VXNlcjE4NDQwMDE=",
      "organizations_url": "https://api.github.com/users/oising/orgs",
      "received_events_url": "https://api.github.com/users/oising/received_events",
      "repos_url": "https://api.github.com/users/oising/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/oising/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oising/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/oising"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@oising: \r\n\r\nTo be clear: the [linked `iep` function](https://github.com/PowerShell/PowerShell/issues/1995#issuecomment-562334606) fixes #1995, not what _this_ proposal is primarily about (which I think is _not_ worth pursing, [as argued above](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-653319079)), though do note that the stated intent in the OP is to _also_ solve #1995.\r\n\r\n#1995 is about being able to rely on _PowerShell_'s syntax (not another shell's) for passing arguments to external programs _faithfully, as seen verbatim by PowerShell after its own parsing_. \r\n\r\nPowerShell's own parsing is fine, and there are no problems as long as you pass arguments to _PowerShell_ commands.\r\n\r\nBy contrast, passing arguments to _external programs_ is badly broken, and that's what `iep` fixes.\r\n\r\nIt is broken due to flawed _re-quoting and escaping_ of the arguments _behind the scenes_, when the command line ultimately used is constructed.\r\nhttps://github.com/PowerShell/PowerShell-RFC/pull/90 proposes a proper fix (sans agreement on how to handle backward compatibility, and with a few minor questions yet to be answered), that at its core relies on the recently introduced [`System.Diagnostics.ProcessStartInfo.ArgumentList`](https://docs.microsoft.com/en-US/dotnet/api/System.Diagnostics.ProcessStartInfo.ArgumentList) to perform the proper re-quoting and escaping for us (we just pass the collection of arguments that resulted from PowerShell's own parsing) - which, incidentally, is only ever required _on Windows_; on Unix, sensibly, _there is no command line_ (outside of a shell) when you pass arguments on process startup: you just pass the arguments verbatim, as an array.\r\n\r\nIn short:\r\n\r\n* Providing `iep` as a built-in function would be a low-ceremony stopgap opt-in to offer proper argument passing to external programs,  until a proper fix - in the context of a breaking change - can be implemented\r\n\r\n* An `Invoke-NativeShell` (`ins`) cmdlet is the proper solution - not a stopgap - to providing a way to call _a different shell's_ (the native shell's) command lines, using _its_ syntax - see [above](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-653526374).\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-07-10T17:01:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-656781439",
    "id": 656781439,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1Njc4MTQzOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/656781439/reactions"
    },
    "updated_at": "2020-07-10T17:03:20Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/656781439",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Currently, there are cases where cutting and pasting a PERL command fails to run as expected in Python.  Go figure.  This must be a great disadvantage for all those cutters-and-pasters out there.  I think Python should have a special operator for that.",
    "created_at": "2020-07-12T20:54:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-657273699",
    "id": 657273699,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzI3MzY5OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 2,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657273699/reactions"
    },
    "updated_at": "2020-07-12T20:54:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657273699",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> I'm not sure you've understood my suggestion; what you say is _precisely_ what I'm saying. Let me be more verbose with some strategically capitalized hints :D\r\n> \r\n```powershell\r\n# NEW SOLUTION: the entire pipeline AS ABOVE is sent to WSL, then the results are returned to powershell\r\n# and piped, in powershell, to foreach-object\r\n(& --% wsl ls | grep -i \"foo\") | % { \"match {0}\" -f $_ }\r\n```\r\n> \r\n> What am I missing here? If the pipe appears after `--%` it's just another dumb character: an argument. There's no twiddling with operator precedence. If contained in a nested pipeline or subexpression, then start parsing for powershell again.\r\n> \r\n\r\n> \r\n> Thoughts?\r\n\r\nWhat you are missing is the need to pass a closing parenthesis as an argument to an external program.  It is a typical DWIM approach—but PowerShell is not HAL.",
    "created_at": "2020-07-12T21:09:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-657275490",
    "id": 657275490,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1NzI3NTQ5MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657275490/reactions"
    },
    "updated_at": "2020-07-12T21:11:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/657275490",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for all the detailed feedback, everyone. Speaking as myself here. A few uber-points before I get more into the nitty gritty:\r\n\r\n* I'm still not on board with a vNext/8.0 that decides to break a whole new litany of stuff. Backwards compatibility matters. I know it's painful, and I'd rather live in a world where we could go back and correct every mistake that PowerShell ever made, many unintentional. But  vast majority of PS users are not hanging out here in issues, knee-deep in SO edge cases. They've copy/pasted the same workaround to something for 4-10 years, they don't necessarily know why it works, and they won't care that we were \"fixing mistakes\" when their script breaks on upgrade. They just know that \"updating PS has broken me, and I can't trust updates\", and then we end up with *even more* users slowing down their updates and adoption. \r\n* I think some folks in this issue may be projecting many different hopes and desires into this issue, or see it as an either/or with other fixes. I realize I exacerbated that by closing #1995, and I'm sorry for that (though I will say, I'm still not sure that one specifically can actually be fixed, but we will take a harder look at it), but this is really a \"trap door\" solution that gets both new and experienced users out of a bind quickly without letting frustration mount. We can still have longer-term conversations about fixes to the PS parsing side of the house so that we can offer a truly cross-platform solution for everything. \r\n\r\nNow, comments as I read:\r\n\r\n* I'm wary about the proposed desire to align with `#!` (with either `&!` or `$!` given that, in the default case, users are likely not going to specify the interpreter. If I want to do something like `$! net <stuff>`, `net.exe` is not my interpreter. And on non-Windows, the \"native\" thing to do is still to pass to sh/bash/whatever before passing to the binary being run. E.g. I don't want Python parsing `*.py` in the string `$! /usr/bin/python *.py` or even `$! python *.py`. I want Bash to do the globbing and then to hand the list of matches to `python`. \r\n* Like @oising suggested, I'm in favor of `--%` as the operator, overloaded to be used in the front. Discoverability is a problem, and given that we're already 10 years in on working on the discoverability of this one ([it's Google-able now!](https://www.google.com/search?q=--%25&oq=--%25), I say we just go with that. (I was the one that made @SteveL-MSFT put it in his proposal as an alternate consideration). Question, though: do we even need the `&` call operator here? Why not just start the line with `--% native.exe do /some $stuff`? \r\n* @rjmholt: I didn't totally understand your comment [here](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-652672924), but it's my take that we should probably not change anything with the existing `--%` behavior where it comes *after* the executable, but I think we can do your \"new behavior\" with where it comes *before* the executable.\r\n* Read this from @jazzdelightsme and I emphatically agree:\r\n  > It's also for the most expert of users, who just want to copy/paste a command from StackOverflow without having to go in and fiddle with everything.\r\n\r\n  In my mind, this is a huge aspect of the scenario, possibly the biggest one. It's not just SO, either, it's docs from around the web that pre-suppose you're in a Bash-like shell. \r\n* Irrespective of whether things like #1995 gets fixed, the point there is that a) there's a long tail of weird edge cases like that, and b) they're really hard to fix without breaking people. It's not necessarily true of all them, but we've hit it enough over the last couple years that it's apparent to me we need a \"trap door\" like this to get people out of hairy situations where they don't want to dive down the rabbit hole of our nested escaping (only to discover there's a bug like #1995 that prevents them from working even once they *do* know what they're knowing). \r\n\r\nIn reviewing the comments, I think there are two open questions we still need to answer:\r\n\r\n1. **Do we continue to parse command separators and everything after them in PowerShell, or does the command separator also get passed verbatim to the native shell?**\r\n  I say that we should pass *everything* verbatim to the native shell as that's currently something that you can't do, and that @oising's solution of a leading parenthetical *may* be the solution in that we can still support pipes, pipeline chains, etc. if you want to mix/match native and PS parsing (though I want to get some opinions from those closer to the parser). \r\n2. **What's the operator?**\r\n  As alluded above, I like `--%` because it's already got a reputation as the \"just do what it used to do\" operator, and we're going to have to reset on discoverability with anything new. I understand arguments like @mklement0's that, if we do this, we are changing the technical meaning of `--%` (and @SteveL-MSFT has made this argument to me as well), but I don't think most people out in the wild are thinking of `--%` in terms of \"it does what it used to do in cmd\". I don't think it's a stretch to codify this assumption into the operator's definition as \"do what the native shell does here\". \r\n\r\nOrthogonally, just thought of another scenario we may or may not want to support. \r\n\r\nOn Windows, cmd (effectively) includes the current directory in its `PATH` lookup. However, PowerShell requires that the user pre-pend a `./` in order to execute any EXEs (or anything in `PATHEXT`) if the current directory is not in `PATH`. \r\n\r\nSo my open question is: do we want to actually hand the entire command string to cmd? I'd propose that if we really want to light up the copy/paste scenario with this operator, that the answer is yes, as some third-party docs/tutorials don't necessarily detail how to put the tools they expect you to use into the `PATH`. It *probably* doesn't matter that much either way, but I did want to enumerate it here. \r\n",
    "created_at": "2020-07-14T17:55:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-658324154",
    "id": 658324154,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODMyNDE1NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658324154/reactions"
    },
    "updated_at": "2020-07-14T17:55:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658324154",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1255187?v=4",
      "events_url": "https://api.github.com/users/joeyaiello/events{/privacy}",
      "followers_url": "https://api.github.com/users/joeyaiello/followers",
      "following_url": "https://api.github.com/users/joeyaiello/following{/other_user}",
      "gists_url": "https://api.github.com/users/joeyaiello/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/joeyaiello",
      "id": 1255187,
      "login": "joeyaiello",
      "node_id": "MDQ6VXNlcjEyNTUxODc=",
      "organizations_url": "https://api.github.com/users/joeyaiello/orgs",
      "received_events_url": "https://api.github.com/users/joeyaiello/received_events",
      "repos_url": "https://api.github.com/users/joeyaiello/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/joeyaiello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joeyaiello/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/joeyaiello"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> * I'm still not on board with a vNext/8.0 that decides to break a whole new litany of stuff.\r\n\r\nYeah I don't know how you fix these problems without breaking in incredibly difficult to troubleshoot ways.  Plus I don't know about y'all but even I don't want to have to juggle all these complicated binder/parser differences when writing for multiple versions.\r\n\r\nUsually if I'm arguing against breaking changes it's for other folks.  This though, seems like it'd probably be a PITA to deal with even for folks present in ITT.\r\n\r\n> * Like @oising suggested, I'm in favor of `--%` as the operator, overloaded to be used in the front. (...) Why not just start the line with `--% native.exe do /some $stuff`?\r\n\r\nI really like this.  Ideally as close to calling `CreateProcess`/`exec` as possible (plus nix env var handling and in/out redirection or console attachment).  Or maybe falling back to `cmd.exe`/`bash` completely.\r\n",
    "created_at": "2020-07-14T18:30:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-658341282",
    "id": 658341282,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODM0MTI4Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658341282/reactions"
    },
    "updated_at": "2020-07-14T18:30:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658341282",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I'm not stuck on keeping `&` in front of `--%` either. I can justify the idea of treating raw `--%` like a directive/operator in my head at least. What about multiline? Allow `--%` with `@\"` and `\"@` for var substitutions and subexpressions, and single quote `@'` and `'@` to pass literal? Without the here strings, it's single line only?",
    "created_at": "2020-07-14T18:48:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-658350052",
    "id": 658350052,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODM1MDA1Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658350052/reactions"
    },
    "updated_at": "2020-07-14T18:48:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658350052",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1844001?v=4",
      "events_url": "https://api.github.com/users/oising/events{/privacy}",
      "followers_url": "https://api.github.com/users/oising/followers",
      "following_url": "https://api.github.com/users/oising/following{/other_user}",
      "gists_url": "https://api.github.com/users/oising/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/oising",
      "id": 1844001,
      "login": "oising",
      "node_id": "MDQ6VXNlcjE4NDQwMDE=",
      "organizations_url": "https://api.github.com/users/oising/orgs",
      "received_events_url": "https://api.github.com/users/oising/received_events",
      "repos_url": "https://api.github.com/users/oising/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/oising/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oising/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/oising"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Like @oising suggested, I'm in favor of --% as the operator\r\n\r\nWorks for me. \r\n\r\n>Question, though: do we even need the & call operator here?\r\n\r\nAs long as I can still do `--% & $computedPathToNativeExe foo;@workspace` then fine by me.  We do need to be able to use the call operator with this.\r\n\r\n> I say that we should pass everything verbatim to the native shell as that's currently something that you can't do\r\n\r\nAgreed.\r\n\r\n> I don't think it's a stretch to codify this assumption into the operator's (--%) definition as \"do what the native shell does here\".\r\n\r\nAlso agreed!",
    "created_at": "2020-07-14T18:49:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-658350294",
    "id": 658350294,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODM1MDI5NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658350294/reactions"
    },
    "updated_at": "2020-07-14T18:56:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658350294",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Also, maybe this is a way to get in the feature to define env vars before the executable that are defined just for the executable's session (#3316):\r\n```powershell\r\n--% JEKYLL_ENV=production jekyll build\r\n```\r\nJust a thought. ",
    "created_at": "2020-07-14T18:52:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-658352131",
    "id": 658352131,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODM1MjEzMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658352131/reactions"
    },
    "updated_at": "2020-07-14T18:52:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658352131",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@rkeithhill, the idea with the `call native operator` is that the line isn't processed by PowerShell and sent verbatim to the \"default shell\" of the OS.  So in this case, your first example `--% & $computerPathToNativeExe foo;@workspace` would not work.  You would have to use the current method and escape as appropriate.  The second case `--% JEKYLL_ENV=productoin jekyll build` should just work.",
    "created_at": "2020-07-14T18:59:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-658355237",
    "id": 658355237,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODM1NTIzNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658355237/reactions"
    },
    "updated_at": "2020-07-14T18:59:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658355237",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> the line isn't processed by PowerShell and sent verbatim to the \"default shell\" of the OS\r\n\r\nOK, that seems reasonable.  However this `--% JEKYLL_ENV=productoin jekyll build` would just work on Linux/macOS but not on Windows - at least not without some help from PowerShell, right?",
    "created_at": "2020-07-14T19:07:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-658359286",
    "id": 658359286,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODM1OTI4Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658359286/reactions"
    },
    "updated_at": "2020-07-14T21:52:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658359286",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@rkeithhill as currently proposed that won't ever work on Windows as it relies on the OS \"default\" shell.  For PowerShell declaring env var for a process, we have a different issue opened to discuss that.",
    "created_at": "2020-07-14T20:00:39Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-658383852",
    "id": 658383852,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODM4Mzg1Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658383852/reactions"
    },
    "updated_at": "2020-07-14T20:00:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658383852",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@PowerShell/powershell-committee discussed this today, I've updated the original proposal to reflect the result of that discussion.  We'll move forward with an experimental feature implementation and get more feedback from users with working code.  We are still open on the sigil for the operator, but using `--%` for now.",
    "created_at": "2020-07-14T20:40:35Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-658401890",
    "id": 658401890,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODQwMTg5MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658401890/reactions"
    },
    "updated_at": "2020-07-14T20:40:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658401890",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> where `$foo` is a literal filename and `$PWD` is current directory within WSL. Note that in the first example, you would have to know to escape `&&` to have it execute within WSL instead of within PowerShell.\r\n\r\nBoth `$foo` and `$PWD` are variable references to be evaluated by `sh`.\r\n\r\n> \r\n> To pipe output from such execution back into PowerShell, the user is required to store the results into a variable first:\r\n```powershell\r\n$out = --% ls *.txt\r\n$out | select-string hello\r\n```\r\n> Note that unlike the current `&` call operator, you cannot use any PowerShell syntax, so:\r\n```powershell\r\n--% $commandline\r\n```\r\n\r\nwill try to execute `$commandline` literally (under `cmd`) or after shell expansion (under `sh`). PowerShell will not attempt to resolve that variable.\r\n\r\n> \r\n> The cut & paste problem is solved by simply pasting after `&n ` is typed.\r\n\r\nby simply pasting after `--% `\r\n\r\n \r\n> The above example for `wsl` would look like:\r\n\r\nWhich one?\r\n\r\n> Since all of the arguments after `--%` is passed to the \"default\" shell, to support pipelining into PowerShell, you would need to use a variable:\r\n\r\nThis is a repetition.\r\n \r\n",
    "created_at": "2020-07-14T21:11:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-658415902",
    "id": 658415902,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODQxNTkwMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658415902/reactions"
    },
    "updated_at": "2020-07-14T21:11:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658415902",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "If we are going to add something useful I propose a Pivot.\n\nWhy cant we have something like a herestring Literal \n\n@!\"\"!@\n\nSo we can have a real way to do this instead of a --% which also has its own host of issues.\n\nAtleast that way we can bury the issue with \"better\" design tactics.\nAnd discoverability for these edge cases to sit in About_Strings where it should be solved in.\n\nJust a thought.",
    "created_at": "2020-07-14T22:20:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-658441974",
    "id": 658441974,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODQ0MTk3NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658441974/reactions"
    },
    "updated_at": "2020-07-14T22:20:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658441974",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/28855373?v=4",
      "events_url": "https://api.github.com/users/romero126/events{/privacy}",
      "followers_url": "https://api.github.com/users/romero126/followers",
      "following_url": "https://api.github.com/users/romero126/following{/other_user}",
      "gists_url": "https://api.github.com/users/romero126/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/romero126",
      "id": 28855373,
      "login": "romero126",
      "node_id": "MDQ6VXNlcjI4ODU1Mzcz",
      "organizations_url": "https://api.github.com/users/romero126/orgs",
      "received_events_url": "https://api.github.com/users/romero126/received_events",
      "repos_url": "https://api.github.com/users/romero126/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/romero126/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romero126/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/romero126"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I fail to see how `@!\"…\"!@` is better than `Invoke-NativeShell @\"…\"@`.  Are we trying to make PowerShell more Brainfuck-like?",
    "created_at": "2020-07-15T11:28:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-658713832",
    "id": 658713832,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODcxMzgzMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 2,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658713832/reactions"
    },
    "updated_at": "2020-07-15T11:28:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658713832",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "NONE",
    "body": "@yecril71pl \r\n>I fail to see how `@!\"…\"!@` is better than `Invoke-NativeShell @\"…\"@`. Are we trying to make PowerShell more Brainfuck-like?\r\n\r\nI believe, that @romero126 meant to suggest a oneline herestring literal, such that one could write\r\n```\r\nInvoke-NativeShell @!\"complicated native command with \"quotes\" and | pipe\"!@\r\n```\r\ninstead of\r\n```\r\nInvoke-NativeShell @\"\r\ncomplicated native command with \"quotes\" and | pipe\r\n\"@\r\n```\r\n\r\nIf such a oneline herestring would be considered, I'd suggest to use syntax like `@\"\"\"…\"\"\"@` and `@'''…'''@`, this would be IMO easier to type than `@!\"…\"!@`.\r\n\r\n---\r\n\r\n@romero126 Could you clarify what you meant?\r\n",
    "created_at": "2020-07-15T13:16:16Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-658761098",
    "id": 658761098,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODc2MTA5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658761098/reactions"
    },
    "updated_at": "2020-07-16T13:22:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658761098",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@yecril71pl thanks for catching those errors, updated the top message with fixes.",
    "created_at": "2020-07-15T14:21:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-658797849",
    "id": 658797849,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODc5Nzg0OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658797849/reactions"
    },
    "updated_at": "2020-07-15T14:21:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658797849",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "It is unspecified whether `--%` will execute as command line or as a batch file.",
    "created_at": "2020-07-15T15:39:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-658841310",
    "id": 658841310,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODg0MTMxMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658841310/reactions"
    },
    "updated_at": "2020-07-15T15:39:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658841310",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> \r\n> I believe, that @romero126 meant to suggest a oneline herestring literal, such that one could write\r\n> \r\n> ```\r\n> Invoke-NativeShell @!\"complicated native command with \"quotes\" and | pipe\"!@\r\n> ```\r\n> \r\n> instead of\r\n> \r\n> ```\r\n> Invoke-NativeShell @\"\r\n> complicated native command with \"quotes\" and | pipe\r\n> \"@\r\n> ```\r\n> \r\n> If such a oneline herestring would be considered, I'd suggest to use syntax like `@\"\"\"…\"\"\"@` and `@'''…'''@`, this would be IMO easier to type than `@!\"…\"!@`.\r\n> \r\n> @romero126 Could you clarify what you meant?\r\n\r\nI believe if we add flexibility to Strings to handle \"almost raw\" unparsed data we wouldn't have issues about this pop up.\r\n@TSlivede I agree almost Completely with what you said. Only with a slight variation. It should be able to handle BOTH single line and Multiline without interpolating anything inside the quotes. Whatever Syntax we land on to make that happen I am open to. I am more focused on the concept..\r\n\r\nWith these examples it adds a lot of Flexibility where I don't need to \"Invoke-NativeShell\" as it would just return a string. Which means we are free to manipulate it just like a string would be. So that this potentially could become a Staple of what great looks like. \r\n\r\nA Pivot like this also would mean we wouldn't have to deal with issues above where we spin our wheels on an almost solution when we can handles an edge case, vs addresses the problem as a whole.\r\n\r\nQuick Examples:\r\n``` PowerShell\r\n# For this scenario let @!\"<text>\"!@ be our HereString Verbatim\r\n\r\nInvoke-NativeShell @!\"complicated native command with \"quotes\" and | pipe\"!@\r\n# or\r\nInvoke-NativeShell @!\"\r\nComplicated native command with \"quotes\" and pipe and <tabs>\r\n\"!@\r\n\r\n#or \r\n$r = @!\"\r\ncomplicated native command with custom arguments: {0}\r\n\"!@ -format \"foo\"\r\nInvoke-NativeShell $r\r\n``` \r\n",
    "created_at": "2020-07-15T16:42:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-658873374",
    "id": 658873374,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODg3MzM3NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658873374/reactions"
    },
    "updated_at": "2020-07-15T16:42:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658873374",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/28855373?v=4",
      "events_url": "https://api.github.com/users/romero126/events{/privacy}",
      "followers_url": "https://api.github.com/users/romero126/followers",
      "following_url": "https://api.github.com/users/romero126/following{/other_user}",
      "gists_url": "https://api.github.com/users/romero126/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/romero126",
      "id": 28855373,
      "login": "romero126",
      "node_id": "MDQ6VXNlcjI4ODU1Mzcz",
      "organizations_url": "https://api.github.com/users/romero126/orgs",
      "received_events_url": "https://api.github.com/users/romero126/received_events",
      "repos_url": "https://api.github.com/users/romero126/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/romero126/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romero126/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/romero126"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "That doesn't address the issue @mklement0 cover in the second part of [this comment](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-654851541). Fact of the matter is, we can't just pass a single string to every comand ever; in many cases they have to be split up.",
    "created_at": "2020-07-15T16:44:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-658874614",
    "id": 658874614,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODg3NDYxNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658874614/reactions"
    },
    "updated_at": "2020-07-15T16:44:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658874614",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> I believe if we add flexibility to Strings to handle \"almost raw\" unparsed data we wouldn't have issues about this pop up.\r\n\r\nThis is what `'` and `@'` are for.\r\n\r\n> With these examples it adds a lot of Flexibility where I don't need to \"Invoke-NativeShell\" as it would just return a string. Which means we are free to manipulate it just like a string would be. So that this potentially could become a Staple of what great looks like.\r\n\r\nNative commands return a sequence of strings.  `@!\"` has the potential of becoming a Staple of what unintelligible looks like.\r\n\r\n",
    "created_at": "2020-07-15T17:09:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-658888647",
    "id": 658888647,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODg4ODY0Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658888647/reactions"
    },
    "updated_at": "2020-07-15T17:09:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/658888647",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> > I believe if we add flexibility to Strings to handle \"almost raw\" unparsed data we wouldn't have issues about this pop up.\n> \n> \n> \n> This is what `'` and `@'` are for.\n> \n> \n> \n> > With these examples it adds a lot of Flexibility where I don't need to \"Invoke-NativeShell\" as it would just return a string. Which means we are free to manipulate it just like a string would be. So that this potentially could become a Staple of what great looks like.\n> \n> \n> \n> Native commands return a sequence of strings.  `@!\"` has the potential of becoming a Staple of what unintelligible looks like.\n> \n> \n> \n> \n\nI think you are confused. With the point I was making.\nSingle quotes and Double quotes do only expand $variable or not. It does not automatically escape characters. It also limits me so I can no longer use its defining character. So instead For it to work properly as it is now. I would still have to escape characters which is the entire point of why we needed to include a &! Command.\n\nIf you have a better solution I am all ears. I do believe this hits more edge cases than adding a &!\n\n",
    "created_at": "2020-07-15T22:12:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-659041735",
    "id": 659041735,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTA0MTczNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/659041735/reactions"
    },
    "updated_at": "2020-07-15T22:12:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/659041735",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/28855373?v=4",
      "events_url": "https://api.github.com/users/romero126/events{/privacy}",
      "followers_url": "https://api.github.com/users/romero126/followers",
      "following_url": "https://api.github.com/users/romero126/following{/other_user}",
      "gists_url": "https://api.github.com/users/romero126/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/romero126",
      "id": 28855373,
      "login": "romero126",
      "node_id": "MDQ6VXNlcjI4ODU1Mzcz",
      "organizations_url": "https://api.github.com/users/romero126/orgs",
      "received_events_url": "https://api.github.com/users/romero126/received_events",
      "repos_url": "https://api.github.com/users/romero126/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/romero126/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romero126/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/romero126"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Single quotes and Double quotes do only expand $variable or not. It does not automatically escape characters. It also limits me so I can no longer use its defining character. So instead For it to work properly as it is now. I would still have to escape characters which is the entire point of why we needed to include a &! Command.\r\n\r\nWhich characters would you have to escape and why?\r\n\r\n",
    "created_at": "2020-07-15T22:55:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-659056237",
    "id": 659056237,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTA1NjIzNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/659056237/reactions"
    },
    "updated_at": "2020-07-15T22:55:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/659056237",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "NONE",
    "body": "@romero126 Now I'm confused what you are saying. Are you aware, that powershell [has a here string](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_quoting_rules#here-strings)?\r\n\r\nI previously thought, that you might consider the syntax of powershells here strings annoying (At least I am sometimes annoyed, that there has to be a newline at the beginning and the end...), but now I'm not so sure what you are saying, could you clarify?",
    "created_at": "2020-07-16T13:21:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-659407710",
    "id": 659407710,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1OTQwNzcxMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/659407710/reactions"
    },
    "updated_at": "2020-07-16T18:49:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/659407710",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20812332?v=4",
      "events_url": "https://api.github.com/users/TSlivede/events{/privacy}",
      "followers_url": "https://api.github.com/users/TSlivede/followers",
      "following_url": "https://api.github.com/users/TSlivede/following{/other_user}",
      "gists_url": "https://api.github.com/users/TSlivede/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TSlivede",
      "id": 20812332,
      "login": "TSlivede",
      "node_id": "MDQ6VXNlcjIwODEyMzMy",
      "organizations_url": "https://api.github.com/users/TSlivede/orgs",
      "received_events_url": "https://api.github.com/users/TSlivede/received_events",
      "repos_url": "https://api.github.com/users/TSlivede/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TSlivede/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TSlivede/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TSlivede"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@TSlivede, agreed on here-strings being syntactically somewhat cumbersome.\r\n\r\nThere is an existing proposal, #2337, that proposes improvements, and while it is focused on allowing the closing delimiter to be indented, @lzybkr also proposes a Rust-like _single-line_(-also) variation in https://github.com/PowerShell/PowerShell/issues/2337#issuecomment-391152107, which would allows us to do the following, for instance:\r\n\r\n```powershell\r\n# `ins` is `Invoke-NativeShell`\r\nins @' python -c 'print(\"hi\")' | cat -n '@\r\n```\r\n\r\nThe need for escaping would be avoided by combining _multiple_ `'` with `@`, as needed (e.g., `@'' can use @' here ''@`.\r\n\r\nIn other words: this would be a general enhancement to PowerShell string literals, usable everywhere, which `Invoke-NativeShell` would benefit from as well.\r\n\r\nGiven that #2337 is primarily focused on something else, I've created a **focused proposal in #13204** , and I suggest we continue the conversation there.\r\n",
    "created_at": "2020-07-17T15:05:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660157942",
    "id": 660157942,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDE1Nzk0Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660157942/reactions"
    },
    "updated_at": "2020-07-17T17:04:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660157942",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> The need for escaping would be avoided\r\n\r\nI've seen this a couple of times in this thread.\r\n\r\nAny indicator to the tokeniser to begin a new mode would need an escape mechanism, since you need to differentiate the indicator to the tokeniser that you're leaving that mode from the literal form of that character.\r\n\r\nThe most natural form of that today is single-quoted strings:\r\n\r\n- `'`: start single-quote tokenisation\r\n- `'`: end single-quote tokenisation\r\n- `''`: write a literal single quote within a single-quoted string\r\n\r\nI think the reason we're talking about escaping despite this is:\r\n\r\n- The `--%` operator defines too many ways to exit its mode (`|`, `&&`, `||`, `;`, newline) and allows strings within it (stripping their `'` characters)\r\n- Herestrings and co resolve to one string argument rather than an array of them\r\n\r\nWanting to pass arguments to an executable invocation mean we're actually talking about an array syntax:\r\n\r\n- How to start the array (start verbatim mode)\r\n- How to separate the array (pass a single argument to the new executable)\r\n- How the end the array (end verbatim mode)\r\n\r\n(This is a native concept on *nix, since [`exec`](https://man7.org/linux/man-pages/man3/exec.3.html) expects an array. On Windows, I think we're forced to take an array, serialise it to a particular string syntax and pass it through [`CommandLineToArgvW`](https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-commandlinetoargvw). However, .NET provides an array-based abstraction for both of these -- so arrays make the most sense still)\r\n\r\nThat means we need two escapes:\r\n\r\n- The array separator literal\r\n- The array end literal\r\n\r\nFor example, let's say:\r\n\r\n- `--%` before the command becomes the new verbatim syntax\r\n- How do we end the syntax? newline and `;` maybe?\r\n- How do we separate arguments? ` `  maybe?\r\n\r\nThe questions then are:\r\n\r\n- How do we pass a literal `;` or newline?\r\n- How do we pass a literal ` `?",
    "created_at": "2020-07-17T17:11:16Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660231641",
    "id": 660231641,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDIzMTY0MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660231641/reactions"
    },
    "updated_at": "2020-07-17T17:23:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660231641",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "A native command line is not an array.  It is either a string or an AST.  Since PowerShell does not know anything about ASTs in native shells, only a string remains.",
    "created_at": "2020-07-17T17:25:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660240101",
    "id": 660240101,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDI0MDEwMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660240101/reactions"
    },
    "updated_at": "2020-07-17T17:25:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660240101",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> A native command line is not an array. It is either a string or an AST\r\n\r\nYou haven't provided any grounds for this assertion.\r\n\r\nHere's where PowerShell builds the AST for a command (of any kind, since it does not know until runtime when the command resolves what kind of command it is):\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/f82f74d89811e91613a7450e536d652c5d8f784e/src/System.Management.Automation/engine/parser/Parser.cs#L6391-L6634\r\n\r\nNotice that command elements (including parameters and arguments) are added into an array.\r\n\r\nYou can see this in action in PowerShell like this:\r\n\r\n```\r\n> { ping 192.168.0.1 }.Ast.EndBlock.Statements[0].PipelineElements[0].CommandElements\r\n\r\nStringConstantType : BareWord\r\nValue              : ping\r\nStaticType         : System.String\r\nExtent             : ping\r\nParent             : ping 192.168.0.1\r\n\r\nStringConstantType : BareWord\r\nValue              : 192.168.0.1\r\nStaticType         : System.String\r\nExtent             : 192.168.0.1\r\nParent             : ping 192.168.0.1\r\n```\r\n\r\nThat array is compiled into expressions here:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/f82f74d89811e91613a7450e536d652c5d8f784e/src/System.Management.Automation/engine/parser/Compiler.cs#L4127-L4160\r\n\r\nAnd then that is passed to a pipeline invocation here (notice `Expression.NewArrayInit(typeof(CommandParameterInternal[]), pipelineExprs)` is where the arguments are passed):\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/f82f74d89811e91613a7450e536d652c5d8f784e/src/System.Management.Automation/engine/parser/Compiler.cs#L3798-L3805\r\n\r\n\r\nAt runtime, when the compiled expressions are run, that becomes [this method call](https://github.com/PowerShell/PowerShell/blob/f82f74d89811e91613a7450e536d652c5d8f784e/src/System.Management.Automation/engine/runtime/Operations/MiscOps.cs#L411-L417), which passes through to this call which decides what command processor to use:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/f82f74d89811e91613a7450e536d652c5d8f784e/src/System.Management.Automation/engine/runtime/Operations/MiscOps.cs#L29-L312\r\n\r\nEventually, when the pipeline is called, that argument array is bound to the native command using the `NativeCommandParameterBinder`:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/f82f74d89811e91613a7450e536d652c5d8f784e/src/System.Management.Automation/engine/NativeCommandParameterBinder.cs#L69-L137\r\n\r\nThat takes the argument array, which includes AST metadata like what kind of string was used for each argument, and builds a new string for argument invocation in the `NativeCommandProcessor` here:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/f82f74d89811e91613a7450e536d652c5d8f784e/src/System.Management.Automation/engine/NativeCommandProcessor.cs#L1094-L1166\r\n\r\nThis is done because the .NET API we currently use for process invocation is the old \"all arguments in a single string\" version, rather than the new one in .NET Core that allows you to pass an array and lets .NET rebuild the invocation as needed in a platform specific way.\r\n\r\nBut us using that API is an implementation detail. For example, we could call `fork`/`exec` directly on *nix, like we do here:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/f82f74d89811e91613a7450e536d652c5d8f784e/src/powershell/Program.cs#L268-L330\r\n\r\nNotice that `exec` here takes an array -- we did that because it's the simplest and most direct way of passing arguments to the syscall, which is ultimately the goal of a verbatim argument syntax.\r\n",
    "created_at": "2020-07-17T18:05:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660260652",
    "id": 660260652,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDI2MDY1Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660260652/reactions"
    },
    "updated_at": "2020-07-17T18:09:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660260652",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@rjmholt:\r\n\r\n_Functionally_, all needs are already covered by the existing string-literal forms, _if you pass the native command line as a single string_, which I strongly recommend, via a new `Invoke-NativeShell` / `ins` cmdlet.\r\n\r\n**The starting point here is as _single string_, not an array: it is an _entire command line_ - to be parsed _by the target shell_** - and it makes the most sense to reflect this in PowerShell as such - as opposed to trying to awkwardly shoehorn a different shell's syntax into PowerShell's with something like `--%`\r\n\r\n**All that `Invoke-NativeShell` has to do is to pass the single string that contains the entire native-shell command line to the native shell via its CLI:**\r\n\r\n  * on **Unix**, this means: pass the string as-is, _as whole_, as the second element of the argument _array_ passed to `exec` (with  `-c` being the first argument-array element, and `/bin/sh` the executable); expressed in .NET terms with a simple example, where `printf \"'%s'\" foo | cat -n` is the verbatim content of the single string containing the command line to pass through (note the use of `.ArgumentList`, not `.Arguments`; the doubling of `'` s an artifact of this example only):\r\n     * `$psi = [Diagnostics.ProcessStartInfo]::new('/bin/sh');  $psi.ArgumentList.Add('-c'); $psi.ArgumentList.Add('printf \"''%s''\" foo | cat -n'); [Diagnostics.Process]::start($psi).WaitForExit()`\r\n\r\n  * on **Windows**, this means: to accommodate `cmd`'s quirks, fill the `lpCommandLine` argument of `CreateProcess` as follows (with `lpApplicationName` assumed to be the value of environment variable `ComSpec`, which points to `cmd.exe`): `\"/c \" + cmdLine`, where `cmdLine` is the whole command-line string as-is; expressed in .NET terms with a simple example, where `echo a^&b & ver` is the verbatim content of the single string containing the command line to pass through:\r\n     * `$psi = [Diagnostics.ProcessStartInfo]::new($env:ComSpec);  $psi.Arguments = '/c ' + 'echo a^&b & ver'; [Diagnostics.Process]::start($psi).WaitForExit()`\r\n    * @yecril71pl, this implies the answer to your question as to whether command-prompt or batch-file semantics are to be used: it is the former, as also used by other scripting languages, such as Python with `os.system()`; the (perhaps unfortunate) implication is that you won't be able to escape `%` characters, and that `for` loop variables must use a single `%` (e.g., `%i` instead of `%%i`); and that you must prefix loop-body commands with `@` to prevent them from being echoed (e.g., `for %i in (*.txt) do @echo %i`).\r\n\r\nThis process will be _transparent to the end user_, so that all they need to focus on is to pass the native-shell command line _verbatim_, only needing to satisfy _PowerShell's_ string-literal syntax requirements:\r\n\r\nWith the form `ins @'<newline>...<newline>'@`, you already _can_ use your native-shell command lines as-is: see [above](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-653526374) for how the various existing string-literal forms can be used, which - due to the availability of the _interpolating_ here-string form (`@\"<newline>...<newline>\"@`) as well - includes the ability to use _PowerShell_ variables and expressions in the command line (the inability to do so is one of the major shortcomings of `--%`).\r\n\r\n**What my previous comment proposes is a _new general form of raw string  literal_, which is _separate from this proposal_** (and its parsing logic is (hopefully) well-defined);  though, as stated,  `Invoke-NativeShell` calls would then be _more convenient_.\r\n\r\n\r\nInstead of what you can already do (assuming an `Invoke-NativeShell` / `ins` command):\r\n\r\n```powershell\r\n# ALREADY WORKS: Literal here-string\r\nins @'\r\npython -c 'print(\"hi\")' | cat -n\r\n'@\r\n```\r\n\r\nwith the proposed new single-line raw literal you could simplify to:\r\n\r\n```powershell\r\n# PROPOSED, more convenient syntax: new raw literal.\r\nins @' python -c 'print(\"hi\")' | cat -n '@\r\n```\r\n\r\nIf the specifics of this new raw string-literal syntax need debating, please let us do it in #13204, not here.\r\n",
    "created_at": "2020-07-17T18:11:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660263405",
    "id": 660263405,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDI2MzQwNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660263405/reactions"
    },
    "updated_at": "2020-07-18T22:12:16Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660263405",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "So rereading the proposal to understand the original intent, I see it's really just asking for a better syntax for `/bin/sh -c '<command>'` + the cmd version, along with a special string escape logic for each target shell. I had based my initial conception on a special syntax and needing to work with the parser and native command processor, and on .NET's `ProcessStartInfo.Arguments` property being [very difficult to use correctly in terms of quote passing](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.processstartinfo.arguments?view=netcore-3.1#remarks).\r\n\r\nBut in fact [the `Arguments` string just gets passed through verbatim](https://github.com/dotnet/runtime/blob/6072e4d3a7a2a1493f514cdf4be75a3d56580e84/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Win32.cs#L49). So all we need to do is pass such a string through directly.\r\n\r\nIn that case, I think any new syntax is totally unneeded (it will just complicate tokenisation logic and I suspect confuse people) and instead this is just a new command, `ins` like you say. .NET has some logic for this [here](https://github.com/dotnet/runtime/blob/6072e4d3a7a2a1493f514cdf4be75a3d56580e84/src/libraries/System.Private.CoreLib/src/System/PasteArguments.cs#L8-L97) which we'll be forced to reimplement, but that's ok since we need to be a little bit cleverer anyway.",
    "created_at": "2020-07-17T18:38:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660276268",
    "id": 660276268,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDI3NjI2OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660276268/reactions"
    },
    "updated_at": "2020-07-17T18:38:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660276268",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "Some comments on @rjmholt's comment https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660231641\r\n\r\n> Any indicator to the tokeniser to begin a new mode would need an escape mechanism, since you need to differentiate the indicator to the tokeniser that you're leaving that mode from the literal form of that character.\r\n\r\nI agree and I don't think an in-line here string syntax can completely avoid the need to escape.\r\n\r\n> The --% operator defines too many ways to exit its mode (|, &&, ||, ;, newline) and allows strings within it (stripping their ' characters)\r\n\r\nWhen speaking of `--%`, are you referring to the existing `--%` switch? If so, it's better to make that clear in your comment, as now `--%` is proposed to be a call operator.\r\n\r\n> Wanting to pass arguments to an executable invocation mean we're actually talking about an array syntax:\r\n\r\nThe proposal is to call the native shell (sh or cmd) and pass everything literally after the call operator `--%`, like `sh -c ...`. So it's not powershell that passes the arguments to the target executable. In that case, I think we don't need _an array syntax_, right?\r\n\r\n> How do we end the syntax? newline and ; maybe?\r\n> How do we separate arguments? 'space' maybe?\r\n\r\nI think the verbatim parsing ends at newline. To pass in a new line as part of the argument, use `\\n` I guess, just like what you do in bash directly.",
    "created_at": "2020-07-17T18:39:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660276432",
    "id": 660276432,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDI3NjQzMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660276432/reactions"
    },
    "updated_at": "2020-07-17T18:40:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660276432",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> > A native command line is not an array. It is either a string or an AST\r\n> \r\n> You haven't provided any grounds for this assertion.\r\n> \r\n> Here's where PowerShell builds the AST for a command (of any kind, since it does not know until runtime when the command resolves what kind of command it is):\r\n\r\nIf this proposal gets implemented, it will introduce a special construct where PowerShell will not build the AST at all.",
    "created_at": "2020-07-17T18:47:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660280139",
    "id": 660280139,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDI4MDEzOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660280139/reactions"
    },
    "updated_at": "2020-07-17T18:47:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660280139",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Glad to hear it, @rjmholt.\r\n\r\n> .NET has some logic for this here which we'll be forced to reimplement\r\n\r\nI don't think we actually need to reimplement anything, as the commands in my previous comment show: on Windows, use `.Arguments` for whole-command-line-string pass-through to the WinAPI; on Unix, use `.ArgumentList` to construct the argument _array_ that is used directly with `exec`.\r\n\r\n",
    "created_at": "2020-07-17T18:50:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660281483",
    "id": 660281483,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDI4MTQ4Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660281483/reactions"
    },
    "updated_at": "2020-07-17T18:53:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660281483",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> If this proposal gets implemented, it will introduce a special construct where PowerShell will not build the AST at all.\r\n\r\nWell it would build a different AST type, one designed for this purpose.  If it's not part of the AST then it's basically the same as a comment, nothing happens.",
    "created_at": "2020-07-17T19:04:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660287652",
    "id": 660287652,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDI4NzY1Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660287652/reactions"
    },
    "updated_at": "2020-07-17T19:04:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660287652",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "> _Functionally_, all needs are already covered by the existing string-literal forms, _if you pass the native command line as a single string_, which I strongly recommend, via a new `Invoke-NativeShell` / `ins` cmdlet.\r\n\r\nI personally like the `Invoke-NativeShell` cmdlet idea, in some ways better than the call operator `--%`. The main concern I heard about this idea is that it's more typing than `--%`+<kbd>Ctrl+v</kbd> and differentiating literal here-string from interpolating here-string is another burden to user (_I personally think `ins` is way easier to type than `--%`_).",
    "created_at": "2020-07-17T19:04:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660287983",
    "id": 660287983,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDI4Nzk4Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660287983/reactions"
    },
    "updated_at": "2020-07-17T19:04:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660287983",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> The main concern I heard about this idea is that it's more typing than `--%`+Ctrl+v and differentiating literal here-string from interpolating here-string is another burden to user (_I personally think `ins` is way easier to type than `--%`_).\r\n\r\nMaybe PSRL can help.  Similar to the issue about a key handler to surround pasted paths, PSRL could read the `CommandAst`, see it's `ins` and properly escape the pasted string.\r\n\r\n",
    "created_at": "2020-07-17T19:08:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660289500",
    "id": 660289500,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDI4OTUwMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660289500/reactions"
    },
    "updated_at": "2020-07-17T19:08:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660289500",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Well it would build a different AST type, one designed for this purpose. If it's not part of the AST then it's basically the same as a comment, nothing happens.\r\n\r\nSure but the tree will be trivial.  It will not reflect the meaning of the commands that are to be executed.",
    "created_at": "2020-07-17T19:12:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660291218",
    "id": 660291218,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDI5MTIxOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660291218/reactions"
    },
    "updated_at": "2020-07-17T19:12:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660291218",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Start process cmd.exe redirect stdin / stdio and we can literally use a string to invoke-NativeCommand same with bash \n\n",
    "created_at": "2020-07-17T19:39:35Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660302825",
    "id": 660302825,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDMwMjgyNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660302825/reactions"
    },
    "updated_at": "2020-07-17T19:39:35Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660302825",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/28855373?v=4",
      "events_url": "https://api.github.com/users/romero126/events{/privacy}",
      "followers_url": "https://api.github.com/users/romero126/followers",
      "following_url": "https://api.github.com/users/romero126/following{/other_user}",
      "gists_url": "https://api.github.com/users/romero126/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/romero126",
      "id": 28855373,
      "login": "romero126",
      "node_id": "MDQ6VXNlcjI4ODU1Mzcz",
      "organizations_url": "https://api.github.com/users/romero126/orgs",
      "received_events_url": "https://api.github.com/users/romero126/received_events",
      "repos_url": "https://api.github.com/users/romero126/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/romero126/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/romero126/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/romero126"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Glad to hear it, @daxian-dbw.\r\nLove the idea, @SeeminglyScience .\r\n\r\n> differentiating literal here-string from interpolating here-string is another burden to user \r\n\r\nI think that's a _plus_, because - unlike `--%` - use of `@\"<newline>...<newline>\"@` allows you to directly incorporate  the values of _PowerShell_ variables and expressions into the native command line.\r\n\r\nOf course, that assumes that users know the difference between single-quoted (verbatim) and double-quoted (interpolating) strings and about selective `` ` ``-escaping of `$`, but I think it's an important (advanced) option to have.\r\n\r\nTo help the cut-and-paste users, the proposed PSReadLine feature should  default to `@'<newline>...<newline>'@` (verbatim).\r\n\r\n---\r\n\r\nUltimately, we don't want to promote a mindset where users don't need to know and understand PowerShell's unique syntax requirements - instead, we want to promote understanding of them, in light of the _added power they bring_.\r\n\r\n**But to encourage users to use PowerShell's _own_ syntax, which is by definition _cross-platform_, it must work predictably**.\r\n**To that end, #1995 must be fixed**, ideally directly, allowing a breaking change, or, if that's not an option, via a minimal-ceremony _opt-in_.\r\n\r\nTo summarize: \r\n\r\n* **Something like `--%` (the new operator form proposed here), by definition a _platform-specific_ feature, is in no way a substitute for fixing #1995**.\r\n\r\n* `Invoke-NativeShell` (`ins`) avoids all the limitations of the proposed `--%` operator and provides the \"trap door\" solution that @joeyaiello  mentioned: a quick way to execute a command line written for the native shell, without having to adapt it to PowerShell's syntax.\r\n\r\n* `--%` should remain in its original _argument_ form only, and should remain a _Windows-only_ feature (which it _effectively_, albeit not _technically_ is) - in other words: no change needed.\r\n    * Once #1995 is fixed, `--%`'s sole purpose will be to accommodate _edge cases on Windows_: allowing you to control the explicit quoting of the command line passed to rogue programs such as `msiexec` that require very specific forms of intra-argument quoting.\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-07-17T19:49:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660307255",
    "id": 660307255,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDMwNzI1NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 2,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660307255/reactions"
    },
    "updated_at": "2020-07-17T20:02:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660307255",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "One of the other features I really want in PS v7.x is the ability to have a native command exiting with an error code stop my script, like `set -e`  as discussed in this [RFC](https://github.com/PowerShell/PowerShell-RFC/pull/88/files?short_path=e6e13bd#diff-e6e13bdbc99ad974811df49f562f816b).  **If** the solution to that is something like an `Invoke-NativeCommand`, would that get confusing with `Invoke-NativeShell`?  \r\n\r\nJust trying to play the movie forward a bit because as much as I want the call native feature, I really want my build & test scripts to error out when calling msbuild, cl, cmake, Conan, npm, etc and those native commands exit with a non-zero exit code without having to remember to check $LASTEXITCODE all the time.  If the implementation is via just another preference variable e.g. `$PSNativeCommandInErrorActionPreference` then I suppose that would impact the invocation of the native shell - it being a native \"command\" and all?",
    "created_at": "2020-07-17T22:23:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660362386",
    "id": 660362386,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDM2MjM4Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660362386/reactions"
    },
    "updated_at": "2020-07-17T22:23:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660362386",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> > The main concern I heard about this idea is that it's more typing than `--%`+Ctrl+v and differentiating literal here-string from interpolating here-string is another burden to user (_I personally think `ins` is way easier to type than `--%`_).\r\n> \r\n> Maybe PSRL can help. Similar to the issue about a key handler to surround pasted paths, PSRL could read the `CommandAst`, see it's `ins` and properly escape the pasted string.\r\n\r\nBut what about:\r\n\r\n```\r\n$c = gcm ins\r\n& $c ...\r\n```\r\nPSRL is going to have a hard time recognizing what's going on there. It would have to be stateful, resolve the alias ins to invoke-nativeshell, then figure out that you want to call the commandinfo, then demunge the args? I really, really dislike the idea of special casing a fake command. ",
    "created_at": "2020-07-18T03:32:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660417115",
    "id": 660417115,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDQxNzExNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660417115/reactions"
    },
    "updated_at": "2020-07-18T03:32:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660417115",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1844001?v=4",
      "events_url": "https://api.github.com/users/oising/events{/privacy}",
      "followers_url": "https://api.github.com/users/oising/followers",
      "following_url": "https://api.github.com/users/oising/following{/other_user}",
      "gists_url": "https://api.github.com/users/oising/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/oising",
      "id": 1844001,
      "login": "oising",
      "node_id": "MDQ6VXNlcjE4NDQwMDE=",
      "organizations_url": "https://api.github.com/users/oising/orgs",
      "received_events_url": "https://api.github.com/users/oising/received_events",
      "repos_url": "https://api.github.com/users/oising/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/oising/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oising/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/oising"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> > differentiating literal here-string from interpolating here-string is another burden to user\r\n> \r\n> I think that's a _plus_, because - unlike `--%` - use of `@\"<newline>...<newline>\"@` allows you to directly incorporate the values of _PowerShell_ variables and expressions into the native command line.\r\n\r\nI'm not following you @mklement0. Why can't `--%` be taught to do this? I already gave this as a use case.",
    "created_at": "2020-07-18T03:44:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660418293",
    "id": 660418293,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDQxODI5Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660418293/reactions"
    },
    "updated_at": "2020-07-18T03:44:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660418293",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1844001?v=4",
      "events_url": "https://api.github.com/users/oising/events{/privacy}",
      "followers_url": "https://api.github.com/users/oising/followers",
      "following_url": "https://api.github.com/users/oising/following{/other_user}",
      "gists_url": "https://api.github.com/users/oising/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/oising",
      "id": 1844001,
      "login": "oising",
      "node_id": "MDQ6VXNlcjE4NDQwMDE=",
      "organizations_url": "https://api.github.com/users/oising/orgs",
      "received_events_url": "https://api.github.com/users/oising/received_events",
      "repos_url": "https://api.github.com/users/oising/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/oising/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oising/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/oising"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> I really, really dislike the idea of special casing a fake command.\r\n\r\nThere is no fake command here, only a bona fide cmdlet, `Invoke-NativeShell`, aliased to `ins`.\r\n\r\n`gcm ins`  (`Get-Command ins`) will provide information about the `ins` alias in the form of a `[System.Management.Automation.AliasInfo]` instance, which you can later pass to `&` for invocation, as with any other command or alias.\r\n\r\nTherefore, your example will work exactly as intended - it's just that if you use the `gcm`  (`Get-Command`) detour, you'll have to spell out the appropriate string-literal syntax _yourself_, without the _optional convenience command scaffolding_ that PSRL _could_ provide, if @SeeminglyScience's suggestion is implemented:\r\n\r\n```powershell\r\n$c = gcm ins\r\n& $c @'\r\npython -c 'print(\"hi\")' | cat -n\r\n'@\r\n```\r\n\r\nOr, if the new raw string-literal syntax proposed in #13204 is implemented:\r\n\r\n```powershell\r\n$c = gcm ins\r\n& $c @' python -c 'print(\"hi\")' | cat -n '@\r\n```\r\n\r\nOf course, if you're familiar with the syntax of PowerShell's string literals, a regular single-quoted string will do too: simply double the embedded `'` inside the overall `'...'` string:\r\n\r\n```powershell\r\n$c = gcm ins\r\n& $c 'python -c ''print(\"hi\")'' | cat -n'\r\n```\r\n",
    "created_at": "2020-07-18T04:01:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660420181",
    "id": 660420181,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDQyMDE4MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660420181/reactions"
    },
    "updated_at": "2020-07-18T11:31:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660420181",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": ">  Why can't `--%` be taught to do this?\r\n\r\n* `--%` is lacking a closing delimiter, which prevents it use in Powershell pipelines, which is an unacceptable restriction (note that `(...)` enclosure is _not_ an option, because that implies up-front collection of all output lines in memory rather than _streaming_ processing).\r\n\r\n* On Unix, `--%` cannot _both_ support (unescaped) `$` as a PowerShell metacharacter _and_ as a POSIX-shell metacharacter.\r\n\r\nAgain: there is _no_ justification for and no benefit to shoehorning a _different shell's syntax_ into PowerShell - pass the native-shell command line _as a string_, to `ins`, and all conceptual problems go away.\r\n",
    "created_at": "2020-07-18T04:09:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660421088",
    "id": 660421088,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDQyMTA4OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660421088/reactions"
    },
    "updated_at": "2020-07-18T04:11:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660421088",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "Invoke-NativeShell implies that PowerShell isn’t the native shell. Is that assumption always correct and always shall be? ",
    "created_at": "2020-07-18T09:10:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660453950",
    "id": 660453950,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDQ1Mzk1MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660453950/reactions"
    },
    "updated_at": "2020-07-18T09:10:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660453950",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/25411814?v=4",
      "events_url": "https://api.github.com/users/SP3269/events{/privacy}",
      "followers_url": "https://api.github.com/users/SP3269/followers",
      "following_url": "https://api.github.com/users/SP3269/following{/other_user}",
      "gists_url": "https://api.github.com/users/SP3269/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SP3269",
      "id": 25411814,
      "login": "SP3269",
      "node_id": "MDQ6VXNlcjI1NDExODE0",
      "organizations_url": "https://api.github.com/users/SP3269/orgs",
      "received_events_url": "https://api.github.com/users/SP3269/received_events",
      "repos_url": "https://api.github.com/users/SP3269/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SP3269/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SP3269/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SP3269"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@oising the use case is someone copy and pasting a native command from a README or something. If they're doing something more complicated than typing `ins` <kbd>SPACE</kbd> <kbd>CTRL</kbd> + <kbd>v</kbd> then they'll just build and escape their own string like normal.",
    "created_at": "2020-07-18T11:51:09Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660471657",
    "id": 660471657,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDQ3MTY1Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660471657/reactions"
    },
    "updated_at": "2020-07-18T11:51:09Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660471657",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 \r\n\r\n> **But to encourage users to use PowerShell's _own_ syntax, which is by definition _cross-platform_, it must work predictably**.\r\n> **To that end, #1995 must be fixed**, ideally directly, allowing a breaking change, or, if that's not an option, via a minimal-ceremony _opt-in_.\r\n\r\nThis is separate from the discussion on `ins`/`--%` right?  If you disagree can you clarify why that issue would affect the new command/syntax?",
    "created_at": "2020-07-18T11:57:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660472424",
    "id": 660472424,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDQ3MjQyNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660472424/reactions"
    },
    "updated_at": "2020-07-18T11:57:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660472424",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@SeeminglyScience, yes, it is separate, but that hasn't been clear in this thread. \r\nThe only reason #1995 ever came up here is that it was originally closed in favor of this issue (though fortunately reopened since), and the OP here still states that this issue will fix it (\"This should also solve these issues:\").\r\nTherefore, I wanted to stress that `ins` / `--%`  would _not_ address #1995, which requires its own fix, urgently.\r\n(Only if PowerShell's own argument passing works properly can we in good conscience recommend that users fully learn and embrace PowerShell's own syntax - which we should.)",
    "created_at": "2020-07-18T12:14:44Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660474350",
    "id": 660474350,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDQ3NDM1MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 5,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 5,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660474350/reactions"
    },
    "updated_at": "2020-07-18T12:15:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660474350",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@SP3269, we can cross that bridge when we get to it 😁.\r\n\r\nBut seriously: \r\n\r\nIf you think of \"native\" as \"written specifically for the host platform [family]\", the name would still fit, even if PowerShell should ever become the default system shell on a given platform (here's hoping, but I don't think that's realistic, at least not in the foreseeable future).\r\n\r\nAs for alternatives: \r\n\r\n* `Invoke-[System]DefaultShell` would be the most accurate name (though it would unambiguously no longer apply should PowerShell ever become a system's default shell), but \"native\" seems to be the more commonly used term in the PowerShell world.\r\n\r\n* `Invoke-LegacyShell` has some justification on Windows, but I don't think Unix users would take too kindly to that term.\r\n\r\n\r\n",
    "created_at": "2020-07-18T12:45:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660477971",
    "id": 660477971,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDQ3Nzk3MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660477971/reactions"
    },
    "updated_at": "2020-07-18T22:14:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660477971",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I think I am beginning to unravel the utter confusion I'm experiencing trying to keep track of everyone's motives, ideas and issues here. It seems that we're (@mklement0 and I, at least) are looking at this as two different solutions to two different views of the same conceptual problem. What I was suggesting was using `--%` as a hint to the _parser_ to change the way things are parsed in conjunction with the call `&` operator (not necessarily using `--%` standalone.) On the other hand, Michael seems to be looking at `ins` as a drop-in cmdlet to replace powershell's own internal native command broker and argument parser, and is not looking to change powershell's parser, instead, using strings/here-strings to capture the intended parameters (which I am saying could be used with `--%` also.) \r\n\r\n> --% is lacking a closing delimiter, which prevents it use in Powershell pipelines\r\n\r\nThis point I don't get at all. It's no more lacking a closing delimiter than ins/invoke-nativecommand is. If you need to delimit or feed from the LHS, use here-strings, else it is considered as a single statement.\r\n\r\n\r\n\r\n",
    "created_at": "2020-07-18T19:01:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660526501",
    "id": 660526501,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDUyNjUwMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660526501/reactions"
    },
    "updated_at": "2020-07-18T19:01:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660526501",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1844001?v=4",
      "events_url": "https://api.github.com/users/oising/events{/privacy}",
      "followers_url": "https://api.github.com/users/oising/followers",
      "following_url": "https://api.github.com/users/oising/following{/other_user}",
      "gists_url": "https://api.github.com/users/oising/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/oising",
      "id": 1844001,
      "login": "oising",
      "node_id": "MDQ6VXNlcjE4NDQwMDE=",
      "organizations_url": "https://api.github.com/users/oising/orgs",
      "received_events_url": "https://api.github.com/users/oising/received_events",
      "repos_url": "https://api.github.com/users/oising/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/oising/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oising/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/oising"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Regardless of whatever way is chosen, it seems that there will be a need to choose a native shell to dispatch the commandline. I suggest we use the environment variables `COMSPEC` on Windows (defaults to `%systemroot%\\system32\\cmd.exe`) and `SHELL` on Linux (defaults to `/bin/bash`) -- if SHELL doesn't exist, we should target `/bin/sh` (which in most cases is a symlink to bash anyway.)   ",
    "created_at": "2020-07-18T19:32:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660531075",
    "id": 660531075,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDUzMTA3NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660531075/reactions"
    },
    "updated_at": "2020-07-18T19:35:44Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660531075",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1844001?v=4",
      "events_url": "https://api.github.com/users/oising/events{/privacy}",
      "followers_url": "https://api.github.com/users/oising/followers",
      "following_url": "https://api.github.com/users/oising/following{/other_user}",
      "gists_url": "https://api.github.com/users/oising/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/oising",
      "id": 1844001,
      "login": "oising",
      "node_id": "MDQ6VXNlcjE4NDQwMDE=",
      "organizations_url": "https://api.github.com/users/oising/orgs",
      "received_events_url": "https://api.github.com/users/oising/received_events",
      "repos_url": "https://api.github.com/users/oising/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/oising/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oising/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/oising"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> >--% is lacking a closing delimiter, which prevents it use in Powershell pipelines\r\n>\r\n>This point I don't get at all. It's no more lacking a closing delimiter than ins/invoke-nativecommand is. If you need to delimit or feed from the LHS, use here-strings, else it is considered as a single statement.\r\n\r\nBasically you can't call things like `cmd --% /c someapp | someOtherApp` and have cmd handle the pipeline; PowerShell still interprets a pipeline (and a few other things like `&&` and `||` which would otherwise be useful for Unix folks) as being a PowerShell token instead of passing it to the native command as part of the argument string.",
    "created_at": "2020-07-18T19:45:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660532757",
    "id": 660532757,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDUzMjc1Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660532757/reactions"
    },
    "updated_at": "2020-07-18T19:45:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660532757",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> and SHELL on Linux (defaults to `/bin/bash`)\r\n\r\nNo: **the _system_ shell on Unix-like platforms is _invariably_ `/bin/sh`**.\r\nThis is distinct from a given _user's_  interactive shell (reflected in `$env:SHELL` - but, unfortunately, currently not if _PowerShell_ is the user's shell, see #12150), which is (a) configurable and (b) often _defaults to_ `/bin/bash`,  but even that is not a given, as evidenced by macOS recently transitioning to `/bin/zsh` as the default interactive shell for new users.\r\n\r\n> I suggest we use the environment variables `COMSPEC` on Windows\r\n\r\nGood point, that's the better way to refer to the system shell (command interpreter) on Windows - I've updated the sample command [above](https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660263405) accordingly.\r\n",
    "created_at": "2020-07-18T21:53:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660547765",
    "id": 660547765,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDU0Nzc2NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660547765/reactions"
    },
    "updated_at": "2020-07-18T22:02:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660547765",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> One of the other features I really want in PS v7.x is the ability to have a native command exiting with an error code stop my script, like `set -e` as discussed in this [RFC](https://github.com/PowerShell/PowerShell-RFC/pull/88/files?short_path=e6e13bd#diff-e6e13bdbc99ad974811df49f562f816b). **If** the solution to that is something like an `Invoke-NativeCommand`, would that get confusing with `Invoke-NativeShell`?\r\n> \r\n> Just trying to play the movie forward a bit because as much as I want the call native feature, I really want my build & test scripts to error out when calling msbuild, cl, cmake, Conan, npm, etc and those native commands exit with a non-zero exit code without having to remember to check $LASTEXITCODE all the time. If the implementation is via just another preference variable e.g. `$PSNativeCommandInErrorActionPreference` then I suppose that would impact the invocation of the native shell - it being a native \"command\" and all?\r\n\r\nWe have `Start-NativeExecution` in our `build` module for that purpose.",
    "created_at": "2020-07-18T21:59:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660548422",
    "id": 660548422,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDU0ODQyMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660548422/reactions"
    },
    "updated_at": "2020-07-18T21:59:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660548422",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1363094?v=4",
      "events_url": "https://api.github.com/users/yecril71pl/events{/privacy}",
      "followers_url": "https://api.github.com/users/yecril71pl/followers",
      "following_url": "https://api.github.com/users/yecril71pl/following{/other_user}",
      "gists_url": "https://api.github.com/users/yecril71pl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/yecril71pl",
      "id": 1363094,
      "login": "yecril71pl",
      "node_id": "MDQ6VXNlcjEzNjMwOTQ=",
      "organizations_url": "https://api.github.com/users/yecril71pl/orgs",
      "received_events_url": "https://api.github.com/users/yecril71pl/received_events",
      "repos_url": "https://api.github.com/users/yecril71pl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/yecril71pl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yecril71pl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/yecril71pl"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I've seen that.  How exactly would you combine `Start-NativeExecution` with `Invoke-NativeShell` if you'd like the later to effectively throw on a non-zero exit code?  I really hope that something like PR #3523 makes it in along with this call native feature because I want the two to work together.   I suppose if call native winds up being implemented as a cmdlet (Invoke-NativeShell vs --%) then `-ErrorAction Stop` could be implemented to have it throw (terminating error) on a non-zero exit code.",
    "created_at": "2020-07-18T22:45:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660553055",
    "id": 660553055,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDU1MzA1NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660553055/reactions"
    },
    "updated_at": "2020-07-18T22:47:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660553055",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> > > --% is lacking a closing delimiter, which prevents it use in Powershell pipelines\r\n> > \r\n> > \r\n> > This point I don't get at all. It's no more lacking a closing delimiter than ins/invoke-nativecommand is. If you need to delimit or feed from the LHS, use here-strings, else it is considered as a single statement.\r\n> \r\n> Basically you can't call things like `cmd --% /c someapp | someOtherApp` and have cmd handle the pipeline; PowerShell still interprets a pipeline (and a few other things like `&&` and `||` which would otherwise be useful for Unix folks) as being a PowerShell token instead of passing it to the native command as part of the argument string.\r\n\r\nYes, I understand the *current* behaviour @vexx32 . But we're not (at least I'm not) talking about the *current* behaviour of `--%` -- we're talking about enhancing it, no? Why do I get the feeling that we're all talking around each other here? :)\r\n\r\nAs I said way, way up above, we could *enhance* `&` to work with `--%` so *this is possible*. I also think we need to be clear about implicit native exec versus explicit invocation of a shell with arguments. This is a constant source of confusion - even for seasoned windows users - that somehow cmd.exe (a shell)  is needed to \"run\" other executables; the same applies to linux/osx.\r\n\r\n\r\n",
    "created_at": "2020-07-18T22:51:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660553606",
    "id": 660553606,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDU1MzYwNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660553606/reactions"
    },
    "updated_at": "2020-07-18T22:53:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660553606",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1844001?v=4",
      "events_url": "https://api.github.com/users/oising/events{/privacy}",
      "followers_url": "https://api.github.com/users/oising/followers",
      "following_url": "https://api.github.com/users/oising/following{/other_user}",
      "gists_url": "https://api.github.com/users/oising/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/oising",
      "id": 1844001,
      "login": "oising",
      "node_id": "MDQ6VXNlcjE4NDQwMDE=",
      "organizations_url": "https://api.github.com/users/oising/orgs",
      "received_events_url": "https://api.github.com/users/oising/received_events",
      "repos_url": "https://api.github.com/users/oising/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/oising/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oising/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/oising"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Yes, I understand the _current_ behaviour @vexx32 . But we're not (at least I'm not) talking about the _current_ behaviour of `--%` -- we're talking about enhancing it, no? Why do I get the feeling that we're all talking around each other here? :)\r\n\r\nSo the current pitch for adjusting `--%` is that if it's where the command name would typically be, everything to the right of it is parsed *as is* (up to a new line) and sent directly to bash/cmd.  There's no room any PowerShell syntax like here-strings and what not because then it has all the same problems that  `--%` and the native command processor currently have.",
    "created_at": "2020-07-18T23:09:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13068#issuecomment-660555412",
    "id": 660555412,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13068",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDU1NTQxMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 1,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660555412/reactions"
    },
    "updated_at": "2020-07-18T23:12:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660555412",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  }
]
