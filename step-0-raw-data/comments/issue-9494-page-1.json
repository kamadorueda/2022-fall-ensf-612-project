[
  {
    "author_association": "COLLABORATOR",
    "body": "Perhaps we could discuss this in #3223.\r\n",
    "created_at": "2019-04-29T05:03:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9494#issuecomment-487452589",
    "id": 487452589,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9494",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NzQ1MjU4OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/487452589/reactions"
    },
    "updated_at": "2019-04-29T05:03:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/487452589",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "The `-` in `pwsh -file C:\\temp\\q1.ps1 -` is just a positional argument; `-` is only special as the _first_ argument after `-file` or `-command`; that is, if it is specified _instead of_ a file name / code snippet.\r\n\r\nDo note that **the primary use of these idioms is to provide input via _stdin_  / the pipeline, not _interactive_ use.**\r\n\r\nGiven that, when called from the outside, `-` should represent _stdin_, the following commands should all be equivalent on Unix:\r\n\r\n```powershell\r\npwsh -noprofile -file -\r\npwsh -noprofile -file /dev/stdin\r\n```\r\n\r\n`pwsh -noprofile  -file -` is broken (as is `pwsh -noprofile -command -`, as demonstrated in your OP).\r\n\r\n`pwsh -noprofile -file /dev/stdin` works in principle with interactive input, but, once the input is submitted with ^D, it then displays pseudo-interactive _output_ behavior, as discussed in #3223.\r\n\r\n(As an aside, `bash` actually prompts _line by line_ in this scenario,  because, in the Unix world, _non-redirected_, i.e., interactive stdin input is processed line by line, whereas _redirected_ stdin is typically processed as a whole. Again, however: interactive input is _not_ the typical or useful use case - if you want to submit commands interactively, one by one, just start a new session with `pwsh`.)\r\n\r\nReturning to the typical use case:\r\n\r\nThe following two commands should be equivalent (with the exception of what the script reports in `$PSCommandPath`, `$PSScriptRoot`, ...):\r\n\r\n* `pwsh -noprofile -file foo.ps1`\r\n* `cat foo.ps1 | pwsh -noprofile -file -`\r\n\r\nIt is what enables the powerful `curl ... | sh` install-from-the-web idiom in POSIX-like shells - that is, feeding the _content_ of a script to the shell rather than needing to provide a _file_['s path].\r\n\r\nIf `-file -` worked that way, there would really be no need for `-command -` at all.\r\nGiven that we cannot remove support for it, it should be made to work the same, but [soft]-deprecated.\r\n\r\nThere's also no reason to disallow _arguments_ to follow `-file -` - it's an unnecessary restriction that violates the equivalence of the two commands above. It prevents passing the script content via stdin / the pipeline while also accepting _arguments_.\r\n\r\n(Given how `-command` currently works, there _is_ a good reason to disallow following `-command -` with arguments (the way that `-command` currently works - stitching together a script from _all_ arguments following `-command` - is highly unfortunate, but cannot be changed), but if we fix `-file -`, that restriction can then easily be bypassed by using `-file -` instead).\r\n\r\nNote that it still makes sense to combine `-command` - _not_ with `-` - with stdin input: The `-command` argument then specifies the command to run, as usual, and stdin input becomes its _pipeline input_.\r\n\r\nHere's a `bash` example:\r\n\r\n```sh\r\n$ printf 'hi\\nthere\\n' | bash -c 'cat -n'\r\n     1\thi\r\n     2\tthere\r\n```\r\n\r\nRegrettably, stdin input passed to `pwsh` currently does _not_ become pipeline input - see #9497 -  so that the following does _not_ work analogously:\r\n\r\n```powershell\r\n$ printf 'hi\\nthere\\n' | pwsh -noprofile -command '% { $i=0 } { \"{0}`t{1}\" -f ++$i, $_ }'\r\n1   # !! stdin input did NOT become pipeline input\r\n```\r\n\r\nAs a doleful aside: if you tried to run this _from PowerShell_, the broken quoting for external programs (PowerShell itself, in this case), would make the command _fail_.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2019-04-29T15:18:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9494#issuecomment-487621948",
    "id": 487621948,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9494",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NzYyMTk0OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/487621948/reactions"
    },
    "updated_at": "2019-04-29T15:19:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/487621948",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Do note that the primary use of these idioms is to provide input via stdin / the pipeline, not interactive use.\r\n\r\nDocumentation is silent about it that confuses me. Make sense to open new issue in Docs repo?\r\n\r\nThe question remains about the input from the console. Although it could also be documented that it is not supported.",
    "created_at": "2019-04-29T15:32:23Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9494#issuecomment-487627841",
    "id": 487627841,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9494",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NzYyNzg0MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/487627841/reactions"
    },
    "updated_at": "2019-04-29T15:32:23Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/487627841",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "The docs definitely need improvement: The CLI help doesn't mention `-File -` at all, and doesn't mention the requirement of _redirected_ stdin input for `-Command -`\r\n\r\nThe current behavior is conceptually backwards and fundamentally broken, as shown in #3223:\r\n\r\n* It is designed around _line-by-line_ processing, so clearly focused on _interactive_ use.\r\n\r\n  * By contrast, the real value comes from providing commands via _redirected_ stdin  / piping.\r\n\r\n* It is `-Command -` that is implemented with _redirected_ stdin input in mind - yet line-by-line process is _still_ applied (but at least the prompt string isn't printed the way it is with `-File -`), unlike when you pass a multi-line command string as an _argument_.\r\n\r\n  * Conceptually, `-File -` makes more sense  for redirected stdin input - and it is the _only_ form needed.\r\n\r\n> The question remains about the input from the console.\r\n\r\n`pwsh -File -` without redirected stdin input simply starts a regular session - the same as not specifying `-File -` at all.\r\nWhile technically somewhat defensible, it's certainly surprising.\r\n\r\nThere _is_ a way in which `-File -` could be useful with _interactive_ input:\r\nIf it allowed you to type an entire script ad hoc, and then submit it at once - **it is what `pwsh -File /dev/stin` _already does_ on Unix**, albeit accidentally:\r\n\r\n```powershell\r\n$ pwsh -File -  # type the ad hoc script on the following lines, then submit with ^D (+ Enter on Windows)\r\nget-date\r\nget-childItem -Directory\r\n^D\r\n```\r\n\r\nThis is what `ruby` supports, for instance.\r\n\r\nThe caveat is that this form of supplying multi-line stdin input is probably more familiar to Unix users than Windows users, and it would be a first in the context of PowerShell.\r\n(I suppose submitting an empty extra line could be taken as the end-of-input signal, the same way as with array-valued mandatory parameter prompts, but that preclude use of blank lines for readability.)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2019-04-29T16:28:39Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9494#issuecomment-487648892",
    "id": 487648892,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9494",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NzY0ODg5Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/487648892/reactions"
    },
    "updated_at": "2019-04-29T16:38:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/487648892",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
