[
  {
    "author_association": "CONTRIBUTOR",
    "body": "Remove-Item also does not appear to either sort the items for deletion by leaf-first or at least check if the item exists before deleting it. \r\n\r\nThe example pattern is to use Get-ChildItem and pipe the results\r\n``` powershell\r\nGet-ChildItem -Path \"c:\\temp\\folder\\* -Recurse | Remove-Item\r\n```\r\nbut this will get \"directory is not empty\" and other errors, and you have to run the same thing 2 or more times to actually clean the folder out. \r\n\r\nIts also does not carry over the behavior of `rd /s` or `rmdir` where a directory and all its contents must be removed. These two causes lead to code like the following being necessary to have a better chance (but not guarantee) of working.\r\n\r\n``` powershell\r\nif (Test-Path $folderPath)\r\n{\r\n  $items = Get-ChildItem -Path $folderPath -Recurse\r\n  foreach ($item in $items)\r\n  {\r\n    if (Test-Path $item)\r\n    {\r\n      Remove-Item $item -Recurse -Force -Confirm:$false\r\n    }\r\n  }\r\n  Remove-Item $folderPath -Force -Confirm:$false\r\n}\r\n```",
    "created_at": "2018-02-08T14:59:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3727#issuecomment-364137513",
    "id": 364137513,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3727",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDEzNzUxMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/364137513/reactions"
    },
    "updated_at": "2018-02-08T14:59:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/364137513",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15381181?v=4",
      "events_url": "https://api.github.com/users/StingyJack/events{/privacy}",
      "followers_url": "https://api.github.com/users/StingyJack/followers",
      "following_url": "https://api.github.com/users/StingyJack/following{/other_user}",
      "gists_url": "https://api.github.com/users/StingyJack/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/StingyJack",
      "id": 15381181,
      "login": "StingyJack",
      "node_id": "MDQ6VXNlcjE1MzgxMTgx",
      "organizations_url": "https://api.github.com/users/StingyJack/orgs",
      "received_events_url": "https://api.github.com/users/StingyJack/received_events",
      "repos_url": "https://api.github.com/users/StingyJack/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/StingyJack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/StingyJack/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/StingyJack"
    }
  },
  {
    "author_association": "NONE",
    "body": "Hello @StingyJack\r\n\r\nIt seems that the issue is bigger than that (prior to Windows 10 1903, if I understood correctly)\r\n\r\nThis video seems to explain well the bug: https://www.youtube.com/watch?v=uhRWMGBjlO8&feature=youtu.be&t=455\r\n\r\nAnd someone made a terrifying script ðŸ¤¯ about it: https://stackoverflow.com/questions/53553729/cannot-remove-item-the-directory-is-not-empty/53561052#53561052\r\n\r\n```powershell\r\nfunction Remove-FileSystemItem {\r\n  <#\r\n  .SYNOPSIS\r\n    Removes files or directories reliably and synchronously.\r\n\r\n  .DESCRIPTION\r\n    Removes files and directories, ensuring reliable and synchronous\r\n    behavior across all supported platforms.\r\n\r\n    The syntax is a subset of what Remove-Item supports; notably,\r\n    -Include / -Exclude and -Force are NOT supported; -Force is implied.\r\n\r\n    As with Remove-Item, passing -Recurse is required to avoid a prompt when \r\n    deleting a non-empty directory.\r\n\r\n    IMPORTANT:\r\n      * On Unix platforms, this function is merely a wrapper for Remove-Item, \r\n        where the latter works reliably and synchronously, but on Windows a \r\n        custom implementation must be used to ensure reliable and synchronous \r\n        behavior. See https://github.com/PowerShell/PowerShell/issues/8211\r\n\r\n    * On Windows:\r\n      * The *parent directory* of a directory being removed must be \r\n        *writable* for the synchronous custom implementation to work.\r\n      * The custom implementation is also applied when deleting \r\n         directories on *network drives*.\r\n\r\n    * If an indefinitely *locked* file or directory is encountered, removal is aborted.\r\n      By contrast, files opened with FILE_SHARE_DELETE / \r\n      [System.IO.FileShare]::Delete on Windows do NOT prevent removal, \r\n      though they do live on under a temporary name in the parent directory \r\n      until the last handle to them is closed.\r\n\r\n    * Hidden files and files with the read-only attribute:\r\n      * These are *quietly removed*; in other words: this function invariably\r\n        behaves like `Remove-Item -Force`.\r\n      * Note, however, that in order to target hidden files / directories\r\n        as *input*, you must specify them as a *literal* path, because they\r\n        won't be found via a wildcard expression.\r\n\r\n    * The reliable custom implementation on Windows comes at the cost of\r\n      decreased performance.\r\n\r\n  .EXAMPLE\r\n    Remove-FileSystemItem C:\\tmp -Recurse\r\n\r\n    Synchronously removes directory C:\\tmp and all its content.\r\n  #>\r\n    [CmdletBinding(SupportsShouldProcess, ConfirmImpact='Medium', DefaultParameterSetName='Path', PositionalBinding=$false)]\r\n    param(\r\n      [Parameter(ParameterSetName='Path', Mandatory, Position = 0, ValueFromPipeline, ValueFromPipelineByPropertyName)]\r\n      [string[]] $Path\r\n      ,\r\n      [Parameter(ParameterSetName='Literalpath', ValueFromPipelineByPropertyName)]\r\n      [Alias('PSPath')]\r\n      [string[]] $LiteralPath\r\n      ,\r\n      [switch] $Recurse\r\n    )\r\n    begin {\r\n      # !! Workaround for https://github.com/PowerShell/PowerShell/issues/1759\r\n      if ($ErrorActionPreference -eq [System.Management.Automation.ActionPreference]::Ignore) { $ErrorActionPreference = 'Ignore'}\r\n      $targetPath = ''\r\n      $yesToAll = $noToAll = $false\r\n      function trimTrailingPathSep([string] $itemPath) {\r\n        if ($itemPath[-1] -in '\\', '/') {\r\n          # Trim the trailing separator, unless the path is a root path such as '/' or 'c:\\'\r\n          if ($itemPath.Length -gt 1 -and $itemPath -notmatch '^[^:\\\\/]+:.$') {\r\n            $itemPath = $itemPath.Substring(0, $itemPath.Length - 1)\r\n          }\r\n        }\r\n        $itemPath\r\n      }\r\n      function getTempPathOnSameVolume([string] $itemPath, [string] $tempDir) {\r\n        if (-not $tempDir) { $tempDir = [IO.Path]::GetDirectoryName($itemPath) }\r\n        [IO.Path]::Combine($tempDir, [IO.Path]::GetRandomFileName())\r\n      }\r\n      function syncRemoveFile([string] $filePath, [string] $tempDir) {\r\n        # Clear the ReadOnly attribute, if present.\r\n        if (($attribs = [IO.File]::GetAttributes($filePath)) -band [System.IO.FileAttributes]::ReadOnly) {\r\n          [IO.File]::SetAttributes($filePath, $attribs -band -bnot [System.IO.FileAttributes]::ReadOnly)\r\n        }\r\n        $tempPath = getTempPathOnSameVolume $filePath $tempDir\r\n        [IO.File]::Move($filePath, $tempPath)\r\n        [IO.File]::Delete($tempPath)\r\n      }\r\n      function syncRemoveDir([string] $dirPath, [switch] $recursing) {\r\n          if (-not $recursing) { $dirPathParent = [IO.Path]::GetDirectoryName($dirPath) }\r\n          # Clear the ReadOnly attribute, if present.\r\n          # Note: [IO.File]::*Attributes() is also used for *directories*; [IO.Directory] doesn't have attribute-related methods.\r\n          if (($attribs = [IO.File]::GetAttributes($dirPath)) -band [System.IO.FileAttributes]::ReadOnly) {\r\n            [IO.File]::SetAttributes($dirPath, $attribs -band -bnot [System.IO.FileAttributes]::ReadOnly)\r\n          }\r\n          # Remove all children synchronously.\r\n          $isFirstChild = $true\r\n          foreach ($item in [IO.directory]::EnumerateFileSystemEntries($dirPath)) {\r\n            if (-not $recursing -and -not $Recurse -and $isFirstChild) { # If -Recurse wasn't specified, prompt for nonempty dirs.\r\n              $isFirstChild = $false\r\n              # Note: If -Confirm was also passed, this prompt is displayed *in addition*, after the standard $PSCmdlet.ShouldProcess() prompt.\r\n              #       While Remove-Item also prompts twice in this scenario, it shows the has-children prompt *first*.\r\n              if (-not $PSCmdlet.ShouldContinue(\"The item at '$dirPath' has children and the -Recurse switch was not specified. If you continue, all children will be removed with the item. Are you sure you want to continue?\", 'Confirm', ([ref] $yesToAll), ([ref] $noToAll))) { return }\r\n            }\r\n            $itemPath = [IO.Path]::Combine($dirPath, $item)\r\n            ([ref] $targetPath).Value = $itemPath\r\n            if ([IO.Directory]::Exists($itemPath)) {\r\n              syncremoveDir $itemPath -recursing\r\n            } else {\r\n              syncremoveFile $itemPath $dirPathParent\r\n            }\r\n          }\r\n          # Finally, remove the directory itself synchronously.\r\n          ([ref] $targetPath).Value = $dirPath\r\n          $tempPath = getTempPathOnSameVolume $dirPath $dirPathParent\r\n          [IO.Directory]::Move($dirPath, $tempPath)\r\n          [IO.Directory]::Delete($tempPath)\r\n      }\r\n    }\r\n\r\n    process {\r\n      $isLiteral = $PSCmdlet.ParameterSetName -eq 'LiteralPath'\r\n      if ($env:OS -ne 'Windows_NT') { # Unix: simply pass through to Remove-Item, which on Unix works reliably and synchronously\r\n        Remove-Item @PSBoundParameters\r\n      } else { # Windows: use synchronous custom implementation\r\n        foreach ($rawPath in ($Path, $LiteralPath)[$isLiteral]) {\r\n          # Resolve the paths to full, filesystem-native paths.\r\n          try {\r\n            # !! Convert-Path does find hidden items via *literal* paths, but not via *wildcards* - and it has no -Force switch (yet)\r\n            # !! See https://github.com/PowerShell/PowerShell/issues/6501\r\n            $resolvedPaths = if ($isLiteral) { Convert-Path -ErrorAction Stop -LiteralPath $rawPath } else { Convert-Path -ErrorAction Stop -path $rawPath}\r\n          } catch {\r\n            Write-Error $_ # relay error, but in the name of this function\r\n            continue\r\n          }\r\n          try {\r\n            $isDir = $false\r\n            foreach ($resolvedPath in $resolvedPaths) {\r\n              # -WhatIf and -Confirm support.\r\n              if (-not $PSCmdlet.ShouldProcess($resolvedPath)) { continue }\r\n              if ($isDir = [IO.Directory]::Exists($resolvedPath)) { # dir.\r\n                # !! A trailing '\\' or '/' causes directory removal to fail (\"in use\"), so we trim it first.\r\n                syncRemoveDir (trimTrailingPathSep $resolvedPath)\r\n              } elseif ([IO.File]::Exists($resolvedPath)) { # file\r\n                syncRemoveFile $resolvedPath\r\n              } else {\r\n                Throw \"Not a file-system path or no longer extant: $resolvedPath\"\r\n              }\r\n            }\r\n          } catch {\r\n            if ($isDir) {\r\n              $exc = $_.Exception\r\n              if ($exc.InnerException) { $exc = $exc.InnerException }\r\n              if ($targetPath -eq $resolvedPath) {\r\n                Write-Error \"Removal of directory '$resolvedPath' failed: $exc\"\r\n              } else {\r\n                Write-Error \"Removal of directory '$resolvedPath' failed, because its content could not be (fully) removed: $targetPath`: $exc\"\r\n              }\r\n            } else {\r\n              Write-Error $_  # relay error, but in the name of this function\r\n            }\r\n            continue\r\n          }\r\n        }\r\n      }\r\n    }\r\n}\r\n```\n\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/53553729/cannot-remove-item-the-directory-is-not-empty\">Cannot remove item, The Directory is not empty</a></strong></div><div>When using the Remove-Item command, even utilizing the -r and -Force parameters, sometimes the following error message is returned:\r\n  Remove-Item : Cannot remove item C:\\Test Folder\\Test Folder\\Ta...</div></blockquote>",
    "created_at": "2020-05-13T08:15:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3727#issuecomment-627826589",
    "id": 627826589,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3727",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNzgyNjU4OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/627826589/reactions"
    },
    "updated_at": "2020-05-13T08:15:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/627826589",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/378910?v=4",
      "events_url": "https://api.github.com/users/mickaeltr/events{/privacy}",
      "followers_url": "https://api.github.com/users/mickaeltr/followers",
      "following_url": "https://api.github.com/users/mickaeltr/following{/other_user}",
      "gists_url": "https://api.github.com/users/mickaeltr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mickaeltr",
      "id": 378910,
      "login": "mickaeltr",
      "node_id": "MDQ6VXNlcjM3ODkxMA==",
      "organizations_url": "https://api.github.com/users/mickaeltr/orgs",
      "received_events_url": "https://api.github.com/users/mickaeltr/received_events",
      "repos_url": "https://api.github.com/users/mickaeltr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mickaeltr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mickaeltr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mickaeltr"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@mickaeltr Your referring to #8211, which will ultimately only be resolved once the WinAPI file-removal calls become synchronous (you can use the function as a workaround, but it has limitations).",
    "created_at": "2020-05-13T13:34:43Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3727#issuecomment-627990319",
    "id": 627990319,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3727",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNzk5MDMxOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/627990319/reactions"
    },
    "updated_at": "2020-05-13T13:34:43Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/627990319",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "Thanks @mklement0 for the link and explanation.",
    "created_at": "2020-05-13T13:50:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/3727#issuecomment-627999750",
    "id": 627999750,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/3727",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyNzk5OTc1MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/627999750/reactions"
    },
    "updated_at": "2020-05-13T13:50:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/627999750",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/378910?v=4",
      "events_url": "https://api.github.com/users/mickaeltr/events{/privacy}",
      "followers_url": "https://api.github.com/users/mickaeltr/followers",
      "following_url": "https://api.github.com/users/mickaeltr/following{/other_user}",
      "gists_url": "https://api.github.com/users/mickaeltr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mickaeltr",
      "id": 378910,
      "login": "mickaeltr",
      "node_id": "MDQ6VXNlcjM3ODkxMA==",
      "organizations_url": "https://api.github.com/users/mickaeltr/orgs",
      "received_events_url": "https://api.github.com/users/mickaeltr/received_events",
      "repos_url": "https://api.github.com/users/mickaeltr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mickaeltr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mickaeltr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mickaeltr"
    }
  }
]
