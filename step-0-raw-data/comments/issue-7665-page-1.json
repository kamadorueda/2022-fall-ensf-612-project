[
  {
    "author_association": "COLLABORATOR",
    "body": "Tangentially related: why do generic type names in PS have those odd characters?",
    "created_at": "2018-08-30T12:23:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7665#issuecomment-417299995",
    "id": 417299995,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7665",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzI5OTk5NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417299995/reactions"
    },
    "updated_at": "2018-08-30T12:23:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417299995",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@SeeminglyScience The concrete generic types are already included in `TypeNames`, but use the raw reflection type name:\r\n```powershell\r\nPS[1] (8) >   $x = [system.collections.generic.list[object]]::new()\r\nPS[1] (9) > $x.psobject.typenames\r\nSystem.Collections.Generic.List`1[[System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]\r\nSystem.Object\r\nPS[1] (10) > update-typedata -force -typename 'System.Collections.Generic.List`1[[System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]' -MemberType scriptmethod -membername doit -value {\"doit\"}\r\nPS[1] (11) > $x.doit()\r\ndoit\r\nPS[1] (12) >\r\n```\r\nUsing the raw name in `TypeNames` is arguably a bug but correcting it would be a breaking change. As a non-breaking alternative,  we could allow the the use of the sanitized name when specifying extensions converting it to the raw name in the type table.",
    "created_at": "2018-08-30T16:53:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7665#issuecomment-417390150",
    "id": 417390150,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7665",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzM5MDE1MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417390150/reactions"
    },
    "updated_at": "2018-08-30T16:53:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417390150",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@BrucePay I'm asking for the generic *definition* to be added to the list.  For example `List<T>` is the generic definition of `List<object>`.  Not sure if my terminology here is technically correct, just going by the naming of `Type.GetGenericTypeDefinition()`\r\n\r\nThe example you gave works, but only if you want to target `List<object>` explicitly.  Put more simply I'd like to be able to do something like this:\r\n\r\n```powershell\r\nusing namespace System.Collections.Generic\r\n\r\nUpdate-TypeData -Force -TypeName 'System.Collections.Generic.List`1' -MemberType ScriptMethod -MemberName DoIt -Value { 'doit' }\r\n\r\n[List[object]]::new().DoIt()\r\n[List[int]]::new().DoIt()\r\n[List[System.IO.FileSystemInfo]]::new().DoIt()\r\n```",
    "created_at": "2018-08-30T17:37:29Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7665#issuecomment-417404452",
    "id": 417404452,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7665",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzQwNDQ1Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417404452/reactions"
    },
    "updated_at": "2018-08-30T17:37:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417404452",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@vexx32: The `` `<n> `` suffix is .NET's notation for indicating a generic type's number of type parameters.\r\n\r\nIt is required for an _open_ generic type (one whose type parameter(s) have not been bound yet; e.g., ``[System.Collections.Generic.List`1]``), but optional for a _closed_ generic type (a generic type with all its type parameters instantiated with specific types; e.g., both ``[System.Collections.Generic.List`1[int]]`` and ``[System.Collections.Generic.List[int]]`` work).\r\n",
    "created_at": "2018-08-30T17:47:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7665#issuecomment-417407774",
    "id": 417407774,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7665",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzQwNzc3NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417407774/reactions"
    },
    "updated_at": "2018-08-30T17:47:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417407774",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@SeeminglyScience: The term that applies to what you're looking for is _open_ generic type.\r\n\r\nI haven't looked too hard, but here's a definition from https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/generics/generics-and-attributes (emphasis added):\r\n\r\n>  [...] _open_ generic types, which are generic types for which no type arguments are supplied, and _closed_ constructed generic types, which supply arguments for all type parameters.",
    "created_at": "2018-08-30T17:57:04Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7665#issuecomment-417411119",
    "id": 417411119,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7665",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzQxMTExOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417411119/reactions"
    },
    "updated_at": "2018-08-30T17:57:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417411119",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 @vexx32 The raw form of the typename is what .NET returns when you `ToString()` a type. In PowerShell V1, the native .NET representation is the only form we used. In V2 we added type name sanitization. The `<backtick><number>` in the type name is the generic arity i.e. how many type parameters there are on a given generic type. ",
    "created_at": "2018-08-30T18:07:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7665#issuecomment-417414608",
    "id": 417414608,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7665",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzQxNDYwOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417414608/reactions"
    },
    "updated_at": "2018-08-30T18:07:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417414608",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@SeeminglyScience Yikes - I hadn't really considered open generic types. I'll need to think about that. @daxian-dbw @lzybkr @powercode  - you guys have any thoughts?",
    "created_at": "2018-08-30T21:20:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7665#issuecomment-417471044",
    "id": 417471044,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7665",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzQ3MTA0NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417471044/reactions"
    },
    "updated_at": "2018-08-30T21:20:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417471044",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @BrucePay; it's what I meant to say with \"indicating a generic type's number of type parameters\", but it's good to know the official - and more concise - name for it, _generic [arity](https://en.wikipedia.org/wiki/Arity)_.\r\n\r\n> In V2 we added type name sanitization\r\n\r\nAre you referring to the option of omitting, e.g.,\r\n\r\n*  `` `1 `` from ``[System.Collections.Generic.List`1[int]] (1..10)`` \r\n* and not requiring assembly-qualified type names for the type _arguments_ (just `[int]` rather than `[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]`)?\r\n\r\nBecause `Get-Member` and `.pstypenames` still reflect the raw type name (only).\r\n\r\nA tangent, for sure, but perhaps you happen to know:\r\n\r\nIn the raw .NET string representation, what is the benefit of mixing the _full-type-name-only_ generic-type name (e.g., `System.Collections.Generic.List`) with the _assembly-qualified_ names of the type _arguments_ (e.g., `[System.Int32, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]`)? Why not consistently use _either_ assembly-qualified type names _or_ full type names only?\r\n\r\n\r\n\r\n ",
    "created_at": "2018-08-30T21:34:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7665#issuecomment-417474436",
    "id": 417474436,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7665",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzQ3NDQzNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417474436/reactions"
    },
    "updated_at": "2018-08-30T21:34:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417474436",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Just to fully flesh out that yikes, I'd really like the same to be possible with open generic interfaces (bringing your issue into the fold).  So `[System.Collections.Generic.List[string]]::new().PSTypeNames` would be this monstrosity\r\n\r\n```raw\r\nSystem.Collections.Generic.List`1[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]\r\nSystem.Collections.Generic.List`1\r\nSystem.Collections.Generic.IList`1[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]\r\nSystem.Collections.Generic.IList`1\r\nSystem.Collections.Generic.ICollection`1[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]\r\nSystem.Collections.Generic.ICollection`1\r\nSystem.Collections.Generic.IEnumerable`1[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]\r\nSystem.Collections.Generic.IEnumerable`1\r\nSystem.Collections.IEnumerable\r\nSystem.Collections.IList\r\nSystem.Collections.ICollection\r\nSystem.Collections.Generic.IReadOnlyList`1[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]\r\nSystem.Collections.Generic.IReadOnlyList`1\r\nSystem.Collections.Generic.IReadOnlyCollection`1[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]\r\nSystem.Collections.Generic.IReadOnlyCollection`1\r\nSystem.Object\r\n```\r\n\r\nI don't know how much of an issue that would end up being, perhaps the solution lies outside of `PSTypeNames`.  To again put it more simply, it would be great if this was possible:\r\n\r\n```powershell\r\nusing namespace System.Collections.Generic\r\n\r\nUpdate-TypeData -Force -TypeName 'System.Collections.Generic.IEnumerable`1' -MemberType ScriptMethod -MemberName DoIt -Value { 'doit' }\r\n\r\n[List[object]]::new().DoIt()\r\n[List[int]]::new().DoIt()\r\n[List[System.IO.FileSystemInfo]]::new().DoIt()\r\n[string[]]::new(0).DoIt()\r\n[System.Collections.ObjectModel.Collection[int]]::new().DoIt()\r\n```",
    "created_at": "2018-08-30T21:34:35Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7665#issuecomment-417474472",
    "id": 417474472,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7665",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzQ3NDQ3Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417474472/reactions"
    },
    "updated_at": "2018-08-30T21:34:35Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417474472",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@SeeminglyScience:\r\n\r\nI think we should consider a separate `.psinterfacenames ` property that parallels the `.pstypenames` property.\r\n\r\n* It would provide a clean separation between non-interface types and interfaces.\r\n\r\n* As a separate, new property, neither  raw type names nor closed constructed types need be included (as there is no need for backward compatibility).\r\n  * If type-argument-specific behavior is desired, though, the type-arguments could be included as well, such as `System.Collections.Generic.IList[string]` in addition to ``System.Collections.Generic.IList`1``\r\n\r\n* ETS definitions  would then have to consult `.psinterfacenames` too.\r\n\r\nFor instance, `[System.Collections.Generic.List[string]]::new().psinterfacenames` would then be limited to this (still sizable) list (without type-argument-specific variants):\r\n\r\n```none\r\nSystem.Collections.Generic.IList`1\r\nSystem.Collections.Generic.ICollection`1\r\nSystem.Collections.Generic.IEnumerable`1\r\nSystem.Collections.IEnumerable\r\nSystem.Collections.IList\r\nSystem.Collections.ICollection\r\nSystem.Collections.Generic.IReadOnlyList`1\r\nSystem.Collections.Generic.IReadOnlyCollection`1\r\n```",
    "created_at": "2018-08-30T22:13:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7665#issuecomment-417484430",
    "id": 417484430,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7665",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzQ4NDQzMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417484430/reactions"
    },
    "updated_at": "2018-08-31T02:28:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417484430",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@mklement0 - specifying arity in the open generic type name is a convention introduced by C# to support types like `Tuple`, `Action`, and `Func`, but it is not a requirement in the CLR.\r\n\r\n@BrucePay - the obvious scenario would be LINQ - basically providing extension methods in PowerShell without needing to implement extension methods or generic classes.\r\n\r\nI think it wouldn't be hard to add support for both types and formats, but there might be some performance implications as the list of type names grows - you'll potentially notice that adding interfaces as well.",
    "created_at": "2018-08-30T22:24:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7665#issuecomment-417486839",
    "id": 417486839,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7665",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzQ4NjgzOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417486839/reactions"
    },
    "updated_at": "2018-08-30T22:24:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417486839",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@lzybkr: But If the `.ToString()` method returns this arity notation too (e.g., ``[System.Collections.Generic.List`1].ToString()`` yielding ``System.Collections.Generic.List`1[T]``), doesn't that imply that it's not (just)  a _C#_ convention?",
    "created_at": "2018-08-30T22:36:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7665#issuecomment-417489588",
    "id": 417489588,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7665",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzQ4OTU4OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417489588/reactions"
    },
    "updated_at": "2018-08-30T22:36:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417489588",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@mklement0 - the value returned from `Type.ToString()` may or may not have any correlation with what a compiler generates. The `Type.FullName` property is the name the compiler generates.\r\n\r\nThe convention that C# introduced and every language I know of is to append the arity, but the CLR does not require this.\r\n\r\nI'll leave it as an exercise for the reader, but you could use `ilasm` or the reflection apis to create a generic type with any name you like. Other language might or might not be capable of consuming this type, but the CLR has no problems with such types.",
    "created_at": "2018-08-30T22:44:43Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7665#issuecomment-417491365",
    "id": 417491365,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7665",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzQ5MTM2NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417491365/reactions"
    },
    "updated_at": "2018-08-30T22:44:43Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417491365",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Good to know, @lzybkr, thanks. So how, specifically, does a _PowerShell_ expression such as `` [System.Collections.Generic.List`1].FullName `` yield ``System.Collections.Generic.List`1``? Is there a behind-the-scenes C# detour? ",
    "created_at": "2018-08-30T22:51:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7665#issuecomment-417492675",
    "id": 417492675,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7665",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzQ5MjY3NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417492675/reactions"
    },
    "updated_at": "2018-08-30T22:51:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417492675",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 I believe what he's saying is that the compiler adds the arity to the type name directly as a convention.  And that if you manually create a generic type you can skip that if you'd like.  e.g.\r\n\r\n```powershell\r\nusing namespace System.Reflection\r\nusing namespace System.Reflection.Emit\r\n\r\n$assemblyBuilder = [AssemblyBuilder]::DefineDynamicAssembly(\r\n    [AssemblyName]::new('TestAssembly'),\r\n    [AssemblyBuilderAccess]::Run)\r\n\r\n$moduleBuilder = $assemblyBuilder.DefineDynamicModule('TestModule')\r\n$typeBuilder = $moduleBuilder.DefineType(\r\n    'MyGeneric',\r\n    [TypeAttributes]'Public, Class, Abstract',\r\n    [object])\r\n\r\n$null = $typeBuilder.DefineGenericParameters('T')\r\n$null = $typeBuilder.CreateType()\r\n\r\n[MyGeneric[int]].FullName\r\n# MyGeneric[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]\r\n```",
    "created_at": "2018-08-30T23:02:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7665#issuecomment-417494972",
    "id": 417494972,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7665",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzQ5NDk3Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417494972/reactions"
    },
    "updated_at": "2018-08-30T23:02:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417494972",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the detailed and illuminating example, @SeeminglyScience. I realize that this tangent may be primarily for my own edification, but if you'll indulge me:\r\n\r\nI gather that it's PowerShell - perhaps the sanitizing that @BrucePay referred to -  that ignores a `` `<n> `` suffix if it aligns with the actual arity, so that even if you passed a name of ``'MyGeneric`1'`` as the type name to `$moduleBuilder.DefineType()` you could still instantiate that type later as, for instance, `[MyGeneric[int]]` from PowerShell, correct?\r\n\r\nDoes PowerShell itself explicitly implement the arity-suffix convention when it evaluates expressions such as `[System.Collections.Generic.List[int]].FullName`?",
    "created_at": "2018-08-31T00:04:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7665#issuecomment-417506577",
    "id": 417506577,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7665",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzUwNjU3Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417506577/reactions"
    },
    "updated_at": "2018-08-31T00:04:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417506577",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 The parser creates a `TypeExpressionAst` to represent a type literal expression.  That AST has a property `TypeName` that represents the type with an implementation of `ITypeName`.  When it creates a `TypeExpressionAst` for a constructed generic type, the `TypeName` is of the type `GenericTypeName`.\r\n\r\nWhen PowerShell goes to actually resolve the type, it calls `ITypeName.GetReflectionType()`.  The implementation of that for  `GenericTypeName` will first attempt to resolve the name as is, then it will append the arity if that was unsuccessful. [Here's that method](https://github.com/PowerShell/PowerShell/blob/26d2741377a1836f618c151c19a379e3e0531618/src/System.Management.Automation/engine/parser/ast.cs#L8242).\r\n",
    "created_at": "2018-08-31T00:55:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7665#issuecomment-417515151",
    "id": 417515151,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7665",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzUxNTE1MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417515151/reactions"
    },
    "updated_at": "2018-08-31T00:55:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417515151",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I appreciate the explanation, @SeeminglyScience. \r\nThe way the method is written, you can accidentally thwart the implicit arity-suffix logic with a type name such as ``MyGeneric`Foo`1``, but that's probably not a real-word concern.",
    "created_at": "2018-09-02T15:40:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7665#issuecomment-417939455",
    "id": 417939455,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7665",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzkzOTQ1NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417939455/reactions"
    },
    "updated_at": "2018-09-02T15:40:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417939455",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 There is a `ToStringCodeMethods` class with a `string Type(Type type, bool dropNamespaces = false, string key = null)` member that pretty-prints typenames.",
    "created_at": "2018-09-02T22:11:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7665#issuecomment-417963355",
    "id": 417963355,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7665",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzk2MzM1NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417963355/reactions"
    },
    "updated_at": "2018-09-02T22:11:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417963355",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3505151?v=4",
      "events_url": "https://api.github.com/users/powercode/events{/privacy}",
      "followers_url": "https://api.github.com/users/powercode/followers",
      "following_url": "https://api.github.com/users/powercode/following{/other_user}",
      "gists_url": "https://api.github.com/users/powercode/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/powercode",
      "id": 3505151,
      "login": "powercode",
      "node_id": "MDQ6VXNlcjM1MDUxNTE=",
      "organizations_url": "https://api.github.com/users/powercode/orgs",
      "received_events_url": "https://api.github.com/users/powercode/received_events",
      "repos_url": "https://api.github.com/users/powercode/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/powercode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/powercode/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/powercode"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "The scenario seems valid. It would be interesting to see some motivating examples. How does the code look like when we extend an open generic type? Do we need to fix calling of generic methods to make this useful?\r\n\r\nWe should understand the whole scenario better before adding the PSTypenames.\r\n\r\n",
    "created_at": "2018-09-02T22:20:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7665#issuecomment-417963826",
    "id": 417963826,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7665",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzk2MzgyNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417963826/reactions"
    },
    "updated_at": "2018-09-02T22:20:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417963826",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3505151?v=4",
      "events_url": "https://api.github.com/users/powercode/events{/privacy}",
      "followers_url": "https://api.github.com/users/powercode/followers",
      "following_url": "https://api.github.com/users/powercode/following{/other_user}",
      "gists_url": "https://api.github.com/users/powercode/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/powercode",
      "id": 3505151,
      "login": "powercode",
      "node_id": "MDQ6VXNlcjM1MDUxNTE=",
      "organizations_url": "https://api.github.com/users/powercode/orgs",
      "received_events_url": "https://api.github.com/users/powercode/received_events",
      "repos_url": "https://api.github.com/users/powercode/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/powercode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/powercode/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/powercode"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @powercode, good to know how to get a friendly type representation even for generic types, but note the specific overload you mention is `internal`. There is a public overload - `public static string Type(PSObject instance)`, expecting a type, which actually breaks with @SeeminglyScience's code (`\"'length' must be non-negative`), but for CoreFx types it works well, e.g., ``[Microsoft.PowerShell.ToStringCodeMethods]::Type([System.Collections.Generic.List`1[[System.Object, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]])`` returns `System.Collections.Generic.List[System.Object]`\r\n\r\nBut I'm happy to close this tangent now.",
    "created_at": "2018-09-02T23:51:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7665#issuecomment-417968619",
    "id": 417968619,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7665",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNzk2ODYxOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417968619/reactions"
    },
    "updated_at": "2018-09-02T23:51:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/417968619",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 \r\n\r\n> The way the method is written, you can accidentally thwart the implicit arity-suffix logic with a type name such as ```MyGeneric`Foo`1```, but that's probably not a real-word concern.\r\n\r\nShouldn't really be an issue unless there's a CLR language out there that parses it in a class name (neither PowerShell nor C# do).  Other than that, if someone is using emit to generate a type with a class name that contains <kbd>`</kbd>, they probably don't really intend for the type to be resolvable.",
    "created_at": "2018-09-04T12:03:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7665#issuecomment-418341602",
    "id": 418341602,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7665",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxODM0MTYwMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/418341602/reactions"
    },
    "updated_at": "2018-09-04T12:03:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/418341602",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  }
]
