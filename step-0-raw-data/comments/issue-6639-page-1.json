[
  {
    "author_association": "CONTRIBUTOR",
    "body": "> I don't have strong feelings on whether to change the behavior [bool]\"anyotherstring\" resolving to \"true\".\r\n\r\nCertainly in _implicit_ Boolean conversions it is important to retain the existing behavior, because simply using a command's output - which may be a string, notably always one when calling external utilities - as an implicit conditional for \"Was there any output?\" is a common idiom (`if (<command>) ...`)\r\n\r\nWith respect to _explicit_ Boolean conversions (casts):  At least personally I've written code such as `$hadOutput = [bool] (<command>)`, so a string other than `'true'` / `'false'` breaking the cast is problematic.\r\n\r\nThus, one approach would be to simply special-case string `'false'` (and its case variants) and convert that to `$False`, while keeping the existing empty/non-empty dichotomy in all other cases.\r\n\r\nThat has the advantage of not needing to introduce a potentially awkward distinction between implicit and explicit (cast-based) conversions.\r\n\r\nTechnically, it's a breaking change, but it probably falls into [Bucket 3: Unlikely Grey Area](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area).\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2018-04-14T14:33:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6639#issuecomment-381333282",
    "id": 381333282,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6639",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTMzMzI4Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/381333282/reactions"
    },
    "updated_at": "2018-04-14T14:33:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/381333282",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I have run into situations where I thought this would be excellent, bu I have also run into situations where this would have been breaking.\r\n\r\nThe breaking examples are those that work on the `$null` possibility where there is a tri-state `\"true\"`/`\"false\"`/`$null` on a string result. \r\n\r\n```powershell\r\nif($result){\r\n    $IsSet = $true\r\n    $IsTrue = [Bool]::Parse($result)\r\n} else {\r\n    $isSet= $false\r\n}\r\n```\r\n\r\nI think it was the Reddit API where I was having to do that because it returns string literals instead of Boolean literals and the condition is different whether the string is present or not (bad API design... gripe for another day). In any case, I'm not sure if this proposed change would actually break that or not. if the string is `\"false\"` and the condition coerces the string to boolean false, code that depended on the existence of string to return true would break. But I did want to point out that this would be a breaking change and I think it is a steep above bucket 3.\r\n\r\nThat said, I'm on board with this change even though I know it will break my code.",
    "created_at": "2018-04-14T16:18:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6639#issuecomment-381340594",
    "id": 381340594,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6639",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTM0MDU5NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/381340594/reactions"
    },
    "updated_at": "2018-04-14T16:18:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/381340594",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6509955?v=4",
      "events_url": "https://api.github.com/users/markekraus/events{/privacy}",
      "followers_url": "https://api.github.com/users/markekraus/followers",
      "following_url": "https://api.github.com/users/markekraus/following{/other_user}",
      "gists_url": "https://api.github.com/users/markekraus/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/markekraus",
      "id": 6509955,
      "login": "markekraus",
      "node_id": "MDQ6VXNlcjY1MDk5NTU=",
      "organizations_url": "https://api.github.com/users/markekraus/orgs",
      "received_events_url": "https://api.github.com/users/markekraus/received_events",
      "repos_url": "https://api.github.com/users/markekraus/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/markekraus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markekraus/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/markekraus"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Interesting use case. I guess you could move the coercion from the parameter to a compare statement and you would be able to preserve the string but retain a true Boolean compare?",
    "created_at": "2018-04-14T17:05:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6639#issuecomment-381343927",
    "id": 381343927,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6639",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTM0MzkyNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/381343927/reactions"
    },
    "updated_at": "2018-04-14T17:05:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/381343927",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11597190?v=4",
      "events_url": "https://api.github.com/users/DarwinJS/events{/privacy}",
      "followers_url": "https://api.github.com/users/DarwinJS/followers",
      "following_url": "https://api.github.com/users/DarwinJS/following{/other_user}",
      "gists_url": "https://api.github.com/users/DarwinJS/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/DarwinJS",
      "id": 11597190,
      "login": "DarwinJS",
      "node_id": "MDQ6VXNlcjExNTk3MTkw",
      "organizations_url": "https://api.github.com/users/DarwinJS/orgs",
      "received_events_url": "https://api.github.com/users/DarwinJS/received_events",
      "repos_url": "https://api.github.com/users/DarwinJS/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/DarwinJS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DarwinJS/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/DarwinJS"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Yea, there are workarounds like switching to `[String]::IsNullOrEmpty()`.\r\n\r\nI've seen this elsewhere but I can't remember any specific instances. In any case, it will break any situation where a conditional is being done on a string that may potentially be `\"false\"` (assuming conditionals coerce to a boolean). Code that used to go one path would now go another. I'm not really sure how to do some analytics to see how prevalent an issue it would be. I think it would be a step above rare though.\r\n\r\nOn the other hand. I have also run into code that was already going the wrong path because the author assumed `\"false\"` would be `$false`.. so this change may actually fix some already broken code. ðŸ¤£ ",
    "created_at": "2018-04-14T17:13:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6639#issuecomment-381344440",
    "id": 381344440,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6639",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTM0NDQ0MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/381344440/reactions"
    },
    "updated_at": "2018-04-14T17:31:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/381344440",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6509955?v=4",
      "events_url": "https://api.github.com/users/markekraus/events{/privacy}",
      "followers_url": "https://api.github.com/users/markekraus/followers",
      "following_url": "https://api.github.com/users/markekraus/following{/other_user}",
      "gists_url": "https://api.github.com/users/markekraus/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/markekraus",
      "id": 6509955,
      "login": "markekraus",
      "node_id": "MDQ6VXNlcjY1MDk5NTU=",
      "organizations_url": "https://api.github.com/users/markekraus/orgs",
      "received_events_url": "https://api.github.com/users/markekraus/received_events",
      "repos_url": "https://api.github.com/users/markekraus/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/markekraus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markekraus/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/markekraus"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@markekraus  - you comment brings up that I should clarify I am advocating that the cast only work on the EXACT string \"false\" (case insensitive) - not on a substring that finds that value in the string.  I assumed this is how a cast of a string would work - but clarifying in case that assumption is incorrect.",
    "created_at": "2018-04-14T17:29:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6639#issuecomment-381345741",
    "id": 381345741,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6639",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTM0NTc0MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/381345741/reactions"
    },
    "updated_at": "2018-04-14T17:29:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/381345741",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11597190?v=4",
      "events_url": "https://api.github.com/users/DarwinJS/events{/privacy}",
      "followers_url": "https://api.github.com/users/DarwinJS/followers",
      "following_url": "https://api.github.com/users/DarwinJS/following{/other_user}",
      "gists_url": "https://api.github.com/users/DarwinJS/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/DarwinJS",
      "id": 11597190,
      "login": "DarwinJS",
      "node_id": "MDQ6VXNlcjExNTk3MTkw",
      "organizations_url": "https://api.github.com/users/DarwinJS/orgs",
      "received_events_url": "https://api.github.com/users/DarwinJS/received_events",
      "repos_url": "https://api.github.com/users/DarwinJS/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/DarwinJS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DarwinJS/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/DarwinJS"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I used \"contain\" because I think of strings and variables as containers. I have updated it to the following:\r\n\r\n>  In any case, it will break any situation where a conditional is being done on a string that may potentially be `\"false\"` (assuming conditionals coerce to a boolean).",
    "created_at": "2018-04-14T17:32:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6639#issuecomment-381346009",
    "id": 381346009,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6639",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTM0NjAwOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/381346009/reactions"
    },
    "updated_at": "2018-04-14T17:33:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/381346009",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6509955?v=4",
      "events_url": "https://api.github.com/users/markekraus/events{/privacy}",
      "followers_url": "https://api.github.com/users/markekraus/followers",
      "following_url": "https://api.github.com/users/markekraus/following{/other_user}",
      "gists_url": "https://api.github.com/users/markekraus/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/markekraus",
      "id": 6509955,
      "login": "markekraus",
      "node_id": "MDQ6VXNlcjY1MDk5NTU=",
      "organizations_url": "https://api.github.com/users/markekraus/orgs",
      "received_events_url": "https://api.github.com/users/markekraus/received_events",
      "repos_url": "https://api.github.com/users/markekraus/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/markekraus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markekraus/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/markekraus"
    }
  }
]
