[
  {
    "author_association": "MEMBER",
    "body": "I believe you'll have to rely on a conversion to string, but something like the following might work:\r\n\r\n```powershell\r\nfunction global:BindToGlobalSessionState([scriptblock]$sb)\r\n{\r\n    Invoke-Expression \"{`n$sb`n}\"\r\n}\r\n```\r\n\r\nThe idea is to recreate the script block in global scope.\r\n\r\nBasically, you want to get [this line of code](https://github.com/PowerShell/PowerShell/blob/6cbcf5dd3e32099b8ca0eea13a3a6cfe8577d4f9/src/System.Management.Automation/engine/runtime/Operations/MiscOps.cs#L1251) executed with the correct session state.\r\n\r\nThere are other places where `SessionState` is assigned, but this is typically the first, and once set, the session state can't change.",
    "created_at": "2018-02-12T21:16:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6147#issuecomment-365064753",
    "id": 365064753,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6147",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTA2NDc1Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365064753/reactions"
    },
    "updated_at": "2018-02-12T21:16:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365064753",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "If you already have the session state, you can create a dummy module to store it.  The `SessionState` property is writable (mistake, maybe?)\r\n\r\n```powershell\r\nfunction InvokeWithSessionState {\r\n    param($SessionState, $ScriptBlock)\r\n    end {\r\n        $module = [psmoduleinfo]::new(<# linkToGlobal: #> $false)\r\n        $module.SessionState = $SessionState\r\n        & $module $ScriptBlock\r\n    }\r\n}\r\n```\r\n\r\nThat said, I assume the actual implementation of this will be running within Pester's `SessionState`.  If that's the case, actually obtaining the global `SessionState` is the harder part.  I haven't been able to find a way to get that without reflection.",
    "created_at": "2018-02-12T22:29:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6147#issuecomment-365085225",
    "id": 365085225,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6147",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTA4NTIyNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365085225/reactions"
    },
    "updated_at": "2018-02-12T22:37:35Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365085225",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": ">I believe you'll have to rely on a conversion to string...The idea is to recreate the script block in global scope.\r\n\r\nI see.  It's not obvious to me how to do that from a module.\r\n\r\n```PowerShell\r\nNew-Module m {\r\n    function global:GetGlobalSessionState { $ExecutionContext.SessionState }\r\n} | Import-Module\r\n\r\n[object]::ReferenceEquals((f),$ExecutionContext.SessionState)\r\n```\r\noutputs `False`.\r\n\r\nIn other words, despite the `global:` prefix, `GetGlobalSessionState`'s scriptblock is bound to the module.\r\n\r\nIs there some other way to reliably get a reference to a scriptblock associated with the global session state?\r\n\r\n>If you already have the session state, you can create a dummy module to store it.\r\n\r\nThis seems promising, and `$PSCmdlet.SessionState` seems to contain the caller's session state.  The following code seems to prove the concept:\r\n\r\n```PowerShell\r\nNew-Module m {\r\n    New-Module n {\r\n        $v = 'n.v'\r\n        $sb = {$v}\r\n        function InvokeWithSessionState {\r\n            param($SessionState, $ScriptBlock)\r\n            $module = [psmoduleinfo]::new(<# linkToGlobal: #> $false)\r\n            $module.SessionState = $SessionState\r\n            & $module $ScriptBlock\r\n        }\r\n        function a {\r\n            [CmdletBinding()]param()\r\n            InvokeWithSessionState -SessionState $PSCmdlet.SessionState -ScriptBlock $sb\r\n        }\r\n        function b {a}\r\n    } | Import-Module\r\n\r\n    $v = 'm.v'\r\n    function c { a }\r\n} | Import-Module\r\n\r\n& {\r\n    $v = 'g.v'\r\n    a\r\n    b\r\n    c\r\n}\r\n```\r\n\r\nThat outputs\r\n\r\n```none\r\ng.v\r\nn.v\r\nm.v\r\n```\r\n\r\nIt _seems_ like this technique would not be vulnerable to any of the acceptable breaking changes in the [breaking changes contract](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md).  @lzybkr Can you comment on whether this behavior is likely to be broken in the future?",
    "created_at": "2018-02-13T01:15:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6147#issuecomment-365118575",
    "id": 365118575,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6147",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTExODU3NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365118575/reactions"
    },
    "updated_at": "2018-02-13T01:15:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365118575",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11237922?v=4",
      "events_url": "https://api.github.com/users/alx9r/events{/privacy}",
      "followers_url": "https://api.github.com/users/alx9r/followers",
      "following_url": "https://api.github.com/users/alx9r/following{/other_user}",
      "gists_url": "https://api.github.com/users/alx9r/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/alx9r",
      "id": 11237922,
      "login": "alx9r",
      "node_id": "MDQ6VXNlcjExMjM3OTIy",
      "organizations_url": "https://api.github.com/users/alx9r/orgs",
      "received_events_url": "https://api.github.com/users/alx9r/received_events",
      "repos_url": "https://api.github.com/users/alx9r/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/alx9r/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alx9r/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/alx9r"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@alx9r `$PSCmdlet` won't reliably get you the global session state because you can't tell what scope it's coming from.  You can't really even be sure that it'll actually be there, if the module is called from a command prompt or a script without `CmdletBinding` that won't work.\r\n\r\nYou could get a little closer by iterating the call stack, something like\r\n\r\n```powershell\r\n(Get-PSCallStack).GetFrameVariables().PSCmdlet.Value |\r\n    Where-Object { -not $_.SessionState.Module }\r\n```\r\n\r\nBut that still depends on some part of the call stack outside of a module declaring `CmdletBinding`",
    "created_at": "2018-02-13T01:51:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6147#issuecomment-365125043",
    "id": 365125043,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6147",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTEyNTA0Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365125043/reactions"
    },
    "updated_at": "2018-02-13T01:51:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365125043",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@alx9r - I can see why that example doesn't work using `new-module`, but it should work if you defined the function in module when you use the `ScriptsToProcess` entry in the module manifest.\r\n\r\nI agree with @SeeminglyScience that a writable `SessionState` property in `ModuleInfo` seems unintentional. Changes to apis are generally conservative, so maybe you'd be safe using it, but I'd continue looking for alternatives so you have options to consider, or even fall back on if the api was removed.",
    "created_at": "2018-02-13T02:03:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6147#issuecomment-365127308",
    "id": 365127308,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6147",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTEyNzMwOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365127308/reactions"
    },
    "updated_at": "2018-02-13T02:03:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365127308",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "NONE",
    "body": ">$PSCmdlet won't reliably get you the global session state because you can't tell what scope it's coming from.\r\n\r\nI agree.  I've been experimenting with different approaches since my OP and I think the question I should have been asking is this:  Is there a supported way of invoking a scriptblock with the caller's SessionState?  It seems like `$PSCmdlet.SessionState` reliably gets the caller's SessionState.\r\n",
    "created_at": "2018-02-13T02:09:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6147#issuecomment-365128195",
    "id": 365128195,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6147",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTEyODE5NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365128195/reactions"
    },
    "updated_at": "2018-02-13T02:23:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365128195",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11237922?v=4",
      "events_url": "https://api.github.com/users/alx9r/events{/privacy}",
      "followers_url": "https://api.github.com/users/alx9r/followers",
      "following_url": "https://api.github.com/users/alx9r/following{/other_user}",
      "gists_url": "https://api.github.com/users/alx9r/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/alx9r",
      "id": 11237922,
      "login": "alx9r",
      "node_id": "MDQ6VXNlcjExMjM3OTIy",
      "organizations_url": "https://api.github.com/users/alx9r/orgs",
      "received_events_url": "https://api.github.com/users/alx9r/received_events",
      "repos_url": "https://api.github.com/users/alx9r/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/alx9r/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alx9r/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/alx9r"
    }
  },
  {
    "author_association": "NONE",
    "body": ">it should work if you defined the function in module when you use the ScriptsToProcess entry in the module manifest.\r\n\r\nI thought so too.  And it does work, but that approach is brittle to nested modules.  If any module loads the module with `ScriptToProcess` first, then `BindToGlobalSessionState` actually binds to that module's SessionState.\r\n\r\n>Changes to apis are generally conservative, so maybe you'd be safe using it, but I'd continue looking for alternatives so you have options to consider, or even fall back on if the api was removed.\r\n\r\nI think I'm out of ideas for now.  Do you have any other ideas I should explore?  FWIW, I think the question I probably should have been asking is this: Is there a supported way of invoking a scriptblock with the caller's SessionState?",
    "created_at": "2018-02-13T02:23:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6147#issuecomment-365130558",
    "id": 365130558,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6147",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTEzMDU1OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365130558/reactions"
    },
    "updated_at": "2018-02-13T02:23:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365130558",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11237922?v=4",
      "events_url": "https://api.github.com/users/alx9r/events{/privacy}",
      "followers_url": "https://api.github.com/users/alx9r/followers",
      "following_url": "https://api.github.com/users/alx9r/following{/other_user}",
      "gists_url": "https://api.github.com/users/alx9r/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/alx9r",
      "id": 11237922,
      "login": "alx9r",
      "node_id": "MDQ6VXNlcjExMjM3OTIy",
      "organizations_url": "https://api.github.com/users/alx9r/orgs",
      "received_events_url": "https://api.github.com/users/alx9r/received_events",
      "repos_url": "https://api.github.com/users/alx9r/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/alx9r/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alx9r/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/alx9r"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> It seems like $PSCmdlet.SessionState reliably gets the caller's SessionState.\r\n\r\n@alx9r not reliably, because you can't guarantee `CmdletBinding` was declared in the caller.  You could make that a requirement to mock, but if it wasn't declared and instead `PSCmdlet` came from a different `SessionState` than the caller it would be very difficult to debug unless you are intimately familiar with the engine.\r\n\r\nYour best bet at reliability (not taking support into account) is to get `InvocationInfo` from the call stack and get the `SessionStateInternal` of the caller.\r\n\r\n```powershell\r\n$callerScriptBlock = (Get-PSCallStack)[1].InvocationInfo.MyCommand.ScriptBlock\r\n\r\n$ssi = $callerScriptBlock.GetType().\r\n    GetProperty('SessionStateInternal', [System.Reflection.BindingFlags]'Instance, NonPublic').\r\n    GetValue($callerScriptBlock)\r\n```\r\n\r\nBut even then there are some instances where the `ScriptBlock` property is `null` (like class methods and script blocks invoked directly with `Invoke*` api's)",
    "created_at": "2018-02-13T02:35:16Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6147#issuecomment-365132293",
    "id": 365132293,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6147",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTEzMjI5Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365132293/reactions"
    },
    "updated_at": "2018-02-13T02:37:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365132293",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "FWIW I have settled on implementing a function called `BindToCallerSessionState`, for now.  The function does the following:\r\n\r\n* Attempts each of the following strategies and uses the one highest in the list that succeeds:\r\n   1. setting the session state property of a new `[psmoduleinfo]`\r\n   2. setting a scriptblock's `SessionStateInternal` property using private reflection\r\n   3. calling `BindToImporterSessionState` which is implemented using `ScriptToProcess`\r\n* Writes to the warning stream if any strategy fails.\r\n* Throws and exception if they all fail.\r\n\r\nThe problem with strategies (i) and (ii) is that they might be broken by changes to PowerShell.  The problem with (iii) is that it doesn't do the right thing -- binding to the importer session state is _not_ the same as binding to the caller session state.  This seems to be a matter of choosing the least evil.\r\n\r\nI have also implemented a number of automated tests around each of the strategies.  If there is a breaking change, it should be detected early either by the warnings seen by users or by the automated tests for the mock library failing.\r\n\r\nIt does seem a bit odd that PowerShell has a first class way of invoking a scriptblock in a given module (ie. `& $module $scriptblock`) but no supported way of invoking a scriptblock in either the \"global\" session state or the caller's session state.",
    "created_at": "2018-02-13T16:21:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6147#issuecomment-365318714",
    "id": 365318714,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6147",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTMxODcxNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365318714/reactions"
    },
    "updated_at": "2018-02-13T16:21:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365318714",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11237922?v=4",
      "events_url": "https://api.github.com/users/alx9r/events{/privacy}",
      "followers_url": "https://api.github.com/users/alx9r/followers",
      "following_url": "https://api.github.com/users/alx9r/following{/other_user}",
      "gists_url": "https://api.github.com/users/alx9r/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/alx9r",
      "id": 11237922,
      "login": "alx9r",
      "node_id": "MDQ6VXNlcjExMjM3OTIy",
      "organizations_url": "https://api.github.com/users/alx9r/orgs",
      "received_events_url": "https://api.github.com/users/alx9r/received_events",
      "repos_url": "https://api.github.com/users/alx9r/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/alx9r/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alx9r/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/alx9r"
    }
  },
  {
    "author_association": "NONE",
    "body": ">not reliably, because you can't guarantee CmdletBinding was declared in the caller.\r\n\r\nThis code\r\n\r\n```PowerShell\r\nNew-Module m {\r\n    $v = 'm.v'\r\n    function s { {$v} }\r\n    function InvokeWithCallerSessionState {\r\n        [CmdletBinding()]\r\n        param($ScriptBlock)\r\n        $module = [psmoduleinfo]::new(<# linkToGlobal: #> $false)\r\n        $module.SessionState = $PSCmdlet.SessionState\r\n        & $module $ScriptBlock\r\n    }\r\n} | Import-Module\r\n\r\n$v = 'g.v'\r\n$sb = s\r\n\r\n& $sb # m.v\r\nInvokeWithCallerSessionState -ScriptBlock $sb # g.v\r\n```\r\n\r\nseems to demonstrate that declaring CmdletBinding in the caller is not necessary.  Do you have an example demonstrating your concern?",
    "created_at": "2018-02-13T16:40:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6147#issuecomment-365325124",
    "id": 365325124,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6147",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTMyNTEyNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365325124/reactions"
    },
    "updated_at": "2018-02-13T16:40:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365325124",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11237922?v=4",
      "events_url": "https://api.github.com/users/alx9r/events{/privacy}",
      "followers_url": "https://api.github.com/users/alx9r/followers",
      "following_url": "https://api.github.com/users/alx9r/following{/other_user}",
      "gists_url": "https://api.github.com/users/alx9r/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/alx9r",
      "id": 11237922,
      "login": "alx9r",
      "node_id": "MDQ6VXNlcjExMjM3OTIy",
      "organizations_url": "https://api.github.com/users/alx9r/orgs",
      "received_events_url": "https://api.github.com/users/alx9r/received_events",
      "repos_url": "https://api.github.com/users/alx9r/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/alx9r/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alx9r/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/alx9r"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Do you have an example demonstrating your concern?\r\n\r\nNope! I'm wrong.  I could have sworn `$PSCmdlet.SessionState` gave the *current* session state, but that isn't the case.  Learn something new every day :)",
    "created_at": "2018-02-13T22:09:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6147#issuecomment-365422044",
    "id": 365422044,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6147",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTQyMjA0NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 1,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365422044/reactions"
    },
    "updated_at": "2018-02-13T22:12:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365422044",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "I think there is another alternative.  As far as I can tell, when a PSCmdlet implemented in C# is invoked its SessionState property is the caller's SessionState.  In other words,\r\n\r\n * when such a cmdlet is invoked from outside a module, .SessionState is the \"global\" SessionState, and\r\n * when such a cmdlet is invoked from a script module, .SessionState is the module's SessionState.\r\n\r\n@lzybkr Can you confirm whether this is true?  I'm also wondering whether this behavior is by design or by chance.  In other words, can I rely on the correspondence between call site and .SessionState as described in the above bullets?\r\n\r\nBelow is (what I _think_ is) a working example.  It looks like utilizing this technique requires that any command to whose call site you need to bind a scriptblock be implemented as a binary command.  I haven't succeeded at replicating this technique for implementing commands as scriptblocks.\r\n\r\n```PowerShell\r\nAdd-Type '\r\n    using System.Management.Automation;\r\n\r\n    [Cmdlet(VerbsData.ConvertTo,\"CallerBound\")]\r\n    public class ConvertToCallerBound : PSCmdlet\r\n    {\r\n        [Parameter(Mandatory=true)]\r\n        public ScriptBlock ScriptBlock;\r\n\r\n        protected override void ProcessRecord()\r\n        {\r\n            WriteObject(\r\n                SessionState.InvokeCommand.InvokeScript(\r\n                    \"{$v}\"\r\n                )[0]);\r\n        }\r\n    }\r\n' -PassThru | % Assembly | Import-Module\r\n\r\n$null = New-Module {\r\n    $v = 'm.v'\r\n    function ConvertTo-ModuleBound\r\n    {\r\n        param(\r\n            [Parameter(Mandatory)]\r\n            $ScriptBlock\r\n        )\r\n        <#\r\n        .SessionState in this call to ConvertTo-CallerBound\r\n        is this module's SessionState.\r\n        #>\r\n        ConvertTo-CallerBound -ScriptBlock $ScriptBlock\r\n    }\r\n    function Invoke-ScriptBlock{\r\n        param($ScriptBlock)\r\n        & $ScriptBlock\r\n    }\r\n}\r\n\r\n$v = 'g.v'\r\n\r\n<#\r\nReturns a new scriptblock that is\r\nbound the \"global\" scope.\r\n\r\n.SessionState in this call to ConverTo-CallerBound\r\nis the \"global\" scope.\r\n#>\r\n$g = ConvertTo-CallerBound -ScriptBlock {$v}\r\n\r\n& $g # g.v\r\nInvoke-ScriptBlock $g # g.v\r\n\r\n\r\n<#\r\nReturns a new scriptblock that is \r\nbound to the module's scope.\r\n#>\r\n$m = ConvertTo-ModuleBound -ScriptBlock {$v}\r\n& $m # m.v\r\nInvoke-ScriptBlock $m # m.v\r\n```",
    "created_at": "2019-06-18T17:16:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6147#issuecomment-503229088",
    "id": 503229088,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6147",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMzIyOTA4OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/503229088/reactions"
    },
    "updated_at": "2019-06-18T17:16:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/503229088",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11237922?v=4",
      "events_url": "https://api.github.com/users/alx9r/events{/privacy}",
      "followers_url": "https://api.github.com/users/alx9r/followers",
      "following_url": "https://api.github.com/users/alx9r/following{/other_user}",
      "gists_url": "https://api.github.com/users/alx9r/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/alx9r",
      "id": 11237922,
      "login": "alx9r",
      "node_id": "MDQ6VXNlcjExMjM3OTIy",
      "organizations_url": "https://api.github.com/users/alx9r/orgs",
      "received_events_url": "https://api.github.com/users/alx9r/received_events",
      "repos_url": "https://api.github.com/users/alx9r/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/alx9r/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alx9r/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/alx9r"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Heh, can't believe I never found this issue.\r\n\r\nI've wrestled with this extensively myself in PSKoans, so that I could invoke the koan files in a global session rather than accidentally invoking them inside the module itself.\r\n\r\nMy own solution was basically to spin up a new runspace and work with that.\r\n\r\nIf there is a simpler way to bind a scriptblock to the global session state I'd very much appreciate it.",
    "created_at": "2019-06-18T17:49:33Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6147#issuecomment-503241793",
    "id": 503241793,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6147",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMzI0MTc5Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/503241793/reactions"
    },
    "updated_at": "2019-06-18T17:49:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/503241793",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "I'm not going to answer your question directly because it's been a long time since I've looked at this area and your observations are going to be more correct than my possibly faulty memory.\r\n\r\nIIRC, `SessionState` can be set upon first access (or explicitly) and I didn't like that as it wasn't explicit enough for my liking.\r\n\r\nBecause of this, I think it's possible it gets set by chance somewhere now, but I think @BrucePay was careful enough when originally implementing modules that everything is (or at least once was) by design.",
    "created_at": "2019-06-18T20:04:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6147#issuecomment-503290113",
    "id": 503290113,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6147",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMzI5MDExMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/503290113/reactions"
    },
    "updated_at": "2019-06-18T20:04:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/503290113",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "NONE",
    "body": "@lzybkr Ah.  I see.  Got it.  Thanks for the background.  I think I've got enough tests around the behavior I need that I'll probably detect an inadvertent change early enough.",
    "created_at": "2019-06-18T20:19:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6147#issuecomment-503295805",
    "id": 503295805,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6147",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMzI5NTgwNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/503295805/reactions"
    },
    "updated_at": "2019-06-18T20:19:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/503295805",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11237922?v=4",
      "events_url": "https://api.github.com/users/alx9r/events{/privacy}",
      "followers_url": "https://api.github.com/users/alx9r/followers",
      "following_url": "https://api.github.com/users/alx9r/following{/other_user}",
      "gists_url": "https://api.github.com/users/alx9r/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/alx9r",
      "id": 11237922,
      "login": "alx9r",
      "node_id": "MDQ6VXNlcjExMjM3OTIy",
      "organizations_url": "https://api.github.com/users/alx9r/orgs",
      "received_events_url": "https://api.github.com/users/alx9r/received_events",
      "repos_url": "https://api.github.com/users/alx9r/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/alx9r/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alx9r/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/alx9r"
    }
  },
  {
    "author_association": "NONE",
    "body": ">If there is a simpler way to bind a scriptblock to the global session state I'd very much appreciate it.\r\n\r\n@vexx32 The best I've been able to come up with is the methods for binding to the caller's session state (which may or may not be the global session state) discussed above.  Binding to the global session state is a bridge further than I have explored.",
    "created_at": "2019-06-18T20:23:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6147#issuecomment-503297141",
    "id": 503297141,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6147",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMzI5NzE0MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/503297141/reactions"
    },
    "updated_at": "2019-06-18T20:23:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/503297141",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11237922?v=4",
      "events_url": "https://api.github.com/users/alx9r/events{/privacy}",
      "followers_url": "https://api.github.com/users/alx9r/followers",
      "following_url": "https://api.github.com/users/alx9r/following{/other_user}",
      "gists_url": "https://api.github.com/users/alx9r/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/alx9r",
      "id": 11237922,
      "login": "alx9r",
      "node_id": "MDQ6VXNlcjExMjM3OTIy",
      "organizations_url": "https://api.github.com/users/alx9r/orgs",
      "received_events_url": "https://api.github.com/users/alx9r/received_events",
      "repos_url": "https://api.github.com/users/alx9r/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/alx9r/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alx9r/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/alx9r"
    }
  }
]
