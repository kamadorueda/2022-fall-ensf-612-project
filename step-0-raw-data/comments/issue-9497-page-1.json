[
  {
    "author_association": "CONTRIBUTOR",
    "body": "I am hit by the same problem, I have to work with the databricks CLI, which has a terrible UX that requires me to pipe `stdin` to the the native binary and it seems I have to use `bash` for now as I could not translate the following to `PowerShell`:\r\n```\r\ndatabricks configure --token <<EOF\r\nhttps://$(databricks_location).azuredatabricks.net\r\n$(databricks-token)\r\nEOF\r\n```\r\nI've tried piping a string to it\r\n```pwsh\r\n$newline = [System.Environment]::NewLine\r\n\"${newline}https://$DatabricksLocationShort.azuredatabricks.net${newline}$DatabricksToken${newline}\" | databricks configure --token\r\n```\r\nwith variations of `${newline}` or also trying to pipe an array with no luck....",
    "created_at": "2019-11-14T12:34:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9497#issuecomment-553868521",
    "id": 553868521,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9497",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1Mzg2ODUyMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/553868521/reactions"
    },
    "updated_at": "2019-11-14T12:35:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/553868521",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/9250262?v=4",
      "events_url": "https://api.github.com/users/bergmeister/events{/privacy}",
      "followers_url": "https://api.github.com/users/bergmeister/followers",
      "following_url": "https://api.github.com/users/bergmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/bergmeister/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/bergmeister",
      "id": 9250262,
      "login": "bergmeister",
      "node_id": "MDQ6VXNlcjkyNTAyNjI=",
      "organizations_url": "https://api.github.com/users/bergmeister/orgs",
      "received_events_url": "https://api.github.com/users/bergmeister/received_events",
      "repos_url": "https://api.github.com/users/bergmeister/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/bergmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bergmeister/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/bergmeister"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "It sounds like you're describing the _opposite_ direction: piping _to_ an external program.\r\n\r\nIn my experience that usually _does_ work; e.g.:\r\n\r\n```powershell\r\n@'\r\none\r\ntwo\r\nthree\r\n'@ | bash -c 'cat -n'  # outputs the stdin input lines with line numbers\r\n```\r\n\r\nDitto:\r\n\r\n```powershell\r\n'one', 'two', 'three'  | bash -c 'cat -n'  # outputs the stdin input lines with line numbers\r\n```\r\n\r\nIs there something special about the `databricks` utility?\r\n\r\nNote that, as usual, PowerShell uses the `$OutputEncoding` character encoding for sending text to external programs, which in PS Core is now UTF-8.",
    "created_at": "2019-11-14T12:44:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9497#issuecomment-553871905",
    "id": 553871905,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9497",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1Mzg3MTkwNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/553871905/reactions"
    },
    "updated_at": "2019-11-14T12:47:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/553871905",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for the info. Yes, it is piping to an external binary that expects input via stdin as it prompts.\r\nI decided to use authentication via environment variables on the PowerShell process level instead",
    "created_at": "2019-11-14T12:49:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9497#issuecomment-553873540",
    "id": 553873540,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9497",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1Mzg3MzU0MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/553873540/reactions"
    },
    "updated_at": "2019-11-19T18:10:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/553873540",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/9250262?v=4",
      "events_url": "https://api.github.com/users/bergmeister/events{/privacy}",
      "followers_url": "https://api.github.com/users/bergmeister/followers",
      "following_url": "https://api.github.com/users/bergmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/bergmeister/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/bergmeister",
      "id": 9250262,
      "login": "bergmeister",
      "node_id": "MDQ6VXNlcjkyNTAyNjI=",
      "organizations_url": "https://api.github.com/users/bergmeister/orgs",
      "received_events_url": "https://api.github.com/users/bergmeister/received_events",
      "repos_url": "https://api.github.com/users/bergmeister/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/bergmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bergmeister/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/bergmeister"
    }
  },
  {
    "author_association": "NONE",
    "body": "@bergmeister  Can you share code how you are able to authenticate Databricks through Environment variables. I am pretty much struck in this case ",
    "created_at": "2019-12-18T02:28:29Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9497#issuecomment-566838420",
    "id": 566838420,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9497",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NjgzODQyMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566838420/reactions"
    },
    "updated_at": "2019-12-18T02:28:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566838420",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/34703135?v=4",
      "events_url": "https://api.github.com/users/mvalikar/events{/privacy}",
      "followers_url": "https://api.github.com/users/mvalikar/followers",
      "following_url": "https://api.github.com/users/mvalikar/following{/other_user}",
      "gists_url": "https://api.github.com/users/mvalikar/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mvalikar",
      "id": 34703135,
      "login": "mvalikar",
      "node_id": "MDQ6VXNlcjM0NzAzMTM1",
      "organizations_url": "https://api.github.com/users/mvalikar/orgs",
      "received_events_url": "https://api.github.com/users/mvalikar/received_events",
      "repos_url": "https://api.github.com/users/mvalikar/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mvalikar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mvalikar/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mvalikar"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@mvalikar You set the DATABRICKS_HOST and  DATABRICKS_TOKEN environment variables as per docs, I suggest to set them only for the current process for security purposes and clean them up at the end\r\nhttps://docs.databricks.com/dev-tools/cli/index.html\r\n\r\n<blockquote><img src=\"../../_static/favicon.ico\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.databricks.com/dev-tools/cli/index.html\">Databricks CLI â€” Databricks Documentation</a></strong></div><div>Learn how to install and configure your environment to run the Databricks command-line interface.</div></blockquote>",
    "created_at": "2019-12-18T08:11:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9497#issuecomment-566924419",
    "id": 566924419,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9497",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2NjkyNDQxOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566924419/reactions"
    },
    "updated_at": "2019-12-18T08:12:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/566924419",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/9250262?v=4",
      "events_url": "https://api.github.com/users/bergmeister/events{/privacy}",
      "followers_url": "https://api.github.com/users/bergmeister/followers",
      "following_url": "https://api.github.com/users/bergmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/bergmeister/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/bergmeister",
      "id": 9250262,
      "login": "bergmeister",
      "node_id": "MDQ6VXNlcjkyNTAyNjI=",
      "organizations_url": "https://api.github.com/users/bergmeister/orgs",
      "received_events_url": "https://api.github.com/users/bergmeister/received_events",
      "repos_url": "https://api.github.com/users/bergmeister/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/bergmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bergmeister/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/bergmeister"
    }
  },
  {
    "author_association": "NONE",
    "body": "The same happens when directly calling `ps1`.\r\n\r\n## Bash\r\n\r\n`test.sh` has\r\n\r\n```\r\npython -c \"print(input())\"\r\n```\r\n\r\nWe can call it interactively:\r\n\r\n```\r\n$ ./test.sh\r\nsometext  < input here\r\nsometext\r\n```\r\n\r\nWhen piping to `test.sh`, the inner `python` receives from `stdin` automatically:\r\n\r\n```sh\r\n$ echo \"sometext\" | ./test.sh\r\nsometext\r\n```\r\n\r\n## PowerShell\r\n\r\n\r\n`test.ps1` have the same content:\r\n\r\n```\r\npython -c \"print(input())\"\r\n```\r\n\r\nInteractive input works:\r\n\r\n```\r\n> ./test.ps1\r\nsometext  < input here\r\nsometext\r\n```\r\n\r\nBut when piping to `test.ps1`, the inner `python` can't receive from `stdin` and waits for user input.\r\n\r\n```pwsh\r\n> echo \"sometext\" | ./test.ps1\r\n<waiting for user input>\r\n```\r\n\r\nIf we explicitly pipe [`$input`](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_automatic_variables?view=powershell-7.2#input) to `python` in `test.ps1`:\r\n\r\n```pwsh\r\n$input | python -c \"print(input())\"\r\n```\r\n\r\nNow piping works:\r\n\r\n```pwsh\r\n> echo \"sometext\" | ./test.ps1\r\nsometext\r\n```\r\n\r\nbut interactive input fails:\r\n\r\n```\r\n> ./test.ps1\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\nEOFError: EOF when reading a line\r\n```\r\n",
    "created_at": "2022-09-14T03:16:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9497#issuecomment-1246179450",
    "id": 1246179450,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9497",
    "node_id": "IC_kwDOAvT7bc5KRzB6",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1246179450/reactions"
    },
    "updated_at": "2022-09-14T06:51:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1246179450",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/4003950?v=4",
      "events_url": "https://api.github.com/users/jiasli/events{/privacy}",
      "followers_url": "https://api.github.com/users/jiasli/followers",
      "following_url": "https://api.github.com/users/jiasli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jiasli/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jiasli",
      "id": 4003950,
      "login": "jiasli",
      "node_id": "MDQ6VXNlcjQwMDM5NTA=",
      "organizations_url": "https://api.github.com/users/jiasli/orgs",
      "received_events_url": "https://api.github.com/users/jiasli/received_events",
      "repos_url": "https://api.github.com/users/jiasli/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jiasli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jiasli/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jiasli"
    }
  },
  {
    "author_association": "NONE",
    "body": "A workaround I can think of is to check if `$input` is empty:\r\n\r\n- If `$input` is not empty, pipe it to python\r\n- If `$input` is empty, don't pipe it to python and leave python to read `stdin` from TTY\r\n\r\n(We need to save `$input` to another variable `$stdin` since `$input` is an enumerator and can be accessed only once.)\r\n\r\n```ps1\r\n$stdin = \"$input\"\r\nif ($stdin) {\r\n    $stdin | python -c \"print(input())\"\r\n}\r\nelse {\r\n    python -c \"print(input())\"\r\n}\r\n```\r\n\r\nThis solution requires additional efforts and is cumbersome. It is also fundamentally different from Bash since we are deciding **whether to connect `stdin` to `python` based on the content of `stdin`**, instead of **whether piping is used**. \r\n\r\nIn Bash, the behavior can be expressed as:\r\n\r\n- If a `sh` script is directly called, the inner executable's `stdin` is connected to TTY\r\n- If a `sh` script is called with pipe `|`, the output of the source is sent to inner executable's `stdin`\r\n\r\nFor example, in Bash, even when piping is used with empty content, it leads to failure:\r\n\r\n```\r\n$ python -c \"print('', end='')\" | ./test.sh\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\nEOFError: EOF when reading a line\r\n```\r\n\r\nbut the above workaround doesn't work as expected for empty pipe and falls back to interactive input:\r\n\r\n```\r\n> python -c \"print('', end='')\" | ./test.ps1\r\nuserinput  < input here\r\nuserinput\r\n```\r\n\r\nSo questions are:\r\n\r\n- Can we detect if piping is used from `$input`?\r\n- How can we detect if `$input` is empty (pipe is not used) or `$input` is empty string (an empty pipe is used)?\r\n- What if `stdin` contains binary stream?",
    "created_at": "2022-09-14T07:07:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9497#issuecomment-1246338213",
    "id": 1246338213,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9497",
    "node_id": "IC_kwDOAvT7bc5KSZyl",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1246338213/reactions"
    },
    "updated_at": "2022-09-14T08:36:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1246338213",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/4003950?v=4",
      "events_url": "https://api.github.com/users/jiasli/events{/privacy}",
      "followers_url": "https://api.github.com/users/jiasli/followers",
      "following_url": "https://api.github.com/users/jiasli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jiasli/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jiasli",
      "id": 4003950,
      "login": "jiasli",
      "node_id": "MDQ6VXNlcjQwMDM5NTA=",
      "organizations_url": "https://api.github.com/users/jiasli/orgs",
      "received_events_url": "https://api.github.com/users/jiasli/received_events",
      "repos_url": "https://api.github.com/users/jiasli/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jiasli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jiasli/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jiasli"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Can we detect if piping is used from `$input`?\r\n\r\nUse `$MyInvocation.ExpectingInput`\r\n\r\n```powershell\r\n& { $MyInvocation.ExpectingInput } # -> $false\r\n1 | & { $MyInvocation.ExpectingInput } # -> $true\r\n```\r\n\r\n> How can we detect if [...] `$input` is empty string  (an empty pipe is used)?\r\n\r\nIf it's OK to collect all input up front:\r\n\r\n```powershell\r\npython -c \"print('', end='')\" | & { $allLines = @($Input); $allLines.Count -eq 0 }\r\n```\r\n\r\nOtherwise:\r\n\r\n```powershell\r\n# -> $true\r\npython -c \"print('', end='')\" | & { begin { $emptyInput = $true } process { $emptyInput = $false  } end { $emptyInput }  }\r\n```\r\n\r\nNote that _without_ pipeline input, the `process` block is also called, namely exactly _once_.\r\n\r\n\r\n> What if stdin contains binary stream?\r\n\r\nPowerShell currently has _no_ support for binary data in its pipelines when communicating with _external programs_ - everything is treated as _text_ - both on sending and receiving - see \r\n* #1908\r\n\r\n\r\n\r\n",
    "created_at": "2022-09-14T14:38:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9497#issuecomment-1246868510",
    "id": 1246868510,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9497",
    "node_id": "IC_kwDOAvT7bc5KUbQe",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1246868510/reactions"
    },
    "updated_at": "2022-09-14T14:38:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1246868510",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "@mklement0, thanks a lot for the insights.\r\n\r\nThis solution you mentioned doesn't seem to work. It returns `True` even with empty `stdin`  (scenario 2):\r\n\r\n```powershell\r\n# 1. pipeline is not used\r\n> & { $allLines = @($Input); $allLines.Count -eq 0 }\r\nTrue\r\n\r\n# 2. pipeline is used, but empty\r\n> python -c \"print('', end='')\" | & { $allLines = @($Input); $allLines.Count -eq 0 }\r\nTrue\r\n\r\n# 3. pipeline is used, with some chars in it\r\n> python -c \"print('a', end='')\" | & { $allLines = @($Input); $allLines.Count -eq 0 }\r\nFalse\r\n```\r\n\r\nThe other solution also has some unexpected behavior:\r\n\r\n```powershell\r\n> & { begin { $emptyInput = $true } process { $emptyInput = $false  } end { $emptyInput }  }\r\nFalse\r\n> python -c \"print('', end='')\" | & { begin { $emptyInput = $true } process { $emptyInput = $false  } end { $emptyInput }  }\r\nTrue\r\n> python -c \"print('a', end='')\" | & { begin { $emptyInput = $true } process { $emptyInput = $false  } end { $emptyInput }  }\r\nFalse\r\n```\r\n\r\nThe expected result is to return \r\n\r\n- `False` if pipeline is not used (scenario 1)\r\n- `True` is pipeline is used (scenario 2, 3)\r\n\r\n(Or otherwise - doesn't really matter.)",
    "created_at": "2022-09-15T03:39:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9497#issuecomment-1247542207",
    "id": 1247542207,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9497",
    "node_id": "IC_kwDOAvT7bc5KW_u_",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1247542207/reactions"
    },
    "updated_at": "2022-09-15T04:23:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1247542207",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/4003950?v=4",
      "events_url": "https://api.github.com/users/jiasli/events{/privacy}",
      "followers_url": "https://api.github.com/users/jiasli/followers",
      "following_url": "https://api.github.com/users/jiasli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jiasli/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jiasli",
      "id": 4003950,
      "login": "jiasli",
      "node_id": "MDQ6VXNlcjQwMDM5NTA=",
      "organizations_url": "https://api.github.com/users/jiasli/orgs",
      "received_events_url": "https://api.github.com/users/jiasli/received_events",
      "repos_url": "https://api.github.com/users/jiasli/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jiasli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jiasli/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jiasli"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I answered your questions in isolation, You need to combine your logic with `$MyInvocation.ExpectingInput` as needed, to distinguish the pipeline from the non-pipeline scenarios.\r\nApart from that, I see no unexpected behavior. ` & { $allLines = @($Input); $allLines.Count -eq 0 }` is designed to return _`$true`_ if there is either no input from the pipeline at all or  if that input is empty.\r\n`& { begin { $emptyInput = $true } process { $emptyInput = $false  } end { $emptyInput }  }` is designed to return `$true` only if there's pipeline input and it is empty.",
    "created_at": "2022-09-15T08:14:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9497#issuecomment-1247745380",
    "id": 1247745380,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9497",
    "node_id": "IC_kwDOAvT7bc5KXxVk",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1247745380/reactions"
    },
    "updated_at": "2022-09-15T08:14:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1247745380",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
