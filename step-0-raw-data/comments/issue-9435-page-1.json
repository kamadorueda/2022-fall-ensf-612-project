[
  {
    "author_association": "CONTRIBUTOR",
    "body": "With `$true` as the _LHS_ PowerShell seemingly never consults the methods / interfaces of the RHS and considers _any_ (non-primitive, non-collection) type instance to be implicitly `$true`, using its built-in to-Boolean conversion logic.\r\n\r\n```powershell\r\n$true -eq [Blank]::new()\r\n```\r\n\r\nis the same as:\r\n\r\n```powershell\r\n$true -eq [bool] [Blank]::new()\r\n```\r\n\r\nor simply:\r\n\r\n```powershell\r\n[bool] [Blank]::new()  # always $true for any non-primitive, non-collection type instance\r\n```\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/0bd93777fceab06b0b3d949a5d47cd39cf25d65d/src/System.Management.Automation/engine/LanguagePrimitives.cs#L1638-L1644 seems to confirm that.\r\n\r\nIn short: with a Boolean as the _LHS_, it is only ever PowerShell's built-in to-Boolean conversions that apply.\r\n\r\nWith the Boolean on the _RHS_, your `[Blank]` type doesn't need to do any extra work to always compare as `$false`:\r\n\r\n```powershell\r\nclass Blank { }\r\n[Blank]::new() -eq $true # $false\r\n[Blank]::new() -eq $false # $false\r\n```\r\n\r\nAside from that, it seems that even with the operands reversed your static `op_Equality()` method wouldn't be called by `-eq`; you'd need an instance method `[bool] Equals([object] $o) { return $false }`, which would then be called by both `-eq` and `-ne`.\r\n\r\n\r\n",
    "created_at": "2019-04-22T22:54:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9435#issuecomment-485580461",
    "id": 485580461,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9435",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NTU4MDQ2MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 2,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/485580461/reactions"
    },
    "updated_at": "2019-04-22T22:54:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/485580461",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I've been talking with @JamesWTruher in the PS Slack space on some possibilities here, but it looks like as long as the LHS is a boolean, it's impossible to override the equality checks in a way that PS will recognise.\r\n\r\nI'm working around this by adjusting the assertion, but I appreciate nonetheless the point of the `Equals()` instance method as it does allow me to have `$a -eq $a` return `$false` which I'm sure I'll run into needing sooner or later!\r\n\r\nClosing this as a resounding \"no\" for wherever booleans are concerned, but in all other cases it looks like I can more or less make it happen. ðŸ˜„ ",
    "created_at": "2019-04-23T23:35:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9435#issuecomment-486011965",
    "id": 486011965,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9435",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NjAxMTk2NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/486011965/reactions"
    },
    "updated_at": "2019-04-23T23:35:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/486011965",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  }
]
