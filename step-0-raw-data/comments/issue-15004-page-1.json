[
  {
    "author_association": "CONTRIBUTOR",
    "body": "Let me know if I'm telling you that you already know, but just to clarify:\r\n\r\n* The `.AddScript()` method of the `PowerShell` class accepts a _string_ that becomes a _script block_, which, as usual, can declare parameters and/or receive arguments. Note that since the script block's _content_ is being passed, there must _not_ be enclosing `{ ... }`\r\n\r\n* While there is currently no support for passing a _dictionary_ of arguments - i.e. no support for _splatting_ via the `PowerShell` class - a chain of `.AddParameter()` calls is akin to that, if more verbose. [_update_: `.AddParameters()` supports splatting]\r\n\r\nA simple example written in PowerShell:\r\n\r\n```powershell\r\n# Note the absence of enclosing { ... }\r\n[powershell]::Create().AddScript(\r\n@'\r\n  param(\r\n    $a,\r\n    $b\r\n    )\r\n    \r\n    \"a: $a\"\r\n    \"b: $b\"\r\n\r\n'@\r\n).\r\n  AddParameter('a', 'A').\r\n  AddParameter('b', 'B').\r\n  Invoke()\r\n```\r\n\r\nThis yields:\r\n\r\n```\r\na: A\r\nb: B\r\n```",
    "created_at": "2021-03-12T14:56:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15004#issuecomment-797541410",
    "id": 797541410,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15004",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzU0MTQxMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/797541410/reactions"
    },
    "updated_at": "2021-03-12T20:08:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/797541410",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I've found myself wanting this a lot as well, but every time I go to request it I have a hard time justifying it.  The only real reason you'd want to do this is to invoke a scriptblock in the current runspace while retaining original AST information for debugging.\r\n\r\nIf you don't need the AST information, you can just `ToString()` it.  If you aren't invoking in the current runspace, then runspace affinity is going to be a bit confusing for a public API.\r\n\r\nSide note, `ScriptInfo` is the command info equivalent for an anonymous script. Maybe just a public constructor that pulled execution context from TLS would be enough.  Or from the scriptblock's affinity. ",
    "created_at": "2021-03-12T15:16:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15004#issuecomment-797554821",
    "id": 797554821,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15004",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzU1NDgyMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/797554821/reactions"
    },
    "updated_at": "2021-03-12T15:16:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/797554821",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> While there is currently no support for passing a dictionary of arguments - i.e. no support for splatting via the PowerShell class - a chain of .AddParameter() calls is akin to that, if more verbose.\r\n\r\nI believe [`AddParameters()`](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.powershell.addparameters?view=powershellsdk-7.0.0) does that.\r\n\r\n> The only real reason you'd want to do this is to invoke a scriptblock in the current runspace while retaining original AST information for debugging.\r\n\r\nMy primary reason is not wanting to rebuild a scriptblock. In my scenario, I'm taking in a user-provided scriptblock in a cmdlet and I want to execute it providing a set of parameters to choose from. I'd like that scriptblock to keep all of its context and metadata and not have the overhead of stringifying it just for PowerShell to construct a new one. That way, if something goes wrong in the execution, the error message makes sense to users.",
    "created_at": "2021-03-12T20:06:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15004#issuecomment-797724624",
    "id": 797724624,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15004",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzcyNDYyNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/797724624/reactions"
    },
    "updated_at": "2021-03-12T20:06:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/797724624",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @rjmholt, now I understand, and thanks for the `.AddParameters()` hint; TIL.\r\n\r\n> I'm taking in a user-provided scriptblock in a cmdlet and I want to execute it providing a set of parameters to choose from. \r\n\r\nEven in the case where a _string_ is passed to `.AddScript()` (potentially incurring the cost of compilation again), as is currently the only option, it would indeed be nice to be able to pass (named) _arguments_ to the script block, in a _repeatable_ manner, so that a compiled-once script block in a cached `PowerShell` instance can be invoked repeatedly, with different arguments each time (this is somewhat related to your proposal #15008).\r\n\r\nSo a potential API surface I see is:\r\n\r\n* Add an `.AddScript(ScriptBlock sb)` overload (don't know if there be dragons).\r\n\r\n* Add new `.InvokeWithParameters()` and `.InvokeWithArguments()` methods that supports passing named arguments / positional arguments to the script block in a given invocation.\r\n\r\nCurrently, the only way to provide _per-invocation_ input is to use the `.Invoke()` overloads that accept objects that act _as pipeline input_ - there's no _argument_ counterpart (only the \"baking in\" of arguments with `.AddParameter()`, ... that cannot later be replaced).\r\n\r\nTo illustrate this based on your example:\r\n\r\nInstead of the following _emulation_ of the described behavior:\r\n\r\n```powershell\r\n$ps = [powershell]::Create()\r\n\r\n$sb = { param($a, $b)  \"a: $a\", \"b: $b\" }\r\n\r\n# As a workaround, wrap the script block in another one that \r\n# passes pipeline input to the original one via splatting.\r\n$sbWrapped = '$dictArgs=$($input); . {{ {0} }} @dictArgs' -f $sb.ToString()\r\n\r\n# Currently invariably stringifies the script block and rebuilds it.\r\n# As a workaround, pass the arguments dictionary via the *pipeline* to\r\n# enable repeated invocations.\r\n$ps.AddScript($sbWrapped).\r\n    Invoke([array] @{ a = 'A'; b = 'B' })  # -> \"a: A\", \"b: B\"\r\n\r\n# Repeat invocation with different arguments:\r\n$ps.Invoke([array] @{ a = 'C'; b = 'D' })  # -> \"a: C\", \"b: D\"\r\n```\r\n\r\nwe would then be able to simplify to:\r\n\r\n```powershell\r\n$ps = [powershell]::Create()\r\n\r\n$sb = { param($a, $b)  \"a: $a\", \"b: $b\" }\r\n\r\n# [scriptblock] instance $sb is now passed as-is\r\n$ps.AddScript($sb).\r\n    InvokeWithParameters(@{ a = 'A'; b = 'B' })\r\n\r\n# Repeat invocation with different arguments:\r\n$ps.InvokeWithParameters(@{ a = 'C'; b = 'D' })\r\n```\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2021-03-13T15:33:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15004#issuecomment-798518422",
    "id": 798518422,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15004",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5ODUxODQyMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/798518422/reactions"
    },
    "updated_at": "2021-03-13T15:33:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/798518422",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@rjmholt  `ScriptBlock.Invoke()` doesn't go through the parameter binder which is where named parameter binding is handled.   It would be best/easiest/most consistent to allow you to add a scriptblock using the `PowerShell` API which would look like: \r\n```powershell\r\n[powershell]::Create().AddScript({param ($x, $y) \"x is $x y is $y\"}, $true).AddParameter(\"x\", 10).AddParameter(\"y\", 20).Invoke()\r\n```\r\nNote that this actually works today from PowerShell because the ScriptBlock gets turned into a string and then back into a ScriptBlock. Given that the scriptblocks are cached there might not even be much of a performance penalty for the double-conversion.",
    "created_at": "2021-03-15T02:00:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15004#issuecomment-799039179",
    "id": 799039179,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15004",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5OTAzOTE3OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/799039179/reactions"
    },
    "updated_at": "2021-03-15T02:00:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/799039179",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/50499275?v=4",
      "events_url": "https://api.github.com/users/bpayette/events{/privacy}",
      "followers_url": "https://api.github.com/users/bpayette/followers",
      "following_url": "https://api.github.com/users/bpayette/following{/other_user}",
      "gists_url": "https://api.github.com/users/bpayette/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/bpayette",
      "id": 50499275,
      "login": "bpayette",
      "node_id": "MDQ6VXNlcjUwNDk5Mjc1",
      "organizations_url": "https://api.github.com/users/bpayette/orgs",
      "received_events_url": "https://api.github.com/users/bpayette/received_events",
      "repos_url": "https://api.github.com/users/bpayette/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/bpayette/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bpayette/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/bpayette"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> It would be best/easiest/most consistent to allow you to add a scriptblock using the `PowerShell` API which would look like:\r\n\r\nI worry that adding a `ScriptBlock` overload would result in a lot of confusion. Supporting `ScriptBlock` directly would imply to me that `SessionState`, extent data, runspace affinity, etc would be honored. In out of process runspaces, this overload would probably just `ToString`, for in-process-but-not-current-thread runspaces, affinity would likely result in dead locks or state corruption.\r\n\r\nAlso as you mentioned, it's common in PowerShell to rely on argument coercion here.  So if a new overload were added it would most likely need to be the same as `ToString()` to avoid changing behavior of existing scripts (which doesn't solve the use case in the OP).\r\n\r\nPersonally I'd like to see either:\r\n\r\n1. A public constructor on `ScriptInfo`. This is round about enough that you will likely already understand the caveats if you reach for this\r\n2. A static class following a similar pattern as the BCL's `Unsafe` and `MemoryMarshal` classes. This would make it abundantly clear that safety is the consumer's responsibility.  Something like: \r\n\r\n\t  ```csharp\r\n\t  namespace System.Management.Automation\r\n\t  {\r\n\t      public static class PSUnsafe // or CommandMarshal\r\n\t      {\r\n\t          public static ScriptInfo AsScriptInfo(ScriptBlock scriptBlock);\r\n\t          public static ScriptInfo AsScriptInfo(ScriptBlock scriptBlock, Runspace affinity);\r\n\t      }\r\n\t  }\r\n\t  ```",
    "created_at": "2021-03-15T17:02:33Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15004#issuecomment-799583969",
    "id": 799583969,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15004",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5OTU4Mzk2OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/799583969/reactions"
    },
    "updated_at": "2021-03-15T17:02:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/799583969",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Returning to something @rjmholt said in the OP:\r\n\r\n> Other APIs do support scriptblocks well, such as `CommandInvocationIntrinsics.InvokeScript` and `ScriptBlock.Invoke[WithContext]`\r\n\r\n@rjmholt, wouldn't introducing the following new  `ScriptBlock.InvokeWithContext()` overload address your use case?\r\n\r\n```csharp\r\npublic Collection<PSObject> InvokeWithContext (\r\n  Dictionary<string, ScriptBlock> functionsToDefine, \r\n  List<System.Management.Automation.PSVariable> variablesToDefine, \r\n  IDictionary parameters // analogous to PowerShell.AddParameters()\r\n);\r\n```\r\n\r\nThat is, it would be the (extended) analog of `PowerShell.AddParameters()`, just like the existing overloads with their `params object[] args` parameter are the analog of multiple `PowerShell.AddArgument()` calls.\r\n\r\nThen perhaps there is no need to pass `ScriptBlock` instances as-is to a `PowerShell` instance, which would avoid the headaches that @SeeminglyScience describes.\r\n\r\n---\r\n\r\nHowever, _independently_ - for the case where it's fine to pass a _string_ to `PowerShell.AddScript()` and have that build the script block with the proper runspace affinity internally - there is still also an as-yet-unmet need to allow _repeatable_ invocations to such a behind-the-scenes script block with _new parameters_ on every invocation.\r\n\r\nTherefore, _also_ introducing `PowerShell.InvokeWithParameters(IEnumerable input, IDictionary parameters)` and `PowerShell.InvokeWithArguments(IEnumerable input, params object[] args)` overloads makes sense to me - or perhaps even make do with new `PowerShell.Invoke()` overloads with additional parameters.\r\n\r\n\r\n",
    "created_at": "2021-03-15T17:45:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15004#issuecomment-799616798",
    "id": 799616798,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15004",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5OTYxNjc5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/799616798/reactions"
    },
    "updated_at": "2021-03-15T18:09:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/799616798",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Side note, there is sort of a way to do this without reflection.  This is the pattern I usually end up with:\r\n\r\n```csharp\r\n// From cmdlet parameters or similar\r\nScriptBlock userScript;\r\nIDictionary parameters;\r\n\r\nusing var pwsh = PowerShell.Create(RunspaceMode.CurrentRunspace);\r\nconst string proxyScript = @\"\r\n      # I don't remember which of these are actually respected\r\n\t  [System.Diagnostics.DebuggerHidden()]\r\n\t  [System.Diagnostics.DebuggerStepThrough()]\r\n\t  [System.Diagnostics.DebuggerNonUserCode()]\r\n\t  param()\r\n\t  end {\r\n\t      $private:__p = $args[1]\r\n\t      & $args[0] @__p\r\n\t  }\"@;\r\n\r\npwsh.AddScript(proxyScript)\r\n\t.AddArgument(userScript)\r\n\t.AddArgument(parameters)\r\n\t.Invoke();\r\n```\r\n\r\nNot always applicable, but useful to have as a possible work around.",
    "created_at": "2021-03-15T17:53:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15004#issuecomment-799622394",
    "id": 799622394,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15004",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5OTYyMjM5NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/799622394/reactions"
    },
    "updated_at": "2021-03-15T17:53:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/799622394",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> @rjmholt, wouldn't introducing the following new `ScriptBlock.InvokeWithContext()` overload address your use case?\r\n\r\nIt may not matter in every use case, but it's worth noting that the `Invoke*` methods have a lot of limitations (like end block only, very limited `$MyInvocation`, no error stream) and aren't very performant.",
    "created_at": "2021-03-15T17:58:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15004#issuecomment-799626867",
    "id": 799626867,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15004",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5OTYyNjg2Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/799626867/reactions"
    },
    "updated_at": "2021-03-15T17:58:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/799626867",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Good to know, @SeeminglyScience - still, it seems like it would make sense to have such an overload.\r\n\r\nSo it looks like we have the following problems and potential solutions:\r\n\r\n* Inability to use _named_ arguments with `ScriptBlock.InvokeWithContext()` and `CommandInvocationIntrinsics.InvokeScript()` (only _positional_ ones are currently supported):\r\n\r\n  * New overloads with a `IDictionary parameters` parameter could solve that problem.\r\n\r\n* Inability to pass a script block _as-is_ to `PowerShell.AddScript()`\r\n\r\n  * However, perhaps your [workaround](https://github.com/PowerShell/PowerShell/issues/15004#issuecomment-799622394) (which improves on my wrapper script-block technique by not stringifying the wrapped block but passing it as an _argument_ instead) is sufficient for this particular use case - and its non-obviousness can implicitly serve as a signal that there be dragons.\r\n\r\n* Inability to pass _per-invocation_ arguments via `PowerShell.Invoke()` - that currently only works for _pipeline_ input.\r\n\r\n  * For instance, two consecutive calls to `ScriptBlock.Invoke()` on a given, reusable script block with different parameters works just fine -  `$sb = { \"[$args]\" }; $sb.Invoke(1, 2); $sb.Invoke(3, 4)` - but there's no way to do that via `PowerShell.Invoke()`, from what I understand (the`.AddArgument/Parameter(s)()` irrevocably bake the given arguments into the command).\r\n\r\n   * Adding `PowerShell.Invoke()` overloads that accept _per-invocation_ arguments via `IDictionary parameters` and `params object[] args` parameters could solve that problem.\r\n\r\n",
    "created_at": "2021-03-15T18:32:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15004#issuecomment-799653120",
    "id": 799653120,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15004",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5OTY1MzEyMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/799653120/reactions"
    },
    "updated_at": "2021-03-15T18:32:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/799653120",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "Hi...\nI'm trying to invoke powershell script which was asking input parameters in powershell in c# how can pass input parameters from c# ",
    "created_at": "2022-01-02T04:18:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15004#issuecomment-1003661671",
    "id": 1003661671,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15004",
    "node_id": "IC_kwDOAvT7bc470qln",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1003661671/reactions"
    },
    "updated_at": "2022-01-02T04:18:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1003661671",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/91526938?v=4",
      "events_url": "https://api.github.com/users/Keerthi-anusha/events{/privacy}",
      "followers_url": "https://api.github.com/users/Keerthi-anusha/followers",
      "following_url": "https://api.github.com/users/Keerthi-anusha/following{/other_user}",
      "gists_url": "https://api.github.com/users/Keerthi-anusha/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Keerthi-anusha",
      "id": 91526938,
      "login": "Keerthi-anusha",
      "node_id": "U_kgDOBXSXGg",
      "organizations_url": "https://api.github.com/users/Keerthi-anusha/orgs",
      "received_events_url": "https://api.github.com/users/Keerthi-anusha/received_events",
      "repos_url": "https://api.github.com/users/Keerthi-anusha/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Keerthi-anusha/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Keerthi-anusha/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Keerthi-anusha"
    }
  }
]
