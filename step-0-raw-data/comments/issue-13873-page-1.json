[
  {
    "author_association": "NONE",
    "body": "I wonder where this ends...\r\nWhat about a [`[HashSet]`](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1?view=netcore-3.1):\r\n```PowerShell\r\n[System.Collections.Generic.HashSet[string]]@('one', 'two', 'three')\r\n```\r\nWhich is lighter then creating a `[Hashtable]` and setting the values to `$True` (which is often done by programmers that are unaware of its existence)",
    "created_at": "2020-10-26T15:19:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13873#issuecomment-716617466",
    "id": 716617466,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13873",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxNjYxNzQ2Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/716617466/reactions"
    },
    "updated_at": "2020-10-27T07:54:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/716617466",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@iRon7, as your sample command shows, initialization of a `HashSet` by a literal is already supported, namely via an _array_ (which is appropriate, given that they only have keys, and not also values) - which is good to know. Also, note that `HashSet` doesn't implement `IDictionary`.",
    "created_at": "2020-10-26T16:33:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13873#issuecomment-716669298",
    "id": 716669298,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13873",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxNjY2OTI5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/716669298/reactions"
    },
    "updated_at": "2020-10-26T16:34:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/716669298",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Don't think you can actually index a hashset directly at all, at least I don't see an obvious way to do so. You can add or remove values and check if things are already inside it, or iterate the entire contents, but I don't see a way to index into it and grab specific items directly.",
    "created_at": "2020-10-26T16:41:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13873#issuecomment-716674519",
    "id": 716674519,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13873",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxNjY3NDUxOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/716674519/reactions"
    },
    "updated_at": "2020-10-26T16:41:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/716674519",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Indeed, `HashSet<T>` is unordered, so positional indexing isn't supported; use `.Contains()` or call `.Add()` and infer from the Boolean return value whether the element was already present (`$false`) or not (`$true`), i.e. if it was just added.\r\n\r\nWhile the related `SortedSet<T>` does maintain (sort) order, it doesn't support indexing directly either; you can work around it with LINQ, but the data structure isn't designed to be accessed by index efficiently (see https://stackoverflow.com/a/20691991/45375):\r\n\r\n```powershell\r\nPS> [System.Linq.Enumerable]::ElementAt([System.Collections.Generic.SortedSet[string]] ('one', 'two', 'three'), 1)\r\nthree # The 2nd element from the *sorted* set.\r\n```\r\n\r\n\r\n\r\n<blockquote><img src=\"https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded\" width=\"48\" align=\"right\"><div>Stack Overflow</div><div><strong><a href=\"https://stackoverflow.com/questions/20691753/accessing-the-item-at-a-specified-index-in-a-sortedset\">Accessing the item at a specified index in a 'SortedSet'</a></strong></div><div>How can I access the item at a specified index (position) in a SortedSet?\r\n\r\nUnlike SortedList, SortedSet does not offer an Item property.\r\n\r\n(Also, unlike SortedList, SortedSet enforces each of its me...</div></blockquote>",
    "created_at": "2020-10-26T16:58:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13873#issuecomment-716686751",
    "id": 716686751,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13873",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxNjY4Njc1MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/716686751/reactions"
    },
    "updated_at": "2020-10-27T00:40:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/716686751",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "> Also, note that HashSet doesn't implement IDictionary\r\n\r\n**Correct**, I was wrong there.\r\n\r\nAnyways, I can't find a use case in StackOverflow, but let's assume I have a bunch of file names and I want to (quickly) check if they exists in my system. (_I don't care where they reside, I just want to know if they whether they exist or not._). For this I could setup a hash table and populate it like `$HashTable[$Filename] = $True` and later check on the file name like `$HashTable.ContainsKey($FileName)` whether it exists but as the value isn't important in this situation, I could also use a `HashSet` (using `$HashSet.Add($Filename) ` and `$HashSet.Contains($Filename)`) instead, knowing that a hashset is a lot faster than an array:\r\n\r\n```PowerShell\r\n$Array = 1..50000 | % { 2 * $_ }\r\n$HashTable = @{}; $Array | % { $HashTable[$_] = $True }\r\n$HashSet = [System.Collections.Generic.HashSet[int]]$Array\r\n\r\n(Measure-Command {\r\n    Foreach ($i in 1..100000) { $Array.Contains($i) }\r\n}).TotalMilliseconds\r\n16209.7465\r\n\r\n(Measure-Command {\r\n    Foreach ($i in 1..100000) { $HashTable.Contains($i) }\r\n}).TotalMilliseconds\r\n124.7134\r\n\r\n(Measure-Command {\r\n    Foreach ($i in 1..100000) { $HashSet.Contains($i) }\r\n}).TotalMilliseconds\r\n104.1335\r\n```\r\nSee also: [Optimize for extremely large hash tables?](https://stackoverflow.com/a/9550654/1701026)\r\n\r\n",
    "created_at": "2020-10-26T18:14:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13873#issuecomment-716733434",
    "id": 716733434,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13873",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxNjczMzQzNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/716733434/reactions"
    },
    "updated_at": "2020-10-27T07:55:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/716733434",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "That's good to know, @iRon7, but it is still unrelated to this proposal, which is about types implementing the `IDictionary` interface.",
    "created_at": "2020-10-27T00:57:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13873#issuecomment-716908546",
    "id": 716908546,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13873",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcxNjkwODU0Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/716908546/reactions"
    },
    "updated_at": "2020-10-27T00:57:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/716908546",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
