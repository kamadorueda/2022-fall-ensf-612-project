[
  {
    "author_association": "CONTRIBUTOR",
    "body": "I like the idea in principle, but to me a more PowerShell-idiomatic implementation would be the `foreach` statement extension I've proposed in #14732 (not limited to 2 collections):\r\n\r\n```powershell\r\n# WISHFUL THINKING\r\nPS> foreach ($a, $b in (3, 5, 6), (1, 2, 4)) { $a + $b }\r\n4\r\n7\r\n10\r\n```",
    "created_at": "2021-04-04T14:38:23Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15153#issuecomment-813044367",
    "id": 813044367,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15153",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMzA0NDM2Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/813044367/reactions"
    },
    "updated_at": "2021-04-04T14:38:23Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/813044367",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "@mklement0 \r\n\r\nthanks, +1 for your idea i like and i like more if also implement variable indexer. \r\nBut other programmers who are used other scripting/programming languages like python/scala/haskell...etc  ​​use  traditonally statement like `map() zip() zipwith() zipwithindex()` ...etc. its awesome if PS implement statement/operators like this.  \r\n",
    "created_at": "2021-04-04T17:26:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15153#issuecomment-813069213",
    "id": 813069213,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15153",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMzA2OTIxMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/813069213/reactions"
    },
    "updated_at": "2021-04-04T17:27:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/813069213",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/36144546?v=4",
      "events_url": "https://api.github.com/users/p0W3RH311/events{/privacy}",
      "followers_url": "https://api.github.com/users/p0W3RH311/followers",
      "following_url": "https://api.github.com/users/p0W3RH311/following{/other_user}",
      "gists_url": "https://api.github.com/users/p0W3RH311/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/p0W3RH311",
      "id": 36144546,
      "login": "p0W3RH311",
      "node_id": "MDQ6VXNlcjM2MTQ0NTQ2",
      "organizations_url": "https://api.github.com/users/p0W3RH311/orgs",
      "received_events_url": "https://api.github.com/users/p0W3RH311/received_events",
      "repos_url": "https://api.github.com/users/p0W3RH311/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/p0W3RH311/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p0W3RH311/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/p0W3RH311"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @p0W3RH311, and, yes, supporting an automatically maintained index variable, as you've proposed in #14724, is also a good idea (though in my mind it calls for an explicit opt-in with a self-chosen index variable).\r\n\r\nAs for `map() zip() zipwith() zipwithindex()`: To me (I know not everyone agrees), PowerShell-idiomatic solutions should be limited to cmdlets, operators, and language statements (such as `foreach`): _methods_ are an awkward fit, primarily due to the potential for syntax confusion (argument vs. expression mode).\r\n\r\nHowever, given that LINQ methods _are_ already accessible - as something that PowerShell _provides access to_ rather than as a native part of its language -  the more promising approach would be to allow LINQ methods to be called more naturally, which would require PowerShell to support _extension methods_.\r\n\r\nCurrently, using `Linq.Zip()` is awkward:\r\n\r\n```powershell\r\nPS> [System.Linq.Enumerable]::Zip([int[]] (3, 5, 6), [int[]] (1, 2, 4), [Func[int, int, int]] { $args[0] + $args[1] })\r\n4\r\n7\r\n10\r\n```\r\n\r\nI think improving this experience is the more promising approach to pursue - see #2226.\r\n\r\n---\r\n\r\nAs for `zipwithindex()`, specifically: my thinking behind  #14732 was to allow it to be _combined_ with #14724.\r\n\r\n```powershell\r\n# WISHFUL THINKING\r\nPS> foreach ($a, $b in (3, 5, 6), (1, 2, 4); $ndx) { \"$ndx`: \" + ($a + $b) }\r\n0: 4\r\n1: 7\r\n2: 10\r\n```\r\n",
    "created_at": "2021-04-04T17:42:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15153#issuecomment-813071378",
    "id": 813071378,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15153",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMzA3MTM3OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/813071378/reactions"
    },
    "updated_at": "2021-04-04T18:21:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/813071378",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "with native supporting `Linq ` language PS will become `PS++` :) ... all scripting/programming languagesis moving to  functional paradigm or functional features and i believe its the time to PS to to follow this path...the best solution is `Linq` ",
    "created_at": "2021-04-04T18:25:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15153#issuecomment-813078341",
    "id": 813078341,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15153",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMzA3ODM0MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/813078341/reactions"
    },
    "updated_at": "2021-04-04T18:27:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/813078341",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/36144546?v=4",
      "events_url": "https://api.github.com/users/p0W3RH311/events{/privacy}",
      "followers_url": "https://api.github.com/users/p0W3RH311/followers",
      "following_url": "https://api.github.com/users/p0W3RH311/following{/other_user}",
      "gists_url": "https://api.github.com/users/p0W3RH311/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/p0W3RH311",
      "id": 36144546,
      "login": "p0W3RH311",
      "node_id": "MDQ6VXNlcjM2MTQ0NTQ2",
      "organizations_url": "https://api.github.com/users/p0W3RH311/orgs",
      "received_events_url": "https://api.github.com/users/p0W3RH311/received_events",
      "repos_url": "https://api.github.com/users/p0W3RH311/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/p0W3RH311/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p0W3RH311/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/p0W3RH311"
    }
  },
  {
    "author_association": "NONE",
    "body": "Looking to some recent proposals and requests for parallel lists and a iterator index, there is clearly a need to join objects side-by-side. Therefore, I did a propose to [**add a `Join-Object` cmdlet to the standard PowerShell equipment `#14994`**](https://github.com/PowerShell/PowerShell/issues/14994).\r\nIn this idea (and existing example), the [`Join-Object`](https://www.powershellgallery.com/packages/Join) cmdlet has a brought scale of join features from **joining powershell objects based a related property** (similar to sql) to **side-by-side joining (traversing) scalars** (as primitives and strings):\r\n\r\n\r\n#### Example 1\r\n```PowerShell\r\n# traverse two lists\r\n3, 5, 6 |Join 1, 2, 4 |% { \"$_\" }\r\n3 1\r\n5 2\r\n6 4\r\n```\r\n\r\n#### Example 2\r\n```PowerShell\r\n# Sum each item in two parallel lists\r\n3, 5, 6 |Join 1, 2, 4 |% { $_[0] + $_[1] }\r\n4\r\n7\r\n10\r\n```\r\n\r\n#### Example 3\r\n```PowerShell\r\n# Sum each item in multiple parallel lists\r\n3, 5, 6 |Join 1, 2, 4 |Join 7, 8, 9 |% { ($_ |Measure-Object -sum).sum }\r\n11\r\n15\r\n19\r\n```\r\n\r\n#### Example 4\r\n```PowerShell\r\n# Index and sum each item in the additional parallel lists\r\n0..9 |Join 3, 5, 6 |Join 1, 2, 4 |% { \"$($_[0]): \" + ($_[1] + $_[2]) }\r\n0: 4\r\n1: 7\r\n2: 10\r\n```\r\n\r\n#### Example 5\r\n```PowerShell\r\n# Same as above, but with named properties\r\n0..9 |Join 3, 5, 6 |Join 1, 2, 4 -Name Index, a, b |% { \"$($_.Index): \" + ($_.a + $_.b) }\r\n0: 4\r\n1: 7\r\n2: 10\r\n```",
    "created_at": "2021-04-11T08:56:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15153#issuecomment-817273486",
    "id": 817273486,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15153",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzI3MzQ4Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/817273486/reactions"
    },
    "updated_at": "2021-04-11T09:13:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/817273486",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "Language working group:\r\nThis issue is a duplicate of #2226.",
    "created_at": "2021-05-06T18:19:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15153#issuecomment-833752928",
    "id": 833752928,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15153",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMzc1MjkyOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/833752928/reactions"
    },
    "updated_at": "2021-05-06T18:19:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/833752928",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  }
]
