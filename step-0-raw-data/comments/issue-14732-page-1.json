[
  {
    "author_association": "NONE",
    "body": "As this is already a valid syntax:\r\n\r\n```PowerShell\r\n$aElem, $bElem = 'One', 1\r\n```\r\n\r\nI would expect that the iterator assignment part (\"`$aElem, $bElem`\" as in the example below) should actually work (but unfortunately doesn't) which makes this part more a **bug** than a **feature request**:\r\n\r\n```PowerShell\r\n$pairs = @(@('one', 1), @('two', 2), @('Three', 3))\r\n\r\nforeach ($aElem, $bElem in $Pairs) {\r\n  '{0}: {1}' -f $aElem, $bElem\r\n}\r\n```\r\n\r\nIf the iterator is indeed a single item:\r\n```PowerShell\r\nforeach ($aElem in $Pairs) {\r\n  '{0}: {1}' -f $aElem[0], $aElem[1]\r\n}\r\n```\r\n\r\nIt should return an array, similar to (as it currently does):\r\n```PowerShell\r\n$aElem = 'One', 1\r\n```\r\n\r\nMeaning the last item in the iterator list should contain the rest of the array, similar to:\r\n```PowerShell\r\n$aElem, $bElem = 'One', 1, 'A'\r\n```\r\nWhere `$aElem` holds `'One'` and `$bElem` holds `1, 'A'`",
    "created_at": "2021-02-18T10:30:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14732#issuecomment-781245247",
    "id": 781245247,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14732",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MTI0NTI0Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/781245247/reactions"
    },
    "updated_at": "2021-02-18T14:00:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/781245247",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@iRon7, the `in` in a `foreach` statement is _not_ an assignment, it is a distinct syntax construct that can be thought of as a higher-level assignment:\r\n\r\nIt embodies an _instruction_ for a (behind-the-scenes) assignment to the iterator variable in every loop iteration, namely to the current element of the enumeration.\r\n\r\nAs such, there's no inherent requirement to support _multiple_ iterator variables, the way true assignments support multiple target variables in destructuring assignments.\r\n\r\nWhat I meant to express in the OP is that allowing multiple iterator variables is _inspired_ by regular destructuring assignments, in that they would function analogously, albeit with _enforced symmetry_:\r\n\r\nThe number of iterator variables on the LHS would have to match the number of _explicitly listed_ collections on the RHS:\r\n\r\nThat is, the following would be syntactically valid:\r\n\r\n```powershell\r\n$a = 'foo', 'bar'\r\n$b = 'baz', 'qux'\r\n\r\n# OK: two iterator variables, 2 collections.\r\nforeach ($aElem, $bElem in $a, $b) { \r\n   \"$aElem, $bElem\"\r\n}\r\n\r\n# Ditto\r\nforeach ($aElem, $bElem in (Get-ChildItem foo/), (Get-ChildItem bar/)) { \r\n   \"$aElem, $bElem\"\r\n}\r\n```\r\n\r\nBy contrast, `foreach ($aElem, $bElem in $Pairs)` would _not_ be valid, because there's only _one_ RHS collection for the 2 LHS iterator variables.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2021-02-18T15:46:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14732#issuecomment-781437694",
    "id": 781437694,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14732",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MTQzNzY5NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/781437694/reactions"
    },
    "updated_at": "2021-02-18T15:46:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/781437694",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@mklement0 Quick note: your proposed semantic for the LHS of `in` would collide with the currently defined behaviour:\r\n```powershell\r\nPS> foreach ($i in 1,2,3) {$i}\r\n1\r\n2\r\n3\r\n```\r\n(@iRon7 's suggestion would work and it's what I would have implemented if I'd had time since it naturally falls out of destructuring.)\r\n\r\nThat said,  the `foreach` statement could accept additional tokens besides `in` such as `over` or `from`.  Or something after the `foreach` e.g. `foreach pair ($x, $y in $list1,$list2) { ... }`. Basically the syntax is up for grabs - there is no need to try to retrofit new semantics over old syntax. \r\n",
    "created_at": "2021-02-27T18:16:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14732#issuecomment-787113784",
    "id": 787113784,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14732",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4NzExMzc4NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/787113784/reactions"
    },
    "updated_at": "2021-02-27T18:16:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/787113784",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/50499275?v=4",
      "events_url": "https://api.github.com/users/bpayette/events{/privacy}",
      "followers_url": "https://api.github.com/users/bpayette/followers",
      "following_url": "https://api.github.com/users/bpayette/following{/other_user}",
      "gists_url": "https://api.github.com/users/bpayette/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/bpayette",
      "id": 50499275,
      "login": "bpayette",
      "node_id": "MDQ6VXNlcjUwNDk5Mjc1",
      "organizations_url": "https://api.github.com/users/bpayette/orgs",
      "received_events_url": "https://api.github.com/users/bpayette/received_events",
      "repos_url": "https://api.github.com/users/bpayette/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/bpayette/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bpayette/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/bpayette"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @BrucePay, but I don't think there would be a collision, at least not _technically_:\r\n\r\n* `foreach ($i in 1,2,3) { $i }` - i.e. the _single_-iterator case - would continue to function as before: the RHS operand is a _single collection_  to whose elements the iterator variable is bound in sequence (in the first iteration, `$i` is `1`, then `2` in the second, ...).\r\n\r\n* Only _multiple_ iterator variables trigger the new behavior, in which case the number of iterator variables must then match the number of _explicitly listed multiple collections_ on the RHS; to use a simplified example with array literals (in the real world I would expect the collections to be stored in variables or to come from commands):\r\n\r\n  * `foreach ( $i, $j in (1 ,2, 3), ('a', 'b', 'c') ) { $i, $j }` (in the first iteration, `$i` is `1` and `$j` is `'a'`, ...)\r\n\r\nI've updated the OP to make that clearer.\r\n\r\nIf the consensus ends up being that this distinction is too subtle, a new syntax could be pondered, but personally I don't think it's necessary.\r\n\r\n\r\n\r\n",
    "created_at": "2021-02-27T19:26:35Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14732#issuecomment-787122908",
    "id": 787122908,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14732",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4NzEyMjkwOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/787122908/reactions"
    },
    "updated_at": "2021-02-27T19:41:16Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/787122908",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "I needed some time to think this through and enhance my [`Join-Object`](https://www.powershellgallery.com/packages/Join) cmdlet (without losing its existing features), but I think that something similar is possible with a \"`Join-Object`\" cmdlet by building a list of (`[Collections.ObjectModel.Collection[psobject]]`) collections that _don't immediately_ chance to an `Object[]`  (but will when they e.g. being assigned to a single variable).\r\nMeaning that apart from [*investing too much in traditional operators*](https://github.com/PowerShell/PowerShell/issues/14724#issuecomment-777526400), you might also investigate in a standard `Join-Object` cmdlet:\r\n\r\n```PowerShell\r\n$a = 'foo', 'bar'\r\n$b = 'baz', @(1,2)\r\n$c = 'and', 'so on'\r\n\r\n$a |Join $b |Join $c |% {\r\n    $aElem, $bElem, $cElem = $_\r\n    \"$aElem | $bElem | $cElem\"\r\n}\r\n\r\nfoo | baz | and\r\nbar | 1 2 | so on\r\n```\r\n\r\nSee also: [`Join-Object`](https://github.com/iRon7/Join-Object) issue: [`#14` Support non-object arrays](https://github.com/iRon7/Join-Object/issues/14) for more examples.\r\nAnd my [Add a Join-Object cmdlet to the standard PowerShell equipment](https://github.com/PowerShell/PowerShell/issues/14994) purpose.",
    "created_at": "2021-03-11T13:36:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14732#issuecomment-796740079",
    "id": 796740079,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14732",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5Njc0MDA3OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/796740079/reactions"
    },
    "updated_at": "2021-03-11T14:28:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/796740079",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Re not \"investing too much in traditional operators\" (read: statements).\r\nThis strikes me as a _false dichotomy_, as I've argued in https://github.com/PowerShell/PowerShell/issues/14724#issuecomment-777801399:\r\n\r\nThere is no reason to pit _cmdlet-based_ solutions against _expression / statement-based_ solutions: _both_ are necessary, and in certain cases use of one over the other is the _only_ option. Instead, we should strive for _feature parity_, to the extent that is feasible.\r\n\r\nTherefore, this is again not an either-or scenario, so I suggest you add your previous example to #14994",
    "created_at": "2021-03-11T13:49:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14732#issuecomment-796748707",
    "id": 796748707,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14732",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5Njc0ODcwNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/796748707/reactions"
    },
    "updated_at": "2021-03-11T14:02:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/796748707",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "> This strikes me as a _false dichotomy_\r\n\r\nAgree, I have rephrased it in the comment of this issue and removed it from the [`Join-Object` purpose](https://github.com/PowerShell/PowerShell/issues/14994)",
    "created_at": "2021-03-11T13:59:35Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14732#issuecomment-796755358",
    "id": 796755358,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14732",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5Njc1NTM1OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/796755358/reactions"
    },
    "updated_at": "2021-03-11T14:02:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/796755358",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  },
  {
    "author_association": "NONE",
    "body": "Thinking outside the box and following the PowerShell's streaming concept...\r\nIt would also be nice if we could have parallel input streams besides pushing for multiple in-memory arrays.\r\n\r\nThis:\r\n```PowerShell\r\n$Count = (1..3 |)\r\n```\r\nCauses currently an error:\r\n> An empty pipe element is not allowed.\r\n\r\nInstead it could possibly create a kind of a \"**deferred pipeline object**\" and each time the object is used/invoked it processes and returns the next item in the deferred pipeline (until it is empty where it returns an `AutomationNull`)\r\n\r\nWishful thinking:\r\n```PowerShell\r\n$Count = (1..3 |) # Initialize the deferred pipeline object\r\n$Count\r\n1\r\n$Count\r\n2\r\n$Count\r\n3\r\n$Count # Nothing (`AutomationNull`) returns\r\n```\r\n\r\nMore specific:\r\n```PowerShell\r\n$a = (Get-Connect .\\MyHughFile.txt |) # or any other long stream\r\n$b = (1..1e9 |) # In the idea, the range shouldn't affect the member used for $b \r\n$c = (Import-Csv .\\Large.csv |)\r\n$a | ForEach-Object {\r\n    Write-Host '$a item:' $_ \r\n    Write-Host '$b item:' $b # Everytime the $b is used, it processes the next item in the deferred $b pipeline\r\n    Write-Host '$c item property:' $c.myProperty # Dito for $c\r\n}\r\n```\r\n\r\n<sub>(I am happy to do a separate propose for this but just want to check whether this idea makes any sense at all.)</sub>",
    "created_at": "2021-04-10T10:14:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14732#issuecomment-817112496",
    "id": 817112496,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14732",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzExMjQ5Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/817112496/reactions"
    },
    "updated_at": "2021-04-10T18:24:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/817112496",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@iRon7, implementing an _analogous_ feature for use _streaming use_, in the pipeline, makes sense to me (as in the `$PSIndex`, index-variable in `foreach` pairing).\r\n\r\nI do suggest creating a separate issue for that.\r\n\r\nAs a thought up front: I'm not sure we need new syntax for that, perhaps even a `ForEach-Object` enhancement along the following lines is doable, using script blocks _as input_ that are then executed and stepped through in parallel:\r\n\r\n```powershell\r\n# WISHFUL THINKING\r\n{ 0..2 }, { 'a'..'c' } | ForEach-Object -InvokeScriptBlocks { '{0}: {1}' -f $_[0], $_[1] }\r\n0: a\r\n1: b\r\n2: c\r\n```",
    "created_at": "2021-04-11T20:19:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14732#issuecomment-817366599",
    "id": 817366599,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14732",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzM2NjU5OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/817366599/reactions"
    },
    "updated_at": "2021-04-12T15:11:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/817366599",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Sorry, I had the wrong tab open before.\r\n\r\nI discussed this with the Engine working group and we don't think this should be implemented at the language/syntax level. Instead it's something that [LINQ](https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.zip?view=net-5.0), [Python](https://docs.python.org/3/library/functions.html#zip) and [other languages](https://hackage.haskell.org/package/base-4.15.0.0/docs/Prelude.html#v:zip) provide as a method or function. A function for that in PowerShell could be implemented in an external module first before we evaluate whether it should be included in PowerShell itself.",
    "created_at": "2021-05-13T18:03:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14732#issuecomment-840732499",
    "id": 840732499,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14732",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0MDczMjQ5OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/840732499/reactions"
    },
    "updated_at": "2021-05-13T18:07:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/840732499",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  }
]
