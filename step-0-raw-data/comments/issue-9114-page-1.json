[
  {
    "author_association": "COLLABORATOR",
    "body": "Looks good.\r\n\r\n/cc @SteveL-MSFT ",
    "created_at": "2019-03-12T13:18:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-471996429",
    "id": 471996429,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3MTk5NjQyOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 1,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/471996429/reactions"
    },
    "updated_at": "2019-03-12T13:18:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/471996429",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "One problem I see is that a standard workflow to create a new module is:\r\n\r\n```powershell\r\nnew-modulemanifest -path ./foo.psd1 -rootmodule foo.psm1\r\ncode foo.psm1\r\n```\r\n\r\nMeaning that they create the manifest before creating the root module script.  If `New` did validation, then this would be breaking.  One option would be to add a `-Force` type switch to allow this, but we could go with a non-breaking change and have a `-Validate` switch.",
    "created_at": "2019-03-23T02:55:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-475833329",
    "id": 475833329,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NTgzMzMyOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475833329/reactions"
    },
    "updated_at": "2019-03-23T02:55:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/475833329",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "NONE",
    "body": "`-Force` please.  No hacks.  Cut the arm off and survive.",
    "created_at": "2019-03-26T17:16:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-476755184",
    "id": 476755184,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3Njc1NTE4NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/476755184/reactions"
    },
    "updated_at": "2019-03-26T17:16:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/476755184",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/447485?v=4",
      "events_url": "https://api.github.com/users/jzabroski/events{/privacy}",
      "followers_url": "https://api.github.com/users/jzabroski/followers",
      "following_url": "https://api.github.com/users/jzabroski/following{/other_user}",
      "gists_url": "https://api.github.com/users/jzabroski/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jzabroski",
      "id": 447485,
      "login": "jzabroski",
      "node_id": "MDQ6VXNlcjQ0NzQ4NQ==",
      "organizations_url": "https://api.github.com/users/jzabroski/orgs",
      "received_events_url": "https://api.github.com/users/jzabroski/received_events",
      "repos_url": "https://api.github.com/users/jzabroski/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jzabroski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jzabroski/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jzabroski"
    }
  },
  {
    "author_association": "NONE",
    "body": "Hey @SteveL-MSFT,\r\nI'm hesitating between -Force and -Validate. On the one hand -Force does seem much more idiomatic than -Validate and it forces the user to think about what the command is doing behind the scenes. The fact that it is a breaking change though does cut down on the appeal.\r\nCan I still go with -Force or should we stick to -Validate ?",
    "created_at": "2019-04-01T17:09:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-478664203",
    "id": 478664203,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3ODY2NDIwMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/478664203/reactions"
    },
    "updated_at": "2019-04-01T17:09:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/478664203",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/13721697?v=4",
      "events_url": "https://api.github.com/users/pougetat/events{/privacy}",
      "followers_url": "https://api.github.com/users/pougetat/followers",
      "following_url": "https://api.github.com/users/pougetat/following{/other_user}",
      "gists_url": "https://api.github.com/users/pougetat/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/pougetat",
      "id": 13721697,
      "login": "pougetat",
      "node_id": "MDQ6VXNlcjEzNzIxNjk3",
      "organizations_url": "https://api.github.com/users/pougetat/orgs",
      "received_events_url": "https://api.github.com/users/pougetat/received_events",
      "repos_url": "https://api.github.com/users/pougetat/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/pougetat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pougetat/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/pougetat"
    }
  },
  {
    "author_association": "NONE",
    "body": "I vote for -Force\n\nOn Mon, Apr 1, 2019 at 1:10 PM pougetat <notifications@github.com> wrote:\n\n> Hey @SteveL-MSFT <https://github.com/SteveL-MSFT>,\n> I'm hesitating between -Force and -Validate. On the one hand -Force does\n> seem much more idiomatic than -Validate and it forces the user to think\n> about what the command is doing behind the scenes. The fact that it is a\n> breaking change though does cut down on the appeal.\n> Can I still go with -Force or should we stick to -Validate ?\n>\n> â€”\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-478664203>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAbT_eyNjaSrIflImEeH4SNfaAb-2Z-Pks5vcj1zgaJpZM4boyxo>\n> .\n>\n",
    "created_at": "2019-04-01T17:12:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-478664978",
    "id": 478664978,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ3ODY2NDk3OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/478664978/reactions"
    },
    "updated_at": "2019-04-01T17:12:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/478664978",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/447485?v=4",
      "events_url": "https://api.github.com/users/jzabroski/events{/privacy}",
      "followers_url": "https://api.github.com/users/jzabroski/followers",
      "following_url": "https://api.github.com/users/jzabroski/following{/other_user}",
      "gists_url": "https://api.github.com/users/jzabroski/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jzabroski",
      "id": 447485,
      "login": "jzabroski",
      "node_id": "MDQ6VXNlcjQ0NzQ4NQ==",
      "organizations_url": "https://api.github.com/users/jzabroski/orgs",
      "received_events_url": "https://api.github.com/users/jzabroski/received_events",
      "repos_url": "https://api.github.com/users/jzabroski/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jzabroski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jzabroski/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jzabroski"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "The base workflow seems very common to me. Might we be okay with throwing warnings for non-valid values in `New-ModuleManifest`?\r\n\r\nGiven the unlikelihood of `New-ModuleManifest` in fully non-interactive/automated scenarios, this seems like a better approach to me. Are there any automated scenarios I'm not realizing? ",
    "created_at": "2019-05-08T22:00:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-490666685",
    "id": 490666685,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDY2NjY4NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/490666685/reactions"
    },
    "updated_at": "2019-05-08T22:00:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/490666685",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/1255187?v=4",
      "events_url": "https://api.github.com/users/joeyaiello/events{/privacy}",
      "followers_url": "https://api.github.com/users/joeyaiello/followers",
      "following_url": "https://api.github.com/users/joeyaiello/following{/other_user}",
      "gists_url": "https://api.github.com/users/joeyaiello/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/joeyaiello",
      "id": 1255187,
      "login": "joeyaiello",
      "node_id": "MDQ6VXNlcjEyNTUxODc=",
      "organizations_url": "https://api.github.com/users/joeyaiello/orgs",
      "received_events_url": "https://api.github.com/users/joeyaiello/received_events",
      "repos_url": "https://api.github.com/users/joeyaiello/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/joeyaiello/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joeyaiello/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/joeyaiello"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@PowerShell/powershell-committee reviewed this, we agree that all the checks should be in one place which is `Test-ModuleManifest`.  Continue having `Update-ModuleManifest` rely on `Test-ModuleManifest` by default.  `New-ModuleManifest` should have a new `-Validate` switch that uses `Test-ModuleManifest`.",
    "created_at": "2019-05-08T22:51:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-490680208",
    "id": 490680208,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDY4MDIwOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/490680208/reactions"
    },
    "updated_at": "2019-05-08T22:51:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/490680208",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "NONE",
    "body": "How is `-Validate` going to be different from what `-Force` would do?  Does `-Validate` have side-effects?  If so, why call it validate.",
    "created_at": "2019-05-08T23:01:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-490682568",
    "id": 490682568,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDY4MjU2OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/490682568/reactions"
    },
    "updated_at": "2019-05-08T23:01:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/490682568",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/447485?v=4",
      "events_url": "https://api.github.com/users/jzabroski/events{/privacy}",
      "followers_url": "https://api.github.com/users/jzabroski/followers",
      "following_url": "https://api.github.com/users/jzabroski/following{/other_user}",
      "gists_url": "https://api.github.com/users/jzabroski/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jzabroski",
      "id": 447485,
      "login": "jzabroski",
      "node_id": "MDQ6VXNlcjQ0NzQ4NQ==",
      "organizations_url": "https://api.github.com/users/jzabroski/orgs",
      "received_events_url": "https://api.github.com/users/jzabroski/received_events",
      "repos_url": "https://api.github.com/users/jzabroski/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jzabroski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jzabroski/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jzabroski"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@jzabroski the difference is opt-in vs opt-out.  We are optimizing for backwards compatibility here so introducing new behavior we decided to have it opt-in so the user needs to explicitly use `-Validate`.  There would not be a `-Force` which would only be needed for opt-out which we are not supporting for this use case.",
    "created_at": "2019-05-09T01:02:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-490704473",
    "id": 490704473,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDcwNDQ3Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/490704473/reactions"
    },
    "updated_at": "2019-05-09T01:02:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/490704473",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "NONE",
    "body": "Let me re-phrase.  What specifically would potentially cause scripts to break if you changed `-Force`? I just don't see who is benefited by \"optimizing for backwards compatibility\".\r\n\r\nCan you please re-name `-Validate` to `-Test`, since it's:\r\n1. Shorter, less typing\r\n2. Matches exactly the command it delegates validation to: `-Test` pipes to `Test-ModuleManifest`",
    "created_at": "2019-05-09T13:56:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-490915392",
    "id": 490915392,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDkxNTM5Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/490915392/reactions"
    },
    "updated_at": "2019-05-09T13:56:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/490915392",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/447485?v=4",
      "events_url": "https://api.github.com/users/jzabroski/events{/privacy}",
      "followers_url": "https://api.github.com/users/jzabroski/followers",
      "following_url": "https://api.github.com/users/jzabroski/following{/other_user}",
      "gists_url": "https://api.github.com/users/jzabroski/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jzabroski",
      "id": 447485,
      "login": "jzabroski",
      "node_id": "MDQ6VXNlcjQ0NzQ4NQ==",
      "organizations_url": "https://api.github.com/users/jzabroski/orgs",
      "received_events_url": "https://api.github.com/users/jzabroski/received_events",
      "repos_url": "https://api.github.com/users/jzabroski/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jzabroski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jzabroski/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jzabroski"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@jzabroski When creating a new module, it's pretty common to run `New-ModuleManifest  -Path \"myModule.psd1\"  -RootModule \"myModule.psm1\"` without having `myModule.psm1` created (because that would be the next step). We want that to continue to work as always without requiring a `-Force`.",
    "created_at": "2019-05-10T23:53:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-491459678",
    "id": 491459678,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTQ1OTY3OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/491459678/reactions"
    },
    "updated_at": "2019-05-10T23:53:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/491459678",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "NONE",
    "body": "@daxian-dbw It's funny, because that is exactly what I hate about building PowerShell modules.  Have you ever used C#, especially the new .NET SDK MSBuild project system and auto-globing compile items like *.cs files?  PowerShell modules are so painful to use in my experience, and the documentation is _really bad_.  I was so frustrated trying to write my own modules the first time I tried - and there were SO MANY knobs to turn that I pretty much gave up and went back to C#.\r\n\r\ntl;dr: PowerShell module development workflow sucks.  `New-ModuleManifest -Path \"myModule.psd1\" -RootModule \"myModule.psm1\" -Force` with should just freaking create the damn files.\r\n\r\nWhen I do PowerShell development, I feel like I'm back in Java 1995 world, before Ruby on Rails woke up the echoes of the entire development community and evangelized convention over configuration.  .NET Core has adopted this convention over configuration, but PowerShell seems resistant and determined to waste my time.",
    "created_at": "2019-05-13T15:21:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-491867790",
    "id": 491867790,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTg2Nzc5MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/491867790/reactions"
    },
    "updated_at": "2019-05-13T15:22:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/491867790",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/447485?v=4",
      "events_url": "https://api.github.com/users/jzabroski/events{/privacy}",
      "followers_url": "https://api.github.com/users/jzabroski/followers",
      "following_url": "https://api.github.com/users/jzabroski/following{/other_user}",
      "gists_url": "https://api.github.com/users/jzabroski/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jzabroski",
      "id": 447485,
      "login": "jzabroski",
      "node_id": "MDQ6VXNlcjQ0NzQ4NQ==",
      "organizations_url": "https://api.github.com/users/jzabroski/orgs",
      "received_events_url": "https://api.github.com/users/jzabroski/received_events",
      "repos_url": "https://api.github.com/users/jzabroski/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jzabroski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jzabroski/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jzabroski"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@jzabroski just so I understand correct, you would like:\r\n\r\n```powershell\r\nNew-ModuleManifest -Path \"myModule.psd1\" -RootModule \"myModule.psm1\" -Force\r\n```\r\n\r\nTo create `myModule.psm1` in addition to `myModule.psd1`? ",
    "created_at": "2019-05-13T16:46:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-491899608",
    "id": 491899608,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTg5OTYwOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/491899608/reactions"
    },
    "updated_at": "2019-05-13T16:46:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/491899608",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "NONE",
    "body": "That's one request as part of a _full feature_. There's a couple of things I want , most inspired by @RamblingCookieMonster 's [WFTools](https://github.com/RamblingCookieMonster/PowerShell).  The only drawback I have to creating Manifests the WFTools way is the stack traces are bad, because everything is dot-sourced into the module, which creates horrible stack trace line numbers.\r\n\r\nYou can see his psm1 file here: https://github.com/RamblingCookieMonster/PowerShell/blob/master/.build/WFTools.psm1\r\n\r\nThe other problem I had reading the docs on defining psd1 and psm1 files is the whole vocabulary lesson it takes to understand how to build a module.  I feel like I'm back in 1999 reading CfEngine documentation written by a physicist from CERN laboratories who just finished his PhD in particle physics.  For example, what is a RootModule?  That took me a week to understand, and there are so few clean open source PowerShell modules to use as reference.  Even you guys at Microsoft write your junk in C# instead of PowerShell, so how is somebody supposed to learn how to do it the right way?  The official documentation for `New-modulemanifest` has RootModule commented out for example.\r\n\r\nGoing back to the \"no examples\" comment, I was completely perplexed that you are concerned about breaking backward compatibility for a command I could find no good examples for how to use in the first place.\r\n\r\nWhich is why I think the focus should be, rather than on maintaining backward compatibility, focusing on user stories and _adding features_ that make module development easier.  Nobody will care what the interface was 5 years from now if we get the user stories right.",
    "created_at": "2019-05-13T17:06:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-491906632",
    "id": 491906632,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MTkwNjYzMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/491906632/reactions"
    },
    "updated_at": "2019-05-13T17:06:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/491906632",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/447485?v=4",
      "events_url": "https://api.github.com/users/jzabroski/events{/privacy}",
      "followers_url": "https://api.github.com/users/jzabroski/followers",
      "following_url": "https://api.github.com/users/jzabroski/following{/other_user}",
      "gists_url": "https://api.github.com/users/jzabroski/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jzabroski",
      "id": 447485,
      "login": "jzabroski",
      "node_id": "MDQ6VXNlcjQ0NzQ4NQ==",
      "organizations_url": "https://api.github.com/users/jzabroski/orgs",
      "received_events_url": "https://api.github.com/users/jzabroski/received_events",
      "repos_url": "https://api.github.com/users/jzabroski/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jzabroski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jzabroski/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jzabroski"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@jzabroski You may be find [Plaster](https://github.com/PowerShell/Plaster) helpful for module development. If you're not familiar with it, it's a scaffolding generator for various things like modules, Pester tests, etc.\r\n\r\n[Stucco](https://github.com/devblackops/stucco) is a Plaster template for PowerShell modules written by Brandon Olin that may also be helpful.\r\n\r\nI'm not offering these as a solution to making module development easier out of the box -- there's work to be done there. That work aside, you should look at these resources if you haven't already.\r\n\r\nAlso, I want to focus on one paragraph from your comment for a moment to make sure I understand where you're coming from:\r\n\r\n> For example, what is a RootModule? That took me a week to understand, and there are so few clean open source PowerShell modules to use as reference.\r\n\r\nThis statement really surprised me. Personally, I think there are _many_ clean open source PowerShell modules to use as reference; however, there are many more that are not that clean, which I think is part of the point you are trying to make. One recommendation I have here is to look for Microsoft MVP modules. There are many, and they are generally great examples to follow. Where do you go looking for clean open source PowerShell modules to use as reference?\r\n\r\n> The official documentation for New-modulemanifest has RootModule commented out for example.\r\n\r\nTrue, and if you invoke `New-ModuleManifest .\\test.psd1`, the file that is generated has that commented out as well. Right above the commented out value field though is a comment explaining what it is for, and that is also shown in the `New-ModuleManifest` documentation, which made me surprised that it took you a week to understand. In your mind, now that you know what `RootModule` is for, what would have made that learning hurdle easier to get over? Is having `RootModule` at the top of the manifest with the comment explaining what it is for not clear enough? It mentions \"Script module\" and \"binary module\". If you google \"script module\", the second link takes you to the [How to write a PowerShell script module](https://docs.microsoft.com/en-us/powershell/developer/module/how-to-write-a-powershell-script-module) docs. Have you seen those documents? Did you come to the manifest as the starting point for your module, or after you had created a script module? There are a lot of questions here, I know, but I'm hoping to get a better idea of what might be missing.\r\n\r\nI wonder if it might be helpful if in a manifest generated by `New-ModuleManifest` there was a comment that said \"If you haven't created a PowerShell module before, read this first: ...\" with a hyperlink.\r\n\r\n",
    "created_at": "2019-06-10T01:40:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-500264824",
    "id": 500264824,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDI2NDgyNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/500264824/reactions"
    },
    "updated_at": "2019-06-10T13:27:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/500264824",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3515485?v=4",
      "events_url": "https://api.github.com/users/KirkMunro/events{/privacy}",
      "followers_url": "https://api.github.com/users/KirkMunro/followers",
      "following_url": "https://api.github.com/users/KirkMunro/following{/other_user}",
      "gists_url": "https://api.github.com/users/KirkMunro/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KirkMunro",
      "id": 3515485,
      "login": "KirkMunro",
      "node_id": "MDQ6VXNlcjM1MTU0ODU=",
      "organizations_url": "https://api.github.com/users/KirkMunro/orgs",
      "received_events_url": "https://api.github.com/users/KirkMunro/received_events",
      "repos_url": "https://api.github.com/users/KirkMunro/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KirkMunro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KirkMunro/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KirkMunro"
    }
  },
  {
    "author_association": "NONE",
    "body": "> Personally, I think there are _many_ clean open source PowerShell modules to use as reference; however, there are many more that are not that clean, which I think is part of the point you are trying to make. One recommendation I have here is to look for Microsoft MVP modules.\r\n\r\n@KirkMunro It's a bit circular to say there are examples written by Microsoft MVPs without defining thhe set of MVPs you respect.  Perhaps you were indirectly referring to yourself.  Until you go ahead and define it, I'll think of it as an empty set - just like PowerShell's documentation!  I actually recently discussed with the Pester team the trade-offs in defining PowerShell modules, and in just a day of thinking, discovered with another programmer serious gaps and problems in the PowerShell module system: ~~RequiredModules~~ has no way to hook a version handler. It's just an assembly name.\r\n\r\nYou do have a number of good suggestions here.  I'd suggest creating a PR rather than just discussing them.  I grew up in the Linus Torvalds' ethic of the one who writes sensible, working code usually gets the most votes on how the system takes shape.",
    "created_at": "2019-06-10T01:58:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-500267371",
    "id": 500267371,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDI2NzM3MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/500267371/reactions"
    },
    "updated_at": "2019-06-17T13:39:47Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/500267371",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/447485?v=4",
      "events_url": "https://api.github.com/users/jzabroski/events{/privacy}",
      "followers_url": "https://api.github.com/users/jzabroski/followers",
      "following_url": "https://api.github.com/users/jzabroski/following{/other_user}",
      "gists_url": "https://api.github.com/users/jzabroski/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jzabroski",
      "id": 447485,
      "login": "jzabroski",
      "node_id": "MDQ6VXNlcjQ0NzQ4NQ==",
      "organizations_url": "https://api.github.com/users/jzabroski/orgs",
      "received_events_url": "https://api.github.com/users/jzabroski/received_events",
      "repos_url": "https://api.github.com/users/jzabroski/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jzabroski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jzabroski/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jzabroski"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@jzabroski: While there are many MVPs, I was referring to Cloud and Datacenter Management MVPs, and in particular, those which were previously PowerShell MVPs when that was a separate category. But I didn't have a set to share since I don't have a specifically defined set myself.\r\n\r\nAs for a PR, I have no problem submitting PRs when I have clarity on issues. For this discussion though, I think it's premature to submit a PR. I asked you a bunch of questions to get clarity on what might be missing, and I don't have answers to those questions yet. I could create a PR based on my assumptions, but having worked as a Product Manager for quite a few years my preference is to get more clarity before moving forward with recommendations or a PR.",
    "created_at": "2019-06-10T13:36:09Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-500419042",
    "id": 500419042,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMDQxOTA0Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/500419042/reactions"
    },
    "updated_at": "2019-06-10T13:36:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/500419042",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3515485?v=4",
      "events_url": "https://api.github.com/users/KirkMunro/events{/privacy}",
      "followers_url": "https://api.github.com/users/KirkMunro/followers",
      "following_url": "https://api.github.com/users/KirkMunro/following{/other_user}",
      "gists_url": "https://api.github.com/users/KirkMunro/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KirkMunro",
      "id": 3515485,
      "login": "KirkMunro",
      "node_id": "MDQ6VXNlcjM1MTU0ODU=",
      "organizations_url": "https://api.github.com/users/KirkMunro/orgs",
      "received_events_url": "https://api.github.com/users/KirkMunro/received_events",
      "repos_url": "https://api.github.com/users/KirkMunro/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KirkMunro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KirkMunro/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KirkMunro"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Let me try to summarize and complement the discussion:\r\n\r\n* There _is_ conceptual guidance in the docs, namely [Writing a Windows PowerShell Module](https://docs.microsoft.com/en-us/powershell/developer/module/writing-a-windows-powershell-module) (I can't speak to the quality of that guidance):\r\n\r\n   * The `about_Modules` topic links to that topic, but the only help topic for module-related _cmdlets_ that links to it, via the latter, seems to be `New-ModuleManifest`.\r\n\r\n  * Just consulting the comments in a manifest generated by `New-ModuleManifest` is not enough; pointing to an official resource via an URL to offer guidance, as @KirkMunro  suggests, is a great idea.\r\n\r\n* While there may be conceptual guidance (if you manage to find it), the official tooling is lacking.\r\n\r\n     * `New-ModuleManifest` is just a small piece of the puzzle.\r\n\r\n     * Being able to scaffold various types of modules with sensible defaults is missing.\r\n\r\n* The community has tried to fill that void, as evidenced by projects such as [Plaster](https://github.com/PowerShell/Plaster) (thanks, @KirkMunro), but having such tooling be an official part of the project is obviously preferable.\r\n\r\n> I actually recently discussed with the Pester team the trade-offs in defining PowerShell modules, and in just a day of thinking, discovered with another programmer serious gaps and problems in the PowerShell module system: RequiredModules has no way to hook a version handler. It's just an assembly name.\r\n\r\nWhile just referring to a module (not: assembly) by _name_  only is common,  the `RequiredModules` entry  _does_ allow you to specify version requirements, namely via a \"FQMN\" (a Fully Qualified Module Name), which in PowerShell code is expressed as a hashtable that represents a `[Microsoft.PowerShell.Commands.ModuleSpecification]` instance:\r\n\r\nFor instance, the following example specifies a dependency on version `1.7` _or higher_ of module `ClipboardText`:\r\n\r\n```\r\nRequiredModules = @{ ModuleName='ClipboardText'; ModuleVersion='0.1.7' }\r\n```\r\n\r\nThe caveats are:\r\n\r\n* This is _inadequately_ documented in [How to Write a PowerShell Module Manifest](https://docs.microsoft.com/en-us/powershell/developer/module/how-to-write-a-powershell-module-manifest), which, again, is not the easiest topic to discover.\r\n\r\n  * I'm not aware of official documentation explaining FQMNs comprehensively; there are parts of the puzzle in the `Get-Module` and `Get-Command` help topics, but only this third-party reference provides a decent overview: https://info.sapien.com/index.php/scripting/versioning/using-a-modulespecification-object\r\n\r\n* The notation is cumbersome, and lacks the concision and constraint logic of npm-style semver-compatible specifiers such as `ClipboardText@^0.1.7`  in order to implicitly limit the _maximum_ compatible version; you can, however, lock in a specific version with `RequiredVersion`, and limit the max. version with `MaximumVersion`.\r\n\r\n\r\n\r\n",
    "created_at": "2019-06-16T22:15:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-502490294",
    "id": 502490294,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjQ5MDI5NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/502490294/reactions"
    },
    "updated_at": "2019-06-16T22:15:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/502490294",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> it's pretty common to run New-ModuleManifest -Path \"myModule.psd1\" -RootModule \"myModule.psm1\" without having myModule.psm1 created (because that would be the next step). We want that to continue to work as always without requiring a -Force.\r\n\r\nWe could check presence and create .psm1 file.",
    "created_at": "2019-06-17T03:43:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-502524165",
    "id": 502524165,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjUyNDE2NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/502524165/reactions"
    },
    "updated_at": "2019-06-17T03:43:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/502524165",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "NONE",
    "body": "> While just referring to a module (not: assembly) by _name_ only is common, the `RequiredModules` entry _does_ allow you to specify version requirements, namely via a \"FQMN\" (a Fully Qualified Module Name), which in PowerShell code is expressed as a hashtable that represents a `[Microsoft.PowerShell.Commands.ModuleSpecification]` instance:\r\n\r\nI fixed my comment to say:\r\n\r\n> ~~RequiredModules~~ **_RequiredAssemblies_** has no way to hook a version handler. It's just an assembly name.\r\n\r\nSorry about that.",
    "created_at": "2019-06-17T13:41:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-502687125",
    "id": 502687125,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjY4NzEyNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/502687125/reactions"
    },
    "updated_at": "2019-06-17T13:41:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/502687125",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/447485?v=4",
      "events_url": "https://api.github.com/users/jzabroski/events{/privacy}",
      "followers_url": "https://api.github.com/users/jzabroski/followers",
      "following_url": "https://api.github.com/users/jzabroski/following{/other_user}",
      "gists_url": "https://api.github.com/users/jzabroski/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jzabroski",
      "id": 447485,
      "login": "jzabroski",
      "node_id": "MDQ6VXNlcjQ0NzQ4NQ==",
      "organizations_url": "https://api.github.com/users/jzabroski/orgs",
      "received_events_url": "https://api.github.com/users/jzabroski/received_events",
      "repos_url": "https://api.github.com/users/jzabroski/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jzabroski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jzabroski/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jzabroski"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Technically this issue is a mix of Core PowerShell cmdlet issues mixed with PowerShellGet which I expect will get resolved as part of the PowerShellGet 3.0 RFC - https://github.com/PowerShell/PowerShell-RFC/pull/185\r\n\r\n![image](https://user-images.githubusercontent.com/6355225/59621185-a6848c00-9126-11e9-8bfe-5237f46462a4.png)\r\n\r\nScreen grab taken from psv7-preview1\r\n",
    "created_at": "2019-06-17T16:39:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-502759807",
    "id": 502759807,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjc1OTgwNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/502759807/reactions"
    },
    "updated_at": "2019-06-17T16:40:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/502759807",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6355225?v=4",
      "events_url": "https://api.github.com/users/kilasuit/events{/privacy}",
      "followers_url": "https://api.github.com/users/kilasuit/followers",
      "following_url": "https://api.github.com/users/kilasuit/following{/other_user}",
      "gists_url": "https://api.github.com/users/kilasuit/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/kilasuit",
      "id": 6355225,
      "login": "kilasuit",
      "node_id": "MDQ6VXNlcjYzNTUyMjU=",
      "organizations_url": "https://api.github.com/users/kilasuit/orgs",
      "received_events_url": "https://api.github.com/users/kilasuit/received_events",
      "repos_url": "https://api.github.com/users/kilasuit/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/kilasuit/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kilasuit/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/kilasuit"
    }
  },
  {
    "author_association": "NONE",
    "body": "> As for a PR, I have no problem submitting PRs when I have clarity on issues. For this discussion though, I think it's premature to submit a PR. I asked you a bunch of questions to get clarity on what might be missing, and I don't have answers to those questions yet. I could create a PR based on my assumptions, but having worked as a Product Manager for quite a few years my preference is to get more clarity before moving forward with recommendations or a PR.\r\n\r\nHere is one example of where I have sought expert feedback, and received little guidance: https://github.com/pester/Pester/issues/1314\r\n\r\nWe have a team of three _very_ experienced developers trying to make usable PowerShell modules, and it is very difficult.\r\n\r\nWhile experimenting with figuring out the best approach, we have learned a stunning number of problems with PowerShell, such as:\r\n\r\n1. Lack of built-in support for attaching PwSh.exe to a Visual Studio Debugger to step-through C# cmdlets\r\n2. Lack of way to force a global \"on `Import-Module`\" hook within C#, since the C# cmdlets API does not have a hook for things to be loaded on module import.\r\n3. `RequiredAssemblies` has no way to specify a version of an assembly to load\r\n4. `RequiredModules` has no way to specify version constraints (in the way NodeJS and other package managers do)\r\n5. The Windows Compatibility pack causes issues with serialization\r\n6. No guidance on how to integrate traditional logging frameworks like log4net, NLog, Serilog, etc. or cloud-based logging frameworks like Datadog for centralized log collection. - Forget writing enterprise code where people are accountible for fixing errors in scripts, because there is no centralized way to collect such errors.\r\n\r\nI'm sure there are more pain points, but this is just off the top of my head.  And these are \"brush your teeth and eat your veggies\" problems that have been solved since .NET 1.1.  \r\n\r\n> @jzabroski You may be find [Plaster](https://github.com/PowerShell/Plaster) helpful for module development. If you're not familiar with it, it's a scaffolding generator for various things like modules, Pester tests, etc.\r\n> \r\n> [Stucco](https://github.com/devblackops/stucco) is a Plaster template for PowerShell modules written by Brandon Olin that may also be helpful.\r\n\r\nIt seems like there may be something useful here, but it is not particularly well-documented. It would be helpful if you gave me an idea on the ramp up time to learning to use this, as my best guess is it might be powerful, but might take days to learn, and might only obfuscate some of the problems I've found with PowerShell modules in general, making debugging and reporting these issues like the ones above that much harder (how do I reproduce issues to submit bug reports here, etc.)",
    "created_at": "2019-06-21T20:21:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-504560840",
    "id": 504560840,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDU2MDg0MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/504560840/reactions"
    },
    "updated_at": "2019-06-21T21:15:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/504560840",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/447485?v=4",
      "events_url": "https://api.github.com/users/jzabroski/events{/privacy}",
      "followers_url": "https://api.github.com/users/jzabroski/followers",
      "following_url": "https://api.github.com/users/jzabroski/following{/other_user}",
      "gists_url": "https://api.github.com/users/jzabroski/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jzabroski",
      "id": 447485,
      "login": "jzabroski",
      "node_id": "MDQ6VXNlcjQ0NzQ4NQ==",
      "organizations_url": "https://api.github.com/users/jzabroski/orgs",
      "received_events_url": "https://api.github.com/users/jzabroski/received_events",
      "repos_url": "https://api.github.com/users/jzabroski/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jzabroski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jzabroski/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jzabroski"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Specifically regarding point 1 there -- I've not tried with full VS myself, but Visual Studio Code's debugger seems perfectly capable of stepping through C# cmdlets as needed. I usually open the powershell console, use the `dotnet attach` debug config, and import the module. Then, set a breakpoint in the cmdlet and execute the cmdlet from the console. \r\n\r\nIt's pretty effective in my experience; not sure if something similar is doable in full VS? ðŸ™‚ ",
    "created_at": "2019-06-21T20:32:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-504563767",
    "id": 504563767,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDU2Mzc2Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/504563767/reactions"
    },
    "updated_at": "2019-06-21T20:32:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/504563767",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "> `dotnet attach`\r\n\r\nI guess, until Resharper is supported with VS Code, I will stick with Visual Studio.\r\nFor `dotnet attach`, are you referring to this: https://marketplace.visualstudio.com/items?itemName=DennisMaxJung.vscode-dotnet-auto-attach - this has fewer than 3,000 installs, so definitely not a standard approach or well-known.\r\n\r\nNote: `dotnet attach` is not a [built-in `dotnet.exe` command](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet?tabs=netcore21#dotnet-commands) and not mentioned in [NateMcMaster/dotnet-tools](https://github.com/natemcmaster/dotnet-tools) repository\r\n\r\nThanks!",
    "created_at": "2019-06-21T21:11:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-504574269",
    "id": 504574269,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDU3NDI2OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/504574269/reactions"
    },
    "updated_at": "2019-06-21T22:04:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/504574269",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/447485?v=4",
      "events_url": "https://api.github.com/users/jzabroski/events{/privacy}",
      "followers_url": "https://api.github.com/users/jzabroski/followers",
      "following_url": "https://api.github.com/users/jzabroski/following{/other_user}",
      "gists_url": "https://api.github.com/users/jzabroski/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jzabroski",
      "id": 447485,
      "login": "jzabroski",
      "node_id": "MDQ6VXNlcjQ0NzQ4NQ==",
      "organizations_url": "https://api.github.com/users/jzabroski/orgs",
      "received_events_url": "https://api.github.com/users/jzabroski/received_events",
      "repos_url": "https://api.github.com/users/jzabroski/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jzabroski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jzabroski/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jzabroski"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> * Lack of built-in support for attaching PwSh.exe to a Visual Studio Debugger to step-through C# cmdlets\r\n\r\nI do this using Visual Studio 2019 just about every day, or if not then every other day using Attach to Process with `pwsh.exe` or `powershell.exe`. Note that I find the Visual Studio PowerShell Tools extension has gotten in the way for me doing this in the past, to the point where I just removed it because I didn't have time to track down the issues, and resolving them wasn't as important to me as being able to debug and step through my C# code, either in `pwsh` if I'm working on open source PowerShell or in binary modules I have authored. I've also done this in the past using Visual Studio 2017 (and probably 2015 as well -- been a while, can't quite remember).\r\n\r\n> * Lack of way to force a global \"on `Import-Module`\" hook within C#, since the C# cmdlets API does not have a hook for things to be loaded on module import.\r\n\r\nIf you have a public class that implements `IModuleAssemblyInitializer`, its `OnImport` method will get called at module load time. PowerShell 3.0 and later.\r\n\r\n> * No guidance on how to integrate traditional logging frameworks like log4net, NLog, Serilog, etc. or cloud-based logging frameworks like Datadog for centralized log collection. - Forget writing enterprise code where people are accountible for fixing errors in scripts, because there is no centralized way to collect such errors.\r\n\r\nSee [this RFC on using ScriptBlock message handlers to facilitate centralized message management](https://github.com/PowerShell/PowerShell-RFC/issues/196).\r\n",
    "created_at": "2019-06-21T21:38:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-504581032",
    "id": 504581032,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDU4MTAzMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/504581032/reactions"
    },
    "updated_at": "2019-06-21T22:42:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/504581032",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3515485?v=4",
      "events_url": "https://api.github.com/users/KirkMunro/events{/privacy}",
      "followers_url": "https://api.github.com/users/KirkMunro/followers",
      "following_url": "https://api.github.com/users/KirkMunro/following{/other_user}",
      "gists_url": "https://api.github.com/users/KirkMunro/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KirkMunro",
      "id": 3515485,
      "login": "KirkMunro",
      "node_id": "MDQ6VXNlcjM1MTU0ODU=",
      "organizations_url": "https://api.github.com/users/KirkMunro/orgs",
      "received_events_url": "https://api.github.com/users/KirkMunro/received_events",
      "repos_url": "https://api.github.com/users/KirkMunro/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KirkMunro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KirkMunro/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KirkMunro"
    }
  },
  {
    "author_association": "NONE",
    "body": "> If you have a public class that implements `IModuleAssemblyInitializer`, itâ€™s OnImport method will get called at module load time. PowerShell 3.0 and later.\r\n\r\nThanks; we're going to give this a shot.  What we resorted to doing instead was creating an abstract class `CompanyNameCmdletsBase` and having a static constructor that initializes the logging framework; the first time a cmdlet accesses a base class member (e.g., `protected ILog Log {get; set;}`), it initializes it.  This works due to the fact static constructors are guaranteed to be thread-safe, but it's messy in that we have to have our plumbing code all over the place, and no way to know which Cmdlet will be the first to call the initialization logic (multiple entry points creates unnecessary bounded non-determinism).",
    "created_at": "2019-06-21T21:59:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/9114#issuecomment-504586067",
    "id": 504586067,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/9114",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUwNDU4NjA2Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/504586067/reactions"
    },
    "updated_at": "2019-06-21T21:59:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/504586067",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/447485?v=4",
      "events_url": "https://api.github.com/users/jzabroski/events{/privacy}",
      "followers_url": "https://api.github.com/users/jzabroski/followers",
      "following_url": "https://api.github.com/users/jzabroski/following{/other_user}",
      "gists_url": "https://api.github.com/users/jzabroski/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jzabroski",
      "id": 447485,
      "login": "jzabroski",
      "node_id": "MDQ6VXNlcjQ0NzQ4NQ==",
      "organizations_url": "https://api.github.com/users/jzabroski/orgs",
      "received_events_url": "https://api.github.com/users/jzabroski/received_events",
      "repos_url": "https://api.github.com/users/jzabroski/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jzabroski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jzabroski/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jzabroski"
    }
  }
]
