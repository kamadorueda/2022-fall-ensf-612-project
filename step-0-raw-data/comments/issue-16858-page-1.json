[
  {
    "author_association": "NONE",
    "body": "hex:29E3D == 171581\r\nThe .net framework can only handle characters smaller than 65535, I don't know if it has changed in .net 6 now.\r\nIf not, I am pessimistic that this problem will never be solved.\r\nkey point:\r\n\r\n```powershell\r\nPS C:\\ProgramData\\kasini3000> [char]17158\r\n䌆\r\nPS C:\\ProgramData\\kasini3000> [char]171581\r\nInvalidArgument: Cannot convert value \"171581\" to type \"System.Char\". Error: \"Value was either too large or too small for a character.\"\r\n```",
    "created_at": "2022-02-08T08:59:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16858#issuecomment-1032366531",
    "id": 1032366531,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16858",
    "node_id": "IC_kwDOAvT7bc49iKnD",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1032366531/reactions"
    },
    "updated_at": "2022-02-09T08:03:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1032366531",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/65390418?v=4",
      "events_url": "https://api.github.com/users/kasini3000/events{/privacy}",
      "followers_url": "https://api.github.com/users/kasini3000/followers",
      "following_url": "https://api.github.com/users/kasini3000/following{/other_user}",
      "gists_url": "https://api.github.com/users/kasini3000/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/kasini3000",
      "id": 65390418,
      "login": "kasini3000",
      "node_id": "MDQ6VXNlcjY1MzkwNDE4",
      "organizations_url": "https://api.github.com/users/kasini3000/orgs",
      "received_events_url": "https://api.github.com/users/kasini3000/received_events",
      "repos_url": "https://api.github.com/users/kasini3000/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/kasini3000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kasini3000/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/kasini3000"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "I agree with @kasini3000, this seems to be a behavior with .net\r\n```\r\nPS> \"`u{29e3d}\"           \r\n𩸽\r\nPS> [char]\"`u{29e3d}\"   \r\nInvalidArgument: Cannot convert value \"𩸽\" to type \"System.Char\". Error: \"String must be exactly one character long.\"\r\nPS> \"`u{29e3d}\".length     \r\n2\r\n```\r\nso powershell can't necessarily turn it into a single character.",
    "created_at": "2022-03-03T22:03:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16858#issuecomment-1058538047",
    "id": 1058538047,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16858",
    "node_id": "IC_kwDOAvT7bc4_GAI_",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1058538047/reactions"
    },
    "updated_at": "2022-03-03T22:05:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1058538047",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10214008?v=4",
      "events_url": "https://api.github.com/users/JamesWTruher/events{/privacy}",
      "followers_url": "https://api.github.com/users/JamesWTruher/followers",
      "following_url": "https://api.github.com/users/JamesWTruher/following{/other_user}",
      "gists_url": "https://api.github.com/users/JamesWTruher/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JamesWTruher",
      "id": 10214008,
      "login": "JamesWTruher",
      "node_id": "MDQ6VXNlcjEwMjE0MDA4",
      "organizations_url": "https://api.github.com/users/JamesWTruher/orgs",
      "received_events_url": "https://api.github.com/users/JamesWTruher/received_events",
      "repos_url": "https://api.github.com/users/JamesWTruher/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JamesWTruher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JamesWTruher/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JamesWTruher"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "WG-Engine:\r\n\r\nThere are a few ways we could potentially go about implementing this as an enhancement, all of which would likely involve use of the new(ish) System.Text.Rune type:\r\n\r\n- Change the object types returned from `\"a\"..\"z\"` and all string ranges like this from `[char]` to `[System.Text.Rune]`, and enumerate a numeric range over the rune values, return a set of values with Runes. This would be a breaking change, as it would mean usages like `[string]::new('a'..'z')` would stop working.\r\n- Introduce the above behaviour only for ranges that definitely exceed the `[char]` value range. This would avoid breakages but introduce some inconsistency in how the lower and upper ranges are handled. Also up for question would be how do we handle ranges that attempt to cross this 'barrier' range.\r\n- Do something along the lines of the above, but convert the generated runes to strings before returning them. This would be a little more compatible than the first option, a bit more consistent than the second option, but would still be a significant change from the original implementation.\r\n\r\nThere are other possible options, but we felt these represented the most likely cases. Some possible concerns raised were:\r\n\r\n- We're unsure how useful this kind of feature may end up being if the Unicode character ranges aren't as contiguous as they are for the lower values. None of us have the necessary familiarity with all the Unicode code pages, so ultimately we don't feel this is a huge concern, but nor do we think it's wise to define custom ways for the ranges to work, it would have to stick by the ordering presented by .NET for the contiguous integer values of Runes.\r\n- The formatting system currently doesn't render raw Rune values, instead it defaults to a List format view showing the Rune's properties. This is something we might want as follow up work if this feature is extended in this way. (Rendering them is fairly simple, calling .ToString() on the Runes suffices.)\r\n- The formatting system is not very well set up for rendering these kinds of characters currently, so it may be a little more likely to surface any issues there with how it's designed.\r\n\r\nUltimately, we're unsure if this is something we want to provide in this way as yet. It would be good to see if there's more community interest in this request before we commit to providing this. We're inclined to leave this issue open for discussion for a few months before we assess it again.\r\n\r\n---\r\n\r\nSince I was playing with it a bit, here's a function that provides similar behaviour that may be of interest to folks who want to play with what this might potentially end up looking like and see how it suits their use cases:\r\n\r\n```ps1\r\nfunction Get-Runes {\r\n    <#\r\n        .SYNOPSIS\r\n        Gets the range of Runes from the defined range. Usage: Get-Runes 一..七\r\n    #>\r\n    [CmdletBinding()]\r\n    param(\r\n        [Parameter(Mandatory)]\r\n        [ValidatePattern('^.\\.\\..$', ErrorMessage = \"Invalid format for character range\")]\r\n        [string]\r\n        $Range\r\n    )\r\n\r\n    $start, $end = $Range -split '\\.\\.'\r\n    [System.Text.Rune]$startRune = $start.EnumerateRunes() | Select -First 1\r\n    [System.Text.Rune]$endRune = $end.EnumerateRunes() | Select -First 1\r\n\r\n    ($startRune.Value)..($endRune.Value) -as [System.Text.Rune[]]\r\n}\r\n```",
    "created_at": "2022-03-04T02:03:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16858#issuecomment-1058752903",
    "id": 1058752903,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16858",
    "node_id": "IC_kwDOAvT7bc4_G0mH",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1058752903/reactions"
    },
    "updated_at": "2022-03-04T02:11:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1058752903",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  }
]
