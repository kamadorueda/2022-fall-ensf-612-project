[
  {
    "author_association": "COLLABORATOR",
    "body": "The current behavior of `Rename-Item` in the file system is definitely by design. `Rename-Item` and `Move-Item` are two different cmdlets and have _explicitly different semantics._ `Rename-Item` renames an item in place - an atomic operation in most file systems. It doesn't make a copy of the file in a new location and then remove the old item. ",
    "created_at": "2018-04-02T19:08:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6538#issuecomment-378013764",
    "id": 378013764,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6538",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODAxMzc2NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/378013764/reactions"
    },
    "updated_at": "2018-04-02T19:08:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/378013764",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@BrucePay:\r\n\r\n* It is commendable that PowerShell (like `cmd.exe`, but unlike `bash`) has distinct commands for _moving_ and _renaming_, because users are likely to think of these operations as distinct (`cmd.exe` offers the same distinction with `move` vs. `rename`, Unix-like platforms do not (just `mv`)).\r\n\r\n    * However, with respect to forced replacement I think users are likely to expect consistent behavior.\r\n\r\n   * I don't expect the _technical_ issue you bring up to be on a user's mind; fortunately, though, it doesn't have to, because there is a solution (see below).\r\n \r\n   * The existing help topics for `Move-Item` and `Rename-Item` make no mention of replacement behavior, primarily because there are no filesystem-provider-specific topics for these cmdlets.\r\n\r\n* At the level of _system calls_, only _one_ function exists for both moving and renaming:\r\n\r\n  * On both Windows and Unix-like platforms, replacing an existing target _can_ be achieved with a _single system call_ (I'm assuming that is what you mean by _atomicity_  in this context - another definition (that is not specific to replacement) is along the lines of \"The `rename()` system call guarantees that an instance of `new` [the target name/path] will always exist, even if the system should crash in the middle of the operation.\" (from the [macOS `rename` man page](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man2/rename.2.html))).\r\n\r\n    * Unix-like platforms: The `rename()` function even replaces existing targets _by default_ on [macOS](http://www.manpagez.com/man/2/rename/) and [Linux](http://man7.org/linux/man-pages/man2/rename.2.html), and that behavior is also reflected in the standard `mv` utility (something we don't want to emulate).  \r\n(The [POSIX standard](http://pubs.opengroup.org/onlinepubs/9699919799/functions/rename.html) defers to the ISO C standard for the `rename()` system call, where replacement behavior is seemingly left up to the implementation, according to [this draft](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf) (the real document costs money).)\r\n\r\n    * Windows API: replacing existing files is _opt-in_ via the [`MoveFileEx()`](https://msdn.microsoft.com/en-us/library/windows/desktop/aa365240(v=vs.85).aspx) Windows API function's `MOVEFILE_REPLACE_EXISTING` option (I cannot tell whether the behavior is atomic in the Unix sense quoted above).\r\nCurrently, for files, both `Move-Item` and `Rename-Item` ultimately call [`System.IO.FileInfo.MoveTo()`](https://docs.microsoft.com/en-us/dotnet/api/system.io.fileinfo.moveto?view=netframework-4.7.1#System_IO_FileInfo_MoveTo_System_String_) and `-Force` for `Move-Item` precedes the `.MoveTo()` with a `.Delete()` call, because `.MoveTo()` _fails_ with a preexisting target (presumably because it either calls the option-less `MoveFile()` WinAPI function or invariably calls `MoveFileEx()` without the `MOVEFILE_REPLACE_EXISTING ` option).\r\nBoth calls could be replaced with a single call to `MoveFileEx()` to support both forced replacement and cross-volume moving:\r\n      * `Move-Item`:  use option `MOVEFILE_COPY_ALLOWED ` to support cross-volume moving, and add `MOVEFILE_REPLACE_EXISTING` in case of  `-Force`.\r\n      * `Rename-Item` use option `MOVEFILE_REPLACE_EXISTING` in case of  `-Force` (by definition, a rename operation is never cross-volume).\r\n\r\n* A few asides:\r\n\r\n  * Even though the Unix `rename()` system call only supports moving  within a given volume, the `mv` utility does support cross-volume moves.\r\n\r\n  * The user utilities - `move`, `mv` and `Move-Item` - all _bypass_ the issue of replacing a preexisting target _directory_ by simply moving the source path _into_ that directory.\r\n     * This means that the new path depends on whether a target directory happens to preexist or not - a behavior that can be considered problematic, especially in the context of `Copy-Item` - see #2934",
    "created_at": "2018-04-03T13:09:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6538#issuecomment-378244147",
    "id": 378244147,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6538",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODI0NDE0Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/378244147/reactions"
    },
    "updated_at": "2018-04-03T13:12:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/378244147",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
