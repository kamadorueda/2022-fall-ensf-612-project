[
  {
    "author_association": "COLLABORATOR",
    "body": "1. Sure, I use that pattern in every module I write for 5.1+\r\n\r\n1. Yeah, unless you have both using statements in the psm1 (type resolution state is inherited by child scopes)\r\n\r\n1. Not sure what you mean, that what you quoted is still true in the examples you gave.  It needs to be the first statement in a script file, not an entire session",
    "created_at": "2018-01-19T12:36:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5942#issuecomment-358955233",
    "id": 358955233,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5942",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODk1NTIzMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/358955233/reactions"
    },
    "updated_at": "2018-01-19T12:36:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/358955233",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "@SeeminglyScience \r\n\r\nI've added a few bits to the code in my original post.\r\n\r\n>2. ... (type resolution state is inherited by child scopes)\r\n\r\nI'm not sure exactly what you mean by this.  I have not successfully reproduced type resolution behavior consistent with inheritance when dot-sourcing `.ps1` files from a `.psm1` file.  On the contrary, consider that `Get1` succeeds and outputs `101`.  This suggests that `using namespace UsingTest.B` from the \"child\" `fileB.ps1` file is in effect in the \"parent\" `.psm1` file.\r\n\r\n>3. Not sure what you mean, that what you quoted is still true in the examples you gave. It needs to be the first statement in a script file, not an entire session\r\n\r\nMy apprehension stems from the definition of \"script\".  In particular, what does \"script\" mean in the context of a module.  \"script scope\", for example, as applied to variables seems to mean \"the scope of the entire module\".  `GetV1` outputs `1` despite that the only place `$v1` is set is in a different file that is not a parent.  If \"script\" really meant \"script file\" in the context of dot-sourcing `.ps1` files from a `.psm1`, `GetV1` should output null.",
    "created_at": "2018-01-19T17:11:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5942#issuecomment-359030150",
    "id": 359030150,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5942",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTAzMDE1MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/359030150/reactions"
    },
    "updated_at": "2018-01-19T17:11:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/359030150",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11237922?v=4",
      "events_url": "https://api.github.com/users/alx9r/events{/privacy}",
      "followers_url": "https://api.github.com/users/alx9r/followers",
      "following_url": "https://api.github.com/users/alx9r/following{/other_user}",
      "gists_url": "https://api.github.com/users/alx9r/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/alx9r",
      "id": 11237922,
      "login": "alx9r",
      "node_id": "MDQ6VXNlcjExMjM3OTIy",
      "organizations_url": "https://api.github.com/users/alx9r/orgs",
      "received_events_url": "https://api.github.com/users/alx9r/received_events",
      "repos_url": "https://api.github.com/users/alx9r/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/alx9r/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alx9r/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/alx9r"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> I'm not sure exactly what you mean by this. I have not successfully reproduced type resolution behavior consistent with inheritance when dot-sourcing .ps1 files from a .psm1 file. \r\n\r\nNo, dot sourcing doesn't effect type resolution.  Type resolution state is stored at the scope level, but it doesn't follow the same rules as other session state items like commands or variables. What I meant is if you declare a using statement in the `psm1`, it will be in effect in all child scopes.  For example\r\n\r\n```powershell\r\n# myModule.psm1\r\nusing namespace System.Management.Automation.Language\r\n\r\n& ./myOtherScript.ps1\r\n```\r\n\r\n```powershell\r\n# myOtherScript.ps1\r\n[Ast]\r\n```\r\n\r\nIn that example `[Ast]` would resolve to `System.Management.Automation.Language.Ast`.\r\n\r\n> My apprehension stems from the definition of \"script\". In particular, what does \"script\" mean in the context of a module.\r\n\r\nThat's fair, to be more specific it has to be the first statement in a \"thing\" that is parsed.  Typically this means per file, or input from the command prompt, or a dynamically created script block like `[scriptblock]::Create('using namespace x')`. \r\n\r\n",
    "created_at": "2018-01-19T21:51:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5942#issuecomment-359099211",
    "id": 359099211,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5942",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTA5OTIxMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/359099211/reactions"
    },
    "updated_at": "2018-01-19T21:51:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/359099211",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "> Is it certain that GetA1 and GetB1 will return 1 and 101, respectively?\r\n\r\n@alx9r I can not find this result :\r\n```powershell  \r\nipmo C:\\temp\\UsingTest.psm1\r\nGet1\r\n#101\r\n\r\nGetA1\r\n#101\r\n\r\nGetB1\r\n#1\r\n```\r\nAnd the result of the call to 'Get1' depends on the loading order of the files 'fileA.ps1' and 'fileB.ps1'.\r\n\r\n$PSVersionTable\r\n```powershell\r\n\r\nName                           Value\r\n----                           -----\r\nPSVersion                      6.0.1\r\nPSEdition                      Core\r\nGitCommitId                    v6.0.1\r\nOS                             Microsoft Windows 6.1.7601 S\r\nPlatform                       Win32NT\r\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0, 5.0, 5.1.10032.0, 6.0.1}\r\nPSRemotingProtocolVersion      2.3\r\nSerializationVersion           1.1.0.1\r\nWSManStackVersion              3.0\r\n```",
    "created_at": "2018-02-06T14:45:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5942#issuecomment-363443615",
    "id": 363443615,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5942",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzQ0MzYxNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/363443615/reactions"
    },
    "updated_at": "2018-02-06T14:45:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/363443615",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/4894452?v=4",
      "events_url": "https://api.github.com/users/LaurentDardenne/events{/privacy}",
      "followers_url": "https://api.github.com/users/LaurentDardenne/followers",
      "following_url": "https://api.github.com/users/LaurentDardenne/following{/other_user}",
      "gists_url": "https://api.github.com/users/LaurentDardenne/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/LaurentDardenne",
      "id": 4894452,
      "login": "LaurentDardenne",
      "node_id": "MDQ6VXNlcjQ4OTQ0NTI=",
      "organizations_url": "https://api.github.com/users/LaurentDardenne/orgs",
      "received_events_url": "https://api.github.com/users/LaurentDardenne/received_events",
      "repos_url": "https://api.github.com/users/LaurentDardenne/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/LaurentDardenne/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LaurentDardenne/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/LaurentDardenne"
    }
  },
  {
    "author_association": "NONE",
    "body": "@LaurentDardenne That's an interesting result.  The difference seems to be whether the module is loaded from `$Env:PSModulePath`.\r\n\r\n### Load from `$Env:PSModulePath`\r\n```PowerShell\r\nImport-Module UsingTest; Get1; GetA1; GetB1\r\n```\r\n\r\noutputs\r\n\r\n```none\r\n101\r\n1\r\n101\r\n```\r\n\r\n### Load from `c:\\temp`\r\n\r\n```PowerShell\r\nImport-Module c:\\temp\\UsingTest; Get1; GetA1; GetB1\r\n```\r\n\r\noutputs\r\n\r\n```none\r\n101\r\n101\r\n1\r\n```\r\n\r\n------- \r\n\r\nEdit:  So far I've only been able to reproduce this difference in PowerShell 5.1.  The results seem to be consistent with @LaurentDardenne's post in PowerShell 6.",
    "created_at": "2018-02-06T19:31:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5942#issuecomment-363538106",
    "id": 363538106,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5942",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzUzODEwNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/363538106/reactions"
    },
    "updated_at": "2018-02-06T19:37:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/363538106",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11237922?v=4",
      "events_url": "https://api.github.com/users/alx9r/events{/privacy}",
      "followers_url": "https://api.github.com/users/alx9r/followers",
      "following_url": "https://api.github.com/users/alx9r/following{/other_user}",
      "gists_url": "https://api.github.com/users/alx9r/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/alx9r",
      "id": 11237922,
      "login": "alx9r",
      "node_id": "MDQ6VXNlcjExMjM3OTIy",
      "organizations_url": "https://api.github.com/users/alx9r/orgs",
      "received_events_url": "https://api.github.com/users/alx9r/received_events",
      "repos_url": "https://api.github.com/users/alx9r/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/alx9r/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alx9r/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/alx9r"
    }
  },
  {
    "author_association": "NONE",
    "body": "I do not know if it helps, but I did these tests out of a module :\r\n```Powershell\r\n. .\\fileA.ps1\r\nGetA1\r\n   #1\r\n  [int][MyEnum]::One\r\n   #1\r\n  [int][UsingTest.A.MyEnum]::One\r\n   #1\r\n \r\n. .\\fileB.ps1\r\nGetB1\r\n   #1\r\n [int][MyEnum]::One\r\n   #101\r\n [int][UsingTest.B.MyEnum]::One\r\n   #101\r\n \r\nGetA1\r\n  #1\r\n```\r\nNew session :\r\n```Powershell\r\n. .\\fileB.ps1\r\nGetB1\r\n  #101\r\n  [int][MyEnum]::One\r\n   #101\r\n  [int][UsingTest.B.MyEnum]::One\r\n   #101\r\n   \r\n. .\\fileA.ps1\r\nGetA1\r\n #101\r\n[int][MyEnum]::One\r\n #1\r\n[int][UsingTest.A.MyEnum]::One\r\n #1\r\n\r\nGetB1\r\n #101",
    "created_at": "2018-02-07T13:29:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5942#issuecomment-363768826",
    "id": 363768826,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5942",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Mzc2ODgyNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/363768826/reactions"
    },
    "updated_at": "2018-02-07T13:29:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/363768826",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/4894452?v=4",
      "events_url": "https://api.github.com/users/LaurentDardenne/events{/privacy}",
      "followers_url": "https://api.github.com/users/LaurentDardenne/followers",
      "following_url": "https://api.github.com/users/LaurentDardenne/following{/other_user}",
      "gists_url": "https://api.github.com/users/LaurentDardenne/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/LaurentDardenne",
      "id": 4894452,
      "login": "LaurentDardenne",
      "node_id": "MDQ6VXNlcjQ4OTQ0NTI=",
      "organizations_url": "https://api.github.com/users/LaurentDardenne/orgs",
      "received_events_url": "https://api.github.com/users/LaurentDardenne/received_events",
      "repos_url": "https://api.github.com/users/LaurentDardenne/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/LaurentDardenne/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LaurentDardenne/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/LaurentDardenne"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Why are you dot sourcing? A module manifest has e.g. the `ScriptsToProcess` property on it. Does the bug happen when using that as well?",
    "created_at": "2018-02-11T23:59:16Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5942#issuecomment-364802725",
    "id": 364802725,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5942",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDgwMjcyNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/364802725/reactions"
    },
    "updated_at": "2018-02-12T21:34:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/364802725",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/9250262?v=4",
      "events_url": "https://api.github.com/users/bergmeister/events{/privacy}",
      "followers_url": "https://api.github.com/users/bergmeister/followers",
      "following_url": "https://api.github.com/users/bergmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/bergmeister/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/bergmeister",
      "id": 9250262,
      "login": "bergmeister",
      "node_id": "MDQ6VXNlcjkyNTAyNjI=",
      "organizations_url": "https://api.github.com/users/bergmeister/orgs",
      "received_events_url": "https://api.github.com/users/bergmeister/received_events",
      "repos_url": "https://api.github.com/users/bergmeister/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/bergmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bergmeister/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/bergmeister"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@bergmeister `ScriptsToProcess` creates the class in the global `SessionState` instead of the module's, so it gets exported by default and can't access private functions.  It also leaves a dummy module named after the script file name imported in the global session.  It's more of a sorta dirty work around for class related issues.",
    "created_at": "2018-02-12T00:13:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5942#issuecomment-364804062",
    "id": 364804062,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5942",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDgwNDA2Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/364804062/reactions"
    },
    "updated_at": "2018-02-12T00:13:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/364804062",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": ">A module manifest has e.g. the ScriptsToProcess property on it. Does the bug happen when using that as well?\r\n\r\nFor reference, `ScriptsToProcess` [\"specifies script files that run in the caller's session state\"](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/new-modulemanifest?view=powershell-6).  The file specified in `RootModule`, on the other hand, is associated with the module SessionState.  `RootModule` is scalar, so it seems that modules composed from multiple .ps1 files must consolidate those from the file that is specified in `RootModule` (ie. by dot-sourcing).\r\n\r\nFor what it's worth, I haven't come across a viable alternative to this dot-sourcing approach for modules with many files.  If there is one, I'd welcome that knowledge.",
    "created_at": "2018-02-12T20:45:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5942#issuecomment-365056090",
    "id": 365056090,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5942",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTA1NjA5MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365056090/reactions"
    },
    "updated_at": "2018-02-12T20:45:26Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365056090",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11237922?v=4",
      "events_url": "https://api.github.com/users/alx9r/events{/privacy}",
      "followers_url": "https://api.github.com/users/alx9r/followers",
      "following_url": "https://api.github.com/users/alx9r/following{/other_user}",
      "gists_url": "https://api.github.com/users/alx9r/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/alx9r",
      "id": 11237922,
      "login": "alx9r",
      "node_id": "MDQ6VXNlcjExMjM3OTIy",
      "organizations_url": "https://api.github.com/users/alx9r/orgs",
      "received_events_url": "https://api.github.com/users/alx9r/received_events",
      "repos_url": "https://api.github.com/users/alx9r/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/alx9r/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alx9r/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/alx9r"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "I'm not aware of an alternative.\r\n\r\nWhen we added classes, I proposed the property `RootScripts` in the module manifest as an alternative to dot sourcing the `RootModule`, basically codifying the pattern folks use today, but that proposal wouldn't have helped your scenario.\r\n\r\nThe `using` statement does not really mix well with dot sourcing. It was originally meant to be fully static - as in - only affecting the `ps1` file that contains the statement, but the dynamic nature of PowerShell forced tracking the using state at runtime, and that naturally happens in a scope.\r\n\r\nSo mixing `using namespace` and dot sourcing is unfortunately fragile and I don't recommend it, but I believe you could dot source 1 file with all your `using namespace` statements and then not use `using namespace` in any other file in your module - that would behave how you'd like, other than getting good intellisense.",
    "created_at": "2018-02-12T21:25:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5942#issuecomment-365067309",
    "id": 365067309,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5942",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTA2NzMwOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365067309/reactions"
    },
    "updated_at": "2018-02-12T21:25:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365067309",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "NONE",
    "body": ">I believe you could dot source 1 file with all your using namespace statements and then not use using namespace in any other file in your module\r\n\r\nI tried this and it seems to be the least bad option.  It does mean that you have to concern yourself with naming collisions module-wide rather than file-wide, but I'll gladly take that over fragile.\r\n\r\nThank you for the clarity @lzybkr.",
    "created_at": "2018-02-13T16:31:35Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5942#issuecomment-365322198",
    "id": 365322198,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5942",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NTMyMjE5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365322198/reactions"
    },
    "updated_at": "2018-02-13T20:16:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/365322198",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11237922?v=4",
      "events_url": "https://api.github.com/users/alx9r/events{/privacy}",
      "followers_url": "https://api.github.com/users/alx9r/followers",
      "following_url": "https://api.github.com/users/alx9r/following{/other_user}",
      "gists_url": "https://api.github.com/users/alx9r/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/alx9r",
      "id": 11237922,
      "login": "alx9r",
      "node_id": "MDQ6VXNlcjExMjM3OTIy",
      "organizations_url": "https://api.github.com/users/alx9r/orgs",
      "received_events_url": "https://api.github.com/users/alx9r/received_events",
      "repos_url": "https://api.github.com/users/alx9r/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/alx9r/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alx9r/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/alx9r"
    }
  }
]
