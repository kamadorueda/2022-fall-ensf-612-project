[
  {
    "author_association": "NONE",
    "body": "Although you're probably aware of it I just want to mention for others who have this issue that this can be worked around for now by quoting the property:\r\n\r\n    ([pscustomobject] @{ 1 = 'foo ' }).1.Trim() # FAILS\r\n    ([pscustomobject] @{ 1 = 'foo ' }).'1'.Trim() # WORKS\r\n\r\nThis also works for other property-names that make PowerShell misbehave, such as properties starting with a '#' etc.",
    "created_at": "2020-11-11T18:02:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14036#issuecomment-725574474",
    "id": 725574474,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14036",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTU3NDQ3NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/725574474/reactions"
    },
    "updated_at": "2020-11-11T18:02:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/725574474",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/25607767?v=4",
      "events_url": "https://api.github.com/users/jantari/events{/privacy}",
      "followers_url": "https://api.github.com/users/jantari/followers",
      "following_url": "https://api.github.com/users/jantari/following{/other_user}",
      "gists_url": "https://api.github.com/users/jantari/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jantari",
      "id": 25607767,
      "login": "jantari",
      "node_id": "MDQ6VXNlcjI1NjA3NzY3",
      "organizations_url": "https://api.github.com/users/jantari/orgs",
      "received_events_url": "https://api.github.com/users/jantari/received_events",
      "repos_url": "https://api.github.com/users/jantari/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jantari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jantari/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jantari"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @jantari - I've added the workaround to the OP. Note that `(...)` works in all cases, because quoting isn't an option when you access _hashtables_ with truly numeric keys with property syntax, which can happen with the automatic `$Matches` variable - I've added that to the OP too.",
    "created_at": "2020-11-11T20:49:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14036#issuecomment-725653909",
    "id": 725653909,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14036",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNTY1MzkwOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/725653909/reactions"
    },
    "updated_at": "2020-11-11T20:49:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/725653909",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "There is actually a lexical ambiguity here. Consider `data.1.0`. Is this a nested index or indexing with the double `1.0`?  In practice, we do a shift instead of a reduce so it becomes indexing with a float. I think that with `data.1.b`, shifting results in an invalid number ultimately resulting in the error you see (I haven't actually checked the code so I don't have the exact details.) Anyway, you can eliminate the ambiguity by putting the number in parens:\r\n```powershell \r\n([pscustomobject] @{ 1 = 'foo ' }).(1).Trim()\r\n```",
    "created_at": "2020-11-13T20:48:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14036#issuecomment-727023222",
    "id": 727023222,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14036",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNzAyMzIyMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/727023222/reactions"
    },
    "updated_at": "2020-11-13T20:48:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/727023222",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/50499275?v=4",
      "events_url": "https://api.github.com/users/bpayette/events{/privacy}",
      "followers_url": "https://api.github.com/users/bpayette/followers",
      "following_url": "https://api.github.com/users/bpayette/following{/other_user}",
      "gists_url": "https://api.github.com/users/bpayette/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/bpayette",
      "id": 50499275,
      "login": "bpayette",
      "node_id": "MDQ6VXNlcjUwNDk5Mjc1",
      "organizations_url": "https://api.github.com/users/bpayette/orgs",
      "received_events_url": "https://api.github.com/users/bpayette/received_events",
      "repos_url": "https://api.github.com/users/bpayette/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/bpayette/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bpayette/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/bpayette"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Sort of? Property access tends to convert basically everything to a string in most cases, because most properties can only have strings for the property name. PSObject / PSCustomObject creates objects with string property names, not integer ones. So, yes, that works... incidentally only. `$obj.PSObject.Properties.Name.GetType()` on that object you create there will tell you the property name is still a string.\r\n\r\nThere's no reason not to assume a string value is being used for the property name IMO. The only exception is dictionaries/hashtables having non-string key types. Regular objects have strings for property names, I don't think there are really any exceptions to that. It's already true in some cases that you must use `$table[$value]` to index some kinds of keys, this wouldn't be a new thing.",
    "created_at": "2020-11-13T21:02:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14036#issuecomment-727034212",
    "id": 727034212,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14036",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNzAzNDIxMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/727034212/reactions"
    },
    "updated_at": "2020-11-13T21:02:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/727034212",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Agreed, @vexx32: \r\n\r\n* For a non-`IDictionary` object, it is unequivocally _unhelpful_ to try to parse the member name as a number, given that property names are always strings.\r\n\r\n* For an `IDictionary`, recognizing `[double]`s is a feature - even though it's hard to imagine that it would see much use:\r\n\r\n```powershell\r\nPS>  @{ 1.5 = 'foo ' }.1.5.Trim()\r\nfoo\r\n```\r\n\r\nIf we were to maintain strict backward compatibility, we can't take this feature away.\r\n\r\nHowever, I've never seen a `[double]`-keyed dictionary in the wild, and the precision issues around binary floating-point representations alone make this an ill-advised thing to do (and the syntax does _not_ work with `[decimal]`-typed keys).\r\n\r\nGiven the presumed rarity of `[double]`-keyed dictionaries  and the fact that users will most likely expect _all_ `.` chars. to be member-access operators, my vote is to consider this a [bucket 3](https://github.com/PowerShell/PowerShell/blob/master/docs/dev-process/breaking-change-contract.md#bucket-3-unlikely-grey-area) change and **always stop parsing a property name / key when a(n unquoted) `.` is encountered**.\r\n\r\n  * If there really is a need to use a `[double]` key, one must then use `$dict.(1.5).Trim()`, as @BrucePay suggests, or use `$dict[1.5]`, as you suggest.\r\n\r\nIf preserving backward compatibility is paramount, an alternative that at least ameliorates the problem - if technically feasible - would be to _fall back_ to considering something like `1.b` property / key `1`, whose `b` property is to be accessed , after failing to parse `1.b` as a `[double]`.\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2020-11-13T22:09:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14036#issuecomment-727060427",
    "id": 727060427,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14036",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNzA2MDQyNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/727060427/reactions"
    },
    "updated_at": "2020-11-15T14:06:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/727060427",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "It occurred to me that the parsing in question presumably happens during the _lexical_ analysis phase, where distinguishing by data type being operated on isn't an option. I've revised the previous comment accordingly - again: I think simply not supporting `[double]` keys with (unquoted, non-expression) property syntax is the best solution.",
    "created_at": "2020-11-15T14:08:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14036#issuecomment-727575440",
    "id": 727575440,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14036",
    "node_id": "MDEyOklzc3VlQ29tbWVudDcyNzU3NTQ0MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/727575440/reactions"
    },
    "updated_at": "2020-11-26T16:16:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/727575440",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Longer-term, if we ever get to break backward compatibility more substantially, my recommendation would be, for conceptual simplicity and for avoiding edge cases:\r\n\r\n* Only ever treat _bareword_ property names such as `.1` and `.1l` as _strings_ and _always_ treat an unquoted `.` as the member-access operator.\r\n\r\n* For everything else, either require an explicit expression context (`.(...)`, `.$propName`) or index-based access instead, in which case the intent to use an _expression_ is unequivocally signaled.\r\n\r\n(To soften the blow, the automatic `$Matches` variable could be converted to an `[ordered]` hashtable whose default keys are the stringified indices, so that something like `$Matches.1` continues to work); the added benefit is that you _both_  indexed (`$Matches[1]`) and named-capture-group property then work `$Matches.foo`).\r\n",
    "created_at": "2020-11-26T16:39:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14036#issuecomment-734397716",
    "id": 734397716,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14036",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNDM5NzcxNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/734397716/reactions"
    },
    "updated_at": "2020-11-27T15:43:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/734397716",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "Not sure if it's directly related but in below example nested properties also doesn't work unless put in quotes\r\n```PowerShell\r\n$l=@{I=1;V=5;X=10;L=50;C=100;D=500;M=1000}\r\n$a='IVXLLD'\r\n\r\n$l[$a[3]]\r\n# Result:\r\n\r\n$l[\"$($a[3])\"]\r\n# Result: 50\r\n```",
    "created_at": "2021-02-13T17:42:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14036#issuecomment-778651530",
    "id": 778651530,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14036",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3ODY1MTUzMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/778651530/reactions"
    },
    "updated_at": "2021-02-13T17:42:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/778651530",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/31106839?v=4",
      "events_url": "https://api.github.com/users/catthehacker/events{/privacy}",
      "followers_url": "https://api.github.com/users/catthehacker/followers",
      "following_url": "https://api.github.com/users/catthehacker/following{/other_user}",
      "gists_url": "https://api.github.com/users/catthehacker/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/catthehacker",
      "id": 31106839,
      "login": "catthehacker",
      "node_id": "MDQ6VXNlcjMxMTA2ODM5",
      "organizations_url": "https://api.github.com/users/catthehacker/orgs",
      "received_events_url": "https://api.github.com/users/catthehacker/received_events",
      "repos_url": "https://api.github.com/users/catthehacker/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/catthehacker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/catthehacker/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/catthehacker"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@catthehacker, no, this is a different problem: `[hashtable]` keys must be matched _type-exactly_ during lookup.\r\n\r\nYour keys are `[string]`-typed, despite comprising only a single character (e.g., `L` - quoting optional in hashtable literals; the quoting style makes no difference, unlike in C#): PowerShell has no _literal_ `[char]` type.\r\n\r\nBy contrast, `'IVXLLD'[3]` _does_ return a `[char]` instance, and that's why the lookup fails, and only succeeds with stringification; `$l[[string] 'IVXLLD'[3]]` would work too.",
    "created_at": "2021-02-13T17:49:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14036#issuecomment-778652424",
    "id": 778652424,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14036",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3ODY1MjQyNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 1,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/778652424/reactions"
    },
    "updated_at": "2021-02-13T17:49:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/778652424",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "@mklement0 Thanks a lot, that's awfully helpful.",
    "created_at": "2021-02-13T20:10:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/14036#issuecomment-778671592",
    "id": 778671592,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/14036",
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3ODY3MTU5Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/778671592/reactions"
    },
    "updated_at": "2021-02-13T20:10:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/778671592",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/31106839?v=4",
      "events_url": "https://api.github.com/users/catthehacker/events{/privacy}",
      "followers_url": "https://api.github.com/users/catthehacker/followers",
      "following_url": "https://api.github.com/users/catthehacker/following{/other_user}",
      "gists_url": "https://api.github.com/users/catthehacker/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/catthehacker",
      "id": 31106839,
      "login": "catthehacker",
      "node_id": "MDQ6VXNlcjMxMTA2ODM5",
      "organizations_url": "https://api.github.com/users/catthehacker/orgs",
      "received_events_url": "https://api.github.com/users/catthehacker/received_events",
      "repos_url": "https://api.github.com/users/catthehacker/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/catthehacker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/catthehacker/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/catthehacker"
    }
  }
]
