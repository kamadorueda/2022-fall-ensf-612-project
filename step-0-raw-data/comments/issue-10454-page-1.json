[
  {
    "author_association": "CONTRIBUTOR",
    "body": "I always assumed optimizations like this would be handled in an `AstVisitor` implementation, hoping such optimizations could be performed while retaining the extent in the original scripts so that neither the script author nor the debugger is aware of them while code just runs faster. This PR seems to indicate that my assumption is incorrect.\r\n\r\nMy naive questions about this: Is it simply not possible to perform optimizations such as this one transparently to the user and the debugger by doing the work in the AST itself? Or is it possible, but an approach like that is considered undesirable for other reasons?",
    "created_at": "2019-08-29T15:40:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/10454#issuecomment-526243778",
    "id": 526243778,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10454",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjI0Mzc3OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/526243778/reactions"
    },
    "updated_at": "2019-08-29T15:40:50Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/526243778",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3515485?v=4",
      "events_url": "https://api.github.com/users/KirkMunro/events{/privacy}",
      "followers_url": "https://api.github.com/users/KirkMunro/followers",
      "following_url": "https://api.github.com/users/KirkMunro/following{/other_user}",
      "gists_url": "https://api.github.com/users/KirkMunro/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KirkMunro",
      "id": 3515485,
      "login": "KirkMunro",
      "node_id": "MDQ6VXNlcjM1MTU0ODU=",
      "organizations_url": "https://api.github.com/users/KirkMunro/orgs",
      "received_events_url": "https://api.github.com/users/KirkMunro/received_events",
      "repos_url": "https://api.github.com/users/KirkMunro/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KirkMunro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KirkMunro/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KirkMunro"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "> Is it simply not possible to perform optimizations such as this one transparently to the user and the debugger by doing the work in the AST itself?\r\n\r\nThe original AST should be preserved exactly as is because it should reflect exactly what the user typed on the console or wrote in the file.\r\nIf your thought is to generate another AST via a visitor before compiling, and use that one for compilation, then there is no guarantee the extent will be exactly the same or it will be transparent to the debugger.\r\nTake this change as an example, once `foreach-object { ... }` is replaced by `. { process { ... } }` in the generated AST, you will have problem on the extent of the `process {` part, because that's new elements added the generated AST. Also, there won't be a `CommandProcessor` representing the `ForEach-Object` in the pipeline, and thus the debugger will break at the open curly instead of `ForEach-Object` for `Set-PSBreakpoint -Command Foreach-Object`.\r\n\r\nFor this specific change, I think there is something we can try if we really want to make it work with debugger: when rewriting the pipeline, instead of creating a command processor with the script block, we can construct a `FunctionInfo` with the name `ForEach-Object` and make its extent the same as the `ForEach-Object` extent. That might work, but of course might cause new issues that are unknown yet.",
    "created_at": "2019-08-29T18:32:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/10454#issuecomment-526308209",
    "id": 526308209,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10454",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjMwODIwOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/526308209/reactions"
    },
    "updated_at": "2019-08-29T18:53:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/526308209",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@KirkMunro \r\n\r\n> Is it simply not possible to perform optimizations such as this one transparently to the user and the debugger by doing the work in the AST itself? Or is it possible, but an approach like that is considered undesirable for other reasons\r\n\r\nIt's definitely possible. There's a good example in `DynamicKeywordStatementAst`:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/704ee90d5cd2909ebc98a8d624359eed5d1b1cbc/src/System.Management.Automation/engine/parser/ast.cs#L6817-L7027\r\n\r\nBut to my mind, the questions are those of layering:\r\n\r\n- How faithfully should the AST represent the program as it was given to the parser?\r\n- How much should the AST know about what consumes it?\r\n- To what extent (heh) should I be able to reconstruct a program from its AST?\r\n- If we add syntactic sugar, does the parser own it, the AST or the compiler?\r\n\r\nThese problems (/restatements of the same problem) are inconsistently addressed in PowerShell:\r\n\r\n- [The parser doesn't record where traps occur in a block at all, so the AST is created with some arguably important information missing](https://github.com/PowerShell/PowerShell/blob/704ee90d5cd2909ebc98a8d624359eed5d1b1cbc/src/System.Management.Automation/engine/parser/Parser.cs#L1858-L1908)\r\n- [ScriptBlockAsts for scriptblocks without an explicit end block still have the `End` property populated because the AST type favours the consumer of the AST over structural fidelity](https://github.com/PowerShell/PowerShell/blob/704ee90d5cd2909ebc98a8d624359eed5d1b1cbc/src/System.Management.Automation/engine/parser/ast.cs#L1031-L1041)\r\n- [Dynamic keyword invocations get their own AST, but they do their own AST transformation to be compiled](https://github.com/PowerShell/PowerShell/blob/704ee90d5cd2909ebc98a8d624359eed5d1b1cbc/src/System.Management.Automation/engine/parser/Compiler.cs#L2978-L2986)\r\n- The compiler's `*Ops` libraries have some syntactic sugar transformations in them, like [for job control operators (`Get-Command &`)](https://github.com/PowerShell/PowerShell/blob/704ee90d5cd2909ebc98a8d624359eed5d1b1cbc/src/System.Management.Automation/engine/parser/Compiler.cs#L3092-L3098) and here with the `ForEach-Object` now\r\n\r\nIf we were writing it all over today, we might have a syntactic sugar phase/layer between the parser and the compiler implemented as an AstVisitor that takes in one AST and spits out the transformed one, although the immutability of the AST (which I still think is a very good thing) makes that a bit more expensive. That's certainly the way other statically compiled. languages have gone.\r\n\r\nBut I do feel ambivalent about syntactic sugar (in the strict sense of a language-level AST-to-AST transformation, where one syntax is a macro for another) in an interpreted language. I'm not sure about Python, Ruby and friends, but both C# and Java seem to have a policy against it as far as I can tell; they go direct to bytecode and leave the optimisations to the runtime.\r\n\r\nFor PowerShell though, I think (1) we want to encourage good practice with syntax, (2) it's good to try and find performance wherever we can while still finding time for other work.\r\n\r\nSo basically, I don't think we have a good, consistent answer for how something like this should be implemented, but this implementation is one of the better ones in terms of both how it's done and where it sits.",
    "created_at": "2019-08-29T18:49:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/10454#issuecomment-526314382",
    "id": 526314382,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10454",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjMxNDM4Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/526314382/reactions"
    },
    "updated_at": "2019-08-29T20:33:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/526314382",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Those answers are very, very helpful. Thank you @daxian-dbw and @rjmholt for taking the time to provide that information.",
    "created_at": "2019-08-29T21:42:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/10454#issuecomment-526373770",
    "id": 526373770,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10454",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjM3Mzc3MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 2,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/526373770/reactions"
    },
    "updated_at": "2019-08-29T21:42:46Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/526373770",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3515485?v=4",
      "events_url": "https://api.github.com/users/KirkMunro/events{/privacy}",
      "followers_url": "https://api.github.com/users/KirkMunro/followers",
      "following_url": "https://api.github.com/users/KirkMunro/following{/other_user}",
      "gists_url": "https://api.github.com/users/KirkMunro/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KirkMunro",
      "id": 3515485,
      "login": "KirkMunro",
      "node_id": "MDQ6VXNlcjM1MTU0ODU=",
      "organizations_url": "https://api.github.com/users/KirkMunro/orgs",
      "received_events_url": "https://api.github.com/users/KirkMunro/received_events",
      "repos_url": "https://api.github.com/users/KirkMunro/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KirkMunro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KirkMunro/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KirkMunro"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I like the optimization because it works well for _all_ scenarios.\r\nAlthough it’s obvious that there could be optimizations that can work well in a particular situation. That's why the question of Ast optimizations arises.\r\n\r\nFor example, for a simple management script in a task scheduler, an optimization is not to do any optimization at all since the interpreter will be the fastest.\r\nFor data manning script (parse and analyze large log file(s)), we could say in advance `pwsh -Optimization Full` to apply all optimizations _before_ run. In the scenario generating optimized Ast tree could bring significant acceleration. Currently single optimization we do for such scenarios - switch from interpreter to compiler for long running script blocks.\r\n\r\n> they go direct to bytecode and leave the optimizations to the runtime.\r\n\r\nSince we have new modern runtime we could review if we can generate code so that it can optimize by the runtime better.",
    "created_at": "2019-08-30T05:35:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/10454#issuecomment-526462989",
    "id": 526462989,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10454",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjQ2Mjk4OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/526462989/reactions"
    },
    "updated_at": "2019-08-30T05:35:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/526462989",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@daxian-dbw This PR introduces a breaking change. :boom:\r\n\r\nStep 1: Create a file with the following contents:\r\n\r\n```PowerShell\r\n1..2 | ForEach-Object{\r\n\r\n    Write-Host('MyInvocation in ForEach-Object: ' + $MyInvocation.MyCommand.Name)\r\n\r\n}\r\n```\r\n\r\nStep 2: Dot-source or invoke that file with the call operator.\r\n\r\nBefore this change (using preview 3):\r\n`$MyInvocation.MyCommand.Name` results in the name of the file.\r\n\r\nAfter this change (using a custom build with the latest bits, pulled just now):\r\n`$MyInvocation.MyCommand.Name` is `$null`.\r\n\r\nRelated: #10477.",
    "created_at": "2019-09-03T16:06:36Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/10454#issuecomment-527526827",
    "id": 527526827,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10454",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNzUyNjgyNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/527526827/reactions"
    },
    "updated_at": "2019-09-03T16:09:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/527526827",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3515485?v=4",
      "events_url": "https://api.github.com/users/KirkMunro/events{/privacy}",
      "followers_url": "https://api.github.com/users/KirkMunro/followers",
      "following_url": "https://api.github.com/users/KirkMunro/following{/other_user}",
      "gists_url": "https://api.github.com/users/KirkMunro/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/KirkMunro",
      "id": 3515485,
      "login": "KirkMunro",
      "node_id": "MDQ6VXNlcjM1MTU0ODU=",
      "organizations_url": "https://api.github.com/users/KirkMunro/orgs",
      "received_events_url": "https://api.github.com/users/KirkMunro/received_events",
      "repos_url": "https://api.github.com/users/KirkMunro/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/KirkMunro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/KirkMunro/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/KirkMunro"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "Interesting, I knew there might be cases that I didn't catch :) I will be working on a fix.\r\n\r\nI guess we also need an answer to this question:\r\n> why does the behaviour differ between Where-Object and ForEach-Object? They are both cmdlets, and I don't think it's unreasonable for users to expect a consistent experience between these two commands in terms of how their scriptblock implementations behave.\r\n",
    "created_at": "2019-09-03T21:52:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/10454#issuecomment-527655300",
    "id": 527655300,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10454",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyNzY1NTMwMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/527655300/reactions"
    },
    "updated_at": "2019-09-03T21:52:20Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/527655300",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "#10485 was submitted to revert this PR given that it introduced a breaking change to the value of `$MyInvocation` within the script block argument.",
    "created_at": "2019-09-05T00:35:42Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/10454#issuecomment-528145995",
    "id": 528145995,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10454",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyODE0NTk5NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/528145995/reactions"
    },
    "updated_at": "2019-09-05T00:35:42Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/528145995",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "NONE",
    "body": ":tada:`v7.0.0-preview.4` has been released which incorporates this pull request.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.0.0-preview.4)\n",
    "created_at": "2019-09-19T17:52:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/pull/10454#issuecomment-533239513",
    "id": 533239513,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10454",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMzIzOTUxMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/533239513/reactions"
    },
    "updated_at": "2019-09-19T17:52:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/533239513",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/in/26612?v=4",
      "events_url": "https://api.github.com/users/msftbot%5Bbot%5D/events{/privacy}",
      "followers_url": "https://api.github.com/users/msftbot%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/msftbot%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/msftbot%5Bbot%5D/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apps/msftbot",
      "id": 48340428,
      "login": "msftbot[bot]",
      "node_id": "MDM6Qm90NDgzNDA0Mjg=",
      "organizations_url": "https://api.github.com/users/msftbot%5Bbot%5D/orgs",
      "received_events_url": "https://api.github.com/users/msftbot%5Bbot%5D/received_events",
      "repos_url": "https://api.github.com/users/msftbot%5Bbot%5D/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/msftbot%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msftbot%5Bbot%5D/subscriptions",
      "type": "Bot",
      "url": "https://api.github.com/users/msftbot%5Bbot%5D"
    }
  }
]
