[
  {
    "author_association": "NONE",
    "body": "-Force",
    "created_at": "2021-04-29T16:46:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15323#issuecomment-829423211",
    "id": 829423211,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15323",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyOTQyMzIxMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/829423211/reactions"
    },
    "updated_at": "2021-04-29T16:46:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/829423211",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/78153320?v=4",
      "events_url": "https://api.github.com/users/237dmitry/events{/privacy}",
      "followers_url": "https://api.github.com/users/237dmitry/followers",
      "following_url": "https://api.github.com/users/237dmitry/following{/other_user}",
      "gists_url": "https://api.github.com/users/237dmitry/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/237dmitry",
      "id": 78153320,
      "login": "237dmitry",
      "node_id": "MDQ6VXNlcjc4MTUzMzIw",
      "organizations_url": "https://api.github.com/users/237dmitry/orgs",
      "received_events_url": "https://api.github.com/users/237dmitry/received_events",
      "repos_url": "https://api.github.com/users/237dmitry/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/237dmitry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/237dmitry/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/237dmitry"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I'm able to reproduce this:\r\n\r\n```\r\n> gi ~/.vimrc\r\nGet-Item: Could not find item /Users/rjmholt/.vimrc.\r\n\r\n> gi -force ~/.vimrc\r\n\r\n    Directory: /Users/rjmholt\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n---h-           4/22/2021  3:46 PM           1030 .vimrc\r\n\r\n> stat ~/.vimrc\r\n16777233 1451798 -rw-r--r-- 1 rjmholt staff 0 1030 \"Apr 22 16:28:44 2021\" \"Apr 22 15:46:55 2021\" \"Apr 22 15:46:55 2021\" \"Apr 22 15:46:55 2021\" 4096 8 0 /Users/rjmholt/.vimrc\r\n```\r\n\r\nThe difference in the modes shown seems to imply that PowerShell lacks permissions in some sense perhaps.",
    "created_at": "2021-04-29T16:50:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15323#issuecomment-829425785",
    "id": 829425785,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15323",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyOTQyNTc4NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/829425785/reactions"
    },
    "updated_at": "2021-04-29T16:50:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/829425785",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "/cc @JamesWTruher @SteveL-MSFT ",
    "created_at": "2021-04-29T16:52:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15323#issuecomment-829427160",
    "id": 829427160,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15323",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyOTQyNzE2MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/829427160/reactions"
    },
    "updated_at": "2021-04-29T16:52:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/829427160",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "`Get-Error` output:\r\n\r\n```\r\n> get-error\r\n\r\nException             :\r\n    Type    : System.IO.IOException\r\n    Message : Could not find item /Users/rjmholt/.vimrc.\r\n    HResult : -2146232800\r\nTargetObject          : /Users/rjmholt/.vimrc\r\nCategoryInfo          : ObjectNotFound: (/Users/rjmholt/.vimrc:String) [Get-Item], IOException\r\nFullyQualifiedErrorId : ItemNotFound,Microsoft.PowerShell.Commands.GetItemCommand\r\nInvocationInfo        :\r\n    MyCommand        : Get-Item\r\n    ScriptLineNumber : 1\r\n    OffsetInLine     : 1\r\n    HistoryId        : 169\r\n    Line             : gi ~/.vimrc\r\n    PositionMessage  : At line:1 char:1\r\n                       + gi ~/.vimrc\r\n                       + ~~~~~~~~~~~\r\n    InvocationName   : gi\r\n    CommandOrigin    : Internal\r\nScriptStackTrace      : at <ScriptBlock>, <No file>: line 1\r\nPipelineIterationInfo :\r\n\r\n\r\n```",
    "created_at": "2021-04-29T16:56:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15323#issuecomment-829429775",
    "id": 829429775,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15323",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyOTQyOTc3NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/829429775/reactions"
    },
    "updated_at": "2021-04-29T16:56:12Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/829429775",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "NONE",
    "body": "This is standart syntax for hidden \"items\".\r\n```\r\n> help Get-item -Parameter Force\r\n\r\n-Force <System.Management.Automation.SwitchParameter>\r\n    Indicates that this cmdlet gets items that can't otherwise be accessed, such as hidden items. Implementation varies from provider to provider.....\r\n```",
    "created_at": "2021-04-29T17:00:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15323#issuecomment-829432414",
    "id": 829432414,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15323",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyOTQzMjQxNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/829432414/reactions"
    },
    "updated_at": "2021-04-29T17:00:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/829432414",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/78153320?v=4",
      "events_url": "https://api.github.com/users/237dmitry/events{/privacy}",
      "followers_url": "https://api.github.com/users/237dmitry/followers",
      "following_url": "https://api.github.com/users/237dmitry/following{/other_user}",
      "gists_url": "https://api.github.com/users/237dmitry/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/237dmitry",
      "id": 78153320,
      "login": "237dmitry",
      "node_id": "MDQ6VXNlcjc4MTUzMzIw",
      "organizations_url": "https://api.github.com/users/237dmitry/orgs",
      "received_events_url": "https://api.github.com/users/237dmitry/received_events",
      "repos_url": "https://api.github.com/users/237dmitry/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/237dmitry/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/237dmitry/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/237dmitry"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "This has always been the norm as far as I'm aware, yeah. `-Force` has always been required when querying for hidden and sometimes system files/folders.",
    "created_at": "2021-04-29T17:05:12Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15323#issuecomment-829435944",
    "id": 829435944,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15323",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyOTQzNTk0NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/829435944/reactions"
    },
    "updated_at": "2021-04-29T17:05:12Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/829435944",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "NONE",
    "body": "This is... very weird to me, but fair enough. I still think it's a bug (or at least a thing that should be changed), since hidden files aren't \"different\" from regular files on unices.",
    "created_at": "2021-04-29T19:32:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15323#issuecomment-829529633",
    "id": 829529633,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15323",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyOTUyOTYzMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 1,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 4,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/829529633/reactions"
    },
    "updated_at": "2021-04-29T19:39:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/829529633",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3479021?v=4",
      "events_url": "https://api.github.com/users/strega-nil/events{/privacy}",
      "followers_url": "https://api.github.com/users/strega-nil/followers",
      "following_url": "https://api.github.com/users/strega-nil/following{/other_user}",
      "gists_url": "https://api.github.com/users/strega-nil/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/strega-nil",
      "id": 3479021,
      "login": "strega-nil",
      "node_id": "MDQ6VXNlcjM0NzkwMjE=",
      "organizations_url": "https://api.github.com/users/strega-nil/orgs",
      "received_events_url": "https://api.github.com/users/strega-nil/received_events",
      "repos_url": "https://api.github.com/users/strega-nil/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/strega-nil/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/strega-nil/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/strega-nil"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "It is not bug, it is default PowerShell behavior for years. PowerShell never gets/enumerates objects with hidden and system attributes.\r\n\r\n> since hidden files aren't \"different\" from regular files on unices.\r\n\r\nIt is Unix standard - first dot in name assumes that the file is hidden. .Net maps sign to FileAttribute.Hidden and PowerShell follows the Unix and .Net behavior.\r\n\r\nIn Get-ChildItem we can use `-Hidden` and `-System` switches to get such files in output.",
    "created_at": "2021-04-30T04:05:35Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15323#issuecomment-829789752",
    "id": 829789752,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15323",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyOTc4OTc1Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/829789752/reactions"
    },
    "updated_at": "2021-04-30T04:07:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/829789752",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Even if it isn't a bug, the behavior is counterintuitive and inconvenient, given that a _specific, known-to-exist_ file is being asked for: If I know that it's there, its hidden-or-not status should be irrelevant.\r\n\r\n---\r\n\r\nContrast that with the arguably more sensible behavior of POSIX-compatible shells such as `bash`, and the (POSIX-mandated) [`ls` utility](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/ls.html):\r\n\r\n* `ls`  behavior (shell-independent):\r\n  * _Enumeration_ behavior (no path / only _parent_ path argument, e.g., `ls ~`):\r\n    * Parallels `Get-ChildItem`'s enumeration behavior: hidden items are _not_ included by default, and there's an opt-in to include them (`-A`, the equivalent of `-Force`)\r\n  * Literal direct-target path-argument behavior (e.g, `ls ~/.bashrc`):\r\n     * _The item is listed, irrespective of whether it is hidden or not._\r\n\r\n* Globbing behavior, which is purely a _shell_ feature (that is, the shell itself resolves the wildcard expression up front and passes the resulting literal paths to the target command):\r\n\r\n  * _Unless the pattern starts with `.`_, hidden items are _not_ included by default; e.g.:\r\n    * `sh -c 'printf %s\\\\n ~/*bashrc'` does _not_ find `~/.bashrc` (unfortunately, `bash`, `dash`, and `ksh` then _pass the unexpanded pattern through_, which is unfortunate, but that's a separate issue) \r\n    * but `sh -c 'printf %s\\\\n ~/.*bashrc'` does, due to the name-pattern-initial `.`\r\n  * Specific shells may have shell-environment options to include hidden items _by default_, such as `bash`'s `dotglob` option.\r\n  * Note that the only reason I'm using `sh -c` in the examples above is the need to bypass PowerShell's own native globbing (see below).\r\n\r\n---\r\n\r\nThe following following changes make sense to me:\r\n\r\n* Make `Get-Item` / `Get-ChildItem` find hidden items directly specified by their literal path, without the need for `-Force`.\r\n\r\n* Make `.`-initial wildcards such as `.*rc` match hidden items without the need for `-Force`.\r\n  * Ditto for native globbing (wildcard resolution when calling _external programs_), to align with native-shell behavior.\r\n  * Note that native globbing fundamentally lacks a mechanism to request inclusion of hidden items, as discussed in #4683\r\n\r\n\r\n",
    "created_at": "2021-04-30T17:10:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15323#issuecomment-830236659",
    "id": 830236659,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15323",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMDIzNjY1OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/830236659/reactions"
    },
    "updated_at": "2021-04-30T17:10:20Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/830236659",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "The hidden dot-files behaviour [was originally a bug in `ls`](https://linux-audit.com/linux-history-how-dot-files-became-hidden-files/), so I don't think it gets any credit there. What's more, the dot-file concept is specific to `ls` as a utility &mdash; things like `stat` don't care what a file is called.\r\n\r\nOn the other hand, `Get-ChildItem` and `Get-Item` (which I think is arguably more like `stat` than `ls`) share a common implementation because they are *provider traversal commands* under which the filesystem provider is just one implementation, so the provider must have a single consistent behaviour underneath both of them. This isn't an implementation detail; PowerShell providers are a user-level concept and each `*-Item*` cmdlet corresponds to an established provider API.\r\n\r\nIncidentally this is actually much closer in spirit to Plan9's [`walk`](http://man.cat-v.org/plan_9/5/walk) and reminds me of the fact that [Plan9 has no recursive `-r` flag on utilities](https://wiki.c2.com/?WhatIsNotInPlanNine) because their philosophy was that there should only be one code path for that.\r\n\r\nWith that said though, PowerShell providers do differentiate between getting an item and getting child items. `Get-Item` uses the former API:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/a95b2cb17fecc8640533420b3baa9aec0f3749cb/src/System.Management.Automation/namespaces/FileSystemProvider.cs#L1242-L1256\r\n\r\nWhile `Get-ChildItem` uses the latter:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/a95b2cb17fecc8640533420b3baa9aec0f3749cb/src/System.Management.Automation/namespaces/FileSystemProvider.cs#L1504-L1529\r\n\r\nSo conceivably we could alter the behaviour in only `Get-Item` without introducing deep inconsistency, here:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/a95b2cb17fecc8640533420b3baa9aec0f3749cb/src/System.Management.Automation/namespaces/FileSystemProvider.cs#L1407-L1414\r\n\r\nIt's worth noting that PowerShell itself doesn't decide that files whose names start with `.` are hidden. We rely on an attribute that .NET gives us:\r\n\r\nhttps://github.com/PowerShell/PowerShell/blob/a95b2cb17fecc8640533420b3baa9aec0f3749cb/src/System.Management.Automation/namespaces/FileSystemProvider.cs#L1380\r\n\r\n[.NET has decided to inherit `ls`'s baggage here](https://github.com/dotnet/runtime/blob/4ed8a7ebd5dfdea079961e3698d2790fc48cc275/src/libraries/System.IO.FileSystem/src/System/IO/FileStatus.Unix.cs#L92-L94) and as a result, we have no way of knowing *why* a file was hidden. So this behaviour would need to apply to all hidden files (e.g. if a file has the BSD `hidden` flag set and starts with a `.`, we have no .NET-native way to know about the former). More importantly, this would imply changes on Windows as well, since again, we rely on .NET's abstraction here.\r\n\r\nThe main problem I see, clearly from the responses here, is that this is an established behaviour &mdash; users have learned that this happens with hidden files and that `-Force` is required much like with `ls -a`.\r\n\r\nAnyway, I don't have a particular horse in this race (I was mainly interested to learn more on the topic). But generally speaking, I'd say you need a pretty compelling argument to change an established behaviour in a core functionality like this.\r\n\r\n",
    "created_at": "2021-04-30T21:55:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15323#issuecomment-830421733",
    "id": 830421733,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15323",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMDQyMTczMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/830421733/reactions"
    },
    "updated_at": "2021-04-30T21:56:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/830421733",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7009879?v=4",
      "events_url": "https://api.github.com/users/rjmholt/events{/privacy}",
      "followers_url": "https://api.github.com/users/rjmholt/followers",
      "following_url": "https://api.github.com/users/rjmholt/following{/other_user}",
      "gists_url": "https://api.github.com/users/rjmholt/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rjmholt",
      "id": 7009879,
      "login": "rjmholt",
      "node_id": "MDQ6VXNlcjcwMDk4Nzk=",
      "organizations_url": "https://api.github.com/users/rjmholt/orgs",
      "received_events_url": "https://api.github.com/users/rjmholt/received_events",
      "repos_url": "https://api.github.com/users/rjmholt/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rjmholt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rjmholt/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rjmholt"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@rjmholt, after having just posted https://github.com/PowerShell/PowerShell/pull/10238#issuecomment-830406280, I figured: what the heck, one for the road, for old time's sake:\r\n\r\n> the dot-file concept is specific to ls as a utility \r\n\r\nAs [shown above](https://github.com/PowerShell/PowerShell/issues/15323#issuecomment-830236659), all major POSIX-like shells have adopted this convention.\r\nThat this convention may have been a historical accident is an interesting tidbit, but no more (a shell with an ironclad commitment to backward-compatibility should appreciate that).\r\n\r\n> users have learned that this happens with hidden files and that -Force is required much like with ls -a.\r\n\r\nThat's great. And it's appropriate for _enumeration_ behavior and for _wildcards that don't start with `.`_\r\n\r\nBut it's absurd otherwise - when you _know_ you're looking for a hidden file, either by literal path or by deliberately formulated wildcard - as evidenced by the following:\r\n\r\n```powershell\r\n# Tab-complete a hidden file:\r\nPS> Get-Item ~/.ba<tab> # tab-completes to '/Users/jdoe/.bashrc'\r\nGet-Item: Could not find item /Users/jdoe/.bashrc.\r\n```\r\n\r\nNow, you could argue that the tab-completion behavior should be fixed.\r\nBut I hope you won't.\r\n\r\n\r\n",
    "created_at": "2021-04-30T22:16:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15323#issuecomment-830429204",
    "id": 830429204,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15323",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMDQyOTIwNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/830429204/reactions"
    },
    "updated_at": "2021-04-30T22:16:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/830429204",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "Yeah, the fact that `Get-Item` requires `-Force` to \"find\" a hidden file just means that one should always pass `-Force` to `Get-Item`, since:\r\n\r\n```pwsh\r\nfunction Get-JsonElement {\r\n  [CmdletBinding()]\r\n  Param([Parameter(Mandatory)][String]$Path, [Parameter(Mandatory)][String]$JPointer)\r\n\r\n  $File = Get-Item $Path\r\n  ...\r\n}\r\n```\r\n\r\nthis is entirely reasonable code to write; additionally:\r\n\r\n```pwsh\r\n> Get-JsonElement .config.json '.foo.bar'\r\n```\r\n\r\nis also entirely reasonable code to write. There is no reason that putting these two bits of code together should fail, assuming `.config.json` exists, yet the default is that it does fail with a File Not Found error (which is... a very odd error, I must say).\r\n\r\nEDIT: I would also argue that the behavior makes no sense on Windows either; why does `Get-Item ~/AppData` fail. That is very, very weird behavior.",
    "created_at": "2021-05-01T01:01:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15323#issuecomment-830478999",
    "id": 830478999,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15323",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMDQ3ODk5OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/830478999/reactions"
    },
    "updated_at": "2021-05-01T01:12:12Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/830478999",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3479021?v=4",
      "events_url": "https://api.github.com/users/strega-nil/events{/privacy}",
      "followers_url": "https://api.github.com/users/strega-nil/followers",
      "following_url": "https://api.github.com/users/strega-nil/following{/other_user}",
      "gists_url": "https://api.github.com/users/strega-nil/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/strega-nil",
      "id": 3479021,
      "login": "strega-nil",
      "node_id": "MDQ6VXNlcjM0NzkwMjE=",
      "organizations_url": "https://api.github.com/users/strega-nil/orgs",
      "received_events_url": "https://api.github.com/users/strega-nil/received_events",
      "repos_url": "https://api.github.com/users/strega-nil/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/strega-nil/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/strega-nil/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/strega-nil"
    }
  },
  {
    "author_association": "NONE",
    "body": "I know this isn't the solution many of you are looking for, but as a workaround at least you can put this at the top of your scripts (or inside your `$PROFILE`):\r\n\r\n    $script:PSDefaultParameterValues = @{\r\n        \"Get-Item:Force\" = $true\r\n        \"Get-ChildItem:Force\" = $true\r\n    }\r\n\r\nDocumentation here: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_parameters_default_values?view=powershell-7.1\r\n\r\nIt sets `-Force` by default on all your subsequent `Get-Item` and `Get-ChildItem` calls.\n\n<blockquote><img src=\"https://docs.microsoft.com/media/logos/logo-powershell-social.png\" width=\"48\" align=\"right\"><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_parameters_default_values\">about_Parameters_Default_Values - PowerShell</a></strong></div><div>Describes how to set custom default values for cmdlet parameters and advanced functions.</div></blockquote>",
    "created_at": "2021-05-03T20:56:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15323#issuecomment-831528419",
    "id": 831528419,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15323",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMTUyODQxOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/831528419/reactions"
    },
    "updated_at": "2021-05-03T20:56:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/831528419",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/25607767?v=4",
      "events_url": "https://api.github.com/users/jantari/events{/privacy}",
      "followers_url": "https://api.github.com/users/jantari/followers",
      "following_url": "https://api.github.com/users/jantari/following{/other_user}",
      "gists_url": "https://api.github.com/users/jantari/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jantari",
      "id": 25607767,
      "login": "jantari",
      "node_id": "MDQ6VXNlcjI1NjA3NzY3",
      "organizations_url": "https://api.github.com/users/jantari/orgs",
      "received_events_url": "https://api.github.com/users/jantari/received_events",
      "repos_url": "https://api.github.com/users/jantari/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jantari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jantari/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jantari"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Thanks, @jantari, but just to spell it out: you workaround makes `Get-ChildItem` and `Get-Item` return hidden items _unconditionally_.\r\n\r\nA **proper fix** would mean:\r\n\r\n* Always allow items targeted by literal path, irrespective of their hidden status; never require `-Force` in that case.\r\n   * As an aside: requiring `-Force` for _removal_ is justified, and `Remove-Item` already behaves correctly in this case: if `-Force` is absent, instead of _pretending that the item doesn't exist_ (the way `Get-Item` always and `Get-ChildItem` _situationally_ does), it _acknowledges the existence_ and states that the hidden nature of the item requires `-Force`.\r\n* Omit hidden items _by default_ when _enumerating_ items in a directory, which happens in two cases:\r\n   * Explicitly, with `Get-ChildItem`\r\n   * Implicitly, via globbing (resolving _wildcard expressions_ to matching items)\r\n* To include hidden items in these enumeration cases, `-Force` is needed.\r\n  * Additionally, on Unix only, a wildcard expression (path component) that _starts with `.`_ should implicitly act as if `-Force` had also been passed (on Windows, an item's name doesn't signal its hidden status, so this doesn't apply)\r\n  * A related challenge - again on Unix only - is that the globbing applied when calling native utilities provides doesn't allow for a `-Force` switch (#4683).\r\n\r\nConversely, to summarize **what's broken** with respect to literal paths to hidden items specified without `-Force`:\r\n\r\n* `Get-Item` is broken with respect to both files and directories - it pretends they don't exist.\r\n \r\n* `Get-ChildItem` is broken with respect to _files only_ - it happily targets hidden _directories_ (see code below) and non-hidden files inside them (by direct path).\r\n\r\n  * It is in bad company there: `cmd.exe`'s `dir` exhibits the same partially broken behavior; additionally, `del` is broken in the sense that it _pretends that hidden items don't exist_ (cf. the sensible `Remove-Item` behavior described above).\r\n\r\nFurthermore, @rjmholt:\r\n\r\n> .NET has decided to inherit ls's baggage here\r\n\r\nTo recap: `.`-initial items being considered hidden from _enumeration_ is a decades-old convention observed on all Unix-like platforms.\r\n\r\n>  and as a result, we have no way of knowing _why_ a file was hidden.\r\n\r\nWe don't need to know, we can rely on .NET's enumeration behavior when exclusion of hidden items is requested (by default, nothing is excluded).\r\n\r\n> So this behaviour would need to apply to all hidden files (e.g. if a file has the BSD hidden flag set \r\n\r\nAt least as of .NET 5, the .NET file-system enumeration APIs don't know about this alternative, name-independent BSD/macOS mechanism of hiding files, and, similarly, neither does `ls` on macOS (where only the platform's file manager, Finder, observes it). [_Update_: This may change in .NET 6 - see https://github.com/dotnet/runtime/pull/52235]\r\n\r\nAgain, deferring to .NET should be fine.\r\n \r\n---\r\n\r\nTo further illustrate the inconsistency in `Get-Item`'s (and partially `Get-ChildItem`'s) behavior with respect to literal paths directly targeting a hidden item: The following demonstrates that **other file-processing cmdlets _do_ find hidden items by literal path, by (often _invariable_) default**, and also juxtaposes the behavior with that of the platform-native shell / utilities:\r\n\r\n```powershell\r\n# Switch to a temporary directory.\r\nPush-Location -ea Stop ($tmpDir = (New-Item -Type Directory -Force (Join-Path Temp:/ $PID)).FullName)\r\n\r\ntry {\r\n\r\n  # Create a hidden directory... \r\n  $null = New-Item -Type Directory -ea Stop .hiddenTmpDir; if ($IsWindows) { attrib +h .hiddenTmpDir }\r\n  # ... and a hidden file.\r\n  $null = New-Item -Type File -ea Stop .hiddenTmpFile; if ($IsWindows) { attrib +h .hiddenTmpFile }\r\n\r\n  # Add content to the hidden file.\r\n  # Add-Content targets the hidden file just fine, if it is targeted with a literal path.\r\n  'hi1' | Add-Content -ea Stop .hiddenTmpFile\r\n  # Create a non-hidden file in the hidden directory.\r\n  # Note using the hidden directory as part of the file path works just fine.\r\n  'hi2' > .hiddenTmpDir/test.txt\r\n  # Ditto, with Set-Content\r\n  'hi3' | Set-Content -ea Stop .hiddenTmpDir/test.txt\r\n\r\n  # Get-ChildItem accepts literal paths to hidden directories and to files inside hidden directories,\r\n  # but NOT if you directly target a file that is itself hidden, .hiddenTmpFile.\r\n  (Get-ChildItem .hiddenTmpDir).Name\r\n  (Get-ChildItem .hiddenTmpDir/test.txt).Name\r\n\r\n  # Test the existence of the hidden file, the hidden dir. and the non-hidden\r\n  # file inside the hidden dir.\r\n  Test-Path .hiddenTmpFile\r\n  Test-Path .hiddenTmpDir\r\n  Test-Path .hiddenTmpDir/test.txt\r\n\r\n  # Get the content of the hidden file and of one of the non-hidden files in \r\n  # the hidden directory.\r\n  Get-Content .hiddenTmpFile\r\n  Get-Content .hiddenTmpDir/test.txt\r\n\r\n  # Set-Location / Push-Location accepts literal paths to hidden directories.\r\n  Push-Location\r\n  Set-Location .hiddenTmpDir\r\n  Pop-Location\r\n\r\n  # Removing a non-hidden file in a hidden dir. works as-is\r\n  Remove-Item .hiddenTmpDir/test.txt\r\n\r\n  # By contrast, removing an item that is itself hidden - justifiably - \r\n  # requires -Force, but note that Remove-Item does NOT pretend that the\r\n  # the item *isn't there* if you neglect to use -Force.\r\n  Remove-Item -Force .hiddenTmpFile\r\n  Remove-Item -Force -Recurse .hiddenTmpDir\r\n\r\n  '---- Native shell / external utilities:'\r\n\r\n  # Create a hidden directory... \r\n  $null = New-Item -Type Directory -ea Stop .hiddenTmpDir; if ($IsWindows) { attrib +h .hiddenTmpDir }\r\n  # ... and a hidden file.\r\n  $null = New-Item -Type File -ea Stop .hiddenTmpFile; if ($IsWindows) { attrib +h .hiddenTmpFile }\r\n  # ... and a non-hidden file in the hidden dir.\r\n  'hi3' > .hiddenTmpDir/test.txt\r\n\r\n  if ($isWindows) {\r\n    cmd /v /c 'cd .hiddenTmpDir & echo !CD!'\r\n    cmd /c 'dir /b .hiddenTmpDir'\r\n    cmd /c 'type .hiddenTmpFile'\r\n    cmd /c 'type .hiddenTmpDir\\test.txt'\r\n    cmd /c 'if exist .hiddenTmpFile echo exists'\r\n    cmd /c 'if exist .hiddenTmpDir echo exists'\r\n    cmd /c 'if exist .hiddenTmpDir\\test.txt echo exists'\r\n    cmd /c 'del .hiddenTmpDir\\test.txt'\r\n    cmd /c 'rd /q /s .hiddenTmpDir'\r\n  }\r\n  else {\r\n    sh -c 'cd .hiddenTmpDir; echo $PWD'\r\n    ls   .hiddenTmpFile\r\n    stat .hiddenTmpFile\r\n    ls -d .hiddenTmpDir\r\n    sh -c 'test -e .hiddenTmpFile && echo exists'\r\n    sh -c 'test -e .hiddenTmpDir && echo exists'\r\n    sh -c 'test -e .hiddenTmpDir/test.txt && echo exists'\r\n    cat .hiddenTmpFile\r\n    cat .hiddenTmpDir/test.txt\r\n    rm .hiddenTmpFile\r\n    rm .hiddenTmpDir/test.txt\r\n    rm -r .hiddenTmpDir\r\n  }\r\n\r\n}\r\nfinally {\r\n  # Clean up.\r\n  Pop-Location; Remove-Item -Force -Recurse $tmpDir\r\n}\r\n```\r\n\r\n---\r\n\r\nI think I've said all I have to say, so I'm unsubscribing from this thread.",
    "created_at": "2021-05-04T14:36:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15323#issuecomment-831991311",
    "id": 831991311,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15323",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMTk5MTMxMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/831991311/reactions"
    },
    "updated_at": "2021-05-04T15:08:47Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/831991311",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "The Engine Working Group discussed this issue today, and we agree it's an enhancement that we should consider. But for this particular issue, it's more of a question, and it was answered, so we will resolve this issue as \"Answered\". A separate enhancement issue #15477 is opened and linked to this issue.",
    "created_at": "2021-05-28T04:28:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15323#issuecomment-850121785",
    "id": 850121785,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15323",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDEyMTc4NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/850121785/reactions"
    },
    "updated_at": "2021-05-28T04:29:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/850121785",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "NONE",
    "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
    "created_at": "2021-05-29T12:00:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15323#issuecomment-850821159",
    "id": 850821159,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15323",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1MDgyMTE1OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/850821159/reactions"
    },
    "updated_at": "2021-05-29T12:00:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/850821159",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/in/26612?v=4",
      "events_url": "https://api.github.com/users/msftbot%5Bbot%5D/events{/privacy}",
      "followers_url": "https://api.github.com/users/msftbot%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/msftbot%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/msftbot%5Bbot%5D/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apps/msftbot",
      "id": 48340428,
      "login": "msftbot[bot]",
      "node_id": "MDM6Qm90NDgzNDA0Mjg=",
      "organizations_url": "https://api.github.com/users/msftbot%5Bbot%5D/orgs",
      "received_events_url": "https://api.github.com/users/msftbot%5Bbot%5D/received_events",
      "repos_url": "https://api.github.com/users/msftbot%5Bbot%5D/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/msftbot%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msftbot%5Bbot%5D/subscriptions",
      "type": "Bot",
      "url": "https://api.github.com/users/msftbot%5Bbot%5D"
    }
  }
]
