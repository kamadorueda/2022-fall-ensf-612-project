[
  {
    "author_association": "NONE",
    "body": "Simple! Beside the fact that you are not displaying any results before the break then the value is gone as it never reaches the Write-Host line,\r\n\r\nThere's a couple of ways to tackle this:\r\n1. Add the Write-Host before the break.\r\n2. Or, just use the a \"return\" to exit the Foreach to properly terminate the function.\r\n```\r\nfunction say2()\r\n{\r\n\t$res = $false;\r\n\t$arr = 1 .. 10\r\n\t$arr | ForEach-Object{\r\n\t\tif ($_ -eq 5)\r\n\t\t{\r\n\t\t\t$res = $true\r\n\t\t\treturn \r\n\t\t}\r\n\t}\r\n\twrite-host \"im here!\"\r\n\treturn $res\r\n}\r\nsay2\r\n\r\nfunction say2()\r\n{\r\n\t$res = $false;\r\n\t$arr = 1 .. 10\r\n\t$arr | ForEach-Object{\r\n\t\tif ($_ -eq 5)\r\n\t\t{\r\n\t\t\t$res = $true\r\n\t\t\twrite-host \"im here! breaking = $res\";\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\twrite-host \"im here!\"\r\n\treturn $res\r\n}\r\nsay2\r\n```\r\n\r\nSorry! Answer to your question: Yes! 'break' will terminate the function and all variables are discarded.\r\n:)",
    "created_at": "2018-03-15T13:21:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6399#issuecomment-373373460",
    "id": 373373460,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6399",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzM3MzQ2MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/373373460/reactions"
    },
    "updated_at": "2018-03-15T13:30:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/373373460",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/19892435?v=4",
      "events_url": "https://api.github.com/users/MaximoTrinidad/events{/privacy}",
      "followers_url": "https://api.github.com/users/MaximoTrinidad/followers",
      "following_url": "https://api.github.com/users/MaximoTrinidad/following{/other_user}",
      "gists_url": "https://api.github.com/users/MaximoTrinidad/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/MaximoTrinidad",
      "id": 19892435,
      "login": "MaximoTrinidad",
      "node_id": "MDQ6VXNlcjE5ODkyNDM1",
      "organizations_url": "https://api.github.com/users/MaximoTrinidad/orgs",
      "received_events_url": "https://api.github.com/users/MaximoTrinidad/received_events",
      "repos_url": "https://api.github.com/users/MaximoTrinidad/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/MaximoTrinidad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MaximoTrinidad/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/MaximoTrinidad"
    }
  },
  {
    "author_association": "NONE",
    "body": "@MaximoTrinidad It's extremely grateful to your response.\r\nI know the execution order well, but I don't accept your answer.Look at the code below:\r\n```\r\nfunction say1(){\r\n    $arr = 1..10\r\n    $result = 0\r\n    foreach($item in $arr){\r\n        if($item -eq 5){\r\n            $result = 5\r\n            break\r\n        }\r\n    }\r\n    write-host \"im here!\"\r\n    return $result;\r\n}\r\n$result1 = say1\r\nwrite-host $result1\r\n```\r\n![image](https://user-images.githubusercontent.com/17986248/37508142-be0e535a-292c-11e8-9092-4f60a7d5378e.png)\r\nObviously after the **break** it executes the return , so it's not the **break** that terminates the function.\r\nI  guess the **pipeline** of foreach-object causes that weird result.I will search more materials to figure it out. ",
    "created_at": "2018-03-16T07:20:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6399#issuecomment-373625146",
    "id": 373625146,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6399",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzYyNTE0Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/373625146/reactions"
    },
    "updated_at": "2018-03-16T07:20:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/373625146",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/17986248?v=4",
      "events_url": "https://api.github.com/users/guguji5/events{/privacy}",
      "followers_url": "https://api.github.com/users/guguji5/followers",
      "following_url": "https://api.github.com/users/guguji5/following{/other_user}",
      "gists_url": "https://api.github.com/users/guguji5/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/guguji5",
      "id": 17986248,
      "login": "guguji5",
      "node_id": "MDQ6VXNlcjE3OTg2MjQ4",
      "organizations_url": "https://api.github.com/users/guguji5/orgs",
      "received_events_url": "https://api.github.com/users/guguji5/received_events",
      "repos_url": "https://api.github.com/users/guguji5/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/guguji5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/guguji5/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/guguji5"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "It's important to note the behavior of `$arr | ForEach-Object{}` and `foreach($item in $arr){}` are different. \r\n\r\nWhen using `Foreach-Object {}` the, script block you supply is actually the positional parameter for the `-Process` parameter. When you use this method, the code acts like the `Process{}` block on an advanced function. The proper way to short-circuit a Process block is the `return` statement. When you use `break` in this context it actually affects whatever outer looping construct that is affected by break and not the `Foreach-Object {}` loop.\r\n\r\nYou can see it demonstrated here:\r\n\r\n```powershell\r\n'Before Foreach'\r\nforeach ($i in 1..5) {\r\n    'Before Foreach-Object {0}' -f $i\r\n    -2..$i | ForEach-Object {\r\n        'In Foreach-Object {0}' -f $_\r\n        if ($_ -eq 3) {\r\n            'Break from Foreach-Object {0}' -f $_\r\n            break\r\n        }\r\n        'After if in  Foreach-Object {0}' -f $_\r\n    }\r\n    'After Foreach-Object {0}' -f $i\r\n}\r\n'After Foreach {0}' -f $i\r\n```\r\n\r\nThe result: \r\n\r\n```powershell\r\nBefore Foreach\r\nBefore Foreach-Object 1\r\nIn Foreach-Object -2\r\nAfter if in  Foreach-Object -2\r\nIn Foreach-Object -1\r\nAfter if in  Foreach-Object -1\r\nIn Foreach-Object 0\r\nAfter if in  Foreach-Object 0\r\nIn Foreach-Object 1\r\nAfter if in  Foreach-Object 1\r\nAfter Foreach-Object 1\r\nBefore Foreach-Object 2\r\nIn Foreach-Object -2\r\nAfter if in  Foreach-Object -2\r\nIn Foreach-Object -1\r\nAfter if in  Foreach-Object -1\r\nIn Foreach-Object 0\r\nAfter if in  Foreach-Object 0\r\nIn Foreach-Object 1\r\nAfter if in  Foreach-Object 1\r\nIn Foreach-Object 2\r\nAfter if in  Foreach-Object 2\r\nAfter Foreach-Object 2\r\nBefore Foreach-Object 3\r\nIn Foreach-Object -2\r\nAfter if in  Foreach-Object -2\r\nIn Foreach-Object -1\r\nAfter if in  Foreach-Object -1\r\nIn Foreach-Object 0\r\nAfter if in  Foreach-Object 0\r\nIn Foreach-Object 1\r\nAfter if in  Foreach-Object 1\r\nIn Foreach-Object 2\r\nAfter if in  Foreach-Object 2\r\nIn Foreach-Object 3\r\nBreak from Foreach-Object 3\r\nAfter Foreach 3\r\n```\r\n\r\nYou can see that the `After Foreach-Object 3` is never reached. and that the outer `foreach ($i in $c){}` loop is broken out of.\r\n\r\nCompare that with this which uses `return` instead of `break` in the `Foreach-Object {}`:\r\n\r\n```powershell\r\n'Before Foreach'\r\nforeach ($i in 1..5) {\r\n    'Before Foreach-Object {0}' -f $i\r\n    -2..$i | ForEach-Object {\r\n        'In Foreach-Object {0}' -f $_\r\n        if ($_ -eq 3) {\r\n            'Break from Foreach-Object {0}' -f $_\r\n            return\r\n        }\r\n        'After if in  Foreach-Object {0}' -f $_\r\n    }\r\n    'After Foreach-Object {0}' -f $i\r\n}\r\n'After Foreach {0}' -f $i\r\n```\r\nResult\r\n\r\n```none\r\nBefore Foreach\r\nBefore Foreach-Object 1\r\nIn Foreach-Object -2\r\nAfter if in  Foreach-Object -2\r\nIn Foreach-Object -1\r\nAfter if in  Foreach-Object -1\r\nIn Foreach-Object 0\r\nAfter if in  Foreach-Object 0\r\nIn Foreach-Object 1\r\nAfter if in  Foreach-Object 1\r\nAfter Foreach-Object 1\r\nBefore Foreach-Object 2\r\nIn Foreach-Object -2\r\nAfter if in  Foreach-Object -2\r\nIn Foreach-Object -1\r\nAfter if in  Foreach-Object -1\r\nIn Foreach-Object 0\r\nAfter if in  Foreach-Object 0\r\nIn Foreach-Object 1\r\nAfter if in  Foreach-Object 1\r\nIn Foreach-Object 2\r\nAfter if in  Foreach-Object 2\r\nAfter Foreach-Object 2\r\nBefore Foreach-Object 3\r\nIn Foreach-Object -2\r\nAfter if in  Foreach-Object -2\r\nIn Foreach-Object -1\r\nAfter if in  Foreach-Object -1\r\nIn Foreach-Object 0\r\nAfter if in  Foreach-Object 0\r\nIn Foreach-Object 1\r\nAfter if in  Foreach-Object 1\r\nIn Foreach-Object 2\r\nAfter if in  Foreach-Object 2\r\nIn Foreach-Object 3\r\nBreak from Foreach-Object 3\r\nAfter Foreach-Object 3\r\nBefore Foreach-Object 4\r\nIn Foreach-Object -2\r\nAfter if in  Foreach-Object -2\r\nIn Foreach-Object -1\r\nAfter if in  Foreach-Object -1\r\nIn Foreach-Object 0\r\nAfter if in  Foreach-Object 0\r\nIn Foreach-Object 1\r\nAfter if in  Foreach-Object 1\r\nIn Foreach-Object 2\r\nAfter if in  Foreach-Object 2\r\nIn Foreach-Object 3\r\nBreak from Foreach-Object 3\r\nIn Foreach-Object 4\r\nAfter if in  Foreach-Object 4\r\nAfter Foreach-Object 4\r\nBefore Foreach-Object 5\r\nIn Foreach-Object -2\r\nAfter if in  Foreach-Object -2\r\nIn Foreach-Object -1\r\nAfter if in  Foreach-Object -1\r\nIn Foreach-Object 0\r\nAfter if in  Foreach-Object 0\r\nIn Foreach-Object 1\r\nAfter if in  Foreach-Object 1\r\nIn Foreach-Object 2\r\nAfter if in  Foreach-Object 2\r\nIn Foreach-Object 3\r\nBreak from Foreach-Object 3\r\nIn Foreach-Object 4\r\nAfter if in  Foreach-Object 4\r\nIn Foreach-Object 5\r\nAfter if in  Foreach-Object 5\r\nAfter Foreach-Object 5\r\nAfter Foreach 5\r\n```\r\n\r\nSpecifically this:\r\n\r\n```\r\nIn Foreach-Object 3\r\nBreak from Foreach-Object 3\r\nIn Foreach-Object 4\r\n```\r\n\r\nNotice how that pattern then repeats. That is because only the `Foreach-Object {}` loop is being broken out of and the outer `foreach ($i in $c){}` loop continues to operate.\r\n\r\nThe confusing part in this is that `Foreach` is an alias of `Foreach-Object` but effectively `Foreach ($I in $c){}` is a different looping construct from `Foreach-Object {}`. `continue` and `break` should be used in `Foreach ($i in $c){}` and `return` should be used in `Foreach-Object`.",
    "created_at": "2018-03-16T12:05:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6399#issuecomment-373693760",
    "id": 373693760,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6399",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzY5Mzc2MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/373693760/reactions"
    },
    "updated_at": "2018-03-16T12:05:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/373693760",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6509955?v=4",
      "events_url": "https://api.github.com/users/markekraus/events{/privacy}",
      "followers_url": "https://api.github.com/users/markekraus/followers",
      "following_url": "https://api.github.com/users/markekraus/following{/other_user}",
      "gists_url": "https://api.github.com/users/markekraus/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/markekraus",
      "id": 6509955,
      "login": "markekraus",
      "node_id": "MDQ6VXNlcjY1MDk5NTU=",
      "organizations_url": "https://api.github.com/users/markekraus/orgs",
      "received_events_url": "https://api.github.com/users/markekraus/received_events",
      "repos_url": "https://api.github.com/users/markekraus/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/markekraus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markekraus/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/markekraus"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "For background information on `break` and `continue`, see https://github.com/PowerShell/PowerShell/issues/3879#issuecomment-304940545.\r\n\r\nTo add to @markekraus's explanation:  It's important to note that `return` in the `ForEach-Object` cmdlet's `-Process` block  is the equivalent of `continue` inside a genuine looping construct such as `foreach ($v in ...) { ... }`.\r\n\r\nBy contrast, a genuine loop's `break` keyword has _no_ `ForEach-Object` equivalent; in other words: exiting the pipeline prematurely, on demand is not directly supported.\r\n\r\nSee https://github.com/PowerShell/PowerShell/issues/3879#issuecomment-304991572",
    "created_at": "2018-03-17T03:48:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6399#issuecomment-373891846",
    "id": 373891846,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6399",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Mzg5MTg0Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/373891846/reactions"
    },
    "updated_at": "2018-03-17T03:48:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/373891846",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "@mklement0, Thanks for the explanation on the difference of foreach and foreach-object which doesn't behave the same way.\r\n\r\n@guguji5,  was just looking into foreach-object in your sample provided.\r\n:)",
    "created_at": "2018-03-17T12:56:20Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6399#issuecomment-373918098",
    "id": 373918098,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6399",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MzkxODA5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/373918098/reactions"
    },
    "updated_at": "2018-03-17T12:56:20Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/373918098",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/19892435?v=4",
      "events_url": "https://api.github.com/users/MaximoTrinidad/events{/privacy}",
      "followers_url": "https://api.github.com/users/MaximoTrinidad/followers",
      "following_url": "https://api.github.com/users/MaximoTrinidad/following{/other_user}",
      "gists_url": "https://api.github.com/users/MaximoTrinidad/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/MaximoTrinidad",
      "id": 19892435,
      "login": "MaximoTrinidad",
      "node_id": "MDQ6VXNlcjE5ODkyNDM1",
      "organizations_url": "https://api.github.com/users/MaximoTrinidad/orgs",
      "received_events_url": "https://api.github.com/users/MaximoTrinidad/received_events",
      "repos_url": "https://api.github.com/users/MaximoTrinidad/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/MaximoTrinidad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MaximoTrinidad/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/MaximoTrinidad"
    }
  },
  {
    "author_association": "NONE",
    "body": "@MaximoTrinidad @markekraus @mklement0 Thanks for your explanation.This issue leads me a deep understanding in powershell.\r\nI change the foreach-object to the foreach and it works as I expect.",
    "created_at": "2018-03-19T08:05:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/6399#issuecomment-374129853",
    "id": 374129853,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/6399",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NDEyOTg1Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/374129853/reactions"
    },
    "updated_at": "2018-03-19T08:05:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/374129853",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/17986248?v=4",
      "events_url": "https://api.github.com/users/guguji5/events{/privacy}",
      "followers_url": "https://api.github.com/users/guguji5/followers",
      "following_url": "https://api.github.com/users/guguji5/following{/other_user}",
      "gists_url": "https://api.github.com/users/guguji5/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/guguji5",
      "id": 17986248,
      "login": "guguji5",
      "node_id": "MDQ6VXNlcjE3OTg2MjQ4",
      "organizations_url": "https://api.github.com/users/guguji5/orgs",
      "received_events_url": "https://api.github.com/users/guguji5/received_events",
      "repos_url": "https://api.github.com/users/guguji5/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/guguji5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/guguji5/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/guguji5"
    }
  }
]
