[
  {
    "author_association": "NONE",
    "body": "As this issue is here I'll write a little narrative about how it tripped me up. It might help make it more understandable.\r\n\r\nI had an impotant overnight job, a Powershell script kicked off by the SQL Server Agent. As its an unsupervised batch job, I'm getting it to log info to a text file so that if something goes wrong I have a trail of info to figure out what happened.\r\n\r\nAnd normally I would not expect an error to stop previous statements from writing their output. e.g with this code:\r\n```\r\nWrite-Output (\"test output 1\")\r\nWrite-Output (\"test output 2\")\r\nWrite-Output (\"test output 3\")\r\nthrow \"pretend error\"\r\n```\r\n... I know that the 'pretend error' exception wont stop the statements above from appearing in the log.\r\n\r\nUnfortunately for me, at one point in my batch job, I was collating some info into an array of objects, and then outputting those objects to the log. I was pleased to find that when you do that, Powershell outputs the object properties in a smart little table. It turns out - completely unbeknownst to me at the time - that powershell is implicitly using Format-Table to do that. And weirdly, that means the output then becomes asynchronous because a 300ms delay gets introduced. So the output kindof gets paused while my powershell script continues to execute. As I said, I had no idea at the time, and this to me seems like VERY WEIRD behaviour, for a scripting language to suddenly switch its ouput into asynchronous mode for completely opaque reasons.\r\n\r\nSo in code, I was creating an array of objects, filling in the properties and then outputing them. Something along these lines:\r\n```\r\nWrite-Output (\"test output 1\")\r\nWrite-Output (\"test output 2\")\r\nWrite-Output (\"test output 3\")\r\n$testlist = @()\r\n$count = 1\r\nWhile($count -lt 6)\r\n{\r\n    $testobj = new-object psobject -prop @{Name=\"array object $count\"}\r\n    $testlist += $testobj\r\n    $count +=1\r\n}\r\nWrite-Output $testlist \r\nWrite-Output (\"test output 4\")\r\nWrite-Output (\"test output 5\")\r\nthrow \"pretend error\"\r\n```\r\nSo if you run that little snippet, you dont see any of the output after \"test output 3\". Thats pretty bonkers. The single most important thing I want my scripting language to do is execute the statements one after the other. But in this example it goes all parallel on me for no good reason.\r\n\r\nSo in the real world this caused me a right headache because my overnight batch file was failing, but when I looked in the log the error message was appearing but the previous five or six log messages I expected to see were missing. This meant the key info I needed to interpret the error message was missing. It also made it look like the error was happening at an earlier point in the script than it really was. It was a bit of a nightmare to untangle all that.\r\n\r\nFor reference, heres the SO question that helped me get to the bottom of it all:\r\n\r\n[Write-Output of array goes missing if error thrown afterwards](https://stackoverflow.com/questions/64681357/powershell-write-output-of-array-goes-missing-if-error-thrown-afterwards)\r\n\r\n\r\n",
    "created_at": "2020-12-04T14:39:35Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13985#issuecomment-738819754",
    "id": 738819754,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13985",
    "node_id": "MDEyOklzc3VlQ29tbWVudDczODgxOTc1NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/738819754/reactions"
    },
    "updated_at": "2020-12-04T14:39:35Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/738819754",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/999083?v=4",
      "events_url": "https://api.github.com/users/codeulike/events{/privacy}",
      "followers_url": "https://api.github.com/users/codeulike/followers",
      "following_url": "https://api.github.com/users/codeulike/following{/other_user}",
      "gists_url": "https://api.github.com/users/codeulike/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/codeulike",
      "id": 999083,
      "login": "codeulike",
      "node_id": "MDQ6VXNlcjk5OTA4Mw==",
      "organizations_url": "https://api.github.com/users/codeulike/orgs",
      "received_events_url": "https://api.github.com/users/codeulike/received_events",
      "repos_url": "https://api.github.com/users/codeulike/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/codeulike/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codeulike/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/codeulike"
    }
  }
]
