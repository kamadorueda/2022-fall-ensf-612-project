[
  {
    "author_association": "NONE",
    "body": "ETL and PML traces of above are here (internal to Microsoft): \"\\\\scratch2\\scratch\\richardt\\profile.jobxxx3.zip\"\r\n\r\nIf you want help going thru them, just e-mail/teams (richardt) or call (303-546-1449).  I can also gather any additional xperf info you might need.  The xperf command I used was:\r\n\r\n**xperf -on base+cswitch+DISPATCHER+DPC+INTERRUPT+latency+fileio+DISK_IO+DISK_IO_INIT+SYSCALL -stackwalk profile+CSwitch+ReadyThread+FileCreate+FileRead+FileWrite+DiskReadInit+DiskWriteInit+SyscallEnter+SyscallExit -BufferSize 2048 -MaxBuffers 2048; measure-command { 1..10 | %{ start-job { c:\\xxx.exe } }; get-job | wait-job; get-job | remove-job }; xperf -d profile.jobxxx3.etl**",
    "created_at": "2020-01-22T15:52:00Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11659#issuecomment-577251820",
    "id": 577251820,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11659",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NzI1MTgyMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577251820/reactions"
    },
    "updated_at": "2020-01-22T15:52:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577251820",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/341166?v=4",
      "events_url": "https://api.github.com/users/rtestardi/events{/privacy}",
      "followers_url": "https://api.github.com/users/rtestardi/followers",
      "following_url": "https://api.github.com/users/rtestardi/following{/other_user}",
      "gists_url": "https://api.github.com/users/rtestardi/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rtestardi",
      "id": 341166,
      "login": "rtestardi",
      "node_id": "MDQ6VXNlcjM0MTE2Ng==",
      "organizations_url": "https://api.github.com/users/rtestardi/orgs",
      "received_events_url": "https://api.github.com/users/rtestardi/received_events",
      "repos_url": "https://api.github.com/users/rtestardi/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rtestardi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rtestardi/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rtestardi"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "/cc @PaulHigin Could you please look the issue?",
    "created_at": "2020-01-22T17:25:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11659#issuecomment-577295316",
    "id": 577295316,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11659",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NzI5NTMxNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577295316/reactions"
    },
    "updated_at": "2020-01-22T17:25:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577295316",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "NONE",
    "body": "Hi Paul,\r\n\r\nI have confirmed the folks who see this all have either 4 or 6 cores on their (older) laptops...\r\n\r\nIt seems the real issue might be how the Threadpool is being used by powershell -- by blocking tasks reading named pipes that hold the thread -- on systems with less cores, there are less threads, so we can essentially deadlock until the threadpool decides to grow, which takes time...\r\n\r\nCan you explain to me when powershell reads and writes named pipes, with respect to job processing???\r\n\r\n(I see no indication yet of \"Windows proper\" being the problem, though I have also gotten into ratholes tracing thru conhost.exe, condrv.sys, named pipes, cert stores, security callbacks, etc. -- there's a lot going on! :-)\r\n\r\nDo you have a contact for the .NET CLR Threadpool, so we can understand under what conditions it expands the threadcount?  (And how it picks the initial threadcount?  Might there be an environment variable or registry setting we can tweak to confirm we really have root cause here?)\r\n\r\nDoes powershell happen to have any tracing that would help us isolate the issue?  Like when threadpool tasks start and stop (so we can see how long they are blocked on a queue)?\r\n\r\nMight there be a way to eliminate the console entirely from the jobs (or reuse the existing one) so we can rule out conhost.exe and friends from the picture?\r\n\r\nIf I look at child powershell process 18544 in \"\\\\scratch2\\scratch\\richardt\\profile.jobxxx3.zip\" between 14.5 seconds (when activity appeared to stop) and 34.6 seconds (when the job accessed c:\\xxx.exe, so I know it was actually running), I see the same stack I see in all our performance bugs -- someone is busy-waiting Sleep(0) as if it is a spinlock, and there is never any work to do, so we just burn a core context switching (to me this is a .NET CLR Threadpool bug in and of itself, but it is not our bug):\r\n\r\n\r\nLine # | New Process | Switch-In Time (s) | New Thread Id | New Thread Stack | Readying Process | Readying Thread Id | Count | Ready (µs) | Waits (µs) | % CPU Usage\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n251 |   | 14.516068200 |   | ntdll.dll!RtlUserThreadStart |   |   | 1 | 23.900 | 0.000 | 0.00\r\n252 |   | 14.516068200 |   | kernel32.dll!BaseThreadInitThunk |   |   | 1 | 23.900 | 0.000 | 0.00\r\n253 |   | 14.516068200 |   | clr.dll!Thread::intermediateThreadProc |   |   | 1 | 23.900 | 0.000 | 0.00\r\n254 |   | 14.516068200 |   | clr.dll!ThreadpoolMgr::WorkerThreadStart |   |   | 1 | 23.900 | 0.000 | 0.00\r\n255 |   | 14.516068200 |   | clr.dll!ThreadpoolMgr::UnfairSemaphore::Wait |   |   | 1 | 23.900 | 0.000 | 0.00\r\n256 |   | 14.516068200 |   | clr.dll!EESleepEx |   |   | 1 | 23.900 | 0.000 | 0.00\r\n257 |   | 14.516068200 |   | KernelBase.dll!SleepEx |   |   | 1 | 23.900 | 0.000 | 0.00\r\n258 |   | 14.516068200 |   | ntdll.dll!ZwDelayExecution |   |   | 1 | 23.900 | 0.000 | 0.00\r\n259 |   | 14.516068200 |   | ntoskrnl.exe!KiSystemServiceExitPico |   |   | 1 | 23.900 | 0.000 | 0.00\r\n260 |   | 14.516068200 |   | ntoskrnl.exe!NtDelayExecution |   |   | 1 | 23.900 | 0.000 | 0.00\r\n261 |   | 14.516068200 |   | ntoskrnl.exe!KeDelayExecutionThread |   |   | 1 | 23.900 | 0.000 | 0.00\r\n262 |   | 14.516068200 |   | ntoskrnl.exe!KiSwapContext |   |   | 1 | 23.900 | 0.000 | 0.00\r\n263 |   | 14.516068200 |   | ntoskrnl.exe!SwapContext |   |   | 1 | 23.900 | 0.000 | 0.00\r\n\r\n\r\nSo we need to filter all those out when using wpa.\r\n\r\nThe thread that actually accesses c:\\xxx.exe is 12816, which has just recently awoken from a 19 second wait!  This is its wakeup:\r\n\r\n\r\n\r\nLine # | New Process | New Thread Id | Switch-In Time (s) | New Thread Stack | Readying Thread Id | Ready Thread Stack | Count | Ready (µs) | Waits (µs) | % CPU Usage\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n1 | powershell.exe (18544) | 12816 |   |   |   |   | 3 | 479.300 | 19,095,187.100 | 0.00\r\n2 |   |   | 33.611416600 | [Root] |   |   | 1 | 13.000 | 19,095,187.100 | 0.00\r\n3 |   |   | 33.611416600 | ntdll.dll!RtlUserThreadStart |   |   | 1 | 13.000 | 19,095,187.100 | 0.00\r\n4 |   |   | 33.611416600 | kernel32.dll!BaseThreadInitThunk |   |   | 1 | 13.000 | 19,095,187.100 | 0.00\r\n5 |   |   | 33.611416600 | clr.dll!Thread::intermediateThreadProc |   |   | 1 | 13.000 | 19,095,187.100 | 0.00\r\n6 |   |   | 33.611416600 | clr.dll!ThreadpoolMgr::WorkerThreadStart |   |   | 1 | 13.000 | 19,095,187.100 | 0.00\r\n7 |   |   | 33.611416600 | clr.dll!ThreadpoolMgr::UnfairSemaphore::Wait |   |   | 1 | 13.000 | 19,095,187.100 | 0.00\r\n8 |   |   | 33.611416600 | clr.dll!CLRSemaphore::Wait |   |   | 1 | 13.000 | 19,095,187.100 | 0.00\r\n9 |   |   | 33.611416600 | KernelBase.dll!WaitForSingleObjectEx |   |   | 1 | 13.000 | 19,095,187.100 | 0.00\r\n10 |   |   | 33.611416600 | ntdll.dll!ZwWaitForSingleObject |   |   | 1 | 13.000 | 19,095,187.100 | 0.00\r\n11 |   |   | 33.611416600 | ntoskrnl.exe!KiSystemServiceExitPico |   |   | 1 | 13.000 | 19,095,187.100 | 0.00\r\n12 |   |   | 33.611416600 | ntoskrnl.exe!NtWaitForSingleObject |   |   | 1 | 13.000 | 19,095,187.100 | 0.00\r\n13 |   |   | 33.611416600 | ntoskrnl.exe!KeWaitForSingleObject |   |   | 1 | 13.000 | 19,095,187.100 | 0.00\r\n14 |   |   | 33.611416600 | ntoskrnl.exe!KiCommitThreadWait |   |   | 1 | 13.000 | 19,095,187.100 | 0.00\r\n15 |   |   | 33.611416600 | ntoskrnl.exe!KiSwapThread |   |   | 1 | 13.000 | 19,095,187.100 | 0.00\r\n16 |   |   | 33.611416600 | ntoskrnl.exe!KiSwapContext |   |   | 1 | 13.000 | 19,095,187.100 | 0.00\r\n17 |   |   | 33.611416600 | ntoskrnl.exe!SwapContext |   |   | 1 | 13.000 | 19,095,187.100 | 0.00\r\n18 |   |   | 33.611416600 |   | 11596 | [Root] | 1 | 13.000 | 19,095,187.100 | 0.00\r\n19 |   |   | 33.611416600 |   |   | ntdll.dll!RtlUserThreadStart | 1 | 13.000 | 19,095,187.100 | 0.00\r\n20 |   |   | 33.611416600 |   |   | kernel32.dll!BaseThreadInitThunk | 1 | 13.000 | 19,095,187.100 | 0.00\r\n21 |   |   | 33.611416600 |   |   | powershell.exe!__wmainCRTStartup | 1 | 13.000 | 19,095,187.100 | 0.00\r\n22 |   |   | 33.611416600 |   |   | powershell.exe!wmain | 1 | 13.000 | 19,095,187.100 | 0.00\r\n23 |   |   | 33.611416600 |   |   | powershell.exe!LaunchManagedMonad | 1 | 13.000 | 19,095,187.100 | 0.00\r\n24 |   |   | 33.611416600 |   |   | clr.dll!InternalDispatchImpl_Invoke_Wrapper | 1 | 13.000 | 19,095,187.100 | 0.00\r\n25 |   |   | 33.611416600 |   |   | clr.dll!InternalDispatchImpl_Invoke_CallBack | 1 | 13.000 | 19,095,187.100 | 0.00\r\n26 |   |   | 33.611416600 |   |   | clr.dll!InternalDispatchImpl_Invoke | 1 | 13.000 | 19,095,187.100 | 0.00\r\n27 |   |   | 33.611416600 |   |   | clr.dll!DispatchInfo::InvokeMember | 1 | 13.000 | 19,095,187.100 | 0.00\r\n28 |   |   | 33.611416600 |   |   | clr.dll!DispatchInfo::InvokeMemberDebuggerWrapper | 1 | 13.000 | 19,095,187.100 | 0.00\r\n29 |   |   | 33.611416600 |   |   | clr.dll!DispatchInfo::InvokeMemberWorker | 1 | 13.000 | 19,095,187.100 | 0.00\r\n30 |   |   | 33.611416600 |   |   | clr.dll!MethodDescCallSite::CallTargetWorker | 1 | 13.000 | 19,095,187.100 | 0.00\r\n31 |   |   | 33.611416600 |   |   | clr.dll!CallDescrWorkerWithHandler | 1 | 13.000 | 19,095,187.100 | 0.00\r\n32 |   |   | 33.611416600 |   |   | clr.dll!CallDescrWorkerInternal | 1 | 13.000 | 19,095,187.100 | 0.00\r\n33 |   |   | 33.611416600 |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 13.000 | 19,095,187.100 | 0.00\r\n34 |   |   | 33.611416600 |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 13.000 | 19,095,187.100 | 0.00\r\n35 |   |   | 33.611416600 |   |   | clr.dll!RuntimeMethodHandle::InvokeMethod | 1 | 13.000 | 19,095,187.100 | 0.00\r\n36 |   |   | 33.611416600 |   |   | clr.dll!CallDescrWorkerReflectionWrapper | 1 | 13.000 | 19,095,187.100 | 0.00\r\n37 |   |   | 33.611416600 |   |   | clr.dll!CallDescrWorkerWithHandler | 1 | 13.000 | 19,095,187.100 | 0.00\r\n38 |   |   | 33.611416600 |   |   | clr.dll!CallDescrWorkerInternal | 1 | 13.000 | 19,095,187.100 | 0.00\r\n39 |   |   | 33.611416600 |   |   | Microsoft.PowerShell.ConsoleHost.ni.dll!<PDB not   found> | 1 | 13.000 | 19,095,187.100 | 0.00\r\n40 |   |   | 33.611416600 |   |   | Microsoft.PowerShell.ConsoleHost.ni.dll!<PDB not   found> | 1 | 13.000 | 19,095,187.100 | 0.00\r\n41 |   |   | 33.611416600 |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.000 | 19,095,187.100 | 0.00\r\n42 |   |   | 33.611416600 |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.000 | 19,095,187.100 | 0.00\r\n43 |   |   | 33.611416600 |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.000 | 19,095,187.100 | 0.00\r\n44 |   |   | 33.611416600 |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 13.000 | 19,095,187.100 | 0.00\r\n45 |   |   | 33.611416600 |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 13.000 | 19,095,187.100 | 0.00\r\n46 |   |   | 33.611416600 |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 13.000 | 19,095,187.100 | 0.00\r\n47 |   |   | 33.611416600 |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 13.000 | 19,095,187.100 | 0.00\r\n48 |   |   | 33.611416600 |   |   | clr.dll!ThreadPoolNative::RequestWorkerThread | 1 | 13.000 | 19,095,187.100 | 0.00\r\n49 |   |   | 33.611416600 |   |   | clr.dll!ThreadpoolMgr::SetAppDomainRequestsActive | 1 | 13.000 | 19,095,187.100 | 0.00\r\n50 |   |   | 33.611416600 |   |   | clr.dll!ManagedPerAppDomainTPCount::SetAppDomainRequestsActive | 1 | 13.000 | 19,095,187.100 | 0.00\r\n51 |   |   | 33.611416600 |   |   | clr.dll!ThreadpoolMgr::MaybeAddWorkingWorker | 1 | 13.000 | 19,095,187.100 | 0.00\r\n52 |   |   | 33.611416600 |   |   | clr.dll!ThreadpoolMgr::UnfairSemaphore::Release | 1 | 13.000 | 19,095,187.100 | 0.00\r\n53 |   |   | 33.611416600 |   |   | clr.dll!CLRSemaphore::Release | 1 | 13.000 | 19,095,187.100 | 0.00\r\n54 |   |   | 33.611416600 |   |   | KernelBase.dll!ReleaseSemaphore | 1 | 13.000 | 19,095,187.100 | 0.00\r\n55 |   |   | 33.611416600 |   |   | ntdll.dll!ZwReleaseSemaphore | 1 | 13.000 | 19,095,187.100 | 0.00\r\n56 |   |   | 33.611416600 |   |   | ntoskrnl.exe!KiSystemServiceExitPico | 1 | 13.000 | 19,095,187.100 | 0.00\r\n57 |   |   | 33.611416600 |   |   | ntoskrnl.exe!NtReleaseSemaphore | 1 | 13.000 | 19,095,187.100 | 0.00\r\n58 |   |   | 33.611416600 |   |   | ntoskrnl.exe!KeReleaseSemaphore | 1 | 13.000 | 19,095,187.100 | 0.00\r\n59 |   |   | 33.611416600 |   |   | ntoskrnl.exe!KiExitDispatcher | 1 | 13.000 | 19,095,187.100 | 0.00\r\n\r\n\r\nThread 11596 was holding the semaphore this whole time, it seems!\r\n\r\nAnd thread 11596 in the child powershell, in turn, had been waiting for 19 seconds for the parent powershell to write to a named pipe:\r\n\r\n\r\n\r\nLine # | New Thread Id | New Process | Switch-In Time (s) | New Thread Stack | Readying Process | Readying Thread Id | Ready Thread Stack | Count | Ready (µs) | Waits (µs) | % CPU Usage\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n1 | 11596 | powershell.exe (18544) |   |   |   |   |   | 4 | 13.900 | 19,533,237.300 | 0.00\r\n2 |   |   | 33.611308700 | [Root] |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n3 |   |   | 33.611308700 | ntdll.dll!RtlUserThreadStart |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n4 |   |   | 33.611308700 | kernel32.dll!BaseThreadInitThunk |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n5 |   |   | 33.611308700 | powershell.exe!__wmainCRTStartup |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n6 |   |   | 33.611308700 | powershell.exe!wmain |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n7 |   |   | 33.611308700 | powershell.exe!LaunchManagedMonad |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n8 |   |   | 33.611308700 | clr.dll!InternalDispatchImpl_Invoke_Wrapper |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n9 |   |   | 33.611308700 | clr.dll!InternalDispatchImpl_Invoke_CallBack |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n10 |   |   | 33.611308700 | clr.dll!InternalDispatchImpl_Invoke |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n11 |   |   | 33.611308700 | clr.dll!DispatchInfo::InvokeMember |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n12 |   |   | 33.611308700 | clr.dll!DispatchInfo::InvokeMemberDebuggerWrapper |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n13 |   |   | 33.611308700 | clr.dll!DispatchInfo::InvokeMemberWorker |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n14 |   |   | 33.611308700 | clr.dll!MethodDescCallSite::CallTargetWorker |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n15 |   |   | 33.611308700 | clr.dll!CallDescrWorkerWithHandler |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n16 |   |   | 33.611308700 | clr.dll!CallDescrWorkerInternal |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n17 |   |   | 33.611308700 | mscorlib.ni.dll!<PDB not found> |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n18 |   |   | 33.611308700 | mscorlib.ni.dll!<PDB not found> |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n19 |   |   | 33.611308700 | clr.dll!RuntimeMethodHandle::InvokeMethod |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n20 |   |   | 33.611308700 | clr.dll!CallDescrWorkerReflectionWrapper |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n21 |   |   | 33.611308700 | clr.dll!CallDescrWorkerWithHandler |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n22 |   |   | 33.611308700 | clr.dll!CallDescrWorkerInternal |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n23 |   |   | 33.611308700 | Microsoft.PowerShell.ConsoleHost.ni.dll!<PDB not   found> |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n24 |   |   | 33.611308700 | Microsoft.PowerShell.ConsoleHost.ni.dll!<PDB not   found> |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n25 |   |   | 33.611308700 | System.Management.Automation.ni.dll!<PDB not   found> |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n26 |   |   | 33.611308700 | System.Management.Automation.ni.dll!<PDB not   found> |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n27 |   |   | 33.611308700 | mscorlib.ni.dll!<PDB not found> |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n28 |   |   | 33.611308700 | mscorlib.ni.dll!<PDB not found> |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n29 |   |   | 33.611308700 | mscorlib.ni.dll!<PDB not found> |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n30 |   |   | 33.611308700 | mscorlib.ni.dll!<PDB not found> |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n31 |   |   | 33.611308700 | mscorlib.ni.dll!<PDB not found> |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n32 |   |   | 33.611308700 | KernelBase.dll!ReadFile |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n33 |   |   | 33.611308700 | ntdll.dll!ZwReadFile |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n34 |   |   | 33.611308700 | ntoskrnl.exe!KiSystemServiceExitPico |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n35 |   |   | 33.611308700 | ntoskrnl.exe!NtReadFile |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n36 |   |   | 33.611308700 | ntoskrnl.exe!IopSynchronousServiceTail |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n37 |   |   | 33.611308700 | ntoskrnl.exe!KeWaitForSingleObject |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n38 |   |   | 33.611308700 | ntoskrnl.exe!KiCommitThreadWait |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n39 |   |   | 33.611308700 | ntoskrnl.exe!KiSwapThread |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n40 |   |   | 33.611308700 | ntoskrnl.exe!KiSwapContext |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n41 |   |   | 33.611308700 | ntoskrnl.exe!SwapContext |   |   |   | 1 | 13.200 | 19,533,237.300 | 0.00\r\n42 |   |   | 33.611308700 |   | powershell.exe   (10300) | 5396 | [Root] | 1 | 13.200 | 19,533,237.300 | 0.00\r\n43 |   |   | 33.611308700 |   |   |   | ntdll.dll!RtlUserThreadStart | 1 | 13.200 | 19,533,237.300 | 0.00\r\n44 |   |   | 33.611308700 |   |   |   | kernel32.dll!BaseThreadInitThunk | 1 | 13.200 | 19,533,237.300 | 0.00\r\n45 |   |   | 33.611308700 |   |   |   | clr.dll!Thread::intermediateThreadProc | 1 | 13.200 | 19,533,237.300 | 0.00\r\n46 |   |   | 33.611308700 |   |   |   | clr.dll!ThreadpoolMgr::WorkerThreadStart | 1 | 13.200 | 19,533,237.300 | 0.00\r\n47 |   |   | 33.611308700 |   |   |   | clr.dll!ThreadpoolMgr::ExecuteWorkRequest | 1 | 13.200 | 19,533,237.300 | 0.00\r\n48 |   |   | 33.611308700 |   |   |   | clr.dll!ManagedPerAppDomainTPCount::DispatchWorkItem | 1 | 13.200 | 19,533,237.300 | 0.00\r\n49 |   |   | 33.611308700 |   |   |   | clr.dll!ManagedThreadBase_FullTransitionWithAD | 1 | 13.200 | 19,533,237.300 | 0.00\r\n50 |   |   | 33.611308700 |   |   |   | clr.dll!ManagedThreadBase_DispatchOuter | 1 | 13.200 | 19,533,237.300 | 0.00\r\n51 |   |   | 33.611308700 |   |   |   | clr.dll!ManagedThreadBase_DispatchMiddle | 1 | 13.200 | 19,533,237.300 | 0.00\r\n52 |   |   | 33.611308700 |   |   |   | clr.dll!ManagedThreadBase_DispatchInner | 1 | 13.200 | 19,533,237.300 | 0.00\r\n53 |   |   | 33.611308700 |   |   |   | clr.dll!QueueUserWorkItemManagedCallback | 1 | 13.200 | 19,533,237.300 | 0.00\r\n54 |   |   | 33.611308700 |   |   |   | clr.dll!MethodDescCallSite::CallTargetWorker | 1 | 13.200 | 19,533,237.300 | 0.00\r\n55 |   |   | 33.611308700 |   |   |   | clr.dll!CallDescrWorkerWithHandler | 1 | 13.200 | 19,533,237.300 | 0.00\r\n56 |   |   | 33.611308700 |   |   |   | clr.dll!CallDescrWorkerInternal | 1 | 13.200 | 19,533,237.300 | 0.00\r\n57 |   |   | 33.611308700 |   |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n58 |   |   | 33.611308700 |   |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n59 |   |   | 33.611308700 |   |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n60 |   |   | 33.611308700 |   |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n61 |   |   | 33.611308700 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n62 |   |   | 33.611308700 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n63 |   |   | 33.611308700 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n64 |   |   | 33.611308700 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n65 |   |   | 33.611308700 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n66 |   |   | 33.611308700 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n67 |   |   | 33.611308700 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n68 |   |   | 33.611308700 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n69 |   |   | 33.611308700 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n70 |   |   | 33.611308700 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n71 |   |   | 33.611308700 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n72 |   |   | 33.611308700 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n73 |   |   | 33.611308700 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n74 |   |   | 33.611308700 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n75 |   |   | 33.611308700 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n76 |   |   | 33.611308700 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n77 |   |   | 33.611308700 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n78 |   |   | 33.611308700 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n79 |   |   | 33.611308700 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n80 |   |   | 33.611308700 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n81 |   |   | 33.611308700 |   |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n82 |   |   | 33.611308700 |   |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n83 |   |   | 33.611308700 |   |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n84 |   |   | 33.611308700 |   |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n85 |   |   | 33.611308700 |   |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n86 |   |   | 33.611308700 |   |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n87 |   |   | 33.611308700 |   |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 13.200 | 19,533,237.300 | 0.00\r\n88 |   |   | 33.611308700 |   |   |   | KernelBase.dll!WriteFile | 1 | 13.200 | 19,533,237.300 | 0.00\r\n89 |   |   | 33.611308700 |   |   |   | ntdll.dll!ZwWriteFile | 1 | 13.200 | 19,533,237.300 | 0.00\r\n90 |   |   | 33.611308700 |   |   |   | ntoskrnl.exe!KiSystemServiceExitPico | 1 | 13.200 | 19,533,237.300 | 0.00\r\n91 |   |   | 33.611308700 |   |   |   | ntoskrnl.exe!NtWriteFile | 1 | 13.200 | 19,533,237.300 | 0.00\r\n92 |   |   | 33.611308700 |   |   |   | FLTMGR.SYS!FltpFastIoWrite | 1 | 13.200 | 19,533,237.300 | 0.00\r\n93 |   |   | 33.611308700 |   |   |   | FLTMGR.SYS!FltpPerformFastIoCall | 1 | 13.200 | 19,533,237.300 | 0.00\r\n94 |   |   | 33.611308700 |   |   |   | Npfs.SYS!NpFastWrite | 1 | 13.200 | 19,533,237.300 | 0.00\r\n95 |   |   | 33.611308700 |   |   |   | ntoskrnl.exe!IofCompleteRequest | 1 | 13.200 | 19,533,237.300 | 0.00\r\n96 |   |   | 33.611308700 |   |   |   | ntoskrnl.exe!IopfCompleteRequest | 1 | 13.200 | 19,533,237.300 | 0.00\r\n97 |   |   | 33.611308700 |   |   |   | ntoskrnl.exe!KiExitDispatcher | 1 | 13.200 | 19,533,237.300 | 0.00\r\n\r\n\r\nCould you possibly give me any idea why the parent powershell (10300, 5396) would be writing to a named pipe opened by the child powershell?\r\n\r\nIt seems the child is waiting 19 seconds for this write, and only then the child will actually start its job work (opening c:\\xxx.exe in this trace -- I replaced \"$false\" with \"c:\\xxx.exe\").\r\n\r\nWhat is weirder, is the parent powershell thread (10300, 5396) had just recently itself woken from a 10 second sleep waiting on a write to a named pipe from a different child process!\r\n\r\nSo there is no way the parent powershell thread could have been prompt signaling the child process above!!!\r\n\r\nThis seems to be the issue -- powershell has blocking tasks using a limited thread pool (that likely only has on the order of 4-6 threads on our systems!).\r\n\r\n\r\n\r\nLine # | New Thread Id | New Process | Switch-In Time (s) | New Thread Stack | Readying Process | Readying Thread Id | Ready Thread Stack | Count | Ready (µs) | Waits (µs) | % CPU Usage\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n1 | 5396 | powershell.exe   (10300) |   |   |   |   |   | 188 | 60,911.700 | 14,972,274.300 | 0.02\r\n132 |   |   | 33.575797000 | [Root] |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n133 |   |   | 33.575797000 | ntdll.dll!RtlUserThreadStart |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n134 |   |   | 33.575797000 | kernel32.dll!BaseThreadInitThunk |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n135 |   |   | 33.575797000 | clr.dll!Thread::intermediateThreadProc |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n136 |   |   | 33.575797000 | clr.dll!ThreadpoolMgr::WorkerThreadStart |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n137 |   |   | 33.575797000 | clr.dll!ThreadpoolMgr::ExecuteWorkRequest |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n138 |   |   | 33.575797000 | clr.dll!ManagedPerAppDomainTPCount::DispatchWorkItem |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n139 |   |   | 33.575797000 | clr.dll!ManagedThreadBase_FullTransitionWithAD |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n140 |   |   | 33.575797000 | clr.dll!ManagedThreadBase_DispatchOuter |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n141 |   |   | 33.575797000 | clr.dll!ManagedThreadBase_DispatchMiddle |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n142 |   |   | 33.575797000 | clr.dll!ManagedThreadBase_DispatchInner |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n143 |   |   | 33.575797000 | clr.dll!QueueUserWorkItemManagedCallback |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n144 |   |   | 33.575797000 | clr.dll!MethodDescCallSite::CallTargetWorker |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n145 |   |   | 33.575797000 | clr.dll!CallDescrWorkerWithHandler |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n146 |   |   | 33.575797000 | clr.dll!CallDescrWorkerInternal |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n147 |   |   | 33.575797000 | mscorlib.ni.dll!<PDB not found> |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n148 |   |   | 33.575797000 | mscorlib.ni.dll!<PDB not found> |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n149 |   |   | 33.575797000 | mscorlib.ni.dll!<PDB not found> |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n150 |   |   | 33.575797000 | mscorlib.ni.dll!<PDB not found> |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n151 |   |   | 33.575797000 | mscorlib.ni.dll!<PDB not found> |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n152 |   |   | 33.575797000 | mscorlib.ni.dll!<PDB not found> |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n153 |   |   | 33.575797000 | mscorlib.ni.dll!<PDB not found> |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n154 |   |   | 33.575797000 | mscorlib.ni.dll!<PDB not found> |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n155 |   |   | 33.575797000 | mscorlib.ni.dll!<PDB not found> |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n156 |   |   | 33.575797000 | mscorlib.ni.dll!<PDB not found> |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n157 |   |   | 33.575797000 | mscorlib.ni.dll!<PDB not found> |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n158 |   |   | 33.575797000 | mscorlib.ni.dll!<PDB not found> |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n159 |   |   | 33.575797000 | KernelBase.dll!ReadFile |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n160 |   |   | 33.575797000 | ntdll.dll!ZwReadFile |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n161 |   |   | 33.575797000 | ntoskrnl.exe!KiSystemServiceExitPico |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n162 |   |   | 33.575797000 | ntoskrnl.exe!NtReadFile |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n163 |   |   | 33.575797000 | ntoskrnl.exe!IopSynchronousServiceTail |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n164 |   |   | 33.575797000 | ntoskrnl.exe!KeWaitForSingleObject |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n165 |   |   | 33.575797000 | ntoskrnl.exe!KiCommitThreadWait |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n166 |   |   | 33.575797000 | ntoskrnl.exe!KiSwapThread |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n167 |   |   | 33.575797000 | ntoskrnl.exe!KiSwapContext |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n168 |   |   | 33.575797000 | ntoskrnl.exe!SwapContext |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n169 |   |   | 33.575797000 |   | powershell.exe   (4552) | 20584 | [Root] | 1 | 12.100 | 10,487,552.400 | 0.00\r\n170 |   |   | 33.575797000 |   |   |   | ntdll.dll!RtlUserThreadStart | 1 | 12.100 | 10,487,552.400 | 0.00\r\n171 |   |   | 33.575797000 |   |   |   | kernel32.dll!BaseThreadInitThunk | 1 | 12.100 | 10,487,552.400 | 0.00\r\n172 |   |   | 33.575797000 |   |   |   | clr.dll!Thread::intermediateThreadProc | 1 | 12.100 | 10,487,552.400 | 0.00\r\n173 |   |   | 33.575797000 |   |   |   | clr.dll!ThreadpoolMgr::WorkerThreadStart | 1 | 12.100 | 10,487,552.400 | 0.00\r\n174 |   |   | 33.575797000 |   |   |   | clr.dll!ThreadpoolMgr::ExecuteWorkRequest | 1 | 12.100 | 10,487,552.400 | 0.00\r\n175 |   |   | 33.575797000 |   |   |   | clr.dll!ManagedPerAppDomainTPCount::DispatchWorkItem | 1 | 12.100 | 10,487,552.400 | 0.00\r\n176 |   |   | 33.575797000 |   |   |   | clr.dll!ManagedThreadBase_FullTransitionWithAD | 1 | 12.100 | 10,487,552.400 | 0.00\r\n177 |   |   | 33.575797000 |   |   |   | clr.dll!ManagedThreadBase_DispatchOuter | 1 | 12.100 | 10,487,552.400 | 0.00\r\n178 |   |   | 33.575797000 |   |   |   | clr.dll!ManagedThreadBase_DispatchMiddle | 1 | 12.100 | 10,487,552.400 | 0.00\r\n179 |   |   | 33.575797000 |   |   |   | clr.dll!ManagedThreadBase_DispatchInner | 1 | 12.100 | 10,487,552.400 | 0.00\r\n180 |   |   | 33.575797000 |   |   |   | clr.dll!QueueUserWorkItemManagedCallback | 1 | 12.100 | 10,487,552.400 | 0.00\r\n181 |   |   | 33.575797000 |   |   |   | clr.dll!MethodDescCallSite::CallTargetWorker | 1 | 12.100 | 10,487,552.400 | 0.00\r\n182 |   |   | 33.575797000 |   |   |   | clr.dll!CallDescrWorkerWithHandler | 1 | 12.100 | 10,487,552.400 | 0.00\r\n183 |   |   | 33.575797000 |   |   |   | clr.dll!CallDescrWorkerInternal | 1 | 12.100 | 10,487,552.400 | 0.00\r\n184 |   |   | 33.575797000 |   |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 12.100 | 10,487,552.400 | 0.00\r\n185 |   |   | 33.575797000 |   |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 12.100 | 10,487,552.400 | 0.00\r\n186 |   |   | 33.575797000 |   |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 12.100 | 10,487,552.400 | 0.00\r\n187 |   |   | 33.575797000 |   |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 12.100 | 10,487,552.400 | 0.00\r\n188 |   |   | 33.575797000 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 12.100 | 10,487,552.400 | 0.00\r\n189 |   |   | 33.575797000 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 12.100 | 10,487,552.400 | 0.00\r\n190 |   |   | 33.575797000 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 12.100 | 10,487,552.400 | 0.00\r\n191 |   |   | 33.575797000 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 12.100 | 10,487,552.400 | 0.00\r\n192 |   |   | 33.575797000 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 12.100 | 10,487,552.400 | 0.00\r\n193 |   |   | 33.575797000 |   |   |   | System.Management.Automation.ni.dll!<PDB not   found> | 1 | 12.100 | 10,487,552.400 | 0.00\r\n194 |   |   | 33.575797000 |   |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 12.100 | 10,487,552.400 | 0.00\r\n195 |   |   | 33.575797000 |   |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 12.100 | 10,487,552.400 | 0.00\r\n196 |   |   | 33.575797000 |   |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 12.100 | 10,487,552.400 | 0.00\r\n197 |   |   | 33.575797000 |   |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 12.100 | 10,487,552.400 | 0.00\r\n198 |   |   | 33.575797000 |   |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 12.100 | 10,487,552.400 | 0.00\r\n199 |   |   | 33.575797000 |   |   |   | mscorlib.ni.dll!<PDB not found> | 1 | 12.100 | 10,487,552.400 | 0.00\r\n200 |   |   | 33.575797000 |   |   |   | KernelBase.dll!WriteFile | 1 | 12.100 | 10,487,552.400 | 0.00\r\n201 |   |   | 33.575797000 |   |   |   | ntdll.dll!ZwWriteFile | 1 | 12.100 | 10,487,552.400 | 0.00\r\n202 |   |   | 33.575797000 |   |   |   | ntoskrnl.exe!KiSystemServiceExitPico | 1 | 12.100 | 10,487,552.400 | 0.00\r\n203 |   |   | 33.575797000 |   |   |   | ntoskrnl.exe!NtWriteFile | 1 | 12.100 | 10,487,552.400 | 0.00\r\n204 |   |   | 33.575797000 |   |   |   | FLTMGR.SYS!FltpFastIoWrite | 1 | 12.100 | 10,487,552.400 | 0.00\r\n205 |   |   | 33.575797000 |   |   |   | FLTMGR.SYS!FltpPerformFastIoCall | 1 | 12.100 | 10,487,552.400 | 0.00\r\n206 |   |   | 33.575797000 |   |   |   | Npfs.SYS!NpFastWrite | 1 | 12.100 | 10,487,552.400 | 0.00\r\n207 |   |   | 33.575797000 |   |   |   | ntoskrnl.exe!IofCompleteRequest | 1 | 12.100 | 10,487,552.400 | 0.00\r\n208 |   |   | 33.575797000 |   |   |   | ntoskrnl.exe!IopfCompleteRequest | 1 | 12.100 | 10,487,552.400 | 0.00\r\n209 |   |   | 33.575797000 |   |   |   | ntoskrnl.exe!KiExitDispatcher | 1 | 12.100 | 10,487,552.400 | 0.00\r\n210 |   |   | 33.575797000 |   |   |   |   | 1 | 12.100 | 10,487,552.400 | 0.00\r\n\r\n\r\nIt we look at the worker threads in both the parent powershell (10300), and the children powershells, we can see the thread pools slowly adding threads until the deadlock is broken!!!\r\n\r\nNotice each powershell gets 4 worker threads to begin with, in green.\r\n\r\nThen the parent and children start ping-ponging back and forth trying to make progress, while lots of calls are stuck reading from the named pipes!\r\n\r\nThey slowly grow their thread pools, in teal.\r\n\r\n\r\n\r\nLine # | New Process | New Thread Id | Switch-In Time (s) | Count | Ready (µs) | Waits (µs) | % CPU Usage\r\n-- | -- | -- | -- | -- | -- | -- | --\r\n1 | powershell.exe (10300) |   | 0.420658600 | 1756 | 68,080.100 | 33,155,652.800 | 0.15\r\n2 |   | 15172 | 0.420658600 | 188 | 52,156.700 | 33,155,652.800 | 0.01\r\n3 |   | 5396 | 0.421009000 | 185 | 60,911.700 | 14,972,274.300 | 0.02\r\n4 |   | 10988 | 0.423323900 | 126 | 60,771.200 | 33,114,942.400 | 0.01\r\n5 |   | 11196 | 0.423577800 | 229 | 51,997.500 | 14,468,807.100 | 0.02\r\n6 |   | 16648 | 8.073045400 | 20 | 36,961.400 | 14,991,243.900 | 0.00\r\n7 |   | 15372 | 13.126511000 | 62 | 43,214.700 | 16,459,406.800 | 0.01\r\n8 |   | 4880 | 19.069705800 | 25 | 621.800 | 11,503,918.600 | 0.01\r\n9 |   | 10080 | 23.065956500 | 37 | 36,785.400 | 9,509,707.300 | 0.01\r\n10 |   | 2292 | 24.068922800 | 42 | 43,012.600 | 9,511,462.100 | 0.01\r\n11 |   | 17856 | 27.578991200 | 233 | 36,883.900 | 6,031,377.400 | 0.01\r\n12 |   | 19648 | 30.564375500 | 24 | 68,080.100 | 4,008,105.100 | 0.00\r\n13 |   | 19272 | 30.565023300 | 20 | 60,584.600 | 14,486,609.100 | 0.00\r\n14 |   | 23436 | 30.574434200 | 53 | 43,634.800 | 13,509,866.600 | 0.01\r\n15 |   | 21932 | 31.573278400 | 48 | 36,574.200 | 10,496,899.400 | 0.01\r\n16 |   | 21116 | 33.636043000 | 33 | 44,993.900 | 7,561,225.100 | 0.01\r\n17 |   | 22624 | 34.571503300 | 58 | 60,086.000 | 0.000 | 0.00\r\n18 |   | 19148 | 34.572190600 | 31 | 48,808.300 | 4,985,619.600 | 0.00\r\n19 |   | 1696 | 34.577699400 | 26 | 49,029.000 | 3,007,711.600 | 0.00\r\n20 |   | 10596 | 34.578177700 | 13 | 49,468.900 | 2,004,739.400 | 0.00\r\n21 |   | 2608 | 34.578218300 | 15 | 58,259.300 | 1,000,024.500 | 0.00\r\n22 |   | 5896 | 34.725669100 | 13 | 44,782.300 | 7,649,402.700 | 0.00\r\n23 |   | 6976 | 34.753137800 | 19 | 43,013.400 | 9,682,528.100 | 0.00\r\n24 |   | 19840 | 34.771297300 | 22 | 37,818.500 | 12,693,052.600 | 0.00\r\n25 |   | 15316 | 34.775245600 | 29 | 43,678.300 | 16,708,601.000 | 0.00\r\n26 |   | 16076 | 34.776745700 | 30 | 43,220.700 | 19,698,598.400 | 0.00\r\n27 |   | 10608 | 34.842859000 | 71 | 42,690.800 | 14,770,391.500 | 0.00\r\n28 |   | 21020 | 34.858426600 | 104 | 36,577.200 | 6,276,214.000 | 0.00\r\n29 | powershell.exe (4552) |   | 1.089180200 | 3642 | 56,915.000 | 20,005,878.000 | 0.90\r\n30 |   | 20584 | 1.089180200 | 1473 | 30,244.700 | 14,506,361.000 | 0.46\r\n31 |   | 12396 | 1.090133600 | 849 | 56,915.000 | 19,997,445.900 | 0.20\r\n32 |   | 5644 | 1.092526200 | 712 | 30,120.600 | 20,005,878.000 | 0.18\r\n33 |   | 12324 | 1.110159300 | 608 | 34,018.100 | 14,769,277.500 | 0.06\r\n34 | powershell.exe (7668) |   | 2.426267300 | 4226 | 34,876.800 | 14,482,255.000 | 0.90\r\n35 |   | 5440 | 2.426267300 | 1419 | 20,971.400 | 14,474,065.600 | 0.41\r\n36 |   | 13496 | 2.436236000 | 675 | 34,818.600 | 14,482,255.000 | 0.21\r\n37 |   | 23168 | 2.444223000 | 642 | 34,876.800 | 14,469,553.700 | 0.07\r\n38 |   | 19980 | 2.453957800 | 1490 | 34,823.900 | 14,472,431.800 | 0.21\r\n39 | powershell.exe (12688) |   | 3.855834200 | 3581 | 60,173.500 | 20,014,413.600 | 0.88\r\n40 |   | 17404 | 3.855834200 | 1120 | 19,403.500 | 20,003,945.100 | 0.41\r\n41 |   | 13280 | 3.900124300 | 604 | 40,092.800 | 20,003,262.200 | 0.19\r\n42 |   | 18972 | 3.923708800 | 1186 | 30,556.800 | 20,011,644.600 | 0.20\r\n43 |   | 14312 | 3.985540200 | 605 | 37,782.500 | 20,014,413.600 | 0.06\r\n44 |   | 11380 | 29.590410300 | 48 | 36,462.900 | 4,974,501.400 | 0.01\r\n45 |   | 18288 | 29.590437500 | 5 | 169.300 | 1,276.600 | 0.01\r\n46 |   | 22212 | 29.596775400 | 13 | 60,173.500 | 4,964,916.800 | 0.00\r\n47 | powershell.exe (13860) |   | 5.189127500 | 3548 | 55,943.100 | 20,006,347.700 | 0.89\r\n48 |   | 4540 | 5.189127500 | 1351 | 20,589.000 | 20,000,245.100 | 0.41\r\n49 |   | 6996 | 5.190163500 | 892 | 28,486.100 | 19,997,241.900 | 0.36\r\n50 |   | 3632 | 5.200365800 | 429 | 28,529.600 | 20,006,080.200 | 0.02\r\n51 |   | 7080 | 5.200498900 | 437 | 26,289.500 | 20,006,347.700 | 0.05\r\n52 |   | 13052 | 30.575804900 | 136 | 9,591.300 | 3.900 | 0.01\r\n53 |   | 17864 | 30.582149400 | 76 | 39,753.000 | 3,953,391.300 | 0.02\r\n54 |   | 12212 | 30.595325000 | 76 | 55,943.100 | 3,952,152.600 | 0.00\r\n55 |   | 21828 | 30.609519000 | 151 | 1,010.400 | 0.000 | 0.00\r\n56 | powershell.exe (7048) |   | 6.475105100 | 4425 | 62,012.900 | 20,009,790.000 | 0.91\r\n57 |   | 4140 | 6.475105100 | 1343 | 13,570.200 | 20,002,641.800 | 0.43\r\n58 |   | 15280 | 6.506993600 | 682 | 27,312.100 | 19,996,060.700 | 0.07\r\n59 |   | 9436 | 6.510695500 | 805 | 27,285.000 | 20,007,343.000 | 0.20\r\n60 |   | 11528 | 6.560950900 | 1137 | 12,886.100 | 20,009,790.000 | 0.18\r\n61 |   | 8896 | 30.574623600 | 96 | 62,012.900 | 3,948,821.400 | 0.02\r\n62 |   | 23028 | 30.594669900 | 90 | 39,989.000 | 3,950,226.900 | 0.01\r\n63 |   | 19208 | 30.596124700 | 164 | 5,459.700 | 0.000 | 0.00\r\n64 |   | 22068 | 30.597052600 | 108 | 40,027.700 | 4,025,926.900 | 0.00\r\n65 | powershell.exe (10056) |   | 7.828373100 | 3150 | 68,117.500 | 20,004,205.400 | 0.88\r\n66 |   | 7680 | 7.828373100 | 1127 | 33,318.100 | 19,998,758.000 | 0.41\r\n67 |   | 14020 | 7.828401900 | 643 | 60,934.600 | 19,994,966.200 | 0.24\r\n68 |   | 22880 | 7.836492300 | 293 | 58,791.700 | 20,004,205.400 | 0.01\r\n69 |   | 3268 | 7.836600300 | 980 | 58,882.800 | 20,002,736.400 | 0.18\r\n70 |   | 19792 | 31.573571700 | 23 | 68,117.500 | 2,982,617.500 | 0.01\r\n71 |   | 9292 | 31.573599500 | 60 | 44,001.100 | 2,994,550.100 | 0.02\r\n72 |   | 22636 | 31.590702600 | 24 | 832.700 | 3,097,816.700 | 0.01\r\n73 | powershell.exe (18232) |   | 9.089165300 | 5246 | 79,574.300 | 20,018,972.300 | 0.92\r\n74 |   | 8396 | 9.089165300 | 1145 | 79,574.300 | 20,000,395.100 | 0.24\r\n75 |   | 17628 | 9.090100000 | 1772 | 43,805.000 | 20,007,029.000 | 0.42\r\n76 |   | 5484 | 9.099732300 | 449 | 79,397.000 | 20,008,596.400 | 0.02\r\n77 |   | 916 | 9.107255600 | 1470 | 49,167.300 | 20,018,972.300 | 0.20\r\n78 |   | 19316 | 32.577481100 | 91 | 58,304.200 | 1,976,679.900 | 0.03\r\n79 |   | 11456 | 32.577921400 | 206 | 67,939.300 | 1,978,535.500 | 0.00\r\n80 |   | 3896 | 32.585216400 | 113 | 63,103.300 | 2,014,736.200 | 0.00\r\n81 | powershell.exe (16820) |   | 10.760492500 | 3838 | 67,815.600 | 20,013,499.500 | 0.86\r\n82 |   | 16444 | 10.760492500 | 1147 | 26,830.000 | 20,010,635.700 | 0.38\r\n83 |   | 12832 | 10.779058300 | 1235 | 11,505.300 | 20,013,499.500 | 0.37\r\n84 |   | 12148 | 10.828990800 | 317 | 43,789.500 | 20,002,151.000 | 0.02\r\n85 |   | 21448 | 10.838265000 | 668 | 25,076.700 | 20,000,178.700 | 0.05\r\n86 |   | 17008 | 33.584340100 | 106 | 67,815.600 | 929,435.600 | 0.00\r\n87 |   | 6940 | 33.584482600 | 150 | 46,815.100 | 918,478.700 | 0.03\r\n88 |   | 22084 | 33.597786600 | 215 | 46,703.100 | 948,137.000 | 0.00\r\n89 | powershell.exe (22060) |   | 12.209247300 | 4301 | 64,406.100 | 20,012,003.500 | 0.88\r\n90 |   | 2960 | 12.209247300 | 1276 | 60,521.200 | 19,993,259.800 | 0.43\r\n91 |   | 13724 | 12.213388700 | 703 | 64,396.900 | 20,005,305.200 | 0.06\r\n92 |   | 19168 | 12.221495500 | 739 | 64,406.100 | 20,007,111.200 | 0.18\r\n93 |   | 13432 | 12.226942000 | 1236 | 23,247.400 | 20,012,003.500 | 0.19\r\n94 |   | 15920 | 33.634005900 | 113 | 48,017.000 | 916,136.200 | 0.01\r\n95 |   | 12440 | 33.637295400 | 78 | 46,993.100 | 920,273.800 | 0.00\r\n96 |   | 12516 | 33.640861000 | 156 | 3,916.100 | 931,911.200 | 0.02\r\n97 | powershell.exe (18544) |   | 13.610125000 | 3055 | 68,074.800 | 19,095,187.100 | 0.83\r\n98 |   | 12816 | 13.610125000 | 849 | 60,873.700 | 19,095,187.100 | 0.35\r\n99 |   | 2496 | 13.611820500 | 558 | 68,074.800 | 19,083,736.300 | 0.05\r\n100 |   | 2964 | 13.611950600 | 1019 | 60,749.300 | 19,082,378.000 | 0.39\r\n101 |   | 20676 | 13.620439400 | 629 | 14,292.700 | 19,091,233.600 | 0.03\r\n\r\n",
    "created_at": "2020-01-22T20:06:04Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11659#issuecomment-577362234",
    "id": 577362234,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11659",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NzM2MjIzNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577362234/reactions"
    },
    "updated_at": "2020-01-22T20:09:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577362234",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/341166?v=4",
      "events_url": "https://api.github.com/users/rtestardi/events{/privacy}",
      "followers_url": "https://api.github.com/users/rtestardi/followers",
      "following_url": "https://api.github.com/users/rtestardi/following{/other_user}",
      "gists_url": "https://api.github.com/users/rtestardi/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rtestardi",
      "id": 341166,
      "login": "rtestardi",
      "node_id": "MDQ6VXNlcjM0MTE2Ng==",
      "organizations_url": "https://api.github.com/users/rtestardi/orgs",
      "received_events_url": "https://api.github.com/users/rtestardi/received_events",
      "repos_url": "https://api.github.com/users/rtestardi/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rtestardi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rtestardi/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rtestardi"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Adding @daxian-dbw  who is looking at this perf issue.\r\n\r\nPowerShell doesn't write directly to named pipes, but communicates between parent and child processes via dotNet Process class stdIn/stdOut reader/writers, which I assume use named pipes.\r\n\r\nPowerShell uses the remoting protocol (PSRP) to communicate between parent/client processes for running commands/script and transferring data.\r\n\r\nPowerShell uses dotNet Process stdIn/sdtOut to communicate between processes, and I don't know if dotNet uses threadpool threads.\r\n\r\nPowerShell does use threadpool threads for other async tasks, including waiting for connection handshake and initialization of remote sessions.  But I don't know of any case where new session creation is blocked for multiple seconds.  I would need to see stack of stalled threads to know more.\r\n\r\nBut it is still not clear to me that this is a PowerShell issue, and it is just waiting for processes to be created for each job.  Again, I would need a repro or stack information to know what stalled threads are doing.",
    "created_at": "2020-01-22T21:16:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11659#issuecomment-577389206",
    "id": 577389206,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11659",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NzM4OTIwNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577389206/reactions"
    },
    "updated_at": "2020-01-22T21:16:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577389206",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/14019529?v=4",
      "events_url": "https://api.github.com/users/PaulHigin/events{/privacy}",
      "followers_url": "https://api.github.com/users/PaulHigin/followers",
      "following_url": "https://api.github.com/users/PaulHigin/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulHigin/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PaulHigin",
      "id": 14019529,
      "login": "PaulHigin",
      "node_id": "MDQ6VXNlcjE0MDE5NTI5",
      "organizations_url": "https://api.github.com/users/PaulHigin/orgs",
      "received_events_url": "https://api.github.com/users/PaulHigin/received_events",
      "repos_url": "https://api.github.com/users/PaulHigin/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PaulHigin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulHigin/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PaulHigin"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Since the delay is so long, if you can take a process dump of parent/child, that would help determine what threads are waiting for.",
    "created_at": "2020-01-22T21:21:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11659#issuecomment-577391285",
    "id": 577391285,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11659",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NzM5MTI4NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577391285/reactions"
    },
    "updated_at": "2020-01-22T21:21:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577391285",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/14019529?v=4",
      "events_url": "https://api.github.com/users/PaulHigin/events{/privacy}",
      "followers_url": "https://api.github.com/users/PaulHigin/followers",
      "following_url": "https://api.github.com/users/PaulHigin/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulHigin/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PaulHigin",
      "id": 14019529,
      "login": "PaulHigin",
      "node_id": "MDQ6VXNlcjE0MDE5NTI5",
      "organizations_url": "https://api.github.com/users/PaulHigin/orgs",
      "received_events_url": "https://api.github.com/users/PaulHigin/received_events",
      "repos_url": "https://api.github.com/users/PaulHigin/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PaulHigin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulHigin/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PaulHigin"
    }
  },
  {
    "author_association": "NONE",
    "body": "Hi Paul,\r\n\r\nPowershell depends on threadpool tasks running promptly in order to launch jobs, so I'm pretty sure this is a powershell bug -- you are using the one shared threadpool for two fundamentally different kinds of tasks -- long-lived blocking tasks, and transient tasks -- that always results in exactly this problem with a shared threadpool.  It may be you have to find lower level mechanisms that are \"task friendly\" and do not block your task threads, or move the blocking tasks to their own private threadpool.\r\n\r\nOf course, if the lower level system were different, powershell would not have this issue.  But it isn't, :-)\r\n\r\nAnd this experiment seems to confirm it (too bad I can't paste a table in here):\r\n\r\nWORKAROUND:\r\n\r\n20 min threads (so blocked threads don't prevent queued tasks from running)\r\n\r\nC:\\temp>**set ComPlus_ThreadPool_ForceMinWorkerThreads=20**\r\n\r\nC:\\temp>**powershell**\r\nWindows PowerShell\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nTry the new cross-platform PowerShell https://aka.ms/pscore6\r\n\r\nPS C:\\temp> **measure-command { 1..10 | %{ start-job { $null } }; get-job | wait-job; get-job | remove-job };**\r\n\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 2\r\nMilliseconds      : 949\r\nTicks             : 29491029\r\nTotalDays         : 3.41331354166667E-05\r\nTotalHours        : 0.00081919525\r\nTotalMinutes      : 0.049151715\r\nTotalSeconds      : 2.9491029\r\nTotalMilliseconds : 2949.1029\r\n\r\n\r\nNO WORKAROUND:\r\n\r\ndefault (4) min threads (4 blocked threads can prevent queued tasks from running until threadpool expansion)\r\n\r\nC:\\temp>**powershell**\r\nWindows PowerShell\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nTry the new cross-platform PowerShell https://aka.ms/pscore6\r\n\r\nPS C:\\temp> **measure-command { 1..10 | %{ start-job { $null } }; get-job | wait-job; get-job | remove-job };**\r\n\r\n\r\nDays              : 0\r\nHours             : 0\r\nMinutes           : 0\r\nSeconds           : 21\r\nMilliseconds      : 632\r\nTicks             : 216328858\r\nTotalDays         : 0.000250380622685185\r\nTotalHours        : 0.00600913494444444\r\nTotalMinutes      : 0.360548096666667\r\nTotalSeconds      : 21.6328858\r\nTotalMilliseconds : 21632.8858\r\n\r\n\r\n\r\n<blockquote><div><strong><a href=\"https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell\">Installing PowerShell - PowerShell</a></strong></div></blockquote>",
    "created_at": "2020-01-22T21:24:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11659#issuecomment-577392688",
    "id": 577392688,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11659",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NzM5MjY4OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577392688/reactions"
    },
    "updated_at": "2020-01-22T22:38:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577392688",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/341166?v=4",
      "events_url": "https://api.github.com/users/rtestardi/events{/privacy}",
      "followers_url": "https://api.github.com/users/rtestardi/followers",
      "following_url": "https://api.github.com/users/rtestardi/following{/other_user}",
      "gists_url": "https://api.github.com/users/rtestardi/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rtestardi",
      "id": 341166,
      "login": "rtestardi",
      "node_id": "MDQ6VXNlcjM0MTE2Ng==",
      "organizations_url": "https://api.github.com/users/rtestardi/orgs",
      "received_events_url": "https://api.github.com/users/rtestardi/received_events",
      "repos_url": "https://api.github.com/users/rtestardi/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rtestardi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rtestardi/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rtestardi"
    }
  },
  {
    "author_association": "NONE",
    "body": "Sure, I can get you a dump -- the ETL also has every single thread wait in it as well, so you can see where threads are waiting (as I did above), as well as where they had been waiting earlier.\r\n\r\nThe dump is here: \"\\\\scratch2\\scratch\\richardt\\powershell.cmp.zip\"",
    "created_at": "2020-01-22T21:37:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11659#issuecomment-577397870",
    "id": 577397870,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11659",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NzM5Nzg3MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577397870/reactions"
    },
    "updated_at": "2020-01-22T21:37:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577397870",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/341166?v=4",
      "events_url": "https://api.github.com/users/rtestardi/events{/privacy}",
      "followers_url": "https://api.github.com/users/rtestardi/followers",
      "following_url": "https://api.github.com/users/rtestardi/following{/other_user}",
      "gists_url": "https://api.github.com/users/rtestardi/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rtestardi",
      "id": 341166,
      "login": "rtestardi",
      "node_id": "MDQ6VXNlcjM0MTE2Ng==",
      "organizations_url": "https://api.github.com/users/rtestardi/orgs",
      "received_events_url": "https://api.github.com/users/rtestardi/received_events",
      "repos_url": "https://api.github.com/users/rtestardi/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rtestardi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rtestardi/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rtestardi"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Well, PowerShell or dotNet on which PowerShell runs.  But @daxian-dbw  just found a reliable repro (this is the best thing to give us), so I can get a stack and take a look.  Will let you know what I find.",
    "created_at": "2020-01-22T21:38:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11659#issuecomment-577398242",
    "id": 577398242,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11659",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NzM5ODI0Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577398242/reactions"
    },
    "updated_at": "2020-01-22T21:38:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577398242",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/14019529?v=4",
      "events_url": "https://api.github.com/users/PaulHigin/events{/privacy}",
      "followers_url": "https://api.github.com/users/PaulHigin/followers",
      "following_url": "https://api.github.com/users/PaulHigin/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulHigin/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PaulHigin",
      "id": 14019529,
      "login": "PaulHigin",
      "node_id": "MDQ6VXNlcjE0MDE5NTI5",
      "organizations_url": "https://api.github.com/users/PaulHigin/orgs",
      "received_events_url": "https://api.github.com/users/PaulHigin/received_events",
      "repos_url": "https://api.github.com/users/PaulHigin/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PaulHigin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulHigin/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PaulHigin"
    }
  },
  {
    "author_association": "NONE",
    "body": "PPS and possibly one more observation...\r\n\r\nIf you search for ZwReadFile above, you'll find *two* different call stacks -- one under wmain (of the child powershell), and one under ntdll.dll!RtlUserThreadStart -> clr.dll!ThreadpoolMgr::ExecuteWorkRequest (of the parent powershell).\r\n\r\nIt is the latter that is an issue, I believe, since it ties up a worker thread indefinitely.\r\n\r\nIf the reader (whose call stack is hidden from us in mscorlib.ni.dll) had been async-aware, there would have been no issue (it would have just queued a continuation task when the read completed, and left the worker thread to do other work).\r\n\r\nMaybe that's the simple fix?\r\n\r\n\r\n\r\nFrom: Richard Testardi \r\nSent: Wednesday, January 22, 2020 2:57 PM\r\n\r\n> Good news is that we are able to repro the issue consistently now, by running `set ComPlus_ThreadPool_ForceMinWorkerThreads=4`.\r\n\r\nAwesome.\r\n\r\nI think the real issue is you don't want long-lived non-asynchronous tasks (like read from pipe) competing for the same small number of threads in the common threadpool as transient tasks.\r\n\r\nEither all tasks in the threadpool have to be async (relinquishing the thread when blocked, which read from pipe does not), or long-lived and transient tasks need to be in two separate threadpools.\r\n\r\nIf folks prefer dumps to ETL files, I put one here, part way into a 26 second hang: \"\\\\scratch2\\scratch\\richardt\\powershell.cmp.zip\"\r\n\r\nThanks!\r\n\r\n-- Rich\r\n",
    "created_at": "2020-01-22T22:36:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11659#issuecomment-577418594",
    "id": 577418594,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11659",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NzQxODU5NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577418594/reactions"
    },
    "updated_at": "2020-01-22T23:04:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577418594",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/341166?v=4",
      "events_url": "https://api.github.com/users/rtestardi/events{/privacy}",
      "followers_url": "https://api.github.com/users/rtestardi/followers",
      "following_url": "https://api.github.com/users/rtestardi/following{/other_user}",
      "gists_url": "https://api.github.com/users/rtestardi/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rtestardi",
      "id": 341166,
      "login": "rtestardi",
      "node_id": "MDQ6VXNlcjM0MTE2Ng==",
      "organizations_url": "https://api.github.com/users/rtestardi/orgs",
      "received_events_url": "https://api.github.com/users/rtestardi/received_events",
      "repos_url": "https://api.github.com/users/rtestardi/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rtestardi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rtestardi/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rtestardi"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Ok, I have looked into this and discussed with @daxian-dbw .  The problem is worker pool thread starvation, caused by .Net System.Diagnostics.Process.  It is only the background job transport that uses System.Diagnostics.Process that causes the problem.  Other PowerShell remoting transports do not exhibit the problem.  When a System.Diagnostics.Process object is created with redirected StdOutput and StdError (which PowerShell uses), a thread pool thread is requested for each.  So when 10 PowerShell jobs are run, 20 thread pool threads are requested and remain for the lifetime of the jobs.  This is an abuse of thread pool threads since the lifetime of the created process and therefore the reader threads is unknown.\r\n\r\nIn addition, PowerShell uses thread pool threads to process job remoting protocol messages, which are normally handled very quickly and the thread is released.  \r\n\r\nWhen a lot of background jobs are created (as per repro), this thread starvation can cause PowerShell job initialization to deadlock until the thread pool allocates more threads.  The workaround is to ensure the thread pool minimum threads setting is set to a reasonable value for running many jobs (e.g., ‘set ComPlus_ThreadPool_ForceMinWorkerThreads=20’).  However, PowerShell can help alleviate this problem by using dedicated threads for protocol message processing, and I’ll work on a fix for this.  We will also submit an issue to .Net about System.Diagnostics.Process using thread pool threads for stdout/error readers.\r\n\r\n@rtestardi  thanks for bringing this to our attention and performing the initial analysis!",
    "created_at": "2020-01-23T19:11:58Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11659#issuecomment-577830039",
    "id": 577830039,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11659",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3NzgzMDAzOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577830039/reactions"
    },
    "updated_at": "2020-01-23T19:11:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577830039",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/14019529?v=4",
      "events_url": "https://api.github.com/users/PaulHigin/events{/privacy}",
      "followers_url": "https://api.github.com/users/PaulHigin/followers",
      "following_url": "https://api.github.com/users/PaulHigin/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulHigin/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PaulHigin",
      "id": 14019529,
      "login": "PaulHigin",
      "node_id": "MDQ6VXNlcjE0MDE5NTI5",
      "organizations_url": "https://api.github.com/users/PaulHigin/orgs",
      "received_events_url": "https://api.github.com/users/PaulHigin/received_events",
      "repos_url": "https://api.github.com/users/PaulHigin/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PaulHigin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulHigin/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PaulHigin"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Actually, @daxian-dbw pointed out that it is actually the System.Diagnostics.Process.OutputDataReceived event handler that uses the thread pool thread.  This code can be re-written to use PowerShell dedicated threads to read the stdout/error streams.\r\n\r\nAlso we need to look at the base transport message processing, which may not need to use thread pool threads.",
    "created_at": "2020-01-23T21:34:57Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11659#issuecomment-577887678",
    "id": 577887678,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11659",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3Nzg4NzY3OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577887678/reactions"
    },
    "updated_at": "2020-01-23T21:34:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577887678",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/14019529?v=4",
      "events_url": "https://api.github.com/users/PaulHigin/events{/privacy}",
      "followers_url": "https://api.github.com/users/PaulHigin/followers",
      "following_url": "https://api.github.com/users/PaulHigin/following{/other_user}",
      "gists_url": "https://api.github.com/users/PaulHigin/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PaulHigin",
      "id": 14019529,
      "login": "PaulHigin",
      "node_id": "MDQ6VXNlcjE0MDE5NTI5",
      "organizations_url": "https://api.github.com/users/PaulHigin/orgs",
      "received_events_url": "https://api.github.com/users/PaulHigin/received_events",
      "repos_url": "https://api.github.com/users/PaulHigin/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PaulHigin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PaulHigin/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PaulHigin"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "> When a System.Diagnostics.Process object is created with redirected StdOutput and StdError (which PowerShell uses), a thread pool thread is requested for each.\r\n\r\nMore specifically, PowerShell simply uses `Process.OutputDataReceived` and `Process.ErrorDataReceived` events to handle the output and error from the child process asynchronously.\r\nThe `System.Diagnostics.Process` type handles those two events by using an `AsyncStreamReader` for each of those 2 pipes, which eventually **creates a task** that calls `FileStream.ReadAsync` on the base stream.\r\nSo the `FileStream.ReadAsync` calls will be running on thread pool threads.\r\n\r\nEven though `ReadAsync` is being called, I don’t think it’s able to actually read from a pipe asynchronously. Hence, those 2 thread pool threads get held indefinitely.\r\nBelow is a simple program demonstrating this behavior, along with the thread activity screenshot when it “hangs”:\r\n```c#\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var startInfo = new ProcessStartInfo() {\r\n                FileName = \"powershell\",\r\n                Arguments = \"-noprofile -c sleep 30\",\r\n                RedirectStandardOutput = true,\r\n                RedirectStandardError = true\r\n            };\r\n\r\n            var process = Process.Start(startInfo);\r\n\r\n            process.OutputDataReceived += DataReceived;\r\n            process.ErrorDataReceived += DataReceived;\r\n\r\n            process.BeginOutputReadLine();\r\n            process.BeginErrorReadLine();\r\n\r\n            Console.ReadKey();\r\n            Console.WriteLine(\"DONE\");\r\n        }\r\n\r\n        static void DataReceived(object sender, DataReceivedEventArgs e)\r\n        {\r\n            Console.WriteLine(e.Data);\r\n        }\r\n    }\r\n```\r\n![abc](https://user-images.githubusercontent.com/127450/73026364-20c86d80-3de6-11ea-8bf5-659ecdb723db.jpg)\r\n\r\n------------------------------------------------------\r\n\r\nI don’t know if that’s by design on the .NET side …\r\n**But yes, what PowerShell can do is to not depend on those 2 events, but instead, create our own dedicated threads to read the in-coming messages from the output and error pipes for each child process.**\r\nAnd actually, it turned out that’s what we already do for the remoting connection over SSH.",
    "created_at": "2020-01-23T21:43:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11659#issuecomment-577890713",
    "id": 577890713,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11659",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3Nzg5MDcxMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577890713/reactions"
    },
    "updated_at": "2020-01-23T21:43:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/577890713",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "NONE",
    "body": "> Even though ReadAsync is being called, I don’t think it’s able to actually read from a pipe asynchronously.\r\n\r\nWow, it seems the underlying Win32 API (CreatePipe()) only allows the pipe handle to be created in \"synchronous\" mode -- you'd have to use the NT API to open it for async, which would mean you're in somewhat uncharted waters.\r\n\r\nSo, agreed, dedicated threads (or not using pipes :-) are the only real solutions here.\r\n",
    "created_at": "2020-01-28T16:46:23Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11659#issuecomment-579344439",
    "id": 579344439,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11659",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU3OTM0NDQzOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579344439/reactions"
    },
    "updated_at": "2020-01-28T16:46:23Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/579344439",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/341166?v=4",
      "events_url": "https://api.github.com/users/rtestardi/events{/privacy}",
      "followers_url": "https://api.github.com/users/rtestardi/followers",
      "following_url": "https://api.github.com/users/rtestardi/following{/other_user}",
      "gists_url": "https://api.github.com/users/rtestardi/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rtestardi",
      "id": 341166,
      "login": "rtestardi",
      "node_id": "MDQ6VXNlcjM0MTE2Ng==",
      "organizations_url": "https://api.github.com/users/rtestardi/orgs",
      "received_events_url": "https://api.github.com/users/rtestardi/received_events",
      "repos_url": "https://api.github.com/users/rtestardi/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rtestardi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rtestardi/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rtestardi"
    }
  },
  {
    "author_association": "NONE",
    "body": ":tada:This issue was addressed in #11713, which has now been successfully released as `v7.1.0-preview.2`.:tada:\n\nHandy links:\n* [Release Notes](https://github.com/PowerShell/PowerShell/releases/tag/v7.1.0-preview.2)\n",
    "created_at": "2020-04-23T18:02:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11659#issuecomment-618555327",
    "id": 618555327,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11659",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxODU1NTMyNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/618555327/reactions"
    },
    "updated_at": "2020-04-23T18:02:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/618555327",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/in/26612?v=4",
      "events_url": "https://api.github.com/users/msftbot%5Bbot%5D/events{/privacy}",
      "followers_url": "https://api.github.com/users/msftbot%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/msftbot%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/msftbot%5Bbot%5D/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apps/msftbot",
      "id": 48340428,
      "login": "msftbot[bot]",
      "node_id": "MDM6Qm90NDgzNDA0Mjg=",
      "organizations_url": "https://api.github.com/users/msftbot%5Bbot%5D/orgs",
      "received_events_url": "https://api.github.com/users/msftbot%5Bbot%5D/received_events",
      "repos_url": "https://api.github.com/users/msftbot%5Bbot%5D/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/msftbot%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msftbot%5Bbot%5D/subscriptions",
      "type": "Bot",
      "url": "https://api.github.com/users/msftbot%5Bbot%5D"
    }
  }
]
