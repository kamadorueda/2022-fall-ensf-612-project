[
  {
    "author_association": "COLLABORATOR",
    "body": "The same for Get-Location:\r\n```powershell\r\n Set-Location Microsoft.PowerShell.Core\\FileSystem::C:\\Windows\r\nPS Microsoft.PowerShell.Core\\FileSystem::C:\\Windows> $pwd\r\n\r\nPath\r\n----\r\nMicrosoft.PowerShell.Core\\FileSystem::C:\\Windows\r\n\r\nPS Microsoft.PowerShell.Core\\FileSystem::C:\\Windows> Get-Location\r\n\r\nPath\r\n----\r\nMicrosoft.PowerShell.Core\\FileSystem::C:\\Windows\r\n```\r\n\r\nThey return [PathInfo] and it is PathInfo.ToString() behavior.\r\nChanging this would be a breaking change.\r\nAlso it is not clear why path without prefix is expected behavior.\r\n",
    "created_at": "2019-09-13T06:54:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10522#issuecomment-531121789",
    "id": 531121789,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10522",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTEyMTc4OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/531121789/reactions"
    },
    "updated_at": "2019-09-13T06:54:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/531121789",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Also it is not clear why path without prefix is expected behavior.\r\n\r\nTo quote from the OP, emphasis added:\r\n\r\n> While $PWD.ProviderPath does reflect the unprefixed (but always native) fileysystem path, **relying on \"$PWD\" or $PWD.Path to do that [show the _unprefixed_ full path] too is very common**.\r\n\r\nI don't think anyone expects - nor should they - that the way they _specify_ the location determines how that location is _reported_.\r\n\r\nE.g, if I do `Set-Location ./tmp`  in order to change to, say, `C:\\foo\\tmp`, I expect both the prompt string and `Get-Location` to reflect `C:\\foo\\tmp`, not `./tmp`.\r\n\r\nThe same applies to passing a provider-prefixed path: it is just a way to identify the target item _on input_, which is unrelated to the presentation _on output_, which should be _standardized_.\r\n\r\nThis is a breaking change in the same way that any bug fix is a breaking change: it corrects unexpected behavior.\r\n",
    "created_at": "2019-09-13T13:16:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10522#issuecomment-531232689",
    "id": 531232689,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10522",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTIzMjY4OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/531232689/reactions"
    },
    "updated_at": "2019-09-13T13:16:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/531232689",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> I don't think anyone expects - nor should they - that the way they specify the location determines how that location is reported.\r\n\r\nIf I want to work with native filesystem paths I use native filesystem paths. If I want provider prefixes I expect that they will be preserved, including completions.",
    "created_at": "2019-09-13T17:33:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10522#issuecomment-531325683",
    "id": 531325683,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10522",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTMyNTY4Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/531325683/reactions"
    },
    "updated_at": "2019-09-13T17:33:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/531325683",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@iSazonov : \r\n\r\nIn this case you're not _working with_ one path form of the other.\r\n\r\nInstead, you're using acceptable variations in the syntactic form of an _argument_ to _target_ a known item.\r\n\r\nTo put it in concrete terms:\r\n\r\n```\r\nSet-Location ./tmp  # from C:\\foo\r\nSet-Location C:\\foo\\tmp\r\nSet-Location Microsoft.PowerShell.Core\\FileSystem::C:\\foo\\tmp\r\n```\r\n\r\nThese are 3 different ways to target _the same location_ - the variations in how you _identified_ that location to `Set-Location` should have _no impact whatsoever_ on the cmdlet's output / behavior (or on related cmdlets, such as `Get-Location`).\r\n\r\n",
    "created_at": "2019-09-13T17:44:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10522#issuecomment-531329189",
    "id": 531329189,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10522",
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTMyOTE4OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/531329189/reactions"
    },
    "updated_at": "2019-09-13T17:44:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/531329189",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "[Posh-Git seems to work](https://github.com/dahlbyk/posh-git/blob/master/src/Utils.ps1#:~:text=function%20Get%2DPromptPath), I checked that updating the prompt to the following is sufficient:\r\n\r\n```pwsh\r\nfunction prompt {\r\n    $pathInfo = $ExecutionContext.SessionState.Path.CurrentLocation\r\n    # Simplify provider path like `Microsoft.PowerShell.Core\\FileSystem::C:\\Windows`\r\n    $currentPath = $pathInfo.Drive ? $pathInfo.Path : $pathInfo.ProviderPath\r\n    \"PS ${currentPath}$('>' * ($nestedPromptLevel + 1)) \"\r\n}\r\n```\r\n\r\nAs mentioned in #17949 , updating the prompt is the best way to go as most people just care about the visual \"bug\" and it is not a breaking change.",
    "created_at": "2022-08-24T07:12:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10522#issuecomment-1225293570",
    "id": 1225293570,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10522",
    "node_id": "IC_kwDOAvT7bc5JCH8C",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1225293570/reactions"
    },
    "updated_at": "2022-08-24T07:12:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1225293570",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/26599495?v=4",
      "events_url": "https://api.github.com/users/dkaszews/events{/privacy}",
      "followers_url": "https://api.github.com/users/dkaszews/followers",
      "following_url": "https://api.github.com/users/dkaszews/following{/other_user}",
      "gists_url": "https://api.github.com/users/dkaszews/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/dkaszews",
      "id": 26599495,
      "login": "dkaszews",
      "node_id": "MDQ6VXNlcjI2NTk5NDk1",
      "organizations_url": "https://api.github.com/users/dkaszews/orgs",
      "received_events_url": "https://api.github.com/users/dkaszews/received_events",
      "repos_url": "https://api.github.com/users/dkaszews/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/dkaszews/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dkaszews/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/dkaszews"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Best to extend `Resolve-Path` with `-SimplifyProvider` and `-SimplifyHome` and use them in default prompt. That way there is no breaking change and you opt into the replacement in a script if you want. ",
    "created_at": "2022-08-24T07:23:01Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10522#issuecomment-1225303337",
    "id": 1225303337,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10522",
    "node_id": "IC_kwDOAvT7bc5JCKUp",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1225303337/reactions"
    },
    "updated_at": "2022-08-24T07:23:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1225303337",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/26599495?v=4",
      "events_url": "https://api.github.com/users/dkaszews/events{/privacy}",
      "followers_url": "https://api.github.com/users/dkaszews/followers",
      "following_url": "https://api.github.com/users/dkaszews/following{/other_user}",
      "gists_url": "https://api.github.com/users/dkaszews/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/dkaszews",
      "id": 26599495,
      "login": "dkaszews",
      "node_id": "MDQ6VXNlcjI2NTk5NDk1",
      "organizations_url": "https://api.github.com/users/dkaszews/orgs",
      "received_events_url": "https://api.github.com/users/dkaszews/received_events",
      "repos_url": "https://api.github.com/users/dkaszews/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/dkaszews/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dkaszews/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/dkaszews"
    }
  },
  {
    "author_association": "NONE",
    "body": "This has come up again in 17949 \r\n\r\nThere is plainly a gap between what people EXPECT when working with a file system, and what has been implemented\r\n\r\n#17949   was basically \r\n- `New-Item` (`mkdir`) and `Get-Item` / `Get-ChildItem` add a `PSPath `property to `System.IO.DirectoryInfo` objects (it isn't added via type data so the  `.GetDirectories()` method yields objects without it) \r\n- When object with a `PSPath `property is piped to `set-location`,  that is used in preference to converting the object to string (`ToString()` gives the `fullname` property) \r\n- Therefore: if `$d `is a directory obtained by a cmdlet `cd $d`  converts `$d` to a string and uses the full name as a path, but `$d | cd` uses the `PSPath `as a literal path. \r\n\r\n@dkaszews  Changing the prompt to **hide** that his happened is **NOT** a good idea\r\nTry this (on Windows)\r\n```\r\nGet-Item $HOME | Set-Location\r\nSet-location \\   \r\n```\r\nOn linux / or \\ is considered to be a drive so it doesn't have the same problem but on windows \\ or anything specified relative to \\ fails.\r\n\r\n**BUT** you could use the prompt to **fix** it. \r\n\r\n```\r\nif ((-not $ExecutionContext.SessionState.Path.CurrentLocation.Provider.Drive) -and \r\n    (     $ExecutionContext.SessionState.Path.CurrentLocation.Provider.Name -eq 'FileSystem')) {\r\n          Set-Location $ExecutionContext.SessionState.Path.CurrentLocation.ProviderPath\r\n}\r\n```\r\n\r\n\r\nThere are cases where `Set-Location` cannot reliably and uniquely choose a drive (e.g. should changing into the temp directory, go to Temp: or the path within the native file file system. Or should `HKEY_CLASSES_ROOT` go to `HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes`)\r\n\r\nNote that for the registry  `get-item hklm: | cd`  allows  cd '..\\HKEY_Classes_root'  which isn't possible with `cd HKLM:`  (but again breaks `cd \\`)\r\n\r\nSo I think \r\n\r\n1. If the user / script author takes the trouble to use a PSPath they want to the location to be set to a PS path. And in the case of something like `Microsoft.PowerShell.Core\\Registry::HKEY_CLASSES_ROOT` there is no default drive to use, \r\n2. If the user passes a file system object via the pipeline selecting the PSPath is a surprise. Making `Fullname` an alias for path would solve this problem.  Where changing an _explicit_ PSPath  is making a dangerous assumption, in the case of `Set-Location`  assuming the user wants to use the PSPath  and not the fullName for the filesystem is making a wrong one.\r\n\r\n\r\n",
    "created_at": "2022-08-24T11:00:22Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10522#issuecomment-1225564789",
    "id": 1225564789,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10522",
    "node_id": "IC_kwDOAvT7bc5JDKJ1",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1225564789/reactions"
    },
    "updated_at": "2022-08-24T11:00:22Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1225564789",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16209593?v=4",
      "events_url": "https://api.github.com/users/jhoneill/events{/privacy}",
      "followers_url": "https://api.github.com/users/jhoneill/followers",
      "following_url": "https://api.github.com/users/jhoneill/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhoneill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jhoneill",
      "id": 16209593,
      "login": "jhoneill",
      "node_id": "MDQ6VXNlcjE2MjA5NTkz",
      "organizations_url": "https://api.github.com/users/jhoneill/orgs",
      "received_events_url": "https://api.github.com/users/jhoneill/received_events",
      "repos_url": "https://api.github.com/users/jhoneill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jhoneill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhoneill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jhoneill"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> @dkaszews Changing the prompt to **hide** that his happened is **NOT** a good idea\r\n> Try this (on Windows)\r\n\r\nIt is not \"hide\". It is fundamentally follow PowerShell provider conceptions. We should use these fundamental conceptions _right_.\r\n\r\n`Set-location \\` is not a prove. It demonstrate a bug we should fix.",
    "created_at": "2022-08-24T12:19:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10522#issuecomment-1225645586",
    "id": 1225645586,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10522",
    "node_id": "IC_kwDOAvT7bc5JDd4S",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1225645586/reactions"
    },
    "updated_at": "2022-08-24T12:19:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1225645586",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "NONE",
    "body": "> > @dkaszews Changing the prompt to **hide** that his happened is **NOT** a good idea\r\n> > Try this (on Windows)\r\n> \r\n> It is not \"hide\". It is fundamentally follow PowerShell provider conceptions. We should use these fundamental conceptions _right_.\r\n> \r\n> `Set-location \\` is not a prove. It demonstrate a bug we should fix.\r\n\r\nwe might need to accept an amicable disagreement :-)\r\n\r\n`Set-location \\`  _does_ demonstrate that current location is set to different places, one impacted by a bug, one not \r\nAnd (on windows at least) a path starting \\ means \"from the root of the current drive\" but PowerShell lets us set the current location to somewhere with no drive like `Microsoft.PowerShell.Core\\Registry::HKEY_CLASSES_ROOT`  or ` `Microsoft.PowerShell.Core\\FileSystem::\\\\MachineName\\c$\\Windows`  what does \"\\\" or \"root of the drive\" mean then ? \r\n\r\nYour comment above\r\n> If I want to work with native filesystem paths I use native filesystem paths. If I want provider prefixes I expect that they will be preserved, including completions. \r\n\r\nIs what I think, although you might have changed your mind since then :-)   Having the location using the provider and the prompt showing path as the provider sees it seems like masking a problem to me and there are places where it doesn't give the right answer - if I connect a PS Drive to a network share... \r\n``` \r\nnew-psdrive S -PSProvider FileSystem -Root  \"\\\\MachineName\\c$\" \r\nS:\r\n get-item windows | cd\r\n```\r\n\r\nI end up connected to `Microsoft.PowerShell.Core\\FileSystem::\\\\MachineName\\c$\\Windows` \r\nShowing me the provider path  `\\\\MachineName\\c$\\Windows` as a prompt instead of S: hasn't fixed the problem.  Like the registry I can `cd` past the root of drive S: to a different share or even a different server but CD \\ fails.  (any fix for `cd \\` needs to cope with UNC paths).   \r\n\r\nAnd  if I do ` get-item temp:\\ | cd`  it puts me in the  \r\n`Microsoft.PowerShell.Core\\FileSystem::C:\\Users\\ME\\AppData\\Local\\Temp>`\r\n \r\nShowing me a prompt of `C:\\Users\\ME\\AppData\\Local\\Temp` is both correct and unexpected - I expect to be on the temp: drive  But if there is come kind of lookup which translates that to TEMP: (and the UNC to S:) then if I do ` get-item $env:temp | cd` _that_ will be wrong getting temp: instead of c:\\users... \r\n\r\nIn all these examples it is the way `set-location` prefers PSPath to the fullname property which is the problem\r\n\r\n\r\n",
    "created_at": "2022-08-24T14:58:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10522#issuecomment-1225842860",
    "id": 1225842860,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10522",
    "node_id": "IC_kwDOAvT7bc5JEOCs",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1225842860/reactions"
    },
    "updated_at": "2022-08-24T14:58:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1225842860",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16209593?v=4",
      "events_url": "https://api.github.com/users/jhoneill/events{/privacy}",
      "followers_url": "https://api.github.com/users/jhoneill/followers",
      "following_url": "https://api.github.com/users/jhoneill/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhoneill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jhoneill",
      "id": 16209593,
      "login": "jhoneill",
      "node_id": "MDQ6VXNlcjE2MjA5NTkz",
      "organizations_url": "https://api.github.com/users/jhoneill/orgs",
      "received_events_url": "https://api.github.com/users/jhoneill/received_events",
      "repos_url": "https://api.github.com/users/jhoneill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jhoneill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhoneill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jhoneill"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@jhoneill You can find a lot of issues like you have mentioned. There are fundamental reasons for this:\r\n- The fundamental concepts of PowerShell have no formal description.\r\n- They are not implemented exactly as they should be according to the previous point.\r\n\r\nI tried to put it in an RFC, but that would have led to a huge redesign of PowerShell providers and public APIs - it was rejected.",
    "created_at": "2022-08-24T19:04:18Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10522#issuecomment-1226125659",
    "id": 1226125659,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10522",
    "node_id": "IC_kwDOAvT7bc5JFTFb",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1226125659/reactions"
    },
    "updated_at": "2022-08-24T19:04:18Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1226125659",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "NONE",
    "body": "Also worth noting was an experimental feature to convert PSPaths to filesystem ones was in 7.2 and previews of 7.3 but has been dropped https://github.com/PowerShell/PowerShell/pull/17670 \r\n",
    "created_at": "2022-08-29T12:42:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10522#issuecomment-1230235566",
    "id": 1230235566,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10522",
    "node_id": "IC_kwDOAvT7bc5JU-eu",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1230235566/reactions"
    },
    "updated_at": "2022-08-29T12:42:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1230235566",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16209593?v=4",
      "events_url": "https://api.github.com/users/jhoneill/events{/privacy}",
      "followers_url": "https://api.github.com/users/jhoneill/followers",
      "following_url": "https://api.github.com/users/jhoneill/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhoneill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jhoneill",
      "id": 16209593,
      "login": "jhoneill",
      "node_id": "MDQ6VXNlcjE2MjA5NTkz",
      "organizations_url": "https://api.github.com/users/jhoneill/orgs",
      "received_events_url": "https://api.github.com/users/jhoneill/received_events",
      "repos_url": "https://api.github.com/users/jhoneill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jhoneill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhoneill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jhoneill"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Good point, @jhoneill: \r\n\r\nGiven that the current binding of provider items via the pipeline happens by the `.PSPath` property value _only_, the _drive_ information is already lost by the time `Set-Location` sees the parameter value - and _guessing_ a drive indeed sounds like a bad idea.\r\n\r\nThus, the solution is to bind such items _as objects_, where a drive-letter-based path can be reconstructed via the `.PSDrive` property. I think such a change would bring sanity to `Set-Location`'s pipeline behavior without breaking anything.\r\n\r\n  * This also relates to the larger discussion of generally using objects rather than path string as the type for `-LiteralPath` in provider cmdlets - see the discussion in #6057\r\n\r\nHere's a proof of concept, `Set-LocationProperly`, which wraps `Set-Location` with the desired behavior.\r\nFrom what I can tell, it should work with all providers and PowerShell-only drives, so that all of the following commands should work as intended; if no drive information is present, the behavior is as before, but with file-system items that would then only happen with raw UNC paths:\r\n\r\n* `Get-Item / | Set-LocationPropertly`\r\n* `$PWD | Set-LocationProperly`\r\n* `Get-Item HKCU:\\Console | Set-LocationProperly`\r\n\r\n```powershell\r\nfunction Set-LocationProperly {\r\n\r\n  [CmdletBinding(DefaultParameterSetName = 'Path', PositionalBinding = $false)]\r\n  param(\r\n    # Note: I think it would make more sense to interpret *strings* from the pipline as *literal* paths, in which\r\n    #       case ValueFromPipeline could be removed, but that would at least technically be a breaking change.\r\n    [Parameter(ParameterSetName = 'Path', Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 0)]\r\n    [string] $Path,\r\n    [Parameter(ParameterSetName = 'LiteralPath', Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName, Position = 0)]\r\n    [Alias('lp')]\r\n    [object] $LiteralPath,\r\n    [switch] $PassThru,\r\n    [Parameter(ParameterSetName = 'Stack')]\r\n    [string] $StackName\r\n  )\r\n  \r\n  Set-StrictMode -Version 1\r\n  \r\n  if ($pscmdlet.ParameterSetName -eq 'Stack') {\r\n    Set-Location -StackName $StackName -PassThru:$PassThru\r\n  }\r\n  elseif ($pscmdlet.ParameterSetName -eq 'Path') {\r\n    Set-Location -Path $Path -PassThru:$PassThru\r\n  }\r\n  else {\r\n    $resolvedPath =\r\n    if ($LiteralPath.PSDrive -and ($IsWindows -or $LiteralPath.PSDrive.Name -ne '/')) {\r\n      $providerPath = $LiteralPath.PSPath -replace '^.+?::'\r\n      $driveRoot = (Get-PSDrive $LiteralPath.PSDrive.Name).Root\r\n      Join-Path ($LiteralPath.PSDrive.Name + ':') $providerPath.Remove(0, $driveRoot.Length)\r\n    }\r\n    elseif ($LiteralPath -is [System.IO.DirectoryInfo]) {\r\n      $LiteralPath.FullName\r\n    }\r\n    elseif ($LiteralPath.PSPath) {\r\n      $LiteralPath.PSPath\r\n    }\r\n    else { \r\n      # Note: Despite ValueFromPipelineByPropertyName, the objects with such properties bind *as a whole*,\r\n      #       due to also being ValueFromPipeline as [object]s, so the properties must be tested for explicitly.\r\n      if ($LiteralPath.LiteralPath) {\r\n        $LiteralPath.LiteralPath\r\n      }\r\n      elseif ($LiteralPath.lp) {\r\n        $LiteralPath.lp\r\n      }\r\n      else { # Otherwise: simply stringify the input object.\r\n        # Note: This also covers [System.Management.Automation.PathInfo], such as reported by $PWD / Get-Location,\r\n        #       which stringifiy as their .Path property, expressed in terms of PowerShell drives.\r\n        \"$LiteralPath\"\r\n      }\r\n    }\r\n    Set-Location -PassThru:$PassThru -LiteralPath $resolvedPath\r\n  }\r\n  \r\n}\r\n```\r\n\r\nNote: \r\n* The above quietly ignores _multiple_ input objects and only acts on the _last_ one. It wouldn't be hard to implement a warning or emulate the current `Set-Location` behavior:\r\n* By contrast, `Set-Location` somewhat pointlessly changes the directory for _each_ input object, which means that the last (existing) input path \"wins\", in effect, with preceding nonexisting ones causing statement-terminating errors.\r\n  * This behavior has _some_ justification: conceivably, you could call `Set-Location -PassThru` in a pipeline in order to perform subsequent operations in the same pipeline in a distinct directory each.",
    "created_at": "2022-08-30T19:46:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10522#issuecomment-1232093348",
    "id": 1232093348,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10522",
    "node_id": "IC_kwDOAvT7bc5JcECk",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1232093348/reactions"
    },
    "updated_at": "2022-08-30T19:55:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1232093348",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Impossible without #5785",
    "created_at": "2022-08-31T04:09:33Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10522#issuecomment-1232437558",
    "id": 1232437558,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10522",
    "node_id": "IC_kwDOAvT7bc5JdYE2",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1232437558/reactions"
    },
    "updated_at": "2022-08-31T04:09:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1232437558",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "NONE",
    "body": "@mklement0  - good points too. \r\nI see 2 issues with `set-Location` first what is intended when a provider path is provided, and where there are behaviour differences are they bugs or intentional and second the pipe behaviour does seem intended which can be fixed by making `FullName` an alias for `Path`, (and dodging the other issues).\r\n  ",
    "created_at": "2022-08-31T12:00:43Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10522#issuecomment-1232843192",
    "id": 1232843192,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10522",
    "node_id": "IC_kwDOAvT7bc5Je7G4",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1232843192/reactions"
    },
    "updated_at": "2022-08-31T12:00:43Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1232843192",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16209593?v=4",
      "events_url": "https://api.github.com/users/jhoneill/events{/privacy}",
      "followers_url": "https://api.github.com/users/jhoneill/followers",
      "following_url": "https://api.github.com/users/jhoneill/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhoneill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jhoneill",
      "id": 16209593,
      "login": "jhoneill",
      "node_id": "MDQ6VXNlcjE2MjA5NTkz",
      "organizations_url": "https://api.github.com/users/jhoneill/orgs",
      "received_events_url": "https://api.github.com/users/jhoneill/received_events",
      "repos_url": "https://api.github.com/users/jhoneill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jhoneill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhoneill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jhoneill"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@iSazonov, a rewriter of the file-system provider will be most welcome, if and when it happens (the issue was created in 2018).\r\n\r\nIn the meantime, it looks to me that the above solution works, despite being a bit kludgy.\r\n\r\n@jhoneill:\r\n\r\nQuick terminology clarification: _provider path_ (perhaps better: provider-_native_ path) usually refers to a path that is _native_ to a given provider, and which PowerShell can't be expected to understand _without a provider prefix_; e.g., `HKEY_CURRENT_USER\\Console` vs. `registry::HKEY_CURRENT_USER\\Console` - I'l call the latter a _provider-qualified path_.\r\n\r\nIn the absence of a provider prefix and a drive spec at the start of a path, PowerShell interprets a path as relative to the current location of _whatever provider underlies the current location_, so that while a file-system location (directory) is the current location (as is typical), `Get-ChildItem HKEY_CURRENT_USER\\Console` (presumably in vain) looks for an file or directory named `Console` in a `HKEY_CURRENT_USER` subdirectory, for instance.\r\n\r\nAmbiguity is avoided in one of two ways: \r\n * Prefix a provider-native path with the name of the provider to make it a provider-qualified path, e.g. `registry::HKEY_CURRENT_USER\\Console`\r\n * Use a _drive_-based path, e.g, `HKCU:\\Console`\r\n\r\nNote that _UNC_ file paths (e.g, `\\\\localhost\\c$`) are an edge case: they aren't drive-based, so if a provider _other_ than  the file-system provider underlies the current location, they are _not_ recognized as file-system paths (try `Set-Location function:; Get-Item \\\\localhost\\$`). As an aside: Curiously, on Unix only, `/ ` and `\\`  _are_ recognized as file-system paths even in a location such as `function:` - even though there is no _drive spec_ involved and `/` and `\\` should refer to the root location of the _current_ drive (technically, `/` _is_ a drive on Unix, but in the absence of a `:` following it, it can't be distinguished from referring to the current location's root); but perhaps this inconsistency is for the better in practice.\r\n\r\nWith all this in mind:\r\n\r\n>  making `FullName` an alias for `Path`\r\n\r\nNote that this would limit the solution to (a) _file-system_ paths and (b) wouldn't respect PowerShell-only drives such as `Get-Item SomeCustomDrive:foo.txt | Set-Location`\r\n\r\nWhat the function above does is the following, which, from what I can tell, provides consistent behavior in line with user expectations:\r\n\r\n* If an object with provider ETS properties (`.PSPath`, ...) is passed:\r\n\r\n  * If, in addition to `.PSPath`, it has a `.PSDrive` property: translate the provider-qualified path (provider prefix + provider-native path) back into a _drive_-based path, as the presence of `.PSDrive` unambiguously _implies_ that a drive-based path was used on input.\r\n  \r\n  * Otherwise, if there's no drive information: Use the `.PSPath` property, as currently, resulting in a full, provider-qualified path. \r\n    * In the context of file-system paths, this will then only happen with _UNC_ paths.\r\n      * While the resulting `$PWD.Path` value (and therefore the prompt string) will still be somewhat scary-looking (e.g. `Microsoft.PowerShell.Core\\FileSystem::\\\\localhost\\c$`), there is justification for this behavior, given that a UNC path is _ambiguous_, as explained above.\r\n      * That said - and this is a separate issue - in practice it would make more sense to _unambiguously_ treat native UNC paths (those without a provider prefix) as _file-system_ paths, just like a `/`-prefixed path is already unambiguously considered a file-system path on Unix.\r\n\r\n    * In the context of other providers - those that optionally allow addressing an item _without a drive spec_ - you'd only get the provider-prefixed path if you explicitly avoided a drive spec, such as `Get-Item registry::HKEY_CURRENT_USER\\Console | Set-Location` (whereas  `Get-Item HKCU:\\Console | Set-Location` would preserve the drive).\r\n\r\n* All other cases would result in the same behavior as currently.\r\n\r\n\r\n\r\n",
    "created_at": "2022-08-31T14:39:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10522#issuecomment-1233028415",
    "id": 1233028415,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10522",
    "node_id": "IC_kwDOAvT7bc5JfoU_",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1233028415/reactions"
    },
    "updated_at": "2022-08-31T14:39:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1233028415",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "For the initial scenario, couldn't we more simply fix this by adding a noteproperty called `Path` to the output of `New-Item`?",
    "created_at": "2022-09-19T20:15:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10522#issuecomment-1251504076",
    "id": 1251504076,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10522",
    "node_id": "IC_kwDOAvT7bc5KmG_M",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1251504076/reactions"
    },
    "updated_at": "2022-09-19T20:15:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1251504076",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@SteveL-MSFT, the larger issue here is that `Set-Location` should accept _any_ `[System.IO.DirectoryInfo]` instance piped to it and honor its PS drive information, if present, not just if emitted by `New-Item`.\r\n\r\nThus, the better solution is to fix `Set-Location`, as previously described, which requires modifying it to accept _object_ input.\r\n\r\nThe irony here is that providing a `[System.IO.DirectoryInfo]` _without_ provider instance properties currently actually works as expected, albeit by definition only ever with _file-system-native_ paths, and only with file paths that don't contain `[` (that _string_ pipeline input binds to `-Path` instead of `-LiteralPath` is unfortunate, but that's a separate problem):\r\n\r\n```powershell\r\n# OK, due to effectively stripping the PS* provider properties \r\n# and the *stringified*  [System.IO.DirectoryInfo] instance - which is its .FullName property - \r\n# binding to Set-Location's -Path property\r\nGet-Item $HOME | % { [System.IO.DirectoryInfo] $_.FullName } | Set-Location\r\n```\r\n\r\nBy contrast, `Get-Item $HOME | Set-Location`, as reported in #9293, causes the same problem described in the initial post.\r\n\r\n",
    "created_at": "2022-09-19T22:40:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/10522#issuecomment-1251643531",
    "id": 1251643531,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/10522",
    "node_id": "IC_kwDOAvT7bc5KmpCL",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1251643531/reactions"
    },
    "updated_at": "2022-09-19T22:40:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1251643531",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
