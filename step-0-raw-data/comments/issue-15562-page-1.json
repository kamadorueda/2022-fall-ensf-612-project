[
  {
    "author_association": "COLLABORATOR",
    "body": "> -NoNewWindow should internally create pipes to forward the I/O to and from the child process,\r\n\r\nI don't think this is really the way to go. It would mean you need to have some background task that is constantly reading and writing the stdio streams and redirecting it. What should happen is that the existing console should be inherited to the new process. This is how `-NoNewWindow` works normally right now. I've got a snippet below that tested this scenario out and it works just fine in that particular case.\r\n\r\nFor your technical details I'm not sure why the process object needs to be serialized. The proposed `Start-Process` should return the process object and start the filename and arguments as requested. This avoids any serialization and extra middleman work that would need to occur to synchronize the data and the object returned back is actually live. I don't see why this wouldn't be possible using the combination of APIs you have mentioned unless I'm missing something\r\n\r\nHere is some test code I wrote to try out the APIs you mentioned, I've never heard of the `Safer*` ones so I was intrigued.\r\n\r\n<details>\r\n  <summary>Click to view code</summary>\r\n\r\n```powershell\r\nAdd-Type -TypeDefinition @'\r\nusing Microsoft.Win32.SafeHandles;\r\nusing System;\r\nusing System.ComponentModel;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace Safer\r\n{\r\n    public class SafeLevelHandle : SafeHandleZeroOrMinusOneIsInvalid\r\n    {\r\n        public SafeLevelHandle() : base(true) { }\r\n\r\n        protected override bool ReleaseHandle()\r\n        {\r\n            return NativeMethods.SaferCloseLevel(this);\r\n        }\r\n    }\r\n\r\n    public enum LevelScope : uint\r\n    {\r\n        Machine = 1,\r\n        User = 2,\r\n    }\r\n\r\n    public enum Level : uint\r\n    {\r\n        Disallowed = 0x00000,\r\n        Untrusted = 0x01000,\r\n        Constrained = 0x10000,\r\n        NormalUser = 0x20000,\r\n        FullyTrusted = 0x40000,\r\n    }\r\n\r\n\r\n    [Flags]\r\n    public enum CreateFlags : uint\r\n    {\r\n        None = 0x0,\r\n        NullIfEqual = 0x1,\r\n        CompareOnly = 0x2,\r\n        MakeInert = 0x4,\r\n        WantFlags = 0x8,\r\n    }\r\n\r\n    public class NativeMethods\r\n    {\r\n        [DllImport(\"Advapi32.dll\")]\r\n        public static extern bool SaferCloseLevel(\r\n            SafeHandle hLevelHandle\r\n        );\r\n\r\n        [DllImport(\"Advapi32.dll\", EntryPoint = \"SaferComputeTokenFromLevel\", SetLastError = true)]\r\n        private static extern bool NativeSaferComputeTokenFromLevel(\r\n            SafeHandle LevelHandle,\r\n            IntPtr InAccessToken,\r\n            out SafeFileHandle OutAccessToken,\r\n            CreateFlags dwFlags,\r\n            IntPtr lpReserved\r\n        );\r\n\r\n        public static SafeHandle SaferComputeTokenFromLevel(SafeHandle level, IntPtr token, CreateFlags flags)\r\n        {\r\n            SafeFileHandle newToken;\r\n            if (!NativeSaferComputeTokenFromLevel(level, token, out newToken, flags, IntPtr.Zero))\r\n                throw new Win32Exception();\r\n\r\n            return newToken;\r\n        }\r\n\r\n        [DllImport(\"Advapi32.dll\", EntryPoint = \"SaferCreateLevel\", SetLastError = true)]\r\n        private static extern bool NativeSaferCreateLevel(\r\n            LevelScope dwScopeId,\r\n            Level dwLevelId,\r\n            int OpenFlags,\r\n            out SafeLevelHandle pLevelHandle,\r\n            IntPtr lpReserved\r\n        );\r\n\r\n        public static SafeHandle SaferCreateLevel(LevelScope scope, Level level)\r\n        {\r\n            SafeLevelHandle levelHandle;\r\n            if (!NativeSaferCreateLevel(scope, level, 1, out levelHandle, IntPtr.Zero))\r\n                throw new Win32Exception();\r\n\r\n            return levelHandle;\r\n        }\r\n    }\r\n}\r\n'@\r\n\r\n# I honestly do not know the difference between Machine and User\r\n$level = [Safer.NativeMethods]::SaferCreateLevel('Machine', 'NormalUser')\r\n$token = [Safer.NativeMethods]::SaferComputeTokenFromLevel($level, [IntPtr]::Zero, 'None')\r\n\r\n# Use $token with CreateProcessAsUser\r\n# Start-ProcessEx is from https://gist.github.com/jborean93/a7c181b1ea0a4c0c8b815af9a8cbe508 and calls CreateProcessAsUser\r\nStart-ProcessEx powershell.exe -Token $token -CreationFlags None\r\n```\r\n</details>\r\n\r\nOne thing we should be wary of is the `runas.exe /trustlevel` and the `Safer*` APIs seem to be a product from the Windows XP era before the whole UAC token split was a thing. What I found when inspecting the tokens is that there are some differences between a user's limited token and the one created by `SaferComputeTokenFromLevel`. These differences are\r\n\r\n* A safer token only contained the `SeChangeNotifyPrivilege` privilege whereas a limited token had that and `SeIncreaseWorkingSetPrivilege`\r\n* The token still contains the `High Mandatory Label` unlike your normal limited token which has a `Medium` one\r\n* It looks like the LogonLUID is still the same as the admin one, this is mostly inconsequential but has some connotations when it comes ot things like mapped drives\r\n\r\nIn saying all that it's a lot simpler to use this `Safer` API and would even work to strip a full admin account to a more restricted token compared to the limited UAC token a normal process runs as.",
    "created_at": "2021-06-11T06:12:39Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15562#issuecomment-859301523",
    "id": 859301523,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15562",
    "node_id": "MDEyOklzc3VlQ29tbWVudDg1OTMwMTUyMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/859301523/reactions"
    },
    "updated_at": "2021-06-11T06:12:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/859301523",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8462645?v=4",
      "events_url": "https://api.github.com/users/jborean93/events{/privacy}",
      "followers_url": "https://api.github.com/users/jborean93/followers",
      "following_url": "https://api.github.com/users/jborean93/following{/other_user}",
      "gists_url": "https://api.github.com/users/jborean93/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jborean93",
      "id": 8462645,
      "login": "jborean93",
      "node_id": "MDQ6VXNlcjg0NjI2NDU=",
      "organizations_url": "https://api.github.com/users/jborean93/orgs",
      "received_events_url": "https://api.github.com/users/jborean93/received_events",
      "repos_url": "https://api.github.com/users/jborean93/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jborean93/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jborean93/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jborean93"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@PowerShell/wg-powershell-cmdlets has been extensively discussing this issue. The mechanisms to both elevate and de-elevate processes depend largely on the underlying operating system. Since PowerShell is operating system neutral, adding such a feature would require specific code for specific target operating systems. \r\n\r\nThat said, given the different OS architectures, the requested feature may be useful only for certain operating systems. For example, in Windows, where there is no `sudo` and support for elevating in-process, such a feature may be more useful than in Linux.\r\n\r\nThe group concluded that such a feature should surface in a separate OS-specific cmdlet. Such a cmdlet can be developed and maintained outside the core engine and hosted in a gallery module. \r\n\r\nSince on Windows there are many different routes an implementation of such a feature can take, the group encourages the community to experiment and come up with a working example. Once such a working sample exists and lives up to the expectations, the group gladly revisits this topic and discusses whether it would be helpful for enterprises to ship out of box due to security and trust reasons. For now, because of above reasoning we close the issue.",
    "created_at": "2021-08-22T13:30:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15562#issuecomment-903269556",
    "id": 903269556,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15562",
    "node_id": "IC_kwDOAvT7bc411sy0",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/903269556/reactions"
    },
    "updated_at": "2021-08-22T13:35:50Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/903269556",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/20953725?v=4",
      "events_url": "https://api.github.com/users/TobiasPSP/events{/privacy}",
      "followers_url": "https://api.github.com/users/TobiasPSP/followers",
      "following_url": "https://api.github.com/users/TobiasPSP/following{/other_user}",
      "gists_url": "https://api.github.com/users/TobiasPSP/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/TobiasPSP",
      "id": 20953725,
      "login": "TobiasPSP",
      "node_id": "MDQ6VXNlcjIwOTUzNzI1",
      "organizations_url": "https://api.github.com/users/TobiasPSP/orgs",
      "received_events_url": "https://api.github.com/users/TobiasPSP/received_events",
      "repos_url": "https://api.github.com/users/TobiasPSP/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/TobiasPSP/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TobiasPSP/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/TobiasPSP"
    }
  },
  {
    "author_association": "NONE",
    "body": "This issue has been marked as won't fix and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
    "created_at": "2021-08-24T09:00:39Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15562#issuecomment-904459173",
    "id": 904459173,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15562",
    "node_id": "IC_kwDOAvT7bc416POl",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/904459173/reactions"
    },
    "updated_at": "2021-08-24T09:00:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/904459173",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/in/26612?v=4",
      "events_url": "https://api.github.com/users/msftbot%5Bbot%5D/events{/privacy}",
      "followers_url": "https://api.github.com/users/msftbot%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/msftbot%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/msftbot%5Bbot%5D/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apps/msftbot",
      "id": 48340428,
      "login": "msftbot[bot]",
      "node_id": "MDM6Qm90NDgzNDA0Mjg=",
      "organizations_url": "https://api.github.com/users/msftbot%5Bbot%5D/orgs",
      "received_events_url": "https://api.github.com/users/msftbot%5Bbot%5D/received_events",
      "repos_url": "https://api.github.com/users/msftbot%5Bbot%5D/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/msftbot%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msftbot%5Bbot%5D/subscriptions",
      "type": "Bot",
      "url": "https://api.github.com/users/msftbot%5Bbot%5D"
    }
  },
  {
    "author_association": "NONE",
    "body": "Was there any solution to this?\r\n\r\nWhen I SSH into my Windows machine, I get an admin prompt, and there appears to be [no way to drop privileges from the SSH prompt](https://github.com/PowerShell/Win32-OpenSSH/issues/1652). ",
    "created_at": "2022-08-19T14:54:31Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15562#issuecomment-1220774839",
    "id": 1220774839,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15562",
    "node_id": "IC_kwDOAvT7bc5Iw4u3",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1220774839/reactions"
    },
    "updated_at": "2022-08-19T14:54:31Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1220774839",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6081085?v=4",
      "events_url": "https://api.github.com/users/bbkane/events{/privacy}",
      "followers_url": "https://api.github.com/users/bbkane/followers",
      "following_url": "https://api.github.com/users/bbkane/following{/other_user}",
      "gists_url": "https://api.github.com/users/bbkane/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/bbkane",
      "id": 6081085,
      "login": "bbkane",
      "node_id": "MDQ6VXNlcjYwODEwODU=",
      "organizations_url": "https://api.github.com/users/bbkane/orgs",
      "received_events_url": "https://api.github.com/users/bbkane/received_events",
      "repos_url": "https://api.github.com/users/bbkane/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/bbkane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bbkane/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/bbkane"
    }
  },
  {
    "author_association": "NONE",
    "body": "I find this to routinely be an issue because you don't actually run with \"elevated permissions\", you run as a different user.\r\n\r\nErgo:\r\n\r\n```\r\nsubst T: $env:TEMP\r\necho \"hello\" >T:foo.txt\r\nstart -verb runas cmd -argumentlist \"/c\", \"copy\", t:foo.txt, $env:TEMP\\copy.txt\r\n```\r\n\r\nwill fail, because T: does not exist for the elevated user, the point being that if you are already elevated, you can't yield back to regular user space.\r\n\r\nPerhaps the real solution then is to find a way to create yourself an elevated ps session to which you can pass invoke-command stuff.\r\n",
    "created_at": "2022-09-20T19:44:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15562#issuecomment-1252826542",
    "id": 1252826542,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15562",
    "node_id": "IC_kwDOAvT7bc5KrJ2u",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1252826542/reactions"
    },
    "updated_at": "2022-09-20T19:44:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1252826542",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/323009?v=4",
      "events_url": "https://api.github.com/users/kfsone/events{/privacy}",
      "followers_url": "https://api.github.com/users/kfsone/followers",
      "following_url": "https://api.github.com/users/kfsone/following{/other_user}",
      "gists_url": "https://api.github.com/users/kfsone/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/kfsone",
      "id": 323009,
      "login": "kfsone",
      "node_id": "MDQ6VXNlcjMyMzAwOQ==",
      "organizations_url": "https://api.github.com/users/kfsone/orgs",
      "received_events_url": "https://api.github.com/users/kfsone/received_events",
      "repos_url": "https://api.github.com/users/kfsone/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/kfsone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kfsone/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/kfsone"
    }
  }
]
