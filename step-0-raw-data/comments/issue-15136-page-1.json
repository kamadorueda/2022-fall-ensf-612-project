[
  {
    "author_association": "CONTRIBUTOR",
    "body": "I like the idea; a few comments:\r\n\r\n* `-From` and `-To` is probably a better pairing, though perhaps, given that `-Pattern` is already `[string[]]` typed,  a `-Between` switch is enough (though perhaps then having to enforce exactly 2 arguments in the cmdlet itself is awkward, and the shift in logic would have to be well-documented).\r\n\r\n* Whether to include the delimiting patterns or not could be handled similar to the `-split` operator: exclude by default, except if _capture groups_ are present in the patterns. This would be a simpler alternative to the look-around assertions.\r\n\r\n* What about extracting _multiple_ blocks? Following the current behavior, this should happen _by default_, except if `-List` is present, which, however, currently only applies to _files_ as input: at most one match _per file_. `-AllMatches` relates to multiple matches _per line_ (input object), and should probably not be repurposed in this context.\r\n\r\n* What if a _multiline_ string _as a single object_ is provided as the input - should automatic splitting into lines then be performed?\r\n\r\n",
    "created_at": "2021-04-01T17:23:05Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15136#issuecomment-812055571",
    "id": 812055571,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15136",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjA1NTU3MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812055571/reactions"
    },
    "updated_at": "2021-04-01T17:23:05Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812055571",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "great idea,\r\n\r\naother idea is to use another parameterSets `Byfields`, and use` -FieldsSeparators` parameter. the two parameter is separated by `|` and its must include 2 filed like this\r\n\r\n`$test | select-string -FieldsSeperator '\\<Start\\>|\\<End\\>'`\r\n",
    "created_at": "2021-04-02T02:51:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15136#issuecomment-812288186",
    "id": 812288186,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15136",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjI4ODE4Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812288186/reactions"
    },
    "updated_at": "2021-04-02T02:51:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812288186",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/36144546?v=4",
      "events_url": "https://api.github.com/users/p0W3RH311/events{/privacy}",
      "followers_url": "https://api.github.com/users/p0W3RH311/followers",
      "following_url": "https://api.github.com/users/p0W3RH311/following{/other_user}",
      "gists_url": "https://api.github.com/users/p0W3RH311/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/p0W3RH311",
      "id": 36144546,
      "login": "p0W3RH311",
      "node_id": "MDQ6VXNlcjM2MTQ0NTQ2",
      "organizations_url": "https://api.github.com/users/p0W3RH311/orgs",
      "received_events_url": "https://api.github.com/users/p0W3RH311/received_events",
      "repos_url": "https://api.github.com/users/p0W3RH311/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/p0W3RH311/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p0W3RH311/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/p0W3RH311"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "You can do this sort of thing using the `switch` statement. For example, to output everything between \"start\" and \"stop\" do\r\n```powershell\r\n$extractedText = switch -regex ($test) { \"start\" {$print=$true} {$print} {$_} \"end\" {$print=$false}}\r\n```\r\nIt's a bit more work but this approach is ultimately more powerful (and faster). Now a nice addition to `switch` would be regex \"ranges\" like:\r\n```powershell\r\nswitch -regex ($test) { \"start\",\"end\" {$_}}\r\n```\r\nwhich simplifies everything. (The `switch` statement is roughly modelled on AWK but was never as complete as I wanted it to be.)",
    "created_at": "2021-04-02T02:52:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15136#issuecomment-812288484",
    "id": 812288484,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15136",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjI4ODQ4NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812288484/reactions"
    },
    "updated_at": "2021-04-02T02:52:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812288484",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/50499275?v=4",
      "events_url": "https://api.github.com/users/bpayette/events{/privacy}",
      "followers_url": "https://api.github.com/users/bpayette/followers",
      "following_url": "https://api.github.com/users/bpayette/following{/other_user}",
      "gists_url": "https://api.github.com/users/bpayette/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/bpayette",
      "id": 50499275,
      "login": "bpayette",
      "node_id": "MDQ6VXNlcjUwNDk5Mjc1",
      "organizations_url": "https://api.github.com/users/bpayette/orgs",
      "received_events_url": "https://api.github.com/users/bpayette/received_events",
      "repos_url": "https://api.github.com/users/bpayette/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/bpayette/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bpayette/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/bpayette"
    }
  },
  {
    "author_association": "NONE",
    "body": "@BrucePay \r\n\r\nthe range extension is powerfull and i hope it implemented. \r\nalso select-string need -fieldsSeparators like in awk  ",
    "created_at": "2021-04-02T03:43:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15136#issuecomment-812300543",
    "id": 812300543,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15136",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjMwMDU0Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812300543/reactions"
    },
    "updated_at": "2021-04-02T03:43:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812300543",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/36144546?v=4",
      "events_url": "https://api.github.com/users/p0W3RH311/events{/privacy}",
      "followers_url": "https://api.github.com/users/p0W3RH311/followers",
      "following_url": "https://api.github.com/users/p0W3RH311/following{/other_user}",
      "gists_url": "https://api.github.com/users/p0W3RH311/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/p0W3RH311",
      "id": 36144546,
      "login": "p0W3RH311",
      "node_id": "MDQ6VXNlcjM2MTQ0NTQ2",
      "organizations_url": "https://api.github.com/users/p0W3RH311/orgs",
      "received_events_url": "https://api.github.com/users/p0W3RH311/received_events",
      "repos_url": "https://api.github.com/users/p0W3RH311/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/p0W3RH311/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p0W3RH311/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/p0W3RH311"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I hate an operator named `-Till` - what soil is going to be tilled by it?\r\n\r\nWhy not `-Until`",
    "created_at": "2021-04-02T13:24:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15136#issuecomment-812527711",
    "id": 812527711,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15136",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjUyNzcxMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812527711/reactions"
    },
    "updated_at": "2021-04-02T13:24:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812527711",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/3630329?v=4",
      "events_url": "https://api.github.com/users/doctordns/events{/privacy}",
      "followers_url": "https://api.github.com/users/doctordns/followers",
      "following_url": "https://api.github.com/users/doctordns/following{/other_user}",
      "gists_url": "https://api.github.com/users/doctordns/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/doctordns",
      "id": 3630329,
      "login": "doctordns",
      "node_id": "MDQ6VXNlcjM2MzAzMjk=",
      "organizations_url": "https://api.github.com/users/doctordns/orgs",
      "received_events_url": "https://api.github.com/users/doctordns/received_events",
      "repos_url": "https://api.github.com/users/doctordns/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/doctordns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/doctordns/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/doctordns"
    }
  },
  {
    "author_association": "NONE",
    "body": "Thanks for the comments and support,\r\n\r\n@mklement0,\r\n> `-From` and `-To` is probably a better pairing\r\n\r\nYou probably right, the reason I used `Till` is because in my language (Dutch) we use different conjunctions for a verb like `Select` (***from** X **To** Y*) than a verb like `Move`  (***from** X **To** Y*) and they do have indeed a slightly different meaning.  \r\nAnyways,  I don't care much with parameter names are eventually chosen. I have changed the original purpose according to this suggestion. (Also note @doctordns' suggestion: `Until` might also be correct).\r\n\r\n> a `-Between` switch is enough\r\n\r\nBesides your own counter argument, I would also like to be able to omit one or the other parameter. The point is that the default expression for both parameters is not an empty expression but more something like [`(?=a)b`](https://stackoverflow.com/a/3609359) (always false). This will work for omitting the `-ToPattern` parameter, but there is even a little pitfall in omitting the `-FromPattern` parameter: you might think this should default to something like `.*` to start with the first line, but the result be that it will immediately reenables the \"PassTrue\" again after the `ToPattern` is found. Knowing that I would also expect to receive *multiple* `From`/`To` blocks when they exist, e.g.:\r\n```PowerShell\r\n($Test + $Test) |SelectString -From '\\<Start\\>.*' -To '.*\\<End\\>'\r\n\r\n[Four]\r\n[Five][Six]\r\n[Four]\r\n[Five][Six]\r\n```\r\nIn other words, To receive just the last block, I would like to be able to do this:\r\n(Select everything from the first `End` marker and then select everything between `Start` and `End`)\r\n```PowerShell\r\n($Test + $Test) |SelectString -From '\\<End\\>.*' |SelectString -From '\\<Start\\>.*' -To '.*\\<End\\>'\r\n```\r\nI have updated the prototype a little for being able to omit the `-FromPattern` or `-ToPattern` parameters.  \r\nYou can of cause still do something similar with a single `-Between` parameter but I think it is less clearer with omitting the `From` or `To`.\r\n\r\n> `-List` and `-AllMatches`\r\n\r\nAs in the example in the above response, I think that these parameters are indeed a little redundant taken the flexibility of these purposed parameters. Anyways, if the purpose is accepted, I am happy to give it some deeper thoughts on how these existing parameters could be combined (or mutual excluded).\r\n\r\n> What if a _multiline_ string _as a single object_ is provided as the input - should automatic splitting into lines then be performed?\r\n\r\nI don't think they should be automatically be split. Instead, I would like to be able to do this:\r\n```PowerShell\r\n... |Out-String -Stream |Select-String ...\r\n```\r\n(According to your issue [`Out-String -Stream`  unexpectedly does not split multi-line input strings into individual lines too `#14638`](https://github.com/PowerShell/PowerShell/issues/14638))\r\n\r\n@p0W3RH311,\r\n\r\n> use `-FieldsSeparators` parameter\r\n\r\nI think that regular expressions are to complicated by itself to be joined to a single string (what if \"`|`\" is part of my search pattern?).",
    "created_at": "2021-04-02T15:37:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15136#issuecomment-812582319",
    "id": 812582319,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15136",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjU4MjMxOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812582319/reactions"
    },
    "updated_at": "2021-04-03T07:42:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812582319",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  },
  {
    "author_association": "NONE",
    "body": "@bpayette,\r\n> It's a bit more work but this approach is ultimately more powerful (and faster)\r\n\r\nI like your alternative, but <strike>I don't see why it is \"*more powerful (and faster)*\". Besides</strike> as you mentioned yourself, it is more work and apparently requires more programming skills. Taken your own example, you should initiate `$print`, if you neglect to do so and coincidently define `$print` at a higher scope (which in most cases trutifies), it will fail and start to output from the beginning.",
    "created_at": "2021-04-02T16:15:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15136#issuecomment-812597776",
    "id": 812597776,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15136",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjU5Nzc3Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812597776/reactions"
    },
    "updated_at": "2021-04-08T08:01:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812597776",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  },
  {
    "author_association": "NONE",
    "body": "@iRon7 \r\n\r\n`I think that regular expressions are to complicated by itself to be joined to a single string (what if \"|\" is part of my search pattern?).`\r\n\r\nthe solution is to umbed the 2 regex inside quote/dquote like:\r\n\r\n`$test | select-string -FieldsSeperator \"'^\\|'|'\\|$'\"`\r\n\r\nor maybe more clean and powershell-way with hash\r\n\r\n\r\n```\r\n$test | select-string -FieldsSeperator @{ \r\n  First = 'regex'\r\n  Last = 'regex'\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2021-04-02T17:54:39Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15136#issuecomment-812640469",
    "id": 812640469,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15136",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjY0MDQ2OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812640469/reactions"
    },
    "updated_at": "2021-04-02T17:55:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812640469",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/36144546?v=4",
      "events_url": "https://api.github.com/users/p0W3RH311/events{/privacy}",
      "followers_url": "https://api.github.com/users/p0W3RH311/followers",
      "following_url": "https://api.github.com/users/p0W3RH311/following{/other_user}",
      "gists_url": "https://api.github.com/users/p0W3RH311/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/p0W3RH311",
      "id": 36144546,
      "login": "p0W3RH311",
      "node_id": "MDQ6VXNlcjM2MTQ0NTQ2",
      "organizations_url": "https://api.github.com/users/p0W3RH311/orgs",
      "received_events_url": "https://api.github.com/users/p0W3RH311/received_events",
      "repos_url": "https://api.github.com/users/p0W3RH311/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/p0W3RH311/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p0W3RH311/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/p0W3RH311"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@p0W3RH311, I don't think we want to refashion `Select-String` into an `awk`-like utility, which is both much more open-ended in its purpose while offering convenient features for splitting _each line_ into fields, which doesn't really apply to `Select-String`.\r\n\r\n@iRon7, understood re separate `-FromPattern` and `-ToPattern` parameters and splitting multi-line input.\r\n\r\n>  I don't see why it is \"more powerful (and faster)\".\r\n\r\n`switch` is indeed much more open-ended and flexible than `Select-String` and, as a language statement that doesn't (typically) process pipeline input object by object, it is generally significantly faster (especially with collections already in memory in full); the only case in which `Select-String` can (slightly) outperform `switch -File` is when `Select-String` is passed a _filename_ rather than object-by-object pipeline input, in which case it reads the file itself, efficiently.\r\n\r\nBut, as in previous conversations, this is not an either-or scenario:\r\n_Both_ your proposal and @BrucePay's `switch` enhancement sound like they may be worthwhile.\r\n\r\n(If that is the consensus, then the new features should at least work _similarly_, and one challenge that comes to mind is that the `'<regex>', '<regex>'` syntax - familiar from both `awk` and `sed` - has _inclusive_ logic; that is, the lines matching the patterns are selected too. Also, given the context, the syntax may inspire the expectation that `'<regex>', '<regex>'` will select any _single_ line matching _any one_ of the (two) specified regexes. `switch` offers great flexibility already, but does have complexity, and adding to that may be a concern.)\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2021-04-02T20:00:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15136#issuecomment-812688298",
    "id": 812688298,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15136",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjY4ODI5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 3,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 3,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812688298/reactions"
    },
    "updated_at": "2021-04-02T20:00:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812688298",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "NONE",
    "body": "@mklement0 \r\n\r\nhello, thanks for your precision. but the second example  is a powershell-way and its much elegant and flexible than awk or sed , perhaps we can extented like:\r\n\r\n```\r\n$test | select-string -FieldsSeperator @{ \r\n  First = 'regex'\r\n  Last = 'regex'\r\n  Inclusive = $true/$false\r\n}\r\n```\r\n\r\nselect-string is inspired from grep but its limited and miss a lot of thing ",
    "created_at": "2021-04-03T02:23:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15136#issuecomment-812779108",
    "id": 812779108,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15136",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjc3OTEwOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812779108/reactions"
    },
    "updated_at": "2021-04-03T02:26:58Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812779108",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/36144546?v=4",
      "events_url": "https://api.github.com/users/p0W3RH311/events{/privacy}",
      "followers_url": "https://api.github.com/users/p0W3RH311/followers",
      "following_url": "https://api.github.com/users/p0W3RH311/following{/other_user}",
      "gists_url": "https://api.github.com/users/p0W3RH311/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/p0W3RH311",
      "id": 36144546,
      "login": "p0W3RH311",
      "node_id": "MDQ6VXNlcjM2MTQ0NTQ2",
      "organizations_url": "https://api.github.com/users/p0W3RH311/orgs",
      "received_events_url": "https://api.github.com/users/p0W3RH311/received_events",
      "repos_url": "https://api.github.com/users/p0W3RH311/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/p0W3RH311/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p0W3RH311/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/p0W3RH311"
    }
  },
  {
    "author_association": "NONE",
    "body": "@bpayette,\r\n\r\n<sub>@mklement0, is right (as usual😊) \"*it is not an either-or scenario*\". Therefore, I hidded my previous comment and rewrote it below)</sub>\r\n\r\n```PowerShell\r\n$extractedText = switch -regex ($test) { \"start\" {$print=$true} {$print} {$_} \"end\" {$print=$false}}\r\n```\r\nUsing the current switch statement, as you mentioned yourself and an argument for this propose; it is more work and requires more programming skills. Taken your own example, you should initiate `$print`, if you neglect to do so and coincidently define `$print` at a higher scope (which in most cases trutifies), it will fail as it will start to output from the beginning.\r\n\r\n```PowerShell\r\nswitch -regex ($test) { \"start\",\"end\" {$_}}\r\n```\r\nI definitely, like the `switch` range suggestion. One thing to consider thou, is how to being able to omit one or the other pattern (to select *everything from `\"start\"` marker to the **end-of-Stream*** or *select everything from the **Start-of-Stream** to the `\"end\"` marker*, see also my comment on: [`a -Between switch is enough`](https://github.com/PowerShell/PowerShell/issues/15136#issuecomment-812582319)).\r\nAnyways, I would recommend to open a seperate [Feature Request/Idea 🚀](https://github.com/PowerShell/PowerShell/issues/new?assignees=&labels=Issue-Enhancement%2C+Needs-Triage&template=Feature_Request.md&title=Feature+Request) for this.\r\n",
    "created_at": "2021-04-03T10:11:54Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/15136#issuecomment-812844482",
    "id": 812844482,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/15136",
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMjg0NDQ4Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812844482/reactions"
    },
    "updated_at": "2021-04-03T12:24:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/812844482",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/8080834?v=4",
      "events_url": "https://api.github.com/users/iRon7/events{/privacy}",
      "followers_url": "https://api.github.com/users/iRon7/followers",
      "following_url": "https://api.github.com/users/iRon7/following{/other_user}",
      "gists_url": "https://api.github.com/users/iRon7/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iRon7",
      "id": 8080834,
      "login": "iRon7",
      "node_id": "MDQ6VXNlcjgwODA4MzQ=",
      "organizations_url": "https://api.github.com/users/iRon7/orgs",
      "received_events_url": "https://api.github.com/users/iRon7/received_events",
      "repos_url": "https://api.github.com/users/iRon7/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iRon7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iRon7/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iRon7"
    }
  }
]
