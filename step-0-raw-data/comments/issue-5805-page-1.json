[
  {
    "author_association": "COLLABORATOR",
    "body": "ðŸ˜„ Once I opened the case on Connect site and this case was closed \"by design\". It seems now we ready implement this enhancement.",
    "created_at": "2018-01-06T08:00:59Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-355731074",
    "id": 355731074,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTczMTA3NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 1,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/355731074/reactions"
    },
    "updated_at": "2018-01-06T08:00:59Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/355731074",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@SteveL-MSFT Could you please consider this on PowerShell committee with #5643?",
    "created_at": "2018-01-06T08:08:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-355731460",
    "id": 355731460,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTczMTQ2MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/355731460/reactions"
    },
    "updated_at": "2018-01-06T08:08:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/355731460",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@mklement0 Awesome!",
    "created_at": "2018-01-08T23:46:11Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-356133024",
    "id": 356133024,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjEzMzAyNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/356133024/reactions"
    },
    "updated_at": "2018-01-08T23:46:11Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/356133024",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/9250262?v=4",
      "events_url": "https://api.github.com/users/bergmeister/events{/privacy}",
      "followers_url": "https://api.github.com/users/bergmeister/followers",
      "following_url": "https://api.github.com/users/bergmeister/following{/other_user}",
      "gists_url": "https://api.github.com/users/bergmeister/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/bergmeister",
      "id": 9250262,
      "login": "bergmeister",
      "node_id": "MDQ6VXNlcjkyNTAyNjI=",
      "organizations_url": "https://api.github.com/users/bergmeister/orgs",
      "received_events_url": "https://api.github.com/users/bergmeister/received_events",
      "repos_url": "https://api.github.com/users/bergmeister/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/bergmeister/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bergmeister/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/bergmeister"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "Does `$list + $newElement` always result in `$list.Add($newElement)` and then return `$list`, or only `$list += $newElement` and `$list = $list + $newElement` result in `$list.Add($newElement)`?\r\n\r\nIf it's the latter, will `$list + $newElement` still return an object array? Then comparing `$newlist = $list + $newElement` with `$list = $list + $newElement`, the behavior of `binary add` needs to be different in those two cases, which in my opionion might be pretty hacky in imeplementation.\r\n\r\nI thought about having `$list + $newElement` always result in `$list.Add($newElement)` and then return `$list`, when it's able to. The potential problem is that an operand (`$list`) would be changed in the binary add operation, and I'm not sure whether that would be a bad UX.\r\n\r\nWe also need to think about the consistency with Hashtable add operation. As shown in the example scripts below, adding two dictionary always creates a new Hashtable instance, and `$hash1 += $hash2` will also result in a new Hashtable assigned to `$hash1`.\r\n```\r\n$h = @{ name = \"hello\" }\r\n$s = @{ blah = \"world\" }\r\n$m = $h + $s # new Hashtable is created\r\n[System.Object]::ReferenceEquals($m, $h) #  False\r\n[System.Object]::ReferenceEquals($m, $s) # False\r\n\r\n$oldh = $h\r\n$h += $s # create new Hashtable\r\n[System.Object]::ReferenceEquals($h, $oldh) # False\r\n```\r\n  \r\n  ",
    "created_at": "2018-01-09T06:10:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-356190050",
    "id": 356190050,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjE5MDA1MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/356190050/reactions"
    },
    "updated_at": "2018-01-09T17:34:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/356190050",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Does $list + $newElement always result in $list.Add($newElement)\r\n\r\nNo - only if you assign back to the same variable; with the exception of the `<op>=` compound operators, operators shouldn't modify their operands in place as a side effect - that would indeed be unexpected.\r\n\r\n---\r\n\r\nYes, even though hashtables commendably do preserve the LHS type, they currently always create a _new_ instance, as you demonstrate.\r\n\r\nI suppose one way to resolve this - if it's not too risky in terms of backward compatibility - is to update hashtable LHSs in place too, _if_ self-assignment is involved.\r\n\r\nResolving in the opposite direction - also always creating new instances for _lists_ - would defeat the purpose of allowing efficient, incremental construction of (large) lists via `+`, as suggested in #5643  (my guess is that this is less of a concern with hashtables, as they typically don't grow too large).\r\n\r\n---\r\n\r\nPerhaps there are implementation difficulties and even conceptual barriers I'm not considering; I guess we need to decide what specific expression forms to apply the proposed behavior to.\r\n\r\n`$list += ...` is unambiguous, but things get trickier with `$list = ...`: \r\n\r\n`$list = $list + ...` is the equivalent of the above; `$list = ($list + ...)` should be the same, but what about other variations, such as `$list = $($list + ... )` or `$list = @($list + ... )`?\r\n\r\nThere is also the other array-aware operator, `*` (am I missing others?): `$list *= 2` should by analogy also append in place.\r\n\r\nIn the end it must be reasonably obvious when in-place updating occurs and when not - though casual users may not care.\r\n\r\n",
    "created_at": "2018-01-10T13:21:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-356600232",
    "id": 356600232,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NjYwMDIzMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/356600232/reactions"
    },
    "updated_at": "2018-01-10T13:21:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/356600232",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "@PowerShell/powershell-committee reviewed this and agreed that we should adopt only the `+=`, `*=`, and `-=` (if possible) syntax as they are unambiguous.  Although technically a breaking change, it should not functionally affect most users other than giving them a perf benefit.",
    "created_at": "2018-01-17T23:17:53Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-358482355",
    "id": 358482355,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODQ4MjM1NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/358482355/reactions"
    },
    "updated_at": "2018-01-17T23:17:53Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/358482355",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "Note to whoever decides to implement this - as currently implemented, the binary operation binder knows nothing about assignment, so care is required to restrict this to `+=` and not `+`.\r\n\r\nI do have a slight concern that by adding operator support, we'll make it much easier to make assumptions about how adding to lists works - e.g. if I add 2 lists - is that concatenation? Probably not, but if you don't introduce another operator, it will trip people up.",
    "created_at": "2018-01-18T03:04:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-358523309",
    "id": 358523309,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODUyMzMwOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/358523309/reactions"
    },
    "updated_at": "2018-01-18T03:04:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/358523309",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "I can take a stab at `+=` and `*=` as I have some code for this when working on the `ListExpression`.\r\n\r\n> we'll make it much easier to make assumptions about how adding to lists works - e.g. if I add 2 lists - is that concatenation? \r\n\r\nNot sure I completely understand what you mean :) Adding two lists is kinda concatenation today -- it creates a new array containing all the elements from those 2 lists. So I think `$list += $list2` should be adding the elements from `$list2` to `$list`.",
    "created_at": "2018-01-18T05:21:45Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-358540888",
    "id": 358540888,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODU0MDg4OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/358540888/reactions"
    },
    "updated_at": "2018-01-18T05:21:45Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/358540888",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": ">If it's the latter, will $list + $newElement still return an object array? Then comparing $newlist = $list + $newElement with $list = $list + $newElement, the behavior of binary add needs to be different in those two cases, which in my opionion might be pretty hacky in imeplementation.\r\n\r\nWe should document that `$list + $newElement` and `$hash + $newElement` always new object.\r\nMaybe make pivot table for all such operations for docs?",
    "created_at": "2018-01-18T06:17:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-358549088",
    "id": 358549088,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODU0OTA4OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/358549088/reactions"
    },
    "updated_at": "2018-01-18T06:17:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/358549088",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "If you just call List.Add, you have a list of lists. If you concatenate, you need to call AddRange. Would you do that for anything that is enumerable?\r\n\r\nI think reasonable people could expect either of the behaviors, and this is why languages with list primitives have a concatenation operator.",
    "created_at": "2018-01-18T06:24:16Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-358550093",
    "id": 358550093,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODU1MDA5Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/358550093/reactions"
    },
    "updated_at": "2018-01-18T18:10:57Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/358550093",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/2148248?v=4",
      "events_url": "https://api.github.com/users/lzybkr/events{/privacy}",
      "followers_url": "https://api.github.com/users/lzybkr/followers",
      "following_url": "https://api.github.com/users/lzybkr/following{/other_user}",
      "gists_url": "https://api.github.com/users/lzybkr/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/lzybkr",
      "id": 2148248,
      "login": "lzybkr",
      "node_id": "MDQ6VXNlcjIxNDgyNDg=",
      "organizations_url": "https://api.github.com/users/lzybkr/orgs",
      "received_events_url": "https://api.github.com/users/lzybkr/received_events",
      "repos_url": "https://api.github.com/users/lzybkr/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/lzybkr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lzybkr/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/lzybkr"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "> We should document that $list + $newElement and $hash + $newElement always new object.\r\nMaybe make pivot table for all such operations for docs?\r\n\r\nTo @iSazonov, I agree that we need to document the behavior.\r\n\r\n> If you just call List.Add, you have a list of lists. If you concatenate, you need to call AddRange. Would you do that for anything that is enumerable?\r\n\r\nTo @lzybkr, I see your point now. The current behavior of binary add operation is to create a new array containing all element from _left-hand-side_ and _right-hand-side_ as long as both are enumerable. I will mimic that behavior for the implementation of `+=` for now, and we can wait for the feedback later.",
    "created_at": "2018-01-18T18:19:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-358735381",
    "id": 358735381,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODczNTM4MQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/358735381/reactions"
    },
    "updated_at": "2018-01-18T18:19:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/358735381",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/127450?v=4",
      "events_url": "https://api.github.com/users/daxian-dbw/events{/privacy}",
      "followers_url": "https://api.github.com/users/daxian-dbw/followers",
      "following_url": "https://api.github.com/users/daxian-dbw/following{/other_user}",
      "gists_url": "https://api.github.com/users/daxian-dbw/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/daxian-dbw",
      "id": 127450,
      "login": "daxian-dbw",
      "node_id": "MDQ6VXNlcjEyNzQ1MA==",
      "organizations_url": "https://api.github.com/users/daxian-dbw/orgs",
      "received_events_url": "https://api.github.com/users/daxian-dbw/received_events",
      "repos_url": "https://api.github.com/users/daxian-dbw/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/daxian-dbw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daxian-dbw/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/daxian-dbw"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Unfortunately, I did a poor job of separating two distinct aspects:\r\n\r\n* (a) the desire to _preserve the type_ of an `IList` LHS with `+`, `*` (when does `-` come into play?)\r\n\r\n* (b) the desire to (additionally) _update the LHS in place_ with `+=`, `*=`, `-=`\r\n\r\nI feel that for consistency with existing operator behavior (a) should be implemented either way, whether with or without in-place updating.\r\n\r\nAs for (b), just to clarify: Is the committee's decision to indeed implement in-place updating for `+=`, `*=`, `-=` (which I hope)?\r\n \r\nIf so, I feel slightly uneasy about deviating from the equivalence of `$l += ...` and `$l = $l + ...`.\r\n\r\n---\r\n\r\nRe `.Add()` vs. `.AddRange()` (adding a collection as a single new element vs. concatenating the two collections): \r\n\r\nAs @daxian-dbw points out, `+` with _arrays_ already uses _concatenation_ (e.g., `1, 2 + 3, 4` yields `1, 2, 3, 4`), so I think users will expect the same behavior by analogy for other collection types.\r\n\r\nNote that the `IList` interface doesn't actually have an `.AddRange()` method, so iterative `.Add()` calls may be needed.\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2018-01-19T23:09:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-359115260",
    "id": 359115260,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1OTExNTI2MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/359115260/reactions"
    },
    "updated_at": "2018-01-19T23:09:17Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/359115260",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "How about this:\r\n```powershell\r\n$a=[Collections.Generic.List[object]]::new((1..3))\r\n$b=$a\r\n$b+=4\r\n$a.Count # expect it to be 3\r\n```\r\nThe fact that at `$b+=4` variable `$b` loose reference to the old list does not mean that no one else have reference to the same list and it is OK to change it. IMO, intention to change collection should be explicit and expressed by calling the `Add` method.",
    "created_at": "2018-02-06T22:44:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-363590903",
    "id": 363590903,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2MzU5MDkwMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/363590903/reactions"
    },
    "updated_at": "2018-02-06T22:44:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/363590903",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/17184058?v=4",
      "events_url": "https://api.github.com/users/PetSerAl/events{/privacy}",
      "followers_url": "https://api.github.com/users/PetSerAl/followers",
      "following_url": "https://api.github.com/users/PetSerAl/following{/other_user}",
      "gists_url": "https://api.github.com/users/PetSerAl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PetSerAl",
      "id": 17184058,
      "login": "PetSerAl",
      "node_id": "MDQ6VXNlcjE3MTg0MDU4",
      "organizations_url": "https://api.github.com/users/PetSerAl/orgs",
      "received_events_url": "https://api.github.com/users/PetSerAl/received_events",
      "repos_url": "https://api.github.com/users/PetSerAl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PetSerAl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PetSerAl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PetSerAl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@PetSerAl:\r\n\r\nBear in mind that the concept of a _reference_ isn't even on the radar of most PowerShell users, if I were to guess.\r\n\r\nA casual user using `$a += ...` to \"append to\" an array may not even be aware that a new array instance is created every time and how expensive that is.\r\nThat's why switching that plumbing to in-place updating would provide a great, automatic optimization - and would obviate the need for the nontrivial mental switch from PS-native operator syntax (`+=`) to \"foreign\" method syntax (`.Add(...)`).\r\n\r\nYes, advanced users would then need to be aware that `=+` performs in-place updating and potentially affects references to the same object held elsewhere - but, in my estimation, that price is worth paying (and clearly documentating that behavior would help).\r\n\r\n\r\n\r\n\r\n\r\n",
    "created_at": "2018-02-19T17:28:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-366758514",
    "id": 366758514,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Njc1ODUxNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/366758514/reactions"
    },
    "updated_at": "2018-02-19T17:28:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/366758514",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@mklement0\r\nAs far as I understand, in .NET it is expected that operators would not visible modify their arguments. To this point PowerShell follows that rule. I do not see good reasons why it need to deviate from it now.\r\n\r\n>Bear in mind that the concept of a reference isn't even on the radar of most PowerShell users, if I were to guess.\r\n\r\nSo, how would you answer to their question: \"I change only $b, why does $a also changed?\" â€” without involving reference concept? This change actually require users to be more aware of that concept.\r\n\r\n>A casual user using `$a += ...` to \"append to\" an array may not even be aware that a new array instance is created every time and how expensive that is.\r\n\r\nHow them benefit of that change? If you do not create `List` in the first place, then it still will be costly array addition. And, if you know that you need to use `List` for performance, then you should also have to know how to use it right.\r\n\r\nAnd I do not see how method calling is less native to PowerShell, than operators. It was here from version one. And, after all, object-oriented concept is what make PowerShell different from other shells.\r\n\r\nAlso, `System.Collections.Generic.List<T>` is not only `IList` type in .NET. How you planning to implement proposed behavior for unknown type of `IList`? For example `IList` can be read-only: should `+=` fail, or create new list, should new list be of the same read-only type, what if there are no public constructor?",
    "created_at": "2018-02-19T21:12:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-366803839",
    "id": 366803839,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjgwMzgzOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/366803839/reactions"
    },
    "updated_at": "2018-02-19T21:12:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/366803839",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/17184058?v=4",
      "events_url": "https://api.github.com/users/PetSerAl/events{/privacy}",
      "followers_url": "https://api.github.com/users/PetSerAl/followers",
      "following_url": "https://api.github.com/users/PetSerAl/following{/other_user}",
      "gists_url": "https://api.github.com/users/PetSerAl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PetSerAl",
      "id": 17184058,
      "login": "PetSerAl",
      "node_id": "MDQ6VXNlcjE3MTg0MDU4",
      "organizations_url": "https://api.github.com/users/PetSerAl/orgs",
      "received_events_url": "https://api.github.com/users/PetSerAl/received_events",
      "repos_url": "https://api.github.com/users/PetSerAl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PetSerAl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PetSerAl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PetSerAl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> So, how would you answer to their question: \"I change only $b, why does $a also changed?\"\r\n\r\nIf someone doesn't know about references, that question would arise irrespective of this proposed change: changing `$b` using _any_ mechanism would cause this confusion.\r\n\r\n> How them benefit of that change? If you do not create List in the first place, then it still will be costly array addition.\r\n\r\nAh, yes. I guess I still haven't let go of the idea that PowerShell [should use lists rather than arrays with `@(...)`](https://github.com/PowerShell/PowerShell/issues/5643#issuecomment-358488449). There's always the future!\r\n\r\n> if you know that you need to use List for performance, then you should also have to know how to use it right.\r\n\r\nThat's not a matter of right and wrong, but one of _convenience_ and being _PowerShell-like_:\r\n\r\nIf you only know PowerShell, then all you need to know is that `[list]` is a mutable data structure you can efficiently append to - you shouldn't have to know about the underlying .NET type and its members.\r\nFrom a PowerShell perspective, using `+=` to append to that data structure makes sense.\r\n\r\n> And I do not see how method calling is less native to PowerShell, than operators. It was here from version one.\r\n\r\n_Property_ access comes naturally in PowerShell, _method_ calls do not.\r\n\r\nIdeally, you never need to call methods - that's what _cmdlets_ are for.\r\n\r\nThe context switching between PowerShell's argument mode and .NET method syntax is a perennial pain point, even for experienced users.\r\n\r\n> For example IList can be read-only: should += fail, or create new list?\r\n\r\nIt should fail.\r\n\r\n",
    "created_at": "2018-02-19T21:50:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-366811092",
    "id": 366811092,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjgxMTA5Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/366811092/reactions"
    },
    "updated_at": "2018-02-19T21:50:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/366811092",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": ">Ideally, you never need to call methods - that's what cmdlets are for.\r\n\r\nSo, this would be ideal solution:\r\n```powershell\r\nAdd-ElementToList -List $List -Element $Element\r\n```",
    "created_at": "2018-02-19T22:34:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-366818435",
    "id": 366818435,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NjgxODQzNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/366818435/reactions"
    },
    "updated_at": "2018-02-19T22:34:03Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/366818435",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/17184058?v=4",
      "events_url": "https://api.github.com/users/PetSerAl/events{/privacy}",
      "followers_url": "https://api.github.com/users/PetSerAl/followers",
      "following_url": "https://api.github.com/users/PetSerAl/following{/other_user}",
      "gists_url": "https://api.github.com/users/PetSerAl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PetSerAl",
      "id": 17184058,
      "login": "PetSerAl",
      "node_id": "MDQ6VXNlcjE3MTg0MDU4",
      "organizations_url": "https://api.github.com/users/PetSerAl/orgs",
      "received_events_url": "https://api.github.com/users/PetSerAl/received_events",
      "repos_url": "https://api.github.com/users/PetSerAl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PetSerAl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PetSerAl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PetSerAl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "True, but let's focus on the important parts first:\r\n\r\nThe cryptic `1 + 1` should really be:\r\n\r\n```powershell\r\nAdd-Item -LeftOperand 1 -RightOperand 1\r\n```\r\n\r\nFor power users (method actors, if you will):\r\n\r\n```powershell\r\n1.Add(1)\r\n```\r\n",
    "created_at": "2018-02-20T03:04:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-366854428",
    "id": 366854428,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Njg1NDQyOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/366854428/reactions"
    },
    "updated_at": "2018-02-20T03:04:50Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/366854428",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Kidding aside: \r\n\r\n[Tcl](https://en.wikipedia.org/wiki/Tcl#Syntax_and_fundamental_semantics) is an example of a language where _everything_ is invoked with shell-like (argument-mode) syntax and there's something to be said for this simplification. \r\nClearly, though, that is not the direction PowerShell chose.\r\n\r\nInstead, PowerShell uses _operators_ to provide convenient abstractions: Much of what requires _method calls_ in, say, C#, is provided via operators such as `-join`, `-split`, `-replace`, ...\r\n\r\nTo be clear: I'm not saying that you should _avoid_ method calls - full access to the .NET Framework is a wonderful ability that sets PowerShell apart from other shells - I'm saying that you shouldn't _have to_ call methods for _basic operations_, as calling methods is an _advanced skill_, both for _syntactic reasons_ and having to know another _knowledge domain_.\r\n\r\nLet's take PowerShell's _array_ handling, for example:\r\n\r\nThe wonderfully simple construction of arrays (`1, 2`) and the ability to concatenate them by _operator_ (`1, 2 + 3, 4`), to test for membership (`1 -in 1, 2`), ...,  shields you from having to know the underlying `[object[]]` .NET type, and for most array uses you never need to call its methods.\r\n\r\nTo combine convenient abstraction with _reasonable performance_ when it comes to _gradually building_  arrays (`$a += ...`), PowerShell should have implemented all of the above as `[List[object]]` (or at least `[ArrayList]`) rather than `[object[]]` from the get-go, but it sounds like it's too late to change that, at least based on the current assessment (is the future here yet?).\r\n\r\nThe best we can do now is to provide a _PowerShell-like_ way to construct a list (`[list] (1, 2, 3)` currently being discussed) and _then provide the same syntactic convenience as for arrays_ - with the notable addition of making `+=` extend the list in place.\r\n\r\n---\r\n\r\nAs an aside: consider how PowerShell's one foray into method syntax has fared; the (confusingly named) `.ForEach()` and `.Where()` _collection operators_ never gained traction.\r\n",
    "created_at": "2018-02-20T15:41:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-367018356",
    "id": 367018356,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NzAxODM1Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/367018356/reactions"
    },
    "updated_at": "2018-02-20T15:41:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/367018356",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@mklement0\r\nFor me what you are proposing is abusing operators. It is like C++ repurpose bit-shift operators for input-output handling. I do not like to have such thing in PowerShell. From previous .NET/C# experience I have expectation (IMO, reasonable), that there are some boundaries for expected operators behavior in .NET environment.\r\n\r\n- `a += b` should be semantically equivalent to `a = a + b`.\r\nC#, for example, does not even allows to overload `+=` directly.\r\n- Operators should not visible modify theirs arguments.\r\nC# guides discourage defining operators for mutable types in the first place.\r\n\r\nI would understand breaking that boundaries if in return that provide **very** good benefits, which can not be achieved otherwise. But what we have there?\r\n\r\nYou would not get any performance benefits unless user use some other type of collection instead of default array. So, instead of array we can provide for users PowerShell own list implementation, which would be friendly to repeatable `+=` call and does not require sacrifice of operators sanity.\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\npublic class ListWithFastAddition : IList<object>, IReadOnlyList<object>, IList, ICloneable {\r\n    public static ListWithFastAddition operator +(ListWithFastAddition list, object item) {\r\n        if(list==null) {\r\n            throw new ArgumentNullException(nameof(list));\r\n        }\r\n        ListWithFastAddition result = list.Clone();\r\n        result.Add(item);\r\n        return result;\r\n    }\r\n\r\n    private List<object> list;\r\n    private int count;\r\n\r\n    public ListWithFastAddition() : this(new List<object>(), -1) { }\r\n    private ListWithFastAddition(List<object> list, int count) {\r\n        this.list = list;\r\n        this.count = count;\r\n    }\r\n\r\n    public object this[int index] {\r\n        get => index<Count ? list[index] : throw new ArgumentOutOfRangeException(nameof(index));\r\n        set {\r\n            if(OwnList) {\r\n                list[index] = value;\r\n            } else if(index>=0 && index<count) {\r\n                list = list.GetRange(0, count);\r\n                count = -1;\r\n                list[index] = value;\r\n            } else {\r\n                throw new ArgumentOutOfRangeException(nameof(index));\r\n            }\r\n        }\r\n    }\r\n    public int Count => OwnList ? list.Count : count;\r\n    public bool IsReadOnly => false;\r\n    private bool OwnList => count==-1;\r\n\r\n    public void Add(object item) {\r\n        if(OwnList) {\r\n            list.Add(item);\r\n        } else if(count==list.Count) {\r\n            list.Add(item);\r\n            count = list.Count;\r\n        } else {\r\n            list = list.GetRange(0, count);\r\n            count = -1;\r\n            list.Add(item);\r\n        }\r\n    }\r\n    public void Clear() {\r\n        if(OwnList) {\r\n            list.Clear();\r\n        } else {\r\n            list = new List<object>();\r\n            count = -1;\r\n        }\r\n    }\r\n    public ListWithFastAddition Clone() {\r\n        if(OwnList) {\r\n            count = list.Count;\r\n        }\r\n        return new ListWithFastAddition(list, count);\r\n    }\r\n    public bool Contains(object item) => IndexOf(item) >= 0;\r\n    public void CopyTo(object[] array, int index) => list.CopyTo(0, array, index, Count);\r\n    public IEnumerator<object> GetEnumerator() => OwnList ? list.GetEnumerator() : list.Take(count).GetEnumerator();\r\n    public int IndexOf(object item) => list.IndexOf(item, 0, Count);\r\n    public void Insert(int index, object item) {\r\n        if(OwnList) {\r\n            list.Insert(index, item);\r\n        } else if(index==count && count==list.Count) {\r\n            list.Insert(index, item);\r\n            count = list.Count;\r\n        } else if(index>=0 && index<=count) {\r\n            list = list.GetRange(0, count);\r\n            count = -1;\r\n            list.Insert(index, item);\r\n        } else {\r\n            throw new ArgumentOutOfRangeException(nameof(index));\r\n        }\r\n    }\r\n    public bool Remove(object item) {\r\n        if(!OwnList) {\r\n            list = list.GetRange(0, count);\r\n            count = -1;\r\n        }\r\n        return list.Remove(item);\r\n    }\r\n    public void RemoveAt(int index) {\r\n        if(OwnList) {\r\n            list.RemoveAt(index);\r\n        } else if(index>=0 && index<count) {\r\n            list = list.GetRange(0, count);\r\n            count = -1;\r\n            list.RemoveAt(index);\r\n        } else {\r\n            throw new ArgumentOutOfRangeException(nameof(index));\r\n        }\r\n    }\r\n\r\n    bool IList.IsFixedSize => false;\r\n    int IList.Add(object item) {\r\n        Add(item);\r\n        return Count-1;\r\n    }\r\n    void IList.Remove(object item) => Remove(item);\r\n    bool ICollection.IsSynchronized => false;\r\n    object ICollection.SyncRoot => throw new NotImplementedException();\r\n    void ICollection.CopyTo(Array array, int index) => CopyTo((object[])array, index);\r\n    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();\r\n    object ICloneable.Clone() => Clone();\r\n}\r\n\r\npublic class ListWithFastAdditionWrapper {\r\n    public static ListWithFastAdditionWrapper operator +(ListWithFastAdditionWrapper wrapper, object item) {\r\n        if(wrapper==null) {\r\n            throw new ArgumentNullException(nameof(wrapper));\r\n        }\r\n        return new ListWithFastAdditionWrapper(wrapper.list+item);\r\n    }\r\n\r\n    private readonly ListWithFastAddition list;\r\n\r\n    public ListWithFastAdditionWrapper() : this(new ListWithFastAddition()) { }\r\n    public ListWithFastAdditionWrapper(ListWithFastAddition list) {\r\n        if(list==null) {\r\n            throw new ArgumentNullException(nameof(list));\r\n        }\r\n        this.list = list;\r\n    }\r\n\r\n    public ListWithFastAddition List => list;\r\n}\r\n```\r\n\r\nHere is some performance measurements (I use `ListWithFastAdditionWrapper` as PowerShell v5.1 do not want to use overloaded `+` operator for collection. Do not test on current Core version yet):\r\n\r\n```powershell\r\n1..100 | % {\r\n    $a = [System.Collections.Generic.List[object]]::new()\r\n    Measure-Command {\r\n        for($i=0; $i -lt 100000; ++$i) { $a.Add($i) }\r\n    } | % TotalMilliseconds\r\n} | Measure-Object -Minimum -Maximum -Average |\r\n% { '{0}|{2}|{1}' -f $_.Minimum, $_.Maximum, $_.Average }\r\n# 414,3723|476,15554|926,0292\r\n\r\n1..100 | % {\r\n    $a = [System.Collections.ObjectModel.Collection[object]]::new()\r\n    Measure-Command {\r\n        for($i=0; $i -lt 100000; ++$i) { $a.Add($i) }\r\n    } | % TotalMilliseconds\r\n} | Measure-Object -Minimum -Maximum -Average |\r\n% { '{0}|{2}|{1}' -f $_.Minimum, $_.Maximum, $_.Average }\r\n# 417,773|473,210506|788,7197\r\n\r\n1..100 | % {\r\n$a = [ListWithFastAddition]::new()\r\n    Measure-Command {\r\n        for($i=0; $i -lt 100000; ++$i) { $a.Add($i) }\r\n    } | % TotalMilliseconds\r\n} | Measure-Object -Minimum -Maximum -Average |\r\n% { '{0}|{2}|{1}' -f $_.Minimum, $_.Maximum, $_.Average }\r\n# 420,6408|539,701283|930,5778\r\n\r\n1..100 | % {\r\n$a = [ListWithFastAddition]::new()\r\n    Measure-Command {\r\n        for($i=0; $i -lt 100000; ++$i) { $a=[ListWithFastAddition]::op_Addition($a, $i) }\r\n    } | % TotalMilliseconds\r\n} | Measure-Object -Minimum -Maximum -Average |\r\n% { '{0}|{2}|{1}' -f $_.Minimum, $_.Maximum, $_.Average }\r\n# 487,4737|554,867155|794,9613\r\n\r\n1..100 | % {\r\n    $a = [ListWithFastAdditionWrapper]::new()\r\n    Measure-Command {\r\n        for($i=0; $i -lt 100000; ++$i) { $a+=$i }\r\n    } | % TotalMilliseconds\r\n} | Measure-Object -Minimum -Maximum -Average |\r\n% { '{0}|{2}|{1}' -f $_.Minimum, $_.Maximum, $_.Average }\r\n# 1241,2363|1317,614091|1632,8237\r\n\r\n1..10 | % {\r\n    $a = @()\r\n    Measure-Command {\r\n        for($i=0; $i -lt 100000; ++$i) { $a+=$i }\r\n    } | % TotalMilliseconds\r\n} | Measure-Object -Minimum -Maximum -Average |\r\n% { '{0}|{2}|{1}' -f $_.Minimum, $_.Maximum, $_.Average }\r\n# 891699,4145|914223,93279|955229,7854\r\n```\r\n\r\nFor me that is pretty *reasonable performance*.\r\n\r\nSo, if PowerShell would provide its own list implementation, then calling methods would be no more advanced, than choosing different collection type to work with. In that case having `+=` as shortcut for calling `Add` method would be unreasonable abuse of operators, IMO.",
    "created_at": "2018-02-23T00:13:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-367866807",
    "id": 367866807,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2Nzg2NjgwNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 4,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 3,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 7,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/367866807/reactions"
    },
    "updated_at": "2018-02-23T00:50:50Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/367866807",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/17184058?v=4",
      "events_url": "https://api.github.com/users/PetSerAl/events{/privacy}",
      "followers_url": "https://api.github.com/users/PetSerAl/followers",
      "following_url": "https://api.github.com/users/PetSerAl/following{/other_user}",
      "gists_url": "https://api.github.com/users/PetSerAl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PetSerAl",
      "id": 17184058,
      "login": "PetSerAl",
      "node_id": "MDQ6VXNlcjE3MTg0MDU4",
      "organizations_url": "https://api.github.com/users/PetSerAl/orgs",
      "received_events_url": "https://api.github.com/users/PetSerAl/received_events",
      "repos_url": "https://api.github.com/users/PetSerAl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PetSerAl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PetSerAl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PetSerAl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@PetSerAl \r\n\r\n> a += b should be semantically equivalent to a = a + b.\r\n\r\nI agree.\r\n\r\n> Operators should not visible modify theirs arguments.\r\n\r\nThat's certainly preferable; my hitherto unstated assumption was that, regrettably, in-place modification was _the only way to achieve reasonable performance_.\r\n\r\nIt sounds like you're saying that you found a way to achieve reasonable performance even _without_ in-place modification.\r\n\r\nI can confirm that your code achieves a very impressive speed-up compared to the current use of `+=` with arrays (by a factor of _hundreds_). \r\n\r\n* I haven't analyzed your code yet; can you summarize succinctly how you achieved that?\r\n\r\n* If there are no gotchas, your solution definitely has my vote:\r\n\r\n  * Why shouldn't we try it in PowerShell Core yet?\r\n\r\n  * What would it take to make `[ListWithFastAdditionWrapper]` unnecessary so that `+=` can be used directly with `[ListWithFastAddition]`? Given the wrapper's performance impact (a factor of about 3, though arguably still negligible compared to current `+=` performance), would that go away?\r\n   \r\n\r\n",
    "created_at": "2018-02-25T23:57:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-368357464",
    "id": 368357464,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODM1NzQ2NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/368357464/reactions"
    },
    "updated_at": "2018-02-26T00:06:00Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/368357464",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@mklement0\r\n>I haven't analyzed your code yet; can you summarize succinctly how you achieved that?\r\n\r\nBasically it use shared list internally, but remembers how much items from shared list it owns.\r\n\r\n>Why shouldn't we try it in PowerShell Core yet?\r\n\r\nSorry my bad English. I mean I did not test it in Core yet.\r\n\r\n>What would it take to make `[ListWithFastAdditionWrapper]` unnecessary so that `+=` can be used directly with `[ListWithFastAddition]`? Given the wrapper's performance impact (a factor of about 3, though arguably still negligible compared to current `+=` performance), would that go away?\r\n\r\nPowerShell should pick up overloaded `+` operation for collections, then using wrapper would be unnecessary. Although, my measurements shows that 3x performance impact caused by `+=`, but not by wrapper. If you call `[ListWithFastAdditionWrapper]::op_Addition` directly rather then `+=`, then it is as fast as `[ListWithFastAddition]::op_Addition`.\r\n\r\n[Updated version of `ListWithFastAddition`.](https://gist.github.com/PetSerAl/640031fa228b1ac8d6ffb5b660ca2933)",
    "created_at": "2018-02-26T23:42:39Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-368691746",
    "id": 368691746,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2ODY5MTc0Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/368691746/reactions"
    },
    "updated_at": "2018-02-26T23:42:39Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/368691746",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/17184058?v=4",
      "events_url": "https://api.github.com/users/PetSerAl/events{/privacy}",
      "followers_url": "https://api.github.com/users/PetSerAl/followers",
      "following_url": "https://api.github.com/users/PetSerAl/following{/other_user}",
      "gists_url": "https://api.github.com/users/PetSerAl/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/PetSerAl",
      "id": 17184058,
      "login": "PetSerAl",
      "node_id": "MDQ6VXNlcjE3MTg0MDU4",
      "organizations_url": "https://api.github.com/users/PetSerAl/orgs",
      "received_events_url": "https://api.github.com/users/PetSerAl/received_events",
      "repos_url": "https://api.github.com/users/PetSerAl/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/PetSerAl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PetSerAl/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/PetSerAl"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@SteveL-MSFT:\r\n\r\nUnless someone sees a (fundamental) flaw in @PetSerAl's implementation, can I suggest we revisit this issue based on the following proposal?\r\n\r\n* make _this_ issue just about preserving the LHS collection _type_ - _without_ in-place extending\r\n\r\n* make @PetSerAl's list implementation the basis for the PowerShell-native list implementation proposed in #5643\r\n\r\n",
    "created_at": "2018-03-06T21:44:32Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-370939470",
    "id": 370939470,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MDkzOTQ3MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/370939470/reactions"
    },
    "updated_at": "2018-03-06T21:44:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/370939470",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 Could you please make a Pester test prototype for first point? ",
    "created_at": "2018-03-07T12:45:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-371127164",
    "id": 371127164,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTEyNzE2NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/371127164/reactions"
    },
    "updated_at": "2018-03-07T12:45:29Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/371127164",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "cc @BrucePay ",
    "created_at": "2018-03-08T00:35:08Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-371336000",
    "id": 371336000,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTMzNjAwMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/371336000/reactions"
    },
    "updated_at": "2018-03-08T00:35:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/371336000",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/11859881?v=4",
      "events_url": "https://api.github.com/users/SteveL-MSFT/events{/privacy}",
      "followers_url": "https://api.github.com/users/SteveL-MSFT/followers",
      "following_url": "https://api.github.com/users/SteveL-MSFT/following{/other_user}",
      "gists_url": "https://api.github.com/users/SteveL-MSFT/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SteveL-MSFT",
      "id": 11859881,
      "login": "SteveL-MSFT",
      "node_id": "MDQ6VXNlcjExODU5ODgx",
      "organizations_url": "https://api.github.com/users/SteveL-MSFT/orgs",
      "received_events_url": "https://api.github.com/users/SteveL-MSFT/received_events",
      "repos_url": "https://api.github.com/users/SteveL-MSFT/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SteveL-MSFT/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SteveL-MSFT/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SteveL-MSFT"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "@iSazonov: I think I'd rather hold off until we have consensus on the way forward.",
    "created_at": "2018-03-08T02:55:16Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-371361819",
    "id": 371361819,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTM2MTgxOQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/371361819/reactions"
    },
    "updated_at": "2018-03-08T02:55:16Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/371361819",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "This:\r\n> PowerShell should pick up overloaded + operation for collections, then using wrapper would be unnecessary",
    "created_at": "2018-04-28T03:40:43Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/5805#issuecomment-385137131",
    "id": 385137131,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/5805",
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTEzNzEzMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/385137131/reactions"
    },
    "updated_at": "2018-04-28T03:40:43Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/385137131",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/192942?v=4",
      "events_url": "https://api.github.com/users/Jaykul/events{/privacy}",
      "followers_url": "https://api.github.com/users/Jaykul/followers",
      "following_url": "https://api.github.com/users/Jaykul/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jaykul/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/Jaykul",
      "id": 192942,
      "login": "Jaykul",
      "node_id": "MDQ6VXNlcjE5Mjk0Mg==",
      "organizations_url": "https://api.github.com/users/Jaykul/orgs",
      "received_events_url": "https://api.github.com/users/Jaykul/received_events",
      "repos_url": "https://api.github.com/users/Jaykul/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/Jaykul/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jaykul/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/Jaykul"
    }
  }
]
