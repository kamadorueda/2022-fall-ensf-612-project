[
  {
    "author_association": "COLLABORATOR",
    "body": "It happens because the two modules of a different version try to load the same dependency with a different version (and public token). .NET doesn't really allow this without a good amount of finagling. \r\n\r\n/cc @daxian-dbw @rjmholt this is one scenario that would be made possible if PowerShell had some support for separating AssemblyLoadContexts between modules.",
    "created_at": "2020-07-19T21:48:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13213#issuecomment-660714720",
    "id": 660714720,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13213",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDcxNDcyMA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660714720/reactions"
    },
    "updated_at": "2020-07-19T21:48:07Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660714720",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Related issue that @vexx32 is referring to: #12920",
    "created_at": "2020-07-20T01:35:35Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13213#issuecomment-660750854",
    "id": 660750854,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13213",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDc1MDg1NA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 1,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660750854/reactions"
    },
    "updated_at": "2020-07-20T01:35:35Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660750854",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "@vexx32 How about the scenario 2 above? Why is that not possible? Why do we force users to open a new powershell session when all they intend to do is upgrade to a latest version of a loaded assembly?",
    "created_at": "2020-07-20T02:36:07Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13213#issuecomment-660767280",
    "id": 660767280,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13213",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDc2NzI4MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660767280/reactions"
    },
    "updated_at": "2020-07-20T19:05:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660767280",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7284100?v=4",
      "events_url": "https://api.github.com/users/viralmodi/events{/privacy}",
      "followers_url": "https://api.github.com/users/viralmodi/followers",
      "following_url": "https://api.github.com/users/viralmodi/following{/other_user}",
      "gists_url": "https://api.github.com/users/viralmodi/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/viralmodi",
      "id": 7284100,
      "login": "viralmodi",
      "node_id": "MDQ6VXNlcjcyODQxMDA=",
      "organizations_url": "https://api.github.com/users/viralmodi/orgs",
      "received_events_url": "https://api.github.com/users/viralmodi/received_events",
      "repos_url": "https://api.github.com/users/viralmodi/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/viralmodi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/viralmodi/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/viralmodi"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@viralmodi I'm not clear on the precise specifics, but in general terms .NET isn't great at removing binary modules from memory. I know there were _some_ improvements made to that end in .NET Core 3, but to my knowledge it's not something PowerShell has been coded to work with yet. I'm sure there are limitations even so, but it's a bit beyond my ken.",
    "created_at": "2020-07-20T02:38:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13213#issuecomment-660768032",
    "id": 660768032,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13213",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDc2ODAzMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660768032/reactions"
    },
    "updated_at": "2020-07-20T02:38:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660768032",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> I know there were _some_ improvements made to that end in .NET Core 3\r\n\r\nafaik that only applies to assembly load contexts, you still can't unload an assembly loaded into the default ALC (except for dynamic assemblies marked as collectible).  And even then it's mostly impossible in PowerShell due to caching (can't unload an assembly if it's being referenced).\r\n",
    "created_at": "2020-07-20T03:27:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13213#issuecomment-660781118",
    "id": 660781118,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13213",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDc4MTExOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660781118/reactions"
    },
    "updated_at": "2020-07-20T03:29:01Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660781118",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "@vexx32 @SeeminglyScience thanks for your responses. Our team is a relatively new to PowerShell. Perhaps, it would be great help if you can point to some documentation which addresses typical usage of PowerShell for the use cases mentioned above? i.e. as a PowerShell user, if I have an installed and imported module in a PowerShell session and I need to upgrade its version, is the only option to close this shell window and open a new one? How do veteran PowerShell users deal with use cases 1 and 2 mentioned above? (Would they already know to close the PowerShell session and open new PowerShell to deal with these use cases because this is considered \"normal behavior\" in PowerShell world?) I, specifically, want to ensure that we (my team) understand/s this part better to be able to explain our Product's Module users in future, if and when, they report issues related to this behavior. \r\nAgain, thanks for your quick responses and help.",
    "created_at": "2020-07-20T07:19:14Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13213#issuecomment-660850870",
    "id": 660850870,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13213",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDg1MDg3MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660850870/reactions"
    },
    "updated_at": "2020-07-20T19:06:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660850870",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/7284100?v=4",
      "events_url": "https://api.github.com/users/viralmodi/events{/privacy}",
      "followers_url": "https://api.github.com/users/viralmodi/followers",
      "following_url": "https://api.github.com/users/viralmodi/following{/other_user}",
      "gists_url": "https://api.github.com/users/viralmodi/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/viralmodi",
      "id": 7284100,
      "login": "viralmodi",
      "node_id": "MDQ6VXNlcjcyODQxMDA=",
      "organizations_url": "https://api.github.com/users/viralmodi/orgs",
      "received_events_url": "https://api.github.com/users/viralmodi/received_events",
      "repos_url": "https://api.github.com/users/viralmodi/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/viralmodi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/viralmodi/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/viralmodi"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@viralmodi There is no solution for the cases mentioned above. #12920 is for discussion this.\r\n\r\nYour team could create a temporary solution for your modules using ALCs as @rjmholt described in blog post (see the reference in #12920).\r\n\r\nBut it is much better to contribute in PowerShell if your team have resources. Resolving dependency conflicts, module isolation and module unloading is a related and complex problems and it's worth it to resolve them.",
    "created_at": "2020-07-20T09:59:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13213#issuecomment-660930667",
    "id": 660930667,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13213",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDkzMDY2Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660930667/reactions"
    },
    "updated_at": "2020-07-20T10:00:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/660930667",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> i.e. as a PowerShell user, if I have an installed and imported module in a PowerShell session and I need to upgrade its version, is the only option to close this shell window and open a new one?\r\n\r\nYeah more or less.  You can also install side by side, but you'll still need to open a new session before you can actually import the new version.\r\n\r\n> How do veteran PowerShell users deal with use cases #1\r\n\r\nFor dependencies, you have these options for the most part:\r\n\r\n1. Target and bundle the lowest version you can for each module.  When one module needs to target a later version, target it in all modules.  This only really works if you control the dependency and every dependent module\r\n1. Don't bundle the dependency with each module, put the dependency in it's own module, and require PowerShell to load the installed module instead of .NET.  Not a lot of folks do this one because PowerShellGet doesn't handle it well currently\r\n1. Put each module in it's own ALC, then it can load whatever it wants. Only choose this one if you fully understand how ALC's work.  They make it incredibly challenging for external binary modules to interact with your module\r\n\r\nHonestly most of us just don't take/make dependencies.\r\n\r\n> and #2 mentioned above? (Would they already know to close the PowerShell session and open new PowerShell to deal with these use cases because this is considered \"normal behavior\" in PowerShell world?)\r\n\r\nYeah it's pretty commonly hit limitation.  Most veteran users will already have ran into it.  Those that don't, just let them know they need to update prior to importing.",
    "created_at": "2020-07-20T14:24:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13213#issuecomment-661072234",
    "id": 661072234,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13213",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTA3MjIzNA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/661072234/reactions"
    },
    "updated_at": "2020-07-20T14:24:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/661072234",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "> It happens because the two modules of a different version try to load the same dependency with a different version (and public token). .NET doesn't really allow this without a good amount of finagling.\r\n> \r\n> /cc @daxian-dbw @rjmholt this is one scenario that would be made possible if PowerShell had some support for separating AssemblyLoadContexts between modules.\r\nI understood that it is because of a dependent assembly but what I am not sure of is this https://devblogs.microsoft.com/powershell/resolving-powershell-module-assembly-dependency-conflicts/#comment-398\r\n\r\n<blockquote><img src=\"https://camo.githubusercontent.com/f17d35e8f68b08827695727f7eb8d0a599ec43cb/68747470733a2f2f646576626c6f67732e6d6963726f736f66742e636f6d2f706f7765727368656c6c2f77702d636f6e74656e742f75706c6f6164732f73697465732f33302f323032302f30362f6d6f64756c65636f6e666c6963742e706e67\" width=\"48\" align=\"right\"><div><img src=\"https://devblogs.microsoft.com/powershell/wp-content/uploads/sites/30/2019/02/Powershell_2561.png\" height=\"14\"> PowerShell</div><div><strong><a href=\"https://devblogs.microsoft.com/powershell/resolving-powershell-module-assembly-dependency-conflicts/\">Resolving PowerShell Module Assembly Dependency Conflicts | PowerShell</a></strong></div><div>When writing a PowerShell module, especially a binary module (i.e. one written in a language like C# and loaded into PowerShell as an assembly/DLL), it’s natural to take dependencies on other packages or libraries to provide functionality. Taking dependencies on other libraries is usually desirable for code reuse.</div></blockquote>\r\n\r\nWhy PWSH allows older version of the same module to be loaded into the same ALC (PWSH default ALC) even though it has a newer version of the same module already loaded but not vice-versa?",
    "created_at": "2020-07-20T15:03:26Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13213#issuecomment-661095760",
    "id": 661095760,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13213",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTA5NTc2MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/661095760/reactions"
    },
    "updated_at": "2020-07-20T15:07:54Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/661095760",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10571107?v=4",
      "events_url": "https://api.github.com/users/arunswarnam/events{/privacy}",
      "followers_url": "https://api.github.com/users/arunswarnam/followers",
      "following_url": "https://api.github.com/users/arunswarnam/following{/other_user}",
      "gists_url": "https://api.github.com/users/arunswarnam/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/arunswarnam",
      "id": 10571107,
      "login": "arunswarnam",
      "node_id": "MDQ6VXNlcjEwNTcxMTA3",
      "organizations_url": "https://api.github.com/users/arunswarnam/orgs",
      "received_events_url": "https://api.github.com/users/arunswarnam/received_events",
      "repos_url": "https://api.github.com/users/arunswarnam/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/arunswarnam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arunswarnam/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/arunswarnam"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Why PWSH allows older version of the same module to be loaded into the same ALC (PWSH default ALC) even though it has a newer version of the same module already loaded but not vice-versa?\r\n\r\nIt doesn't, but if you reference version `0.1.0` of an assembly and you have `0.2.0` loaded, assembly resolution sees that and says \"probably works\".  Most assemblies are backwards compatible, the problem is when you have already loaded `0.1.0` but specifically reference `0.2.0`, because then there is probably an API that you need that isn't there.\r\n\r\nNote that none of this really has much to do with PowerShell specifically, these are .NET rules.  You're just less likely to run into the same problems outside of PowerShell because most C# projects get their own process.  As a module in PowerShell, all of these different projects share the same process/appdomain/ALC.",
    "created_at": "2020-07-20T15:27:34Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13213#issuecomment-661110149",
    "id": 661110149,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13213",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTExMDE0OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/661110149/reactions"
    },
    "updated_at": "2020-07-20T15:27:34Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/661110149",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "> > Why PWSH allows older version of the same module to be loaded into the same ALC (PWSH default ALC) even though it has a newer version of the same module already loaded but not vice-versa?\r\n> \r\n> It doesn't, but if you reference version `0.1.0` of an assembly and you have `0.2.0` loaded, assembly resolution sees that and says \"probably works\". Most assemblies are backwards compatible, the problem is when you have already loaded `0.1.0` but specifically reference `0.2.0`, because then there is probably an API that you need that isn't there.\r\n> \r\n> Note that none of this really has much to do with PowerShell specifically, these are .NET rules. You're just less likely to run into the same problems outside of PowerShell because most C# projects get their own process. As a module in PowerShell, all of these different projects share the same process/appdomain/ALC.\r\n\r\nOh! So PWSH doesn't actually load the older version of the assembly and just relies on the backward compatibility of the assembly to work correctly? \r\nLooking at all the answers loading dependent assemblies into an isolated ALC seems to be next step forward for our use case. ",
    "created_at": "2020-07-20T15:35:02Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13213#issuecomment-661114615",
    "id": 661114615,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13213",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTExNDYxNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/661114615/reactions"
    },
    "updated_at": "2020-07-20T15:35:02Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/661114615",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10571107?v=4",
      "events_url": "https://api.github.com/users/arunswarnam/events{/privacy}",
      "followers_url": "https://api.github.com/users/arunswarnam/followers",
      "following_url": "https://api.github.com/users/arunswarnam/following{/other_user}",
      "gists_url": "https://api.github.com/users/arunswarnam/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/arunswarnam",
      "id": 10571107,
      "login": "arunswarnam",
      "node_id": "MDQ6VXNlcjEwNTcxMTA3",
      "organizations_url": "https://api.github.com/users/arunswarnam/orgs",
      "received_events_url": "https://api.github.com/users/arunswarnam/received_events",
      "repos_url": "https://api.github.com/users/arunswarnam/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/arunswarnam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arunswarnam/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/arunswarnam"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Oh! So PWSH doesn't actually load the older version of the assembly and just relies on the backward compatibility of the assembly to work correctly?\r\n\r\nYeah, more specifically that's how .NET's assembly resolution works.  PowerShell doesn't really have a hand in it afaik.\r\n\r\nIt's not perfect, it's possible for minor versions to have breaking changes like changing a method overload or something.  In those cases it'll throw a JIT time exception which is very hard for the consumer to pin down. So if you own the dependency, try very hard to keep binary compatibility.\r\n\r\n> Looking at all the answers loading dependent assemblies into an isolated ALC seems to be next step forward for our use case.\r\n\r\nMake sure to read through the linked issues and be sure that you understand the challenges it presents.  Once you have it up and running make sure any type you return is either from the global ALC, or is not accepted by any other API.  For example don't isolate newtsonsoft and then emit a `JObject` to the pipeline because it's type identity will not match the type identity that other assemblies expect.\r\n\r\nRight now the only time I would personally recommend this approach is if your module is intended to be loaded into an environment where it's presence should be mostly invisible.  For example, the module that the `vscode-powershell` extension loads must have as little impact on the process as possible or it's value diminishes (like if a script breaks purely because of the editor you're testing it in, that's problematic).  That's significantly less true for most projects.\r\n",
    "created_at": "2020-07-20T15:56:03Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13213#issuecomment-661127182",
    "id": 661127182,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13213",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MTEyNzE4Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/661127182/reactions"
    },
    "updated_at": "2020-07-20T15:57:14Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/661127182",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "NONE",
    "body": "This issue has been marked as answered and has not had any activity for **1 day**. It has been closed for housekeeping purposes.",
    "created_at": "2020-07-22T00:00:10Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/13213#issuecomment-662165890",
    "id": 662165890,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/13213",
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2MjE2NTg5MA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/662165890/reactions"
    },
    "updated_at": "2020-07-22T00:00:10Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/662165890",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/in/26612?v=4",
      "events_url": "https://api.github.com/users/msftbot%5Bbot%5D/events{/privacy}",
      "followers_url": "https://api.github.com/users/msftbot%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/msftbot%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/msftbot%5Bbot%5D/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/apps/msftbot",
      "id": 48340428,
      "login": "msftbot[bot]",
      "node_id": "MDM6Qm90NDgzNDA0Mjg=",
      "organizations_url": "https://api.github.com/users/msftbot%5Bbot%5D/orgs",
      "received_events_url": "https://api.github.com/users/msftbot%5Bbot%5D/received_events",
      "repos_url": "https://api.github.com/users/msftbot%5Bbot%5D/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/msftbot%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/msftbot%5Bbot%5D/subscriptions",
      "type": "Bot",
      "url": "https://api.github.com/users/msftbot%5Bbot%5D"
    }
  }
]
