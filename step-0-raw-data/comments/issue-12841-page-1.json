[
  {
    "author_association": "COLLABORATOR",
    "body": "This is the `PSCustomObject` output by `Compare-Object`:\r\n```powershell\r\nPS> $r = Compare-Object (gc .\\t1.ps1) (gc .\\t2.ps1)\r\nPS> $r[0] | fc\r\n\r\nclass PSCustomObject\r\n{\r\n  InputObject = Trap { 'Shame.'; exit 1 }\r\n  SideIndicator = =>\r\n}\r\n\r\nPS> $r | gm\r\n\r\n\r\n   TypeName: System.Management.Automation.PSCustomObject\r\n\r\nName          MemberType   Definition\r\n----          ----------   ----------\r\nEquals        Method       bool Equals(System.Object obj)\r\nGetHashCode   Method       int GetHashCode()\r\nGetType       Method       type GetType()\r\nToString      Method       string ToString()\r\nInputObject   NoteProperty System.String InputObject=Trap { 'Shame.'; exit 1 }\r\nSideIndicator NoteProperty string SideIndicator==>\r\n```\r\nIn a script, a user could do a compare like so `'=>' -eq $r[0].SideIndicator`.  Hence, simply changing strings for the various SideIndicators would be a breaking change.  Converting this to an enum is one possible fix.  However, I still think that would be a breaking change.  Consider this code:\r\n```\r\n$r[0].SideIndicator.StartsWith('=')\r\n```\r\nAn enum doesn't have a `StartsWith()` method and would throw.  \r\n\r\nWhat I propose is that we add a new field to the `PSCustomObject` called `SideIndicatorDisplay` (or something akin to that) which would hold the **new** side indicator strings that would get rendered.  And rendered nicely in a console using a ligature font.  :-)\r\n\r\nThis would require some tinkering with the PSCustomObject i.e., giving it a formal type name and then adding the appropriate formatting XML to render the `InputObject` and the `SideIndicatorDisplay` fields and not the `SideIndicator` field.  The `SideIndicator` would remain unchanged - hence no breaking changes.\r\n\r\nThen we could optionally add the `-SideIndicator` parameter that would allow the user to configure the strings they want to use in the `SideIndicatorDisplay` field.",
    "created_at": "2020-05-29T21:22:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12841#issuecomment-636198116",
    "id": 636198116,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12841",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNjE5ODExNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/636198116/reactions"
    },
    "updated_at": "2020-05-29T23:04:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/636198116",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "How about keeping `SideIndicator` as a legacy field and using something new to store an Enum that would be more future-proof? I really like the idea of formalizing the side indicator.\r\n\r\nWe could call the new field `Side`",
    "created_at": "2020-05-29T21:39:27Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12841#issuecomment-636203833",
    "id": 636203833,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12841",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNjIwMzgzMw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/636203833/reactions"
    },
    "updated_at": "2020-05-29T21:39:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/636203833",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/48802534?v=4",
      "events_url": "https://api.github.com/users/schuelermine/events{/privacy}",
      "followers_url": "https://api.github.com/users/schuelermine/followers",
      "following_url": "https://api.github.com/users/schuelermine/following{/other_user}",
      "gists_url": "https://api.github.com/users/schuelermine/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/schuelermine",
      "id": 48802534,
      "login": "schuelermine",
      "node_id": "MDQ6VXNlcjQ4ODAyNTM0",
      "organizations_url": "https://api.github.com/users/schuelermine/orgs",
      "received_events_url": "https://api.github.com/users/schuelermine/received_events",
      "repos_url": "https://api.github.com/users/schuelermine/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/schuelermine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schuelermine/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/schuelermine"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Yeah even if there's some duplication of data by maintaining a legacy field, I do think it's more useful to have an abstracted and more clear indicator.\r\n\r\nEvery time I use this cmdlet I _again_ have to look up which side refers to which to make sure I haven't confused them all over again. We don't have `-LeftObject` and `-RightObject`, we have `-ReferenceObject` and `-DifferenceObject`, which is innately confusing.\r\n\r\nI'd ask that the property name and/or value via the enum naming be more indicative of which of the input sets is being referred to. I.e., should explicitly mention `Reference` /`Difference`/`Both` somewhere in the naming so it's clear which items are in which sets.\r\n\r\nAside: I kind of feel like it's a bit weird we _don't_ have a formal object type for this cmdlet. Most other PS-shipped cmdlets define their own class types. Might be a good opportunity to create a class type for it. If we do, we can define the `SideIndicator` property to be a faux-property that just checks the `Side` (or whatever we call it) enum property and emits the backwards-compatible string based on that only when you query it.\r\n\r\nNo point storing string data if we can easily generate it on the flip of a coin based on a couple string `const` values and the enum value.",
    "created_at": "2020-05-29T23:28:43Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/12841#issuecomment-636234982",
    "id": 636234982,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/12841",
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzNjIzNDk4Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/636234982/reactions"
    },
    "updated_at": "2020-05-29T23:35:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/636234982",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  }
]
