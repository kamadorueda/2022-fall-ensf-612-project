[
  {
    "author_association": "COLLABORATOR",
    "body": "`XmlElement` defines an indexer, so this would be expected behavior.  Same reason `hashtable` can't work that way:\r\n\r\n```powershell\r\n(@{ 0 = 'Test' }, @{ 0 = 'Test' })[0]\r\n# Gives first hashtable\r\n@{ 0 = 'Test' }[0]\r\n# Gives 'Test'\r\n```",
    "created_at": "2019-11-25T15:24:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11189#issuecomment-558204296",
    "id": 558204296,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11189",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODIwNDI5Ng==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558204296/reactions"
    },
    "updated_at": "2019-11-25T15:24:47Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558204296",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Good point, @SeeminglyScience.\r\n\r\nWith hashtables, the type-native indexer being given precedence is necessary and I've never run into a problem with that.\r\n\r\nWith `[string]`, giving precedence to the type-native indexer is problematic, but unavoidable, because the type-native and PowerShell's indexers are both `[int]`-typed.\r\nThis gives us problematic behaviors such as:\r\n\r\n```powershell\r\n(& { param($count) , 'foo' * $count } 2)[0]\r\nfoo # OK, array indexer\r\n\r\n(& { param($count) , 'foo' * $count } 1)[0]\r\nf   # !! string indexer took precedence\r\n```\r\n\r\n(Honestly, I wish that strings weren't directly indexable in PowerShell, but that would obviously be a breaking change.)\r\n\r\nHowever, I think we can and should avoid this unfortunate collision - which interferes with PowerShell's unified handling of scalars and collections -  in the case of `XmlElement`:\r\n\r\n* the native indexer is `[string]`-typed (child element names)\r\n* Xml element names must not start with digits anyway (PowerShell swallows the exception in the indexer).\r\n\r\n**So with an `[int]` (or generally numeric) index argument, we should apply PowerShell's positional indexer, as usual, to get the desired unified behavior.**\r\n\r\nNo existing code would break, because code that currently passes numbers by definition cannot work, because no child element name can match (always yields `$null`).\r\n\r\nGenerally, given the convenience of PowerShell's dot notation, there is no good reason to use the type-native indexer anyway, and I have yet to see it used in the wild in PowerShell code.\r\n\r\n",
    "created_at": "2019-11-25T16:18:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11189#issuecomment-558228518",
    "id": 558228518,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11189",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODIyODUxOA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558228518/reactions"
    },
    "updated_at": "2020-02-18T17:20:36Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558228518",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I think that sort of inconsistency would make the code sort of difficult to reason about.  Special casing the index binder for a specific type with a specific literal argument type (`int` matches `string` for overload selection, so you'd have to be very specific in the binder and ignore conversion) isn't ideal.",
    "created_at": "2019-11-25T16:41:19Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11189#issuecomment-558238425",
    "id": 558238425,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11189",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODIzODQyNQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558238425/reactions"
    },
    "updated_at": "2019-11-25T16:41:19Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558238425",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "I get the _implementation_ concern, @SeeminglyScience, but from the _user's perspective_:\r\n\r\n* it is the _current_ behavior  that is hard to reason about: the native indexer is little-known (and provides no benefit over the widely known and used dot notation).\r\n* the current behavior prevents unified handling of XML elements with situationally varying child-element counts.\r\n\r\nNote that hashtables (dictionaries), strings, and XML elements already are all special-cased in general, in that PowerShell (sensibly) doesn't enumerate them, despite their implementing `IEnumerable`.\r\n\r\nUsers likely don't expect a single `XmlElement` to be indexable (it certainly was news to me), except in the treat-a-scalar-as-a-collection-of-one sense.\r\n",
    "created_at": "2019-11-25T17:33:24Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11189#issuecomment-558260326",
    "id": 558260326,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11189",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODI2MDMyNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558260326/reactions"
    },
    "updated_at": "2019-11-25T17:33:24Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558260326",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> I get the _implementation_ concern, @SeeminglyScience, but from the _user's perspective_:\r\n\r\nI'm not just speaking from an implementation concern. The more special rules there are around very specific niche cases the harder it is to figure out what something does.  It becomes another situation where someone asks \"why does x do blank but y does blank\" and the answer is because \"it's hard coded to do that for that one thing\".\r\n\r\n> * it is the _current_ behavior  that is hard to reason about: the native indexer is little-known (and provides no benefit over the widely known and used dot notation).\r\n\r\nIf it's anything like the dictionary key-value property binder, the index notation is likely a lot faster, and one could argue it describes intent better (the latter being admittedly subjective). Plenty of folks (including myself) insist on using the indexer directly for dictionaries in any projects they maintain.\r\n\r\n> * the current behavior prevents unified handling of XML elements with situationally varying child-element counts.\r\n>\r\n> Note that hashtables (dictionaries), strings, and XML elements already are all special-cased in general, in that PowerShell (sensibly) doesn't enumerate them, despite their implementing `IEnumerable`.\r\n\r\nThose are *mostly* dictating the behavior of an *archetype* of object though.  Dictionaries, strings, etc.  Yeah XML and `DataTable`'s are thrown in too, but if that was proposed today I'd be against that as well.\r\n\r\n> Users likely don't expect a single `XmlElement` to be indexable (it certainly was news to me), except in the treat-a-scalar-as-a-collection-of-one sense.\r\n\r\nYeah most people probably will expect `[0]` to work, that's not really my issue with it. The problem is when they go to try it on a different type, find out that it doesn't work, and then start analyzing the two types to figure out why one works and why the other doesn't.\r\n\r\nAnd yeah, there's already plenty of examples of that all throughout the engine, but that's exactly why I don't want to see more. Any time a behavior question is answered with \"because of a line in the source\" it's incredibly alienating to folks trying to actually understand the rules of the language.\r\n\r\nFor what it's worth, I wouldn't be surprised if the PS team disagrees with me for this scenario specifically.  `XmlElement` is already more special cased than *almost* any other type, it even has it's own internal `Adapter`.  So realistically, more fuel on that fire probably isn't the worst thing.",
    "created_at": "2019-11-25T18:34:13Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11189#issuecomment-558283685",
    "id": 558283685,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11189",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODI4MzY4NQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558283685/reactions"
    },
    "updated_at": "2019-11-25T18:34:13Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558283685",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> The more special rules there are around very specific niche cases the harder it is to figure out what something does.\r\n\r\nFully agreed, but that doesn't apply here, because there are only two conceivable scenarios:\r\n\r\n* You _knowingly_ use the _native_ indexer - in which case you'll now that something like `[0]` fails _by definition_, and you'll only ever use `['foo']`\r\n\r\n* You index with a _number_ - whether you know about the native indexer or not - in which case you expect normal positional indexing.\r\n\r\nIt's conceptually obvious, and no one would think twice about the behavior (or even worry about special-casing having been needed behind the scenes).\r\n\r\nThere's definitely plenty of magic around `XmlElement` already, as you state, and I think this change fits in well with the adapted XML DOM that PowerShell presents on top of the type-native members.\r\n\r\nAs for other types:\r\n\r\n`XmlElement` is clearly a very commonly used type; while there's certainly the potential for such collisions elsewhere, I don't know how often that will come up; arguably, it's worth _generalizing_ the proposed behavior: _always_ allow numerical indexing if the type-native indexer is neither of type `object` nor `int` - though there may not always be this neat separation of indexing with stringified numbers _categorically_ making no sense.\r\n\r\nAt the end of the day, the rule wouldn't be hard to explain (though knowing how to tests for native indexers is an advanced technique):\r\n\r\n* If the type-native indexer is `object`- or `int`-typed, it must of necessity _shadow_ (make unavailable) the PowerShell-provided positional indexer (as is the case with `string` and `hashtable`)\r\n\r\n* otherwise, `int` arguments select the PowerShell-provided indexer, whereas type-appropriate arguments would select the type-native indexer; it would be like having an implicit, `int`-typed indexer overload.\r\n\r\n",
    "created_at": "2019-11-25T19:44:48Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11189#issuecomment-558310993",
    "id": 558310993,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11189",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODMxMDk5Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558310993/reactions"
    },
    "updated_at": "2019-11-25T19:44:48Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558310993",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> > The more special rules there are around very specific niche cases the harder it is to figure out what something does.\r\n> \r\n> Fully agreed, but that doesn't apply here, because there are only two conceivable scenarios:\r\n> \r\n> * You _knowingly_ use the _native_ indexer - in which case you'll now that something like `[0]` fails _by definition_, and you'll only ever use `['foo']`\r\n> * You index with a _number_ - whether you know about the native indexer or not - in which case you expect normal positional indexing.\r\n>\r\n> It's conceptually obvious, and no one would think twice about the behavior (or even worry about special-casing having been needed behind the scenes).\r\n\r\nRight, the problem is when they try to apply the same logic to a different type and it doesn't work.\r\n\r\n> `XmlElement` is clearly a very commonly used type;\r\n\r\nI'd say it's use cases are uncommon on the rarity scale.  I wouldn't say rare, but I don't think the typical user is very commonly parsing XML files.\r\n\r\n> while there's certainly the potential for such collisions elsewhere, I don't know how often that will come up; arguably, it's worth _generalizing_ the proposed behavior: _always_ allow numerical indexing if the type-native indexer is neither of type `object` nor `int` - though there may not always be this neat separation of indexing with stringified numbers _categorically_ making no sense.\r\n>\r\n> At the end of the day, the rule wouldn't be hard to explain (though knowing how to tests for native indexers is an advanced technique):\r\n>\r\n> * If the type-native indexer is `object`- or `int`-typed, it must of necessity _shadow_ (make unavailable) the PowerShell-provided positional indexer (as is the case with `string` and `hashtable`)\r\n> * otherwise, `int` arguments select the PowerShell-provided indexer, whereas type-appropriate arguments would select the type-native indexer; it would be like having an implicit, `int`-typed indexer overload.\r\n\r\nThe proposal for `XmlElement` only makes the sense that it does because the declared indexer will otherwise throw.  For types where that isn't the case, that isn't an option.",
    "created_at": "2019-11-25T20:22:06Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11189#issuecomment-558324017",
    "id": 558324017,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11189",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODMyNDAxNw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558324017/reactions"
    },
    "updated_at": "2019-11-25T20:22:06Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558324017",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> The proposal for XmlElement only makes the sense that it does because the declared indexer will otherwise throw. For types where that isn't the case, that isn't an option.\r\n\r\nI'd say it's still an option at last _conceptually_ (can't speak to implementation difficulties), if the indexer argument is neither `object` nor `int` (as detailed in the previous comment), but I get that the case is then less clear-cut.\r\n\r\nHowever, if you conceive of the PowerShell-provided indexer as simply an additional type-native indexer overload - which would need to be a deliberate design decision - the behavior would be consistent with method overload resolution.\r\n\r\n\r\n",
    "created_at": "2019-11-25T20:32:38Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11189#issuecomment-558327872",
    "id": 558327872,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11189",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODMyNzg3Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558327872/reactions"
    },
    "updated_at": "2019-11-25T20:32:38Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558327872",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "P.S.: Just as a point of interest (I wouldn't make the fix dependent on how common XML parsing in PowerShell truly is):\r\n\r\nNumber of PowerShell-tagged Stack Overflow questions relating to CSV / XML / JSON, in descending order:\r\n\r\n* [`[powershell] csv`](https://stackoverflow.com/search?q=%5Bpowershell%5D+csv): `16,328`\r\n\r\n* [`[powershell] xml`](https://stackoverflow.com/search?q=%5Bpowershell%5D+xml): `7,131` \r\n\r\n* [`[powershell] json`](https://stackoverflow.com/search?q=%5Bpowershell%5D+json): `4,332`\r\n\r\nNote that I've deliberately not used tags for the data formats, because questions are frequently incompletely tagged.\r\n",
    "created_at": "2019-11-25T20:41:46Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11189#issuecomment-558331162",
    "id": 558331162,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11189",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODMzMTE2Mg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558331162/reactions"
    },
    "updated_at": "2019-11-25T20:42:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558331162",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> However, if you conceive of the PowerShell-provided indexer as simply an additional type-native indexer overload - which would need to be a deliberate design decision - the behavior would be consistent with method overload resolution.\r\n\r\nPersonally I consider it to be a fallback option only.  The implementation backs that up, but I don't have any insights into the design intention.\r\n\r\n> P.S.: Just as a point of interest (I wouldn't make the fix dependent on how common XML parsing in PowerShell truly is):\r\n> \r\n> Number of PowerShell-tagged Stack Overflow questions relating to CSV / XML / JSON, in descending order:\r\n\r\nI was referring to the usage of `XmlElement` in relation to other types in the BCL, not in relation to other data types.\r\n\r\nThat said, I wouldn't be surprised if the scales tipped towards `json` if you filtered by questions asked this year.  I'd also say those numbers may not reflect usage, but difficulty.",
    "created_at": "2019-11-25T20:56:40Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11189#issuecomment-558336453",
    "id": 558336453,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11189",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODMzNjQ1Mw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558336453/reactions"
    },
    "updated_at": "2019-11-25T20:56:40Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558336453",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Good point re XML question count possibly reflecting difficulty (and about JSON catching up), but I'd say that the more interesting gauge is how likely it is that the average user has to deal with XML rather than the relative frequency of type use.\r\n\r\nRe fallback: It's clearly _de facto_ the case, but irrespective of the original design intent, I'm suggesting that implementing the positional-indexer-as-implicit-overload approach (within the stated constraints) would give us generally useful behavior that then doesn't require special-casing `XmlElement`.\r\n\r\nIt would make the scalar-as-single-element-collection behavior generally more consistent, which I think is important.\r\n\r\n\r\n\r\n",
    "created_at": "2019-11-25T21:13:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11189#issuecomment-558342516",
    "id": 558342516,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11189",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODM0MjUxNg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558342516/reactions"
    },
    "updated_at": "2019-11-25T21:14:08Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/558342516",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mklement0 You could look also new System.Text.Json. There are issues too and maybe related to this. (My PR with new ConvertTo-Json can help you)",
    "created_at": "2019-11-28T12:01:04Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11189#issuecomment-559467157",
    "id": 559467157,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11189",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTQ2NzE1Nw==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/559467157/reactions"
    },
    "updated_at": "2019-11-28T12:01:04Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/559467157",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/22290914?v=4",
      "events_url": "https://api.github.com/users/iSazonov/events{/privacy}",
      "followers_url": "https://api.github.com/users/iSazonov/followers",
      "following_url": "https://api.github.com/users/iSazonov/following{/other_user}",
      "gists_url": "https://api.github.com/users/iSazonov/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/iSazonov",
      "id": 22290914,
      "login": "iSazonov",
      "node_id": "MDQ6VXNlcjIyMjkwOTE0",
      "organizations_url": "https://api.github.com/users/iSazonov/orgs",
      "received_events_url": "https://api.github.com/users/iSazonov/received_events",
      "repos_url": "https://api.github.com/users/iSazonov/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/iSazonov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iSazonov/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/iSazonov"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Closing in favor of #11923",
    "created_at": "2020-02-21T23:19:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/11189#issuecomment-589877798",
    "id": 589877798,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/11189",
    "node_id": "MDEyOklzc3VlQ29tbWVudDU4OTg3Nzc5OA==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/589877798/reactions"
    },
    "updated_at": "2020-02-21T23:19:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/589877798",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/588825?v=4",
      "events_url": "https://api.github.com/users/mklement0/events{/privacy}",
      "followers_url": "https://api.github.com/users/mklement0/followers",
      "following_url": "https://api.github.com/users/mklement0/following{/other_user}",
      "gists_url": "https://api.github.com/users/mklement0/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mklement0",
      "id": 588825,
      "login": "mklement0",
      "node_id": "MDQ6VXNlcjU4ODgyNQ==",
      "organizations_url": "https://api.github.com/users/mklement0/orgs",
      "received_events_url": "https://api.github.com/users/mklement0/received_events",
      "repos_url": "https://api.github.com/users/mklement0/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mklement0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mklement0/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mklement0"
    }
  }
]
