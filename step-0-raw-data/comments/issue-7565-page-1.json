[
  {
    "author_association": "COLLABORATOR",
    "body": "Oddly enough, I've been implementing just such a thing related to Task-based programming in PowerShell (see #6716):\r\n```powershell\r\nPSCore (1:191) >  (1..10).PartitionData(3).foreach{\"$_\"}\r\n1 2 3\r\n4 5 6\r\n7 8 9\r\n10\r\n```\r\nThis method creates `ArraySegment[object]` instances for each partition rather than actually building new arrays thus avoiding a lot of copying.\r\n  \r\nNote that there are two ways to do partitioning:\r\n\r\n1. Number of items in a partition\r\n2. Total number of partitions.  \r\n\r\nTotal number of partitions is arguably better for parallel execution since you can number your partitions to match the number of cores on your machine e.g. on a 4-core machine:\r\n```powershell\r\n# count words in 'Way and Peace'\r\n[System.IO.File]::ReadAllLines(\"WarAndPeace.txt\").\r\n    PartitionData(4).\r\n        foreachparallel{\r\n            (-split $_).\r\n                 Count}.\r\n                      Sum()\r\n```\r\n@mazzy-ax  Is this your scenario? Or do you have other things in mind? If so, please share.",
    "created_at": "2018-08-18T18:56:49Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7565#issuecomment-414079411",
    "id": 414079411,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7565",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDA3OTQxMQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/414079411/reactions"
    },
    "updated_at": "2018-08-18T18:56:49Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/414079411",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  },
  {
    "author_association": "NONE",
    "body": "@BrucePay, yes, it's my scenario. And parallel processing too :)\r\n\r\n> I've been implementing\r\n\r\nis it implemented in Powershell or LINQ? \r\n\r\n> foreachparallel\r\n\r\nis it PLINQ?\r\n\r\nif it is a LINQ/PLINQ then what about a [Restricted and Constained langage](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_language_modes)?\r\nI would like to have this basic feature in these modes too. not only for parallel jobs.\r\n\r\n",
    "created_at": "2018-08-18T19:44:17Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7565#issuecomment-414082002",
    "id": 414082002,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7565",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDA4MjAwMg==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/414082002/reactions"
    },
    "updated_at": "2018-08-18T19:46:32Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/414082002",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/15892398?v=4",
      "events_url": "https://api.github.com/users/mazzy-ax/events{/privacy}",
      "followers_url": "https://api.github.com/users/mazzy-ax/followers",
      "following_url": "https://api.github.com/users/mazzy-ax/following{/other_user}",
      "gists_url": "https://api.github.com/users/mazzy-ax/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/mazzy-ax",
      "id": 15892398,
      "login": "mazzy-ax",
      "node_id": "MDQ6VXNlcjE1ODkyMzk4",
      "organizations_url": "https://api.github.com/users/mazzy-ax/orgs",
      "received_events_url": "https://api.github.com/users/mazzy-ax/received_events",
      "repos_url": "https://api.github.com/users/mazzy-ax/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/mazzy-ax/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mazzy-ax/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/mazzy-ax"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@mazzy-ax It's a PowerShell \"extension method\" (i.e. built-in and implemented in C#) that uses PLINQ for its implementation. Note however, that once you have `Task` support, it can also be implemented as a script method:\r\n```powershell\r\nUpdate-TypeData -TypeName Object -Force -MemberType ScriptMethod -MemberName foreachparallel  -Value {\r\n    param ([scriptblock] $body)\r\n\r\n    $p = [linq.parallelenumerable]::AsParallel(@($this))\r\n    [linq.parallelenumerable]::Select($p, [func[object,object]] $body)\r\n}\r\n``` \r\n`foreachparallel` wouldn't be available in Restricted language but it might be there in Constrained language as long as we can ensure there are no security holes (e.g. language mode would have to propagate into Tasks created by PLINQ)..",
    "created_at": "2018-08-19T01:27:56Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/7565#issuecomment-414096579",
    "id": 414096579,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/7565",
    "node_id": "MDEyOklzc3VlQ29tbWVudDQxNDA5NjU3OQ==",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/414096579/reactions"
    },
    "updated_at": "2018-08-19T01:27:56Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/414096579",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/6876108?v=4",
      "events_url": "https://api.github.com/users/BrucePay/events{/privacy}",
      "followers_url": "https://api.github.com/users/BrucePay/followers",
      "following_url": "https://api.github.com/users/BrucePay/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrucePay/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/BrucePay",
      "id": 6876108,
      "login": "BrucePay",
      "node_id": "MDQ6VXNlcjY4NzYxMDg=",
      "organizations_url": "https://api.github.com/users/BrucePay/orgs",
      "received_events_url": "https://api.github.com/users/BrucePay/received_events",
      "repos_url": "https://api.github.com/users/BrucePay/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/BrucePay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrucePay/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/BrucePay"
    }
  }
]
