[
  {
    "author_association": "NONE",
    "body": "To what end ?  What you saying is you want typing  `| ?`  or `| %`   to do the same as not typing them, so why type them? \r\n\r\nbtw `? {$_}`  will omit anything which converts to boolean false ($null, $false, \"\" , 0 , @() )  you may mean ? {$true} \r\n\r\n",
    "created_at": "2022-01-06T11:19:44Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16705#issuecomment-1006493665",
    "id": 1006493665,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16705",
    "node_id": "IC_kwDOAvT7bc47_d_h",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1006493665/reactions"
    },
    "updated_at": "2022-01-06T11:19:44Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1006493665",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16209593?v=4",
      "events_url": "https://api.github.com/users/jhoneill/events{/privacy}",
      "followers_url": "https://api.github.com/users/jhoneill/followers",
      "following_url": "https://api.github.com/users/jhoneill/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhoneill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jhoneill",
      "id": 16209593,
      "login": "jhoneill",
      "node_id": "MDQ6VXNlcjE2MjA5NTkz",
      "organizations_url": "https://api.github.com/users/jhoneill/orgs",
      "received_events_url": "https://api.github.com/users/jhoneill/received_events",
      "repos_url": "https://api.github.com/users/jhoneill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jhoneill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhoneill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jhoneill"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "The latter is identical to piping to `Write-Output` as well, I think, so you could just alias that if you wanted to.\r\n\r\nThe former case has something of a use in that it acts as a filter for false-y values. `$array | where {$_}` filters out all the null or false-y values. I would agree that one is desirable, but I don't think there's really much use for the latter.",
    "created_at": "2022-01-06T16:37:51Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16705#issuecomment-1006733512",
    "id": 1006733512,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16705",
    "node_id": "IC_kwDOAvT7bc48AYjI",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 2,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 2,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1006733512/reactions"
    },
    "updated_at": "2022-01-06T16:37:51Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1006733512",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/32407840?v=4",
      "events_url": "https://api.github.com/users/vexx32/events{/privacy}",
      "followers_url": "https://api.github.com/users/vexx32/followers",
      "following_url": "https://api.github.com/users/vexx32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vexx32/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/vexx32",
      "id": 32407840,
      "login": "vexx32",
      "node_id": "MDQ6VXNlcjMyNDA3ODQw",
      "organizations_url": "https://api.github.com/users/vexx32/orgs",
      "received_events_url": "https://api.github.com/users/vexx32/received_events",
      "repos_url": "https://api.github.com/users/vexx32/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/vexx32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vexx32/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/vexx32"
    }
  },
  {
    "author_association": "MEMBER",
    "body": "WG response: PowerShell aliases are not macro substitutions, but simple token substitutions. it's really beyond the design to this. ",
    "created_at": "2022-01-07T00:01:52Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16705#issuecomment-1007027934",
    "id": 1007027934,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16705",
    "node_id": "IC_kwDOAvT7bc48Bgbe",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1007027934/reactions"
    },
    "updated_at": "2022-01-07T00:01:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1007027934",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/10214008?v=4",
      "events_url": "https://api.github.com/users/JamesWTruher/events{/privacy}",
      "followers_url": "https://api.github.com/users/JamesWTruher/followers",
      "following_url": "https://api.github.com/users/JamesWTruher/following{/other_user}",
      "gists_url": "https://api.github.com/users/JamesWTruher/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/JamesWTruher",
      "id": 10214008,
      "login": "JamesWTruher",
      "node_id": "MDQ6VXNlcjEwMjE0MDA4",
      "organizations_url": "https://api.github.com/users/JamesWTruher/orgs",
      "received_events_url": "https://api.github.com/users/JamesWTruher/received_events",
      "repos_url": "https://api.github.com/users/JamesWTruher/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/JamesWTruher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JamesWTruher/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/JamesWTruher"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "This isn't about the alias, this is about `Where-Object` having this behavior with zero arguments.",
    "created_at": "2022-01-07T01:09:15Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16705#issuecomment-1007059181",
    "id": 1007059181,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16705",
    "node_id": "IC_kwDOAvT7bc48BoDt",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1007059181/reactions"
    },
    "updated_at": "2022-01-07T01:09:15Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1007059181",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/77611?v=4",
      "events_url": "https://api.github.com/users/rkitover/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkitover/followers",
      "following_url": "https://api.github.com/users/rkitover/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkitover/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkitover",
      "id": 77611,
      "login": "rkitover",
      "node_id": "MDQ6VXNlcjc3NjEx",
      "organizations_url": "https://api.github.com/users/rkitover/orgs",
      "received_events_url": "https://api.github.com/users/rkitover/received_events",
      "repos_url": "https://api.github.com/users/rkitover/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkitover/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkitover/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkitover"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> WG response: PowerShell aliases are not macro substitutions, but simple token substitutions. it's really beyond the design to this.\r\n\r\nThey're referring to changing the behavior of `Where-Object` and `ForEach-Object` when not given scriptblocks, they just referred to them by their aliases instead of by their full names.",
    "created_at": "2022-01-07T04:30:21Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16705#issuecomment-1007133252",
    "id": 1007133252,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16705",
    "node_id": "IC_kwDOAvT7bc48B6JE",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 1,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 1,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1007133252/reactions"
    },
    "updated_at": "2022-01-07T04:30:21Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1007133252",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5257450?v=4",
      "events_url": "https://api.github.com/users/jcotton42/events{/privacy}",
      "followers_url": "https://api.github.com/users/jcotton42/followers",
      "following_url": "https://api.github.com/users/jcotton42/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcotton42/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jcotton42",
      "id": 5257450,
      "login": "jcotton42",
      "node_id": "MDQ6VXNlcjUyNTc0NTA=",
      "organizations_url": "https://api.github.com/users/jcotton42/orgs",
      "received_events_url": "https://api.github.com/users/jcotton42/received_events",
      "repos_url": "https://api.github.com/users/jcotton42/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jcotton42/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcotton42/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jcotton42"
    }
  },
  {
    "author_association": "NONE",
    "body": "@JamesWTruher  One way to do what he wants would be through `$PSDefaultParameterValues` but they don't seem to work if the value in the dictionary is a script block (it seems to be converted to a string before being passed in).  If that were fixed this would be trivial. (Not that I can understand why anyone wants it). \r\n\r\n",
    "created_at": "2022-01-07T15:15:33Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16705#issuecomment-1007487080",
    "id": 1007487080,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16705",
    "node_id": "IC_kwDOAvT7bc48DQho",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1007487080/reactions"
    },
    "updated_at": "2022-01-07T15:15:33Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1007487080",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16209593?v=4",
      "events_url": "https://api.github.com/users/jhoneill/events{/privacy}",
      "followers_url": "https://api.github.com/users/jhoneill/followers",
      "following_url": "https://api.github.com/users/jhoneill/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhoneill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jhoneill",
      "id": 16209593,
      "login": "jhoneill",
      "node_id": "MDQ6VXNlcjE2MjA5NTkz",
      "organizations_url": "https://api.github.com/users/jhoneill/orgs",
      "received_events_url": "https://api.github.com/users/jhoneill/received_events",
      "repos_url": "https://api.github.com/users/jhoneill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jhoneill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhoneill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jhoneill"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> @JamesWTruher One way to do what he wants would be through `$PSDefaultParameterValues` but they don't seem to work if the value in the dictionary is a script block (it seems to be converted to a string before being passed in). If that were fixed this would be trivial. (Not that I can understand why anyone wants it).\r\n\r\nWhat's actually happening is the script block is being run and the result of it is used as the default value, you can get around that by just \"doubling up\" the script block (i.e. `{{ script here }}` instead of `{ script here }`)",
    "created_at": "2022-01-07T19:11:04Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16705#issuecomment-1007666179",
    "id": 1007666179,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16705",
    "node_id": "IC_kwDOAvT7bc48D8QD",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1007666179/reactions"
    },
    "updated_at": "2022-01-07T19:11:27Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1007666179",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5257450?v=4",
      "events_url": "https://api.github.com/users/jcotton42/events{/privacy}",
      "followers_url": "https://api.github.com/users/jcotton42/followers",
      "following_url": "https://api.github.com/users/jcotton42/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcotton42/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jcotton42",
      "id": 5257450,
      "login": "jcotton42",
      "node_id": "MDQ6VXNlcjUyNTc0NTA=",
      "organizations_url": "https://api.github.com/users/jcotton42/orgs",
      "received_events_url": "https://api.github.com/users/jcotton42/received_events",
      "repos_url": "https://api.github.com/users/jcotton42/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jcotton42/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcotton42/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jcotton42"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "@jcotton42 Nice!\r\n```powershell\r\nPS> $PSDefaultParameterValues['Where-Object:FilterScript'] = {{$_}}\r\n\r\nPS> \"a\",\"\",\"b\",\"\",\"c\" | ?\r\na\r\nb\r\nc\r\n```",
    "created_at": "2022-01-07T19:14:30Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16705#issuecomment-1007668655",
    "id": 1007668655,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16705",
    "node_id": "IC_kwDOAvT7bc48D82v",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1007668655/reactions"
    },
    "updated_at": "2022-01-07T19:14:30Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1007668655",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "I've definitely written quite a few `Where-Object { $_ }` statements to filter out falsy. It'd be a nice non-breaking change to allow `Where-Object` by itself to do that.\r\n\r\nThat said, I'm not sure how feasible it is. Maybe it's simple, maybe it's impossible. That command is already pushed pretty close to the brink with it's parameter binding complexity.",
    "created_at": "2022-01-07T19:14:41Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16705#issuecomment-1007668760",
    "id": 1007668760,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16705",
    "node_id": "IC_kwDOAvT7bc48D84Y",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1007668760/reactions"
    },
    "updated_at": "2022-01-07T19:14:41Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1007668760",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "Also, since I mentioned it, it's worth noting that other, already bound parameters, are available for reference in the script block. You can see this if you do\r\n\r\n```powershell\r\n$PSDefaultParameterValues['Some-Command:SomeParameter'] = {$Global:blah = Get-Variable}\r\n```\r\n\r\nIf you look at `$blah` you'll see that the already bound params are available there",
    "created_at": "2022-01-07T19:23:25Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16705#issuecomment-1007675216",
    "id": 1007675216,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16705",
    "node_id": "IC_kwDOAvT7bc48D-dQ",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1007675216/reactions"
    },
    "updated_at": "2022-01-07T19:23:25Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1007675216",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5257450?v=4",
      "events_url": "https://api.github.com/users/jcotton42/events{/privacy}",
      "followers_url": "https://api.github.com/users/jcotton42/followers",
      "following_url": "https://api.github.com/users/jcotton42/following{/other_user}",
      "gists_url": "https://api.github.com/users/jcotton42/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jcotton42",
      "id": 5257450,
      "login": "jcotton42",
      "node_id": "MDQ6VXNlcjUyNTc0NTA=",
      "organizations_url": "https://api.github.com/users/jcotton42/orgs",
      "received_events_url": "https://api.github.com/users/jcotton42/received_events",
      "repos_url": "https://api.github.com/users/jcotton42/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jcotton42/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jcotton42/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jcotton42"
    }
  },
  {
    "author_association": "NONE",
    "body": "@jcotton42  Yup that works **thank you** \r\n\r\n\r\n@rkitover  / @SeeminglyScience  put either or both of these lines in your profile and you're good to go ... \r\n```PowerShell\r\n$PSDefaultParameterValues.Add('ForEach-Object:Process',   {{$_}}   )\r\n$PSDefaultParameterValues.Add('Where-Object:FilterScript',{{$true}})  # or $_ instead of $true\r\n```\r\n\r\n",
    "created_at": "2022-01-07T19:24:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16705#issuecomment-1007675970",
    "id": 1007675970,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16705",
    "node_id": "IC_kwDOAvT7bc48D-pC",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1007675970/reactions"
    },
    "updated_at": "2022-01-07T19:24:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1007675970",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16209593?v=4",
      "events_url": "https://api.github.com/users/jhoneill/events{/privacy}",
      "followers_url": "https://api.github.com/users/jhoneill/followers",
      "following_url": "https://api.github.com/users/jhoneill/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhoneill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jhoneill",
      "id": 16209593,
      "login": "jhoneill",
      "node_id": "MDQ6VXNlcjE2MjA5NTkz",
      "organizations_url": "https://api.github.com/users/jhoneill/orgs",
      "received_events_url": "https://api.github.com/users/jhoneill/received_events",
      "repos_url": "https://api.github.com/users/jhoneill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jhoneill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhoneill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jhoneill"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "Yeah, 32 different parameter sets on `Where-Object` is pretty wild.  I've used `Where-Object {$_}` before to filter out empty lines of text.  However, what I really want is a way to access the pipeline object instead of a property with the Where-Object parametersets e.g. ` ... | Where-Object PSItem -GT 0`  or `... | Where-Object _ -match '^\\t\\w'`",
    "created_at": "2022-01-07T19:25:47Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16705#issuecomment-1007676912",
    "id": 1007676912,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16705",
    "node_id": "IC_kwDOAvT7bc48D-3w",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1007676912/reactions"
    },
    "updated_at": "2022-01-07T19:25:47Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1007676912",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/5177512?v=4",
      "events_url": "https://api.github.com/users/rkeithhill/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkeithhill/followers",
      "following_url": "https://api.github.com/users/rkeithhill/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkeithhill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkeithhill",
      "id": 5177512,
      "login": "rkeithhill",
      "node_id": "MDQ6VXNlcjUxNzc1MTI=",
      "organizations_url": "https://api.github.com/users/rkeithhill/orgs",
      "received_events_url": "https://api.github.com/users/rkeithhill/received_events",
      "repos_url": "https://api.github.com/users/rkeithhill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkeithhill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkeithhill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkeithhill"
    }
  },
  {
    "author_association": "COLLABORATOR",
    "body": "> Yeah, 32 different parameter sets on `Where-Object` is pretty wild. I've used `Where-Object {$_}` before to filter out empty lines of text. However, what I really want is a way to access the pipeline object instead of a property with the Where-Object parametersets e.g. ` ... | Where-Object PSItem -GT 0` or `... | Where-Object _ -match '^\\t\\w'`\r\n\r\nOr even just `Where-Object -gt 0` would be amazing though a lot harder to implement (maybe). I do see a lot of folks trying to do that exact syntax in the discord from time to time.\r\n\r\n> @rkitover / @SeeminglyScience put either or both of these lines in your profile and you're good to go ...\r\n\r\nYeah there's a few ways to do something like this in your profile. But it would provide enough value for the change to be considered, assuming it doesn't make `Where-Object` explode.",
    "created_at": "2022-01-07T19:29:50Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16705#issuecomment-1007679730",
    "id": 1007679730,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16705",
    "node_id": "IC_kwDOAvT7bc48D_jy",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1007679730/reactions"
    },
    "updated_at": "2022-01-07T19:32:52Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1007679730",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/24977523?v=4",
      "events_url": "https://api.github.com/users/SeeminglyScience/events{/privacy}",
      "followers_url": "https://api.github.com/users/SeeminglyScience/followers",
      "following_url": "https://api.github.com/users/SeeminglyScience/following{/other_user}",
      "gists_url": "https://api.github.com/users/SeeminglyScience/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/SeeminglyScience",
      "id": 24977523,
      "login": "SeeminglyScience",
      "node_id": "MDQ6VXNlcjI0OTc3NTIz",
      "organizations_url": "https://api.github.com/users/SeeminglyScience/orgs",
      "received_events_url": "https://api.github.com/users/SeeminglyScience/received_events",
      "repos_url": "https://api.github.com/users/SeeminglyScience/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/SeeminglyScience/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SeeminglyScience/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/SeeminglyScience"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> However, what I really want is a way to access the pipeline object instead of a property with the Where-Object parametersets e.g. ` ... | Where-Object PSItem -GT 0` or `... | Where-Object _ -match '^\\t\\w'`\r\n\r\nMe too, but I was told that that has already been proposed and I didn't want to open a duplicate. I'll dig in the issues and see what happened there.",
    "created_at": "2022-01-08T15:09:37Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16705#issuecomment-1008020672",
    "id": 1008020672,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16705",
    "node_id": "IC_kwDOAvT7bc48FSzA",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1008020672/reactions"
    },
    "updated_at": "2022-01-08T15:09:37Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1008020672",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/77611?v=4",
      "events_url": "https://api.github.com/users/rkitover/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkitover/followers",
      "following_url": "https://api.github.com/users/rkitover/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkitover/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkitover",
      "id": 77611,
      "login": "rkitover",
      "node_id": "MDQ6VXNlcjc3NjEx",
      "organizations_url": "https://api.github.com/users/rkitover/orgs",
      "received_events_url": "https://api.github.com/users/rkitover/received_events",
      "repos_url": "https://api.github.com/users/rkitover/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkitover/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkitover/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkitover"
    }
  },
  {
    "author_association": "CONTRIBUTOR",
    "body": "> Where-Object _ -match '^\\t\\w'\r\n\r\nThat may be the easiest way to do it without further straining the parameter binder, we'd just have to assume no one has properties called `_`, which would probably be reasonable.\r\n\r\nI think that reads better too, and still looks nicer than the scriptblock version.",
    "created_at": "2022-01-08T15:16:28Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16705#issuecomment-1008022444",
    "id": 1008022444,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16705",
    "node_id": "IC_kwDOAvT7bc48FTOs",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1008022444/reactions"
    },
    "updated_at": "2022-01-08T15:16:28Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1008022444",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/77611?v=4",
      "events_url": "https://api.github.com/users/rkitover/events{/privacy}",
      "followers_url": "https://api.github.com/users/rkitover/followers",
      "following_url": "https://api.github.com/users/rkitover/following{/other_user}",
      "gists_url": "https://api.github.com/users/rkitover/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/rkitover",
      "id": 77611,
      "login": "rkitover",
      "node_id": "MDQ6VXNlcjc3NjEx",
      "organizations_url": "https://api.github.com/users/rkitover/orgs",
      "received_events_url": "https://api.github.com/users/rkitover/received_events",
      "repos_url": "https://api.github.com/users/rkitover/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/rkitover/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rkitover/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/rkitover"
    }
  },
  {
    "author_association": "NONE",
    "body": "> > Where-Object _ -match '^\\t\\w'\r\n> \r\n> That may be the easiest way to do it without further straining the parameter binder, we'd just have to assume no one has properties called `_`, which would probably be reasonable.\r\n> \r\n> I think that reads better too, and still looks nicer than the scriptblock version.\r\n\r\nActually . would work for this, since it parses OK (based on a very quick test: * doesn't work, ? does). It's technically possible to create a property named \".\"  but I've never seen it done in real world use\r\n\r\n  ",
    "created_at": "2022-01-08T16:56:55Z",
    "html_url": "https://github.com/PowerShell/PowerShell/issues/16705#issuecomment-1008061344",
    "id": 1008061344,
    "issue_url": "https://api.github.com/repos/PowerShell/PowerShell/issues/16705",
    "node_id": "IC_kwDOAvT7bc48Fcug",
    "performed_via_github_app": null,
    "reactions": {
      "+1": 0,
      "-1": 0,
      "confused": 0,
      "eyes": 0,
      "heart": 0,
      "hooray": 0,
      "laugh": 0,
      "rocket": 0,
      "total_count": 0,
      "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1008061344/reactions"
    },
    "updated_at": "2022-01-08T16:56:55Z",
    "url": "https://api.github.com/repos/PowerShell/PowerShell/issues/comments/1008061344",
    "user": {
      "avatar_url": "https://avatars.githubusercontent.com/u/16209593?v=4",
      "events_url": "https://api.github.com/users/jhoneill/events{/privacy}",
      "followers_url": "https://api.github.com/users/jhoneill/followers",
      "following_url": "https://api.github.com/users/jhoneill/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhoneill/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/jhoneill",
      "id": 16209593,
      "login": "jhoneill",
      "node_id": "MDQ6VXNlcjE2MjA5NTkz",
      "organizations_url": "https://api.github.com/users/jhoneill/orgs",
      "received_events_url": "https://api.github.com/users/jhoneill/received_events",
      "repos_url": "https://api.github.com/users/jhoneill/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/jhoneill/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhoneill/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/jhoneill"
    }
  }
]
